{
    "@programName": "ZAP",
    "@version": "2.16.0",
    "@generated": "Fri, 28 Feb 2025 12:00:49",
    "site":[ 
        {
            "@name": "https://google-gruyere.appspot.com",
            "@host": "google-gruyere.appspot.com",
            "@port": "443",
            "@ssl": "true",
            "alerts": [ 
                {
                    "pluginid": "10038",
                    "alertRef": "10038-1",
                    "alert": "Content Security Policy (CSP) Header Not Set",
                    "name": "Content Security Policy (CSP) Header Not Set",
                    "riskcode": "2",
                    "confidence": "3",
                    "riskdesc": "Medium (High)",
                    "desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>",
                    "instances":[ 
                        {
                            "id": "30",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "94",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "20",
                            "uri": "https://google-gruyere.appspot.com/0",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/0 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: a9f0ac717d65264e0a123b06e2bc74bf\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "21",
                            "uri": "https://google-gruyere.appspot.com/1",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 73e1a5b9c1417e1d6b0ae95cd2637949\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "33",
                            "uri": "https://google-gruyere.appspot.com/2",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: daec9d0ea756ad5b852dda0f1c3f35e0\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "10",
                            "uri": "https://google-gruyere.appspot.com/3",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ae5bf9d4631ee9b68a8f0dc194d790c\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "93",
                            "uri": "https://google-gruyere.appspot.com/4",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: d526efc028ff43bac2d548501f7ec6ce\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "38",
                            "uri": "https://google-gruyere.appspot.com/5",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6e4e4f9574397074b8c5de69b04233ee\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "72",
                            "uri": "https://google-gruyere.appspot.com/6",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/6 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6b64469b26d2e767d2aa4b32bcb07104\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "98",
                            "uri": "https://google-gruyere.appspot.com/7",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/7 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: b79e83e770fdf4f2e8c5079ae5fb3622\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "40",
                            "uri": "https://google-gruyere.appspot.com/8",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/8 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 1efa39b9dda98d4c2c7fa8bde0f71130\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "48",
                            "uri": "https://google-gruyere.appspot.com/9",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/9 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ac5f78b2f3cc5f49983bb060c2740d1\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "100",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "112",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "134",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "130",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "113",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "75",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "18",
                    "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>",
                    "otherinfo": "",
                    "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>https://www.w3.org/TR/CSP/</p><p>https://w3c.github.io/webappsec-csp/</p><p>https://web.dev/articles/csp</p><p>https://caniuse.com/#feat=contentsecuritypolicy</p><p>https://content-security-policy.com/</p>",
                    "cweid": "693",
                    "wascid": "15",
                    "sourceid": "1",
                    "tags":[ 
                        {
                            "tag": "CWE-693",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/693.html"
                        },
                        {
                            "tag": "OWASP_2021_A05",
                            "link": "https:\/\/owasp.org\/Top10\/A05_2021-Security_Misconfiguration\/"
                        },
                        {
                            "tag": "OWASP_2017_A06",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A6_2017-Security_Misconfiguration.html"
                        }
                    ]
                },
                {
                    "pluginid": "10020",
                    "alertRef": "10020-1",
                    "alert": "Missing Anti-clickjacking Header",
                    "name": "Missing Anti-clickjacking Header",
                    "riskcode": "2",
                    "confidence": "2",
                    "riskdesc": "Medium (Medium)",
                    "desc": "<p>The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.</p>",
                    "instances":[ 
                        {
                            "id": "3",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "77",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "1",
                            "uri": "https://google-gruyere.appspot.com/0",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/0 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: a9f0ac717d65264e0a123b06e2bc74bf\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "4",
                            "uri": "https://google-gruyere.appspot.com/1",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 73e1a5b9c1417e1d6b0ae95cd2637949\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "5",
                            "uri": "https://google-gruyere.appspot.com/2",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: daec9d0ea756ad5b852dda0f1c3f35e0\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "80",
                            "uri": "https://google-gruyere.appspot.com/4",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: d526efc028ff43bac2d548501f7ec6ce\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "11",
                            "uri": "https://google-gruyere.appspot.com/5",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6e4e4f9574397074b8c5de69b04233ee\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "69",
                            "uri": "https://google-gruyere.appspot.com/6",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/6 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6b64469b26d2e767d2aa4b32bcb07104\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "83",
                            "uri": "https://google-gruyere.appspot.com/7",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/7 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: b79e83e770fdf4f2e8c5079ae5fb3622\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "9",
                            "uri": "https://google-gruyere.appspot.com/8",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/8 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 1efa39b9dda98d4c2c7fa8bde0f71130\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "13",
                            "uri": "https://google-gruyere.appspot.com/9",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/9 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ac5f78b2f3cc5f49983bb060c2740d1\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "86",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "85",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "127",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "126",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "91",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "71",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "x-frame-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "17",
                    "solution": "<p>Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.</p><p>If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.</p>",
                    "otherinfo": "",
                    "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</p>",
                    "cweid": "1021",
                    "wascid": "15",
                    "sourceid": "1",
                    "tags":[ 
                        {
                            "tag": "WSTG-v42-CLNT-09",
                            "link": "https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/11-Client-side_Testing\/09-Testing_for_Clickjacking"
                        },
                        {
                            "tag": "OWASP_2021_A05",
                            "link": "https:\/\/owasp.org\/Top10\/A05_2021-Security_Misconfiguration\/"
                        },
                        {
                            "tag": "OWASP_2017_A06",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A6_2017-Security_Misconfiguration.html"
                        },
                        {
                            "tag": "CWE-1021",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/1021.html"
                        }
                    ]
                },
                {
                    "pluginid": "10010",
                    "alertRef": "10010",
                    "alert": "Cookie No HttpOnly Flag",
                    "name": "Cookie No HttpOnly Flag",
                    "riskcode": "1",
                    "confidence": "2",
                    "riskdesc": "Low (Medium)",
                    "desc": "<p>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.</p>",
                    "instances":[ 
                        {
                            "id": "78",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "GRUYERE_ID",
                            "attack": "",
                            "evidence": "Set-Cookie: GRUYERE_ID",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "1",
                    "solution": "<p>Ensure that the HttpOnly flag is set for all cookies.</p>",
                    "otherinfo": "",
                    "reference": "<p>https://owasp.org/www-community/HttpOnly</p>",
                    "cweid": "1004",
                    "wascid": "13",
                    "sourceid": "51",
                    "tags":[ 
                        {
                            "tag": "CWE-1004",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/1004.html"
                        },
                        {
                            "tag": "OWASP_2021_A05",
                            "link": "https:\/\/owasp.org\/Top10\/A05_2021-Security_Misconfiguration\/"
                        },
                        {
                            "tag": "OWASP_2017_A06",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A6_2017-Security_Misconfiguration.html"
                        },
                        {
                            "tag": "WSTG-v42-SESS-02",
                            "link": "https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/06-Session_Management_Testing\/02-Testing_for_Cookies_Attributes"
                        }
                    ]
                },
                {
                    "pluginid": "10011",
                    "alertRef": "10011",
                    "alert": "Cookie Without Secure Flag",
                    "name": "Cookie Without Secure Flag",
                    "riskcode": "1",
                    "confidence": "2",
                    "riskdesc": "Low (Medium)",
                    "desc": "<p>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.</p>",
                    "instances":[ 
                        {
                            "id": "96",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "GRUYERE_ID",
                            "attack": "",
                            "evidence": "Set-Cookie: GRUYERE_ID",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "1",
                    "solution": "<p>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.</p>",
                    "otherinfo": "",
                    "reference": "<p>https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html</p>",
                    "cweid": "614",
                    "wascid": "13",
                    "sourceid": "51",
                    "tags":[ 
                        {
                            "tag": "OWASP_2021_A05",
                            "link": "https:\/\/owasp.org\/Top10\/A05_2021-Security_Misconfiguration\/"
                        },
                        {
                            "tag": "OWASP_2017_A06",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A6_2017-Security_Misconfiguration.html"
                        },
                        {
                            "tag": "CWE-614",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/614.html"
                        },
                        {
                            "tag": "WSTG-v42-SESS-02",
                            "link": "https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/06-Session_Management_Testing\/02-Testing_for_Cookies_Attributes"
                        }
                    ]
                },
                {
                    "pluginid": "10054",
                    "alertRef": "10054-1",
                    "alert": "Cookie without SameSite Attribute",
                    "name": "Cookie without SameSite Attribute",
                    "riskcode": "1",
                    "confidence": "2",
                    "riskdesc": "Low (Medium)",
                    "desc": "<p>A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.</p>",
                    "instances":[ 
                        {
                            "id": "89",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "GRUYERE_ID",
                            "attack": "",
                            "evidence": "Set-Cookie: GRUYERE_ID",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "1",
                    "solution": "<p>Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.</p>",
                    "otherinfo": "",
                    "reference": "<p>https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site</p>",
                    "cweid": "1275",
                    "wascid": "13",
                    "sourceid": "51",
                    "tags":[ 
                        {
                            "tag": "OWASP_2021_A01",
                            "link": "https:\/\/owasp.org\/Top10\/A01_2021-Broken_Access_Control\/"
                        },
                        {
                            "tag": "OWASP_2017_A05",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A5_2017-Broken_Access_Control.html"
                        },
                        {
                            "tag": "WSTG-v42-SESS-02",
                            "link": "https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/06-Session_Management_Testing\/02-Testing_for_Cookies_Attributes"
                        },
                        {
                            "tag": "CWE-1275",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/1275.html"
                        }
                    ]
                },
                {
                    "pluginid": "10035",
                    "alertRef": "10035-1",
                    "alert": "Strict-Transport-Security Header Not Set",
                    "name": "Strict-Transport-Security Header Not Set",
                    "riskcode": "1",
                    "confidence": "3",
                    "riskdesc": "Low (High)",
                    "desc": "<p>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.</p>",
                    "instances":[ 
                        {
                            "id": "56",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "111",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "82",
                            "uri": "https://google-gruyere.appspot.com/%C9%A1ru%CB%90%CB%88j%C9%9B%C9%99r/",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/%C9%A1ru%CB%90%CB%88j%C9%9B%C9%99r/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 404 Not Found\r\nContent-Type: text/plain; charset=UTF-8\r\nX-Cloud-Trace-Context: 3ff5c9b70ddb455115f011bdbb7fadb5\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 52\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "404 Not Found\n\nThe resource could not be found.\n\n   "
                        },
                        {
                            "id": "43",
                            "uri": "https://google-gruyere.appspot.com/0",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/0 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: a9f0ac717d65264e0a123b06e2bc74bf\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "65",
                            "uri": "https://google-gruyere.appspot.com/1",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 73e1a5b9c1417e1d6b0ae95cd2637949\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "60",
                            "uri": "https://google-gruyere.appspot.com/2",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: daec9d0ea756ad5b852dda0f1c3f35e0\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "44",
                            "uri": "https://google-gruyere.appspot.com/3",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ae5bf9d4631ee9b68a8f0dc194d790c\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "106",
                            "uri": "https://google-gruyere.appspot.com/4",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: d526efc028ff43bac2d548501f7ec6ce\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "50",
                            "uri": "https://google-gruyere.appspot.com/5",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6e4e4f9574397074b8c5de69b04233ee\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "76",
                            "uri": "https://google-gruyere.appspot.com/6",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/6 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6b64469b26d2e767d2aa4b32bcb07104\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "105",
                            "uri": "https://google-gruyere.appspot.com/7",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/7 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: b79e83e770fdf4f2e8c5079ae5fb3622\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "49",
                            "uri": "https://google-gruyere.appspot.com/8",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/8 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 1efa39b9dda98d4c2c7fa8bde0f71130\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "53",
                            "uri": "https://google-gruyere.appspot.com/9",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/9 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ac5f78b2f3cc5f49983bb060c2740d1\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "116",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "123",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "138",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "135",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "122",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "73",
                            "uri": "https://google-gruyere.appspot.com/resetbutton",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/resetbutton HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 404 Not Found\r\nContent-Type: text/plain; charset=UTF-8\r\nX-Cloud-Trace-Context: 8fbd9218ff5f120fa8cd365cfd16e6af\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 52\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "404 Not Found\n\nThe resource could not be found.\n\n   "
                        },
                        {
                            "id": "55",
                            "uri": "https://google-gruyere.appspot.com/robots.txt",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/robots.txt HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 621003ecdd3a754888cc08e69df4b24a\r\nServer: Google Frontend\r\nContent-Length: 184\r\nDate: Fri, 28 Feb 2025 11:48:50 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:50 GMT\r\nCache-Control: public, max-age=600\r\nAge: 486\r\nETag: \"3m8CBg\"\r\nContent-Type: text/plain\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "User-agent: *\nDisallow: /0\nDisallow: /1\nDisallow: /2\nDisallow: /3\nDisallow: /4\nDisallow: /5\nDisallow: /6\nDisallow: /7\nDisallow: /8\nDisallow: /9\nDisallow: /start\nDisallow: /resetbutton\n"
                        },
                        {
                            "id": "22",
                            "uri": "https://google-gruyere.appspot.com/sitemap.xml",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/sitemap.xml HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 404 Not Found\r\nContent-Type: text/plain; charset=UTF-8\r\nX-Cloud-Trace-Context: 8d9f9ff8da7dec5c0782dc52b8f2c70a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 52\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "404 Not Found\n\nThe resource could not be found.\n\n   "
                        },
                        {
                            "id": "103",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "34",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_b.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_b.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: eaad6a378c8e3be9968480d7d8b527a8\r\nServer: Google Frontend\r\nContent-Length: 682\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001b\\x0008\\x0002\\x0000\\x0000\\x0000\u00F3\u00BD8\u008F\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x000b\\x0013\\x0000\\x0000\\x000b\\x0013\\x0001\\x0000\u009A\u009C\\x0018\\x0000\\x0000\\x0002 IDAT8\u00CB\u009D\u0094\u00BD\u008F1Q\\x0014\u00C6\u00AD\u00AF\\x0017\\x0011\\x001f\u0089\u00AC\u00C2GA\u0081\n\u0080DE\"\\x0012\t\u00A5F\u00A2 \u00A1\u00D4Q(D\u00A3\u00A3\u00C4\u009F\u00A0PPHD\u00A1UH$\\x0012\\x0015\u0089DE\\x0010D\"\\x0012\u00EF3\u00EE\u00EE\u00EC\u00CC\u009DY\u00FB\u00EE\u00FBT3\u00E7\u00DE\u00DF\u00B9\u00E7>\u00E7\u00CCH\u00DE\u00F92\u009B\u00CDz\u00BD\u00FE\u00CFSZ\u00AD\u00F6] \u00AC6\\x001a\u008D\u00C7S\u0092\u00FFP&\u0093\u00F9\u0080\u00DF\u00F8\u00C2\u009A\u00D7\u00EB\u008DD\"d\u00DF\u009B\u0098\u008CFc\u00ADV[\u00AF\u00D7\\x0012\u008A\u00F4\u00F9|\u00FB\u00FD\\x001eY+\u0095\u008AT*\u00A5VI:\u00F2`\u00B1Xh8\u0097\u00CB\u0091\u0092n\u00B7\u009B\u00CDf\u00E3\u00EE\u00A6$\u0097\u00CBi8\\x001c\\x000e\u00DF\u00EFw\u00C0\u00FD~_\u00A5R\u00B1[\u00A3\u00D1h\u00BB\u00DD\u00AEV\u00ABV\u00AB\u0095D\u00D4j5/\\x0019x\u0099L\\x0016\\x000c\\x0006\u00E3\u00F1\u00B8\u00C1` A\u00D8\u00DB\u00EDv\\x001f\u009F\u00DAl6\u00C9d\u00F2\\x0003Fz\u0093\u00C9\u0084\u00C6\\x0008+$\u00AF\u00A1P\u00E8\u00C1\u00D7x<\u0086\\x001dJ\u00A5R2\u009B\u00CDv\u00BB\u00DDt:M\u00A7\u00D3B{\\x0011I\u00A5R\\x0014<\u009F\u00CFq\\x0018\\x0003\u00B3\u00A1\u00E5r\u00A9\u00D1h(\\x001e\u00AF\u00B1X\u008C\u0082'\u0093\tn\u00C7\\x0014\u00CB\u0086\u00AE\u00D7\u00AB\u00D3\u00E9\\x0014\u00C2\u00B8|\u00AF\u00D7\u00E3n\u00FB\u00BA3\\x001b\u00DDn\u00B7\u00E8\u00BEh\u00E5\u00D8W.\u0097\\x0017\u008B\u00C5h4\u0082\u009D_n\\x001f\u008FGB\u00A2\u00C3\u00DF\u008D\\x0014\u00D9\u008DK\u00C1'\u00D6N\\x0006\u00F6x<h\u008C\u00B0`Q\u009E+\u0091>\u00BF\u00E6\u00D1W\u0087\u00C3\u00C1\u00CC\\x0016\u0081_\u009C@\u00C5\u00E1p\u00AB\u00D5\u00BA\\.\u00B8?ID\u00C3\u00F8\u009E\\x000b\u0085B\u00B1Xt\u00B9\\\\\\x001e\u00CF:\u009D\\x000e\u00E3\\x0005\u0083\\x0006\u0083\u0081\\x0008\u008CP\u00A9Tb'\\x0001\u0083I\u009D\u009FH$:\u009DN \\x0010\\x0010)\\x001b\u00A1z\u00BDN\u00E0\u00F3\u00F9l\u00B7\u00DB\u0085\u00C5\u00F3\\x000c\u00A3\u00D6\u0090\u00F5p8`\\x0012\u00B2\u00D9\u00ACh\u00CF\u00D9\u0099\\x00177\u00CC\u00EDv\u00FB\u00FD\u00FE\u00D7\u00FE\u00FF\u00CE\u00ED\u0082_\u008C\u00C7\u00AFa\u0082a\u00FE\u00F0\u00D3\u00E5\u00A6\u00F8\\x0019\u00C6\\x000e\\x0018N\\x0006c\u00B5Z\u00C1B\u00F4\u0096\\x0007\u00BF\u0090B\u00A1\\x0018\\x000e\u0087\u00DC/9\u009F\u00CF\u00B3\u00AB\u00CC\u0090\u00A8\u00BF\\x0011\u00BEu\\x001c{:\u009D\u00B8p\u00B3\u00D9\u00C4\\x000fD\u00F5\\x0014\u00BE\u00DF\u00BF\u008E\u00DD3\u00CC\\\u00C7\u00AF:\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "29",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_bw.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_bw.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 1de77feb127c6999ace87f981c06e3a7\r\nServer: Google Frontend\r\nContent-Length: 740\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001b\\x0008\\x0002\\x0000\\x0000\\x0000\u00F3\u00BD8\u008F\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x0013\u00D6\\x0000\\x0000\\x0013\u00D6\\x0001\u00B16\\x0010u\\x0000\\x0000\\x0002ZIDAT8\u008D\u0095\u0094\u00CF\u008Bqa\\x0014\u00C7\u00BD,xmPSVV\\x0016X\u00F1\\x000fLY\u008DI\u008A,,f%\u0096\u00B6h\u008A\u0086\\x0019J\u0094\u008D\u0085\u0092\u009D,D)C(\\x001b\u00A5X\u00D8(\u00A5d\nY`\\x001a\rS\u0092_\u00CD\u00FB\u00ED\u00BD\u00DE\u00EB\u00BAw\u0098w\u00CE\u00E2v\u00EF}\u00CE\u00E79\u00E7|\u00CFy\\x001e\\x0016\u00EB\u0087f2\u0099\u00F2\u00F9\u00FC\u00E7_c\u00FD:5,+\u0095J\u00ADVK\u00B8\u00D2V\\x0001\u00F4z\u00BD\u0087\u0087\u0087\u00EDvK\u0087\u00E1\u00ADR\u00A9\u00DE\u00DF\u00DF\u00B1\u00E0\u00F7\u00FB\u00D9l6m\u0095\\x0008\u0098\u00CDf\u00C1g2\\x0019:l\u00B3\u00D9\\x0008\u008F\u00CDf#\u0091H\u0088\u00E0D\\x0016\u009F\\x0014{{{\u00B3X,tX\u00A3\u00D1\u00ECv;,\\x0017\u008BE\\x001e\u008FG\u0096\u00AA\u00D3\u00E9*\u0095J\u00A7\u00D3\u00D9\u00EF\u00F7\\x0004\u00EF\u00F5zO\u00C4\\x0000\u00CF\u00E1p\u00D4j\u00B5\u00D1h\\x0014\n\u0085\u00C4O\u0081@\u0090\u00CB\u00E5<\\x001eO2\u0099|zz\n\u0087\u00C3\u00EB\u00F5\u00FA\\x0000c\u00FB\u00AB\u00AB+.\u0097K\u00CD\u0090\u00DC\\x000b\u00CF\u009B\u009B\\x001bj\u00C2\u00E9t:\\x001e\u008F\\x001f\u00E0v\u00BB=\u009B\u00CDZ\u00AD\u0096\u00D5je\u00CA\u008B?f\u00B3\u0099\n\u00AFV+`x\u00F1\u00F9|G\\x0019\u00FA\u00FD>\u009F\u00CF\u00A7\u00F1\u00F8\u00D4\u00EB\u00F5\\x0000H7\u00D4\\x000c\\x000cr\u009E\u00C0\u00F0\u0090J\u00A5L\\x0018\u00C5\u00D7j5\u00D2\u00AD\u00D9l\u0086B!\u00BC<>>\\x001ea\u00A8/\\x0012\u0089\u0098\u0099\u008F\u00C7c\u00A7\u00D3\u00F9\u00FC\u00FC\u008C\u00F1(\u0095J\\x000e\u0087c0\\x0018\\x001cj^,\\x0016\\x0004\u0089\\x000e3Ib\u00AA \nF\"\\x0012\u0089\u00A4R\u00A9\u00D7\u00D7\u00D7c\u00AB\\x0014\n\\x0005\\x001a\u00C3L\u0098$\u00CF\u00D9\\x0017}\u00BE\\x000c#\u00E1\u0097\u0097\u0097#\u00CC\u00EC\ru/*\u00D9h40*\u00D0\t\u0095\r\u008B\u00C5b\u00BB\u00DD\u00EEr\u00B9d2\\x0019-,f\\x000b\u00E39\u0099Lpf\\x000ej\u00D3\u00C2\u00BA\u00DDn\u00C2\\x0015~\u00DDn\u0097\n\u00D7\u00EBu\\x001c&0\u00E5r\u00F9\u008B\u00C8\u0080!)\u00E1\\x001a\u008DF\u00AB\u00D5*-\u00F8p8<[3\u00E0\u00EB\u00EB\u00EB\u00F9|\u008E\u0081A\u0090\u00E5r\u00F9\u008D\u00DAL\u00C1\u00E4ry\u00A1P\u00C0\\x0016\\x0017\u00C8Kj_\u00C6\u00CE\u00C2\u00DF\u00CE\u00C670\u00D5\u00E3\u00E3\u00E3\\x0003w@0\\x0018\u0084~\u00A3\u00D1\u00E8\\x00070\u00AEH\u00B4\\x0014\u00D7\u00DDt:\u00C5\u0084\u00DC\u00DF\u00DF\u00A3\u00C9'0\u00CD\u00A8{\\x0003\u0088\u00C5b\u00E4'\u00EE\u00B0D\"q\\x0002\u00FF>5\u00EF?C\u00CC\u00BB\u00BB;\u009CD\u00D2\\x001bG\u00D2`0\u00E0?V\\x0003\u0081\u00C0\u00ED\u00ED\u00ED\t{\u00CE\u00FE\\x0000M\u0095@\u00B1\u00AF\u00BB\u0092\u00C3\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "35",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_w.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_w.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: e61a2c7e71b4950a548fb0d1ea66b04c\r\nServer: Google Frontend\r\nContent-Length: 727\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001a\\x0008\\x0002\\x0000\\x0000\\x00008\u00E1\u00EB*\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x000b\\x0013\\x0000\\x0000\\x000b\\x0013\\x0001\\x0000\u009A\u009C\\x0018\\x0000\\x0000\\x0002MIDAT8\u00CB\u00B5\u0094Io\u00A9a\\x0014\u00C7}3\u0089\u0085XZYX\u00FA\\x00006\\A\u00CCC\\x000c!\u00A2\u0092\nb\u00A3\\x0012\u0082\u0088)TXH\\x0008\\x000b\u00ADech\u0082\u0090\\x0018B\u00A2\u0086\u00D6\u0090\\x000e\u00F7\u0095\u00B7\u00EE\u008B{kq\u00CF\u00EAq^\u00BF\u00E7\u009C\u00E7\\x0006\\x001a\u009DN\u0097H$\u00BF\u00CE\u0099@ \u00A0x\u00C4b1\u0087\u00C3I&\u0093\u009F\u00BF\u008D\\x0006\u00D7\u00E75\u00D6j\u00B5\\x0014\n\u00C5n\u00B7;\\x0003\u00CFf3\u00B7\u00DBm2\u0099j\u00B5\u00DA%>\\x001a\u008D\u0082\\x000f\u0087\u00C3T\u00D8n\u00B7\u00A7\u00D3\u00E9n\u00B7\u008B\\x000c\u00DB\u00ED\u00F6%~2\u0099\u00F0x\u00BC?\u00E0\u00CDfc4\\x001a\\x0011\\x001cg\u00A7\u00D3Y(\\x0014\\x0008\u00FF\u00C7\u00C7G\u00BD^\u00CF\u00E5rOOO\u00EF\u00EF\u00EF\u0084S\u00A5RQ#\\x0007\\x0002\\x0001\u009B\u00CD\\x0016\u008F\u00C7\u00A5R\u00E9|>\u0087\\x0007\u00CF\u00BB\u00B9\u00B9Q*\u0095~\u00BF_\u00A3\u00D1X\u00ADV\u00C48\u00C0B\u00A1\u0090\u00B8\u009B\u0080qq\u00A9T\u008A\u00C5bH\u008C\u00F0\u00DC\u00DD\u00DD\u00F9|>\u00F2\u00F6P(\u00E4\u00F1x\\x000e0\u0093\u00C9\u00C4\u00C5\u00C8\u00F6\u00ACB\u00AF\u00AF\u00AF\u0088F\u00A4@\u00D8\u00DB\u00DB\\x001b0\\x001c\u00B4Z-\u00ED\u00F9\u00F9\\x0019\u00FF\u0080B\u00C8\u00B3\u00D9lR\u00E0\u0097\u0097\\x0017\u009DN\\x0007\u0080\u00F4 5`\u00DB\u00EDv\\x000f\u0093\u00DEb\u00B1\\x0008\u00A9O\u0083C\\x0002|\"V\u00ABU\u00B3\u00D9\u008C\u0083Z\u00AD\u00FE\u0086\\x001f\\x001e\\x001e,\\x0016\u00CB)<\\x0018\\x000cD\"Q\"\u0091@{d2\\x0019\\x0008\u00DC\u00E9t\\x000eo^,\\x0016\u00C4\u00DBp\\x0013n=[\u00D5\u00E9t\u008A\u0096\u00804\u00C1`p<\\x001e\u0097\u008A\u00CDf;\\x001c\\x000e\u0090\u00F7\u00F7\u00F7W\u00F5\u00E9\\x001e\u00E6\u00F3\u00F9Pe\u00B9\\\u00FE\\x0004@\u00C2\\x0010\u00F8b\u0093\u00C0\u00D6\u00EB5^qJV*\\x0015\u00B4\nr\u00C4\u00CB\u00CF\u00C3\u008F\u008F\u008Fr\u00B9\\&\u0093e\u00B3Y\n\u008C\u00DEB{\\x000e\u0087C\\x0014\u00EF\u00A0\u00F61\\x000c\u00F1@\u00F6z\u00BD\u00D5j\u0085\u00C1h4\\x001a\u00C7p\u00B9\\\u00C60\u0091\u00EAP#\u00F7\u00FB}\u00B4\\x001aq\u00BE\u00BD\u00BD%\\x0007\u00834\u00F4\u00D2\u00DF\u00DE\\x000c\u00E5\u00BD^o$\\x0012A\\x0010\u00C4\u00FF\u0087\u00DA\\x0014\\x0018j\u00E5\u00F3\u00F9T*E\\x000c\u00E6u\u00F0uu\u00FE\u008F0\u0086\\x0011;\\x0000+\r\u00FA\u00A1\nW\u00C0\u00D8!()\u00D6\u00DDh4B\u0087\u00A0x(\u00F2Oa\\x0000.\u0097\u008B\u00FC\u0089\\x001dv\u00BCR\u00F60\u0083\u00C1\u00D0\u00EB\u00F5\u00AA\\x0013CL.\u0097\u008BI<\u00DE\u00D8\u0098\"\u00F8\u00F1\u00D5`0\u00B0X\u00AC/\u0094\\x0013 \u00D8\\x0008\\x0007\u00B9!\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "23",
                            "uri": "https://google-gruyere.appspot.com/static/codelab.css",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/static/codelab.css HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 2dd89b22c206b11ab8877b68cd66e5d6\r\nContent-Encoding: gzip\r\nServer: Google Frontend\r\nContent-Length: 740\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: text/css\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "body { padding: 0px }\nbody, th, td, form {\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 12px;\n}\nh1, h2, h3, h4, h5 { color: #660066; font-weight: 600; text-align: left; }\nh1 { font-size: 18px; }\nh2 { font-size: 16px; border-top: 1px solid #e5ecf9; padding-top: 6px; margin-top: 1px}\nh3 { font-size: 14px; }\nh4 { font-size: 12px; }\nh5 { font-size: 11px; }\n\n.banner { border-bottom: 1px solid #e5ecf9; }\nhr { border: 1px solid #e5ecf9; }\nimg { border: none; }\n\ncode {\n  color: #660000;\n  font-size: 110%;\n}\n\npre {\n  margin-left: 14px;\n  font-family: Courier New, Courier, mono;\n  font-size: 110%;\n  color: #660000;\n  background-color: #e5ecf9;\n  border: 1px solid #e5ecf9;\n  border-radius: 1em;\n  -moz-border-radius: 1em;\n  padding-left: 1em;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n  overflow: auto;\n}\npre p {margin: 0em}\n\n@media print {\n  code, pre {color: black; }\n  pre {\n    background-color: white;\n    border: 1px solid black;\n  }\n}\n\ntable     { border: 0;border-collapse: collapse; }\nth        { padding-right: 4px; padding-left: 4px; }\ntd        { padding-right: 4px; padding-left: 4px; vertical-align: top; text-align: left; }\ntd.right  { text-align: right; }\ntd.center { text-align: center; }\ntd.centered { vertical-align: middle; text-align: center; }\n\na { color: #2244ff; text-decoration: none}\na:visited { color: #cc33cc; }\na:focus, a:hover { color: #0000ff; text-decoration: underline; }\na:active { color: #cc33cc; }\n\ndiv.column2 {\n  margin-bottom: 0px;\n  background-color: white;\n}\n\ndiv.column1 {\n  width: 250px;\n  float: right;\n  background-color: #E5ECF9;\n  padding: 5px;\n  padding-left: 4px;\n  margin: 0;\n  margin-right: 5px;\n  margin-left: 15px;\n}\n\nli.L1 { margin-left: -20px; padding-top: 6px; }\nli.L2 { margin-left: -24px; }\n"
                        },
                        {
                            "id": "26",
                            "uri": "https://google-gruyere.appspot.com/static/gruyere-78.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/static/gruyere-78.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: fb56c7df3c23aa76f1e5de09d8f0ecaa\r\nServer: Google Frontend\r\nContent-Length: 2527\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000N\\x0000\\x0000\\x0000N\\x0008\\x0002\\x0000\\x0000\\x0000\\x0001\u00C8\u00B7J\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008F\\x000b\u00FCa\\x0005\\x0000\\x0000\\x0000\\x0001sRGB\\x0000\u00AE\u00CE\\x001c\u00E9\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z&\\x0000\\x0000\u0080\u0084\\x0000\\x0000\u00FA\\x0000\\x0000\\x0000\u0080\u00E8\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017p\u009C\u00BAQ<\\x0000\\x0000\t]IDATx\u00DA\u00E5\u009Bm\u0088UE\\x0018\u00C7\\x000fY\u00BA\u00AB\u009B\u00BBn\u0096e\\x0011\u00FA!\u00E8CDPD}\u00E9\u0085\u00C8@\u00E8S}(\u0082\u0088 !B\\x0010\\x0014$\u0084\n\u0084\u00EC\u008BE\t\u0085\\x0015\\x0018E\u0089\\x0011\u00BD\\x0018$\u0082\u00A0\\x0010\\x0016\u00B6\u00EE\u00BD{WM7\u00B5\u00AD\u00F5\u00B5\u00DA\u00DA\u0092\u00960\u008C\u00E97w\u00CE\u0099{\u00EE\u00CC\u009Cs\u00E6\u009C{\u00EE\u00BDk\r\u00C3\u00B2{\u00EFy\u0099\u00FF<\u00CF\u00FC\u009F\u00FF\u00F3\u00CCl \u00FE7-h\u00EB\u00D3G\u00CF\\x001e\u00DF;qp\u00F3\u00FE\u00ED/~\u00F9\u00FE\u008A\u00CF7\u00DA\u009D\u00CF\u00F9\u0096k\u00B8\u00F2\u00E2\u0083\u00BA\u00FF\u00D4\\x0018\u00A3\\x0007\u00C6\u00AD\u009BW\u00E4\u00ED\u00DC\u00C5\u00BDm\u0082\\x001d\u0094h@L\u00B4\u00EC\u00BD5\\x0005\\x0010\u00DA\u009D\u00E7\u00F0\u00B4\u00B1\u00C9\u0089\u0099\\x0005u\u00FB\u0091\u00BD\\x000f~\u00F0l)\\x0008\u00ED\u00FE\u00D0\u00B6\u00E7x~\u00F7\u00A1\u00B6\\x0015d\u00BC\u00F3\u0096\u00F7Gw\u009D\u00BF\u00F0w\\x0017\u00A0\u00E2\u00AEO|\u00FAR\\x0007@\\x001a\\x0016\u0086\\x0008:\\x0007\u00F5\u00DC\u00F9\u00E9\u008D_m\u00EB0\u00C8xa\u00CF;\u008C\u00A1\u00EDP\u00E1\t\u00A6\u00B6\u008B8\u00B5y\\x000b0V\\x000e\u00A8\\x001f\\x001d\u00DAs\u00E7\u00DB\u00CFt\\x001d\u00A7\u00EA\u008Cd\u00E7\u00F1o\u00DA\\x0002\u00B5\u00BBN\u009B\u00D47\u00ED\u00FB\u00B8L\u00A8\u00F0\\x001e\u00CBc\\x0006\u00E2T\u00FD\u00D9]oy2s\u0090\u0089s\u00E5\\x0017\u00AF\u00CEX\u009C\u00AA3B\\x001f\u00B4\\x0019P\u0099\u00B3\\x0019\u008ES\u00A3m\t\u00EAL\u00F6[g\\x0010*\\x0008\\x0015u\u00D2\u00BEa\u00DD\u00B3eU;\\x001e\u00CB\u0098sCE\\x000c\\x0015\u008E+\u00DCH\u0082\\x0002c\u0093\u00A3 n\u00E8v\u00C4gi\u00B5\u0083\u00D2yuJV\\x00148\u00F5P^e\u00FB\u00E8G\u00EB\\x0019\u00FA\u00CEc\u00DF\u009C:7\u00E9\u00CF\u00FE\u00BB\u00C7\u00AB\u00A5\u009B\u0097\u0091'i)\\x0007T\u00B2'\u00CF\u00E7\u00AE\u00DE\u00F9:\u008Ar\u00FA\\x000f\u00C7\u0083\u00A7\u00AB\u00E2\u00D7\u00AD\u00E2\u00D4\u00F3\u00E2\u00C4\\x001a\u00F1\u00ED-a\\x001f\u00BET\u00EC\\x000f\u00E4\u00CF\u00B3/\u00AB\u00AB\u00C6\u00A7\u00CE0M\u00E5\u00A2e\u00FC^Pq\\x0000\u009F\u0099C9\u0099\\x0008\u00FF>#\u00B1M<-\\x000e\u00DE(\u00F1T\u00FBEu\u00BE\u00FC\u00C5\u00D9\u00AB\\x0003\u00E2\u00E8\\x0003\u00E2\u00C2\u0094rf\u00FF\u00C9\u00F5\u00ECN7\\x000e\u008C%\u0094>\u00C7|\u008B\u00D75=\u00E0\u00AF\u00C3\u00E2\u00E4:Q[,*s%\u00B6\u00A1 \\x0011\u009E\u00D1\u0087/\\x0013\u00A3K\u00A5\u00F1\u00EB\r\u00E7/Qu2N;\u00D2\\x0006\u009E\u00AC\u00BB\u00EC\u00BD5X\u00B2q)\\x00069\u00BD^\"\\x0004\u009Er\u00CB\\x0002\u00BD2[\\x000c\u00F7\u0088\u00A9\u00CF\u00B43\u0097\u0098K\u00D8l\\x001c\u00C4M\u009AT.i\u00CA\u009Bp\u00D4\\x001f\u009F\\x0012\u0095yr\u0094n\\x0000|5G\u00BA1\u00AB\u0094\u00B5\u00AA\u00FB\u00D1\u00E5\u00A2\u00D2+\\x001d{\u00A8~\u008D4\u00EC%\u00A2\u00DA'F\\x0006\u00C4\\x000fO\u008A\u00FE*W\u0084\u0082\u00C50l\\x0010\u00E7Cw\\x0002q,J \\x0018\u00CD\u00C4J\u00E9\u00A8)fd\\x0011\u009E\\\u00AB\\x0016\u00A1\u00BBM}\"oWP\\x001b\u00CE\u00DC+\\x000e\u00DD$\u00CE\u008F\u00EB\u00E2F)\u00CEl\u00AC\u00B5\\x0006T{\u0095\\x0012\t\\x001ai\u00E1\u009F_\u008B\u00DA\u00D5\u00A2\u00D2\u0093\u00E5\u0093\u00BD\u00D9A\u00E6\u00FB\u0087\u00DD\u00F7\u00D6\u00AE\\x0014\u00BF\u00EF(11\\x0006\u0091\\x0003\u00AAM\u00BCM8O\u00BF(\u00CD\u00E5\u00B5\u00FC\u00E6J\\x000fOoG\u00EEHd/\u009C\\x0019\u00C7\u0089\u00C2{\u00EB\n<N\u00C5AR,\u00DD;q02\u00C2#bd\u00BE7\u00AF\u00CE\u0096\u00C6\u0087\u00B1`f\u00A3\u00E1\u00D5\u0093[dtM\u009F5\\x001c\u0087u\\x001e\u00CDW\u008B\u00F5\u0080x\u008C\r\\x0014\\x0019\\x0018\u00AA\u00A5!\u009DyS\u008C\u00F4\u00E7\u00A6V\\x0018K1\u00B3\\x0016\\x000f\u00F2\u00CF9\u0092\u0084<\u009F\u00C0|\u009D\u00DB\u00AD=\u00AEp]\\x0012\\\u009A\u009C\\x0002\u009B\u0090\u0098\u00C5P\\x001e\u00B0>G\\x0016f\\x000fk$f%\u00C0T\u00E6\\x0014\u008C=6\u00C3\u009DX\u00AD\u009D\\x0019e\u00D6\"9\\x0005v1\u0085\\x0015\\x0012\u009A\u00F4\u00C0\u00D2\\x000cI\u0080c\u008F\u00DD\u00A7\u00B9\u00A4\\x001e\u00B2\u00C6\u00C5\u00D9W\u00A4M\u00FC\u00F1`|ip\u0097WW\u00FA\u00A4GD|N\u00A8,\u00E0\u00CC\u00A0k@5\u00B87\u008C.\\x0000\u00C8`\u00A0\\x001e\t\u00C9\u00D9~~#\u009B\u00ABG\u00AE\\x0010\u00E3\u008FK/%\u0086\\x0001\u0086_\u00F8\u00B36\u00E8\u00BA\u00F2J\u00E9_\u00913\u00E7\u00DD+\u00D1<\\x001c\u00E0\\x001bn\u00D6B\u00CDf\u00AA\u00BC\u00EA\u00E5*\u00F4\u009B\u00ED\u00C4\u00DA\u00E4e\\x001c\u00C5dB\u008E?9csDH\u00E4\u00CCyk@J\u00FF\\x0004v\u0098\t\\x00131<'|M\u00B8\u00FC\u0086\\:\u00B6\u00B6Pj`l\u00A2:\u00F6\\x001c\u00BBWT\\x0007\u00B3]\\x0017\u00F1\u0094+\\x000e\u00A1:\u00F86r\u00E6-\u00D5\\x001dyCN\u00804I\u0083\u008A\u00F3\u00A0oX~L*oR\\x001fb\\x0019\u00A6\u00B9\\x001a13\u00FA\\x000ew\u0095\u009F\\x000c\u00C8\u00B8\u00EA\u00CB\u00B1\u0083R`2;,o\"\\x0013\u00BF\\x0000>=\\x000e1\\x000b\u00A3\u00D7jg&\u00E9\u00F7tf\u00B5$\u0083M\u00FB>N\u0083\u008A\u00A0\u00B7%\\x0001N\u00CB\u00C8\u0098\\x0002\u00F0\u00B3\u00C0\u00B8\u00B2V'j\"\u008AD\u009B\u00E0\\x0002Ng\u0096\\x0013\u00D4\\x0017\u00DE\u00E89G\\x0004\\x0005$M\u00BD\\x0011)|6rq\\x0001\t\u00D5&\u00F1&\u00A8XI\\x0019\n6\u00E6\\x0013\u00A5\u00E0\u00C1\\x0019M\u00AD\u0099\u00D0\u00F1U\u00BA\\x000b\u0094\u00D2%\u00F3\u00DF\u00A5\u009Dy\u00F3\u00FE\u00ED>B\"\u00B0g\u00C5\\\u00ABN\u0092PF@\u00F1r\\x0019\u008E\\x00076\u0094\u0090\u00F2F_\\x0017\u00E8\u00CB\u00E7\u00F0\u00A9\u00E9.\u00CE\u009CR\u00BB\u00C1\u009C\\x0012\u00AA\u00AD\u00F2\u00B3\u00A1\u00BA\u00F1\u00F7\u0085\u00DE\u00A8\u00DC\u009E\u00DB\u00E1p\u00E0\\x0011\u00B4\"\u00DD\u00D3\\J\\x001b\\x000fi\u008Ck`2]\u008E\u00E1!J\u0093\u00F8,\\x0001\"VT\u00BB\u00C1\u0099\u0093\u00F6A1\u00A7\u0084jk\u00AEl\u00A8\u009E\u00A5\u0086\u00A1HK)\\x0017P:\\x0011T`\\x0003\u00A1\u00D3\\x0005d0\u00D9-g\u0087k\u0098)\u00E9\\x0002\u008B3\\@\u00D5n\u00A2\u0098gS\u008F\\x000e\u00AD\u00F9\u00A12\u0091\u00CA\\\\x000czd\u00B0h\u00FDan\u0099.@\\x0008\u00A8]\u00A3'\u00CE.D\u00821?\u00D4C77\\x0011\u00F2\u00D4g\u00A2\u00B6\u00A8\\x001c\u00A6\u00C9t\\x0001;U2\\`\u00F2]\u00FD1\\x0010\u00E2\u00CE\u009C\\x001f*!\u00C1~\\x001f\u00AF1J\n\u00A5\u00F7\u00D0\\x0005\u00EA\u0089$\u0094\u00C6\u00C0\u00A07\u00DE\\x000b\u00D5)]\u0099\u00D044\u00B2\u00FC\u009C\u00B4\u00C4'v\u00C3\u00C8\u0085Y\u00B4\u00D5\u00D4\u00A7?\u00CC\\x0016\u00D4\u00D8\\x0008o\u00E0'\u00D4E\u00B4\u00AC\u0083KHK\\x0019q5\u00DE#\\x0015j6U\u00F8u\u00D8a\u00A0x1\u00B1\u00F0\\x0012@\u00C0\u00F0\u00D2\u00FA*\u00D3PU\u00FA\\x001d\u00D8{'n\u00A8\u00DCf\u0083\\x001bj\u00FCJ\u009C\\x0019\\x001fS\u00AB\u008B~b\u0095\u00A4\u00AE\u00E1\u00DE\u00CEZ\u00BBOQ\u0094\u0086\u00AA6\u00D7\\x0003\u00BB\u00F6\u009BhU\u00A4\u0092\u00B3!\u00A4\u00B4\u00AC\u00B5-\u00CFZ\u00FA\u00E1\u00C9\\x001c\u00BA\u00AF\rPUM8@g$B\\x001d\u00CA\u00B3V\u0091/\u00C4\u00B7\u00A4\u00C6W\\\u00D0%\u00A8\u00AAN\u00E6\u00C8WC\u00A8\u0088L\u00FB)\u00D3U\\x0013\u00C3\u00F8c!\\x0006\u00E2mJ\u00AD\u0090\u00AF\u00AA\u00F3K\u00A6e8\\x0002\u0087\u00B2\u00EBU\\x0016\u00D40_\u00B5\u00AB\\x0010\u00A6U\u0087b\u00C1f\u00F4\u00BA\u00A6\\x0010O\u0086\u00A1\u00F38g\u00AA\u00DDd\u00D8\u00E5\u0089D\u00AAh\u00CC\u0093\u00C3\u00B8\u0098x\u00AB\u00A7\\x0015T\u0087o\u0093\u0095\u00CA\\x0004\u00A8*\u00D2\u00B8kK\\x0019j\u008911\u009D\u00AA\\x0008\u00A8\u008B\u00A6\u00E4\u00AB\u00C8\u00FD\u00F4F\\x00180*l\u00B8\\x0003\u008F\"<2nR%8\u00CCG\u0090\\x001c\u00B8\u00C1\u008C\u00A5\u00FC\\x0019\u00D7m\u00CDP\u009BjK\u00B8r\u00ABr\\x001f\u00CB\u00D8\u00BEmoa\\x0018\u00A9\\x001cy\u00BF\u00B1\u00E5A\u00B2\u009En\u00DB\u00E1\\x001eYd\u00B6\\x001b\u00A2\"\\x0001\u00AA>\u0096\u00E8\u00A8\\x0003\\x0017\u0082:\u00E0\u00CE`\r\\x0011\\x0017\u00E7a\u00D6\\x0005j.\u00AF \\x0001\u0086\u00D3}d\u00E1n\u00AE\r\u00D5\u00AC\\x0003\\x001b\u0087Y\u008A@E\u00BB\u00C6K\u00A4\u00CE\u00C6\\x0010\u00E3\\x0014\u0092\\x0014\u00A83\\x0016\u00EA\\x001c\u00B9\\x0010\\x001c\u0085\u00BB5N\u00AB\u00C6\u008F\u00BD\\x0004:\u00B5m\tj\u008A\u00C0\u00D0\u00CD.A\u00DAL\u0086\u00E5\u0087g\u00D5S\u00B6\u0084\\x000e)\u008C\u00DD\u00ED\u008A\u00EDK\u00EA;\u009A\u00F5kbj)~\u00A86\u00B0\u00C5q\u00C1\u00D4\\x001c\u00DEOoZi\u00C4\u00F3Ac\u0085\u00A3c\u00873\\x0019\u00B8O.\u00FBx\u0093\u00BBg\u00F3\\x001a\u00D3\\x0011A\u00D5\u0084dB\u00D5Im\u00D1*D\u00BF9\u0082&\u00EF}W\u008C,p\u00EF\u00CD`m\u0095\u008B\u00F2F\u00CF\u00CCA\u00A6\u00E3\u00CB\u00C3\\x001dj8\u00DC(\u0094G\\x000el\u009C\u00D6p\u00EC\u009A\\x0017\u0084\u00EAdT\\x001d\u00FAT1!I\u00A6\u00B7RdJVKig!TM\u00B88T\u0085\u00F6\u00D7\u00ADM\\x0011\u00EF\u00A7\u00D7\u00E4\\x001eq7\u00E4~\u00C6a\\x001e\u0094SKP\u0095\u00A8R\u0095DY\\x0016\u00E9\u0091\u009B\\x001d\u009D\u00CEc\u00FD\u00A06\u00B6\u0099\u00BB\u0092mw\\x0012\u00AAo|+R\u00B9\u00ED\\x0015\u00A3\u00D7G\u00A5\u00E0E\u00F9n$\r\u00D6[\u00D2\u0099\u00D5s|\u00CA\u0095xt\n\u00AAL\u00F1\u00967\u00B4\u00EBo\\x001fzma\u00A9\u00CD>\u0092\u00A78\u00DB\u00C1\u00F3)\u00FB\u00B7\u0095z\\x0019 \u00DFy\u00E0\u0092\u009D\u00CA*\u00C1yr\u00813IN\n]t\\x001c\u00A7\u00CBP\u00ED\u00D7\\x001f8;YO\u0091\u00D6\u00B6 \u0091\u00FC\u00BF\u00C8\u00FD\u00AE\\x000c\u00A8zU\\x000c\u00B5\u0087*\\x0010F\u00EAs\u0094\u00A0z\\x000b\u00BEW\u00E9kz#\u00BA'\u00A9\u009D\\g\u00E6@\u00F1\u00F5\u009F\\x000f*\u00FE\u00A6\u00F6\u0094\\x0018Sx>e\u00A0\u00A5\u00B5\u00CA\u0092\u008B\\x001f\u00A1u\u009Ev\u0091\\x001f\u00C6\\x0000|w\u00E2\u00F0\u00C8.\u00E2\u00C7MjW\u00A5yP\u00BE)R\u00C7\\x0015\u00D4Q\u00C1p\\x001fe \u00DFa\\x0016\u0095\u00D3\u00AB\u00FD8\u009Fs!\u0095Y\u00F2L\u0089OJh\u00EF\u00A7\u0094\u00FC\u009F\u008Ej+\u0095q\\x0003\u00A0E\u009B\u00E7\u00E2$#\u00D1\u00AF.\u00C8\u00E6\u00852\u00FFU\u00B7u\u009B\u00E7=\u00B1H\u0092`\u00AC\u00CF\\x000eAM\u00B7y\u00E6\u00A1\u00EF\u00BC\u00D9\\x0012\u00F1\u0099\u00A7\u00A5\u00AC\u0082\u00CE\u00FF[\u00BDy\u0094_\u009D\u00E3W9\u00B4\u00E7~1q\u00D2\u00DE\u0080\"\u00E3;|{\u008E\u00C0\u00D6Q\u00A8vZ\u00A76\\x000b\u00A1\u00F7\u00DA\u00C2p\u00A9;\\x000bh\u00C3\u00B3\u00E5Q\u00E1x\\x0006\u008F\u009D\u00D3q\u00CE,\u00A8\u00CE\u00A5~f\u0083\\\u00EAJ\\x001b\u00A8\\x000cv(\u00E6\u00C9\u00CC\u00C8\u00E8\\x0012\t2\\x0013\u00E7\u008C\u0086ZzT\u00BF\u0098\u00A0\u00B6\u00C8\u00F0\\x0017\\x001f\u00D4\u00E4\\x001d\u00F1\u008C\u00A8~\\x0011[5\u00AF\u00CD\u00FF\u00B3P\u00FD\u00DA\u00BF\u0089U\u00AC\u00AA\u00CA-\u00A4\\x0017\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "88",
                            "uri": "https://google-gruyere.appspot.com/static/gruyere.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/static/gruyere.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: e61a2c7e71b4950a548fb0d1ea66b04c\r\nServer: Google Frontend\r\nContent-Length: 40079\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0002\u00DE\\x0000\\x0000\\x0002Z\\x0008\\x0002\\x0000\\x0000\\x0000\u0097\u00D7\u00D7\u00C6\\x0000\\x0000\\x0000\\x0001sRGB\\x0000\u00AE\u00CE\\x001c\u00E9\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008F\\x000b\u00FCa\\x0005\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z&\\x0000\\x0000\u0080\u0084\\x0000\\x0000\u00FA\\x0000\\x0000\\x0000\u0080\u00E8\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017p\u009C\u00BAQ<\\x0000\\x0000\u009C\rIDATx^\u00ED\u00BDi\u0094\\x0015E\u00DA\u00EF\u00EB\u00FDz>\u009Eu\u00BE\u00DD\u00B5\u00AE\u00F7\u00DCs\u00CF]\u00AB\u00BF\u009C\u00F3\u00BE]mkw;S \u00C5\u00A4\u00D8\u00B6\u00F3\\x0000\u00A8(X\u00DA\\x000e\u00B4\u00AD\u00AD\u00E0\u0080\u0088\u00CA\u00B0\\x0001\u0099\n\\x0010\\x001c\u00DB\\x0011K\\x0005AeP\\x0019\\x0004,@\u0099\u00C7\u00A2(\u00A0\n\u008A\u00A2\n((\u00A8\\x0002d\u00DF'32sGfFfF\u00E6\u00CE\u00DC;\u0087?+t\u00ED\u00CA\\x001d\\x0019\\x0019\u00F1\u00CB\u00C8x\u00FE\u00F9\u00C4\\x0013\u00B1\u00FF\u008F\\x001eO\u00CC\u00BFD\u00FD\u00F7\u00B6}y\u00FE\u00FCy\u00F6\\x0019\u00FF@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0d\\x0004\u00CE\u009D;w\u00E2\u00FF\u00BAS\u00BB\\x001cI\u0093{\u00EF\u00BD\u00F7\u0085\tsg\u00FEx\u00EA\u008D\u00EFN\u00BF\u00FA\r\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@$\\x0004nzl\u00CA\u00A4\u00E5\u009D\u00A1\u00A4x\\x0016\\x0015\u00A0i\u0083\u009Ey\u00F3\u009D\u00B5g\u00E6\u00AC<5\u00FC\u00B9\\ee\u00A5\u00E21\u00A1\u00FF\u009E{c\u00CE\u00C4e\u009D\u00FF\u00F8\u00BC\u00E3\u00FE\u00F7N\\x000e~\\x0017\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@ \\x0012\\x0002\\x001e<\u0089\u008Cw(\u00A66\u009EE\\x0005h\\x001a5\u00E4\u00C5\u0085\u00A7H\u0081<\u00F0\u00DE\u00C9\u00BF>:^\u0091&\\x0003\\x0007\\x000e\u009C\u00B4\u00AC\u0083tI\u0080\u00E2p\n\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080<\u0081x\u00EA\u0089\\x0010k%\u008F\u00C2\u00C8\u00C9\u00A4\t\u00FD9\u00E4\u00BD\u0093\u0083\u00DEn'\u00C7\u00C9%UUU#\u00BFR\\x000e\u00DD\u00F7N\\x0004\u00E9\u00ED\\x0013\u00F7\\x0005KQT&@\u0099\u00C1*Og\\x0005\u00B8V\\x0014\u00A7\u00A0\u00FEQP\u0095/\\x0013\u00FC\u00E5YE\u0091\\x0013\u00FC\u00A3\u00A0*_f\u008C\u00F9\u00D3\\x000b\u00FA\u00E8E\u00A7'/\u00EF\u009C\u00F2}'Y\u00C0AB\\x000b(W\u00FFgj;>\u00F8\u00F9\u00EC\u00B4\\x001f:\\x0007\\x0019\u00F9]\\x0011\u00FDi\u00D0\u00A4\u00DC\u00B2\u00CEPl\u0084\u00B0\u00A8\u009B^\u00DF\u00F0\u00FF];\u00C8%\u00DD\u00F4\u00DAz\u00BB]V\u008AZzZ;.w\u008B\u008DK\\x0018m\u00B1\\x001f\u0091l&]\u00FD\u0085\\x0005\u00A7\u008C\u00CC\u009A4y\u00E6\u00F3\u008E{\u00E7\u009D\u00F0No\u009F\u00B87@\u0092)\u00D9\u009EG\u00FEB\u00F2\u00E5\u00CB\u0097\u00C9\u00E7\u0094/\u009F\u00CF)-\u00F9\u00F2\u00E5\u00CBD\u00FD\u00E5Y\u0081\u00BF;+y>\u00E8\u00FF\u00EE\u00AC\u00E4\u00FB$\u009E_yV\u00F2\u00FD\u0093+\u00F3\u009F\u00B5\\x001d\u008B\u00B7v\u00CD^uf\u00CC\u00C2cS\u0096\u00B4\u00FD\u00B0\u00EB\u00EC\u00D2\\x001dg\u0087\u00FF[d\u00E0$\u00CA\u00F4\u00A3\u0093\u00BF\\x001e<?mI\u00EBmS\u00F7kf\u00D4\u00B5\u00FEW\\x000c\u009A4q\u00E9i\u00CD\u0098J\u0094\u00EFR\u00A6\u00A9(\u00FD\u00A2\u00FF\u00F3\u00DAA\u00CBwukig\u00F7r[\u00FA\u009F\u00D7\\x000c\u00B2\u009B\u00FB+\u00EESk\u00C5\u00EA#\u00C1_\u00BB\u008AZ8+\u0090\u00FEo\\Kp\t/&\u00A3\\x0016\u009C2\u00AE\u00ABI\u0093\u00A7?\u00EF\u00B8{\u00DE\u0089\u00A8\u00D2\u00DC\u00E3wG\u009A\u00A2\u00AB9+9\u00D2\u00CAS\u00E1\u00A8\u00BF;\\x0001\u00F0w'\u0080\u00FE\u0083\u00FES\u00CC3\u0092\u00BD\u00FE\u00F3\u00F7ON\u00AEo<\u00F7\u00CF\u00CF\u00DA\\x0006N\u00D8\u00F6\u00B77\u00F7\u00DD6\u00FD\u00E0#\u00EF\\x001e\u009A\u00BE\u00E4\u00C8\u00DFr\u00DB\u00EE\u009Cs\u00CC: \u00CB\u00B1]\u00B7\u00AF\u00FB\u00A5O\u00F6\u00FDmJ\u00BD\u008C\u00BD\u00B8\u00FC\u00BE\u00DC\u0084%\u00A7\u00B5\u009C\u00C5\u00F1\u00BF\u00FC\u00BEI\\x0013\u0096\u009E\u00B6\u00D4\u0099\u0097\\x0008v]\u00C2\u0094\u0084\u00BD\u009E\u00A6Z\u00C9\u00B5\u00DA\u00A2Ex]\u00E2\u00D7\u00AEQC\u009E\u00FF\u00EA\u0094q\u0096&M\u00FE1\u00FF\u00E4\u009Do\\x001dG\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081t\\x0013\u00F8\u00E2\u00D7\u00B3\u009F\u00AE\u00EF\u00EC?v\u00E3\u00AD3\u009A\u008D\u0096\u00DE6\u00F3\u00C8\u00CD\u0093\u00F6\u00DE1\u00A7\u00FD\u00D9\u00DA\u008EY+;\u00DF_w\u00E6\u00D5\u00C5\u00A7\u00D8\u00B7\u00F7\u00CE;\u009E[vz\u00EE\u00EA\u00CE\u00B7\u00D7\u009Cy\u00F8\u0083\\x0013\u00EC e\u00A3\\x0019\u009C\u009A\\x0015\u009D\u0093\u0097\u009D~\u00FC\u0093\u0093k\u00F7\u009D\\x001b\u00F9\u00F1\u00BE\u00BFMm|\u00EA\u00B3\u0093sVu~\u00B0\u00EE\u00CC\u0088\u00CF\\x001c\u00AD\u00EA\\x001f\u00EF\u00CD\u008D\u00FB\u00EEt(\u0090\u0085E\u00FD\u00BF\u00D7\\x000cZ\u00B6\u00B3\u009B\\x0012}\u00B0$\u00E3\u00B8\u00FD\u00EA\u00C1je\\\u008B\u0095\u00CC.\\x001a\u00A0it\u00F5\u00E7\u00BE\u00E80N\u00D4\u00A4\u00C9\u0088\u00CF;\u00EE\u0098{\u00C2Gz\u00EB\u00C4\\x001d\u00F1I\u00BEj\u00CE2\u00C7\u00A7\u00F2T\\x0013\u00D4\u00BF\u00BC\u00B7\\x0003\u00FC\u00C1\u00BF\\x0018\\x0002\u00E8?\u00C5\u00D0+\u00FE\\\u00FF\u00FC9p~\u00C2\u00D7\u0087o\u009A\u00B0\u00D3n\\x0008h\u00FB\u008C\\x0005\u009B\u00BB\\x001e\u0098w\u00E4\u00D1w\\x000fn>tn\u00F2\u0092\u00E3w\u00CD=AG^\u00FF\u00F6\u00D4=5\\x0007\u00DE^u\u00BCn\u00F7\u00E0\u00B7\u008FM\u00FF\u00B1s\u00EE\u00EA3\u00FF\u00F8\u00F4\u00D8\u00E6C\u00E7\u00DFYu\u00FC\u00D6\u00A9\u00FB\u00D7\u00EF?\u00F7\u00CF\\x000f\u00F6=\u00FE\u00EF\u0096\u0085[\u00BA\\x0006\u00CF=:e\t}u\u00EE\u00D6\u0099G\u0084\u00B6\u00E6\u00B2{'\u00914\u00D1\u00BE\u00F2_\u00BELSQ:\u00CC\u00FFq\u00CD\u00A0\u00A5;\u00BB)\u00D1\\x0007>\u00B3\u00D3q\u0096GX\u0094\u00B7\u00AD\u009C{\u00C2(V\u00BB\u00A2g\u008BD7\u009D\u00AE\u00FE\u00AF/N\\x0019\u0097\u00D3\u00A4\u00C9\u0093\u009F\u009E\u00BCm\u00F6q$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H7\\x0001\u008A\\x000b\u0099\u00FE]\u00F3\u00C0I\r\u0096f\u00DE1\u00E7\u00F8\u00BA\u0086s\u00A3\u00BFl\u00ED\u00FF\u00C6\u00D6\u00BF\u00CDl\u009D\u00F1\u00C3\u00C9u\u00FB\u00CE\u00BE\u00BA\u00A0\u00E5\u00A7\u00FAstd\u00E0\u00E4\u00FDw\u00CD9\u00F6\u00CB\u0081s3\u0096\\x001c\u00A6#O|\u00D0t\u00E3\u00C4=\u00D3\u0096\u009FX\u00BE\u00FD\u00F4\u00CD\u00B9\u00DD4C\u00F4\u00E4;{>X{\u00EA\u009D\u009FN\u008D\u00F9\u00A2\u0089\\,O\u00D4\u00DC\u00E7\u0095\u00F5B\u0092\u00B8'\u00F7\u00FA\u00B7\u00A7\u00ED_\u00FD\u008F\u00AB\\x0007\u00B9$\u00F9\u00A2\u00A8\u0090\u00A5;\u00BA)\u00D1\\x0007\u00FE,\u00A7\u00E3,\u008FS\u00AD<;\u0083Q\u00AC\u00FD\u008A\u009E\u00E7\\x001a\\x0019\u00E8\u00EA\\x0014Ml\u00FC\u00A9I\u0093'>=y\u00EB\u00EC\u00E3H \\x0000\\x0002 \\x0000\\x0002 \u0090n\\x0002\u00DFl\u00EBZ\u00B1\u00AB\u0093\u0084\\x0005k\u00E6\u00F3_v\u00BC\u00B7\u00EE\\x000cy;(\\x0008t\u00E3\u0081\u00F3o|up\u00E0\u0094Fv\u009C|$\u00D3\u00BEm\u00DE\u00D0xn\u00E0\u00B8M,3Y\u00DF\u00B9?\u00B4|\u00BB\u00B5\u00F3\u00DF?\u00B5\u00DD<\u00B5\u0089&t\u00DEZ\u00D1\u00DE\u00F7\u00B5M$M\u009Ezw\u00CF\u00C7u\u00A7\\x0016m>}\u00DF\u00CC\u00FA\u009B&\u00EF\\x001f0a\u00F7\u00CDS\\x000f\tIV\u00A8\u00D2\u00C4\u00F2\u00D5\u00FFs\u00F5\u00A0%;\u00BA]\\x0012e\u00B0\u0097\u00E6^\\x0014\u009DbI\u00AC|\u00F9\u00A2<{\u0082\u00BD\u00DA\u00C2\u00C2=\u00CB\u00A1\u0086Pl\u00B2\u0091M\u0093&\u008F|\u00F2\u0096\u009A\u00E3r\u00A9\u00FD\u0096\u009A\\x0000I\u00B2\u00F0\\x0012d\\x000bPy:\u00A5\\x0004\\x0015\u0093\u00BC\\x0004\u00EA/\t*\u00A2l\u00E0\\x001f\\x0011X\u00C9b\u00C1_\\x0012TD\u00D9\u00D2\u00C0\u00FF__tlm:?\u00E5\u009Bff\u00CBn\u009F\u00DD>\u00F8\u00ADf:\u00F2\u00E4{\r\u009F\u00D6u,\u00DF~j\u00C0\u00C4}t\u009C\u0094\u00CA\\x0017\u00BF\u009C\\x001e4u\\x001b}\u00F5\u00AF\u00EF\u00FB\u00EB\u008C62\\x0004+\u00F7\u009C\u00FB\u00FB\u00DB\u00F5\u00F7\u00CE\u00A8o\u00D5\u00B1\\x0005\u00BF\u009C\u00FAx\u00FD\u00D9\u00FE\\x0013\u00F6\\x000e\u00CC\u00ED\u00D9\u00D0x\u00FE\u00D1\u00B7v\u00BF\u00F8E\\x001be\\x001e6g\u00EF\u00CD\u00D3\u008F\u00BAX\u008D\u00DF\u00DF\u009D\\x001b\u00BB\u00F8\u00B4%\u00C3\u00BFj\u00D0w\u00DB\u00BB]\\x0012e\u00B0\\x001b_\u00B5\u00A8S\u0096\u00E3\u00FF\u00FD\u00AA\u00FB\u00BE\u00DB\u00DE\u00C5%k\u00B1jQ\u00D6\\x001e\"\u00AC\u0095\u00BB\u00ED\u00E3\u00EBl\u00F9\u00ECp\u00A2c\u00FF\u00A1\u00AB?=\u009Ft\u0088\u0096A\u0093&\u008F}|\u00E2\u00E6\u0099\u00ED\u00DE\u00A9\u00A6\u00FDf-\u00B5\u00DD\\\u00E3'\u00CDl\u00BB\u00D9G\u0092\u00A8\u0089Lm\u00EDyP\u00A9\u00BB\\x0000\u00FE\\x000e\\x0004\u00D0\u00D0\u0082\u008D<\u00EC,\u00F4\u009F\u00D8\u00F4\u009F\u00B1\u008B\u00DA~=\u00D8\u00FD\u00C5/\\x001d/.\u00EC\u00F8\u00FB''\u00C6~s\u00F2\u0097\u0083\u00E7\\x001e\u009A\u00B5\u00ED\u008E\u009AC\\x000b\u00EDxwe\u00EB\u00B8\u00EFHv\u009C\u00B9w\u00D6\u00FE\u00AA\u00D7\u00B6\u00BC\u00FA\u00F5q\u00D2+\u00AF/j\u00A5i\u009A\u00DC\u00D2S7\u00BC\u00B2q\u00C0\u0094\u0083w\u00CFiY\u00BA\u00ADsM\u00FD\u00D9A3\u00F7\u00DC=\u00B7}\u00D5\u00DE\u00EEY\u00CB\\x000e\u00DF=\u00AB\u00F9\u00EDU'7\\x001e8\u00F7q\\x001d\u00ED\u0098r\u00DA\u00C9\u00A4\u00FE\u00E7]9\u008A\u00B1\u00B5|\u00FB_u\u00DF\u00B7\u00DB\u00BB\\\\x0012e\u00B0\u00DB\u00DF\u00FF\u00BC{\u00E2\u00AB\u008B;,\u00E6X\u00AA(\u00DB\u00BD\u00F8\u00CF\u00BB\u00D4\u00A2\u00A4{8\\x0015\u00A5n3\u00DB\u00EDGL\u00A5\u00B9\u00F6j\u00C8\u0088\u00F9'\u008C\u0086h\u00D2\u00E4\u00D1\u008FO\\x000c\u00ACi\u00F3\u0091f\u00B6\r\u008C.\u00F9\u00AAI\u00B0\u00CC\u00D1U\u009EJ\\x000eV%_g\u00A1\u00FE.\\x0004|\u0091\\x000c\u0096\\x0019\u00FC\u00C1?X\u00CFag\u00A1\u00FF\u00C4\u00A0\u00FF\u00DC9\u00A3\u0091\u00D6\u00D4L\\|x\u00EC\u00D7\u00AD\u00CF\u00CCo\u00BD}Fc\u00CF\u0097\\x001e0\u00E5\u00D0M\u00D3\u008F\u00DE;}\u00D7\u00E0\u009A\u00FA\u00BE\\x0013\u00EA\u00AB^\u00DFv\u00E3\u00B4#t\u00BFnys\u00FF\u0090\\x0019;\u00EE\u0098\u00B1\u00BF\u00CF\\x001b;o\u009D\u00BA\u008FT\u00CB\u008C\\x001fO?[\u00DBN\u00D3:?7t\u00DD\u00F3V\u00CB-5GozcS\u00DFq;n\u009C\u00DEr\u00D7\u00F4=\u0083\u00A6m\u00B9q\u00C2\u00F6>\\x0013\u00F6\\x0008\u00CD\u00C1\u00DC=q\u00CC\u00E2\\x000e\u00FBWd\u00DA]R!?G\u00EF?\u00EER\u008B2\u00F3\u00AC|i\u009D{Q\u0094\u00C1\u00DE\t\u00B5\u00A2\u00FCtl\u00E3*F\u00DD\u00ECG\\x0004\\x0004Dw\u009F\u00AE\u00FE\u00D4g'\u008CZi\u00D2\u00A4\u00FA\u00A3\\x00137\u00CDh\u00F3H\u00D3\u00DBn\\x000c\u009A\u00BC\\x000b\u00F7\u00BC\u00BAK\u0086\u0099^5g\u00E7\\x0006\u00AD<\u00B5\\x001a\u00F5w#\\x0000\u00FE^]\\x000b\u00FD\\x0007\u00FD\\x0007\u00E3OTOA\\x0011\u00E3O\u00FF7[\u00FALh\u00A8zcO\u00D5\u00F8\u00FA\u00BE\\x0013\\x001b\u00E9O\u00C3\u00C6\u00F5\u009Fr\u00B8\u00DF\u00E4f\u00F6'\u00AB\u00F9\u008D\u00D3Z\u00FBOi\\x001e0\u00B5\u0085\u0096\\x0016/\u00DC|\u00E6\u0086\u00B1[\u00AB\u00C6\u00ED\u00EE\u0097k\\\u00B2\u00AD\u00F3\u00A1Y;\u00E9\u00F8\u008D\u00D3\u008F\u00DD8\u00ED(\u00CB<`\u00EA\\x0011\u00CAL\u00A7\\x0008[\u00FD\\x001fwN|eQ\u0087\u00F6U\\x0011\u00F5\u00A7\u00BA\u00FDo*\u00EA\u00EB\\x000ew\u00D3,I\u00DET+y\u008B\\\\\u00FD\u008D\u009ASC\u009E\u00FC\u00F4\u0084\u00F1\u00A7.M>,\\x001crl\u00E4\u00B4\u00B6\\x0001\u00D3\u00DA\u00FAO=\u00D6o\u00CA\u0091>\u00B9\u0083\u00BD\u00C7\u00D5\u00DF\u00F0\u00DA\u00CE^c\u00B7\u00CB\u00A4\\x001b\u00C6nW\u00D2k\u00F2i\u00DB\r\u00AFm\u00BBa\u00ACdR\\x000b\u0097H2U\\x0015\u00E6A\u00FD]\u00EF\u0085\\x0018~\u00EF\u00D7w*\\x000f\u00FC\u00A4\u0083\u00FD\u00DF<2`\\x001a=\u00B4J\u00FF\u00F1\u0091\u00A6\u00B7\r\u00D0\u0093\u00D6'it\u0090M\u00C7n\u009CqL\\x0019)\u00A4\u0092\u009C\u00E6\u00F6Uy\u00CA\u008C\u00FAK\u00C1\u00A7{\\x0004\u00FE\u00A2\u00E7\\x0002\u00FD'\u00AE\u00FDg\u00F4\u00A2\u008E\r\u008D\u00DD\u00FF\u00FCp\u00FF\u0090w\u008F?\u00F7\u00E5\u00C9w\u00D7vR\\x0018l\u00BF\u00C9\u0087\u00B8\u00D1\u00C9c\u00FC\u00F9\u00F3\u00DF\u00BFxp\u00F6\\x001e}t*\u00AA\u00FF\u00FF\u00AF;&\u008E\u00FE\u00BAC0\u00AE\u00FA\u00EF?\u008A\u00CAY\u00D4\u00A1\u00B6\u00A2\u00D4\u00E3g\u00D5\u00F8\u0086\u00CB\\x001e|\u00E7\u0089ON\\x0018\r\u00D1\u00A4\u00C9#\\x001f\u009E\u00E0GR\u00A7\u00CF\u00FD\u00A7\u00B6\u00F6\u009D\u00DCt\u00C3\u00EB;\u00AF\\x001b\u00B9\u00E6\u00CA\\x0011\u008B\u00AFxt\u00FE\u00E5\u00C3?\u008C&\u00FD\u00FB\u00F2\u00E1\u00F2)\u00A2:\\x0014S\u00AC|\u00E5)g1\\x0017\u008A\u00E8\u00DC\\x0010\u00EAO\u00DD\u0083:\tu\\x0015\u00EA0\u00D4m\u00A8\u00F3\u00C8\u00F4\u00B1\u0090\u00F2\\x001c\\x001b0]>\u0099dDH\\x0015(\u00B2L\u00F9\u00CAS\u00CE\"\u00AF\\x0015\u00C5\u00E9\u00A8\\x0014T\u00E5\u00CB\\x0004yVAr\u008E\u00F8\u00E8\u00C8\u00EC\u00E5Gf||\u00F4\u0082\u00E3\\x0003&7\u00D2\\x000b\u00ADy|\u00F3\u00E0\u00DFk\u00EC\u00B6\u00EB\\x001e}\u00A7\u00DF\u00F8]\u00EA0\\x0015\u00A4\\x0002\u00C6Y\u00FF\u00EBNU\u009A\\x0014W\\x0008;\u009D+\u00AA\u00A4\u00FD\u00A7j\u0082\u00A2K\u0088!\u00FD\u00AA\u009F\u00D1\\x0010\\x001f\u00D2\u00A4\u00FF\u00B4c}'5\u00F5\\x001c\u00B3\u00F5\u00CA'\\x0017\u00FDc\u00DAwK\u00D7\u00ED\u00EE\u00E8\u00EC\u00FE\u00EDb\\x001e\t\\x0004\u0084\\x0004Nvv/^\u00B3\u00E7\u00D1\u00DC\u00B7W>\u00B5\u00A8\u00E7\u00AB[UurL\\x0017\u00C5\u00F4\u00C1O\u00F2\u00A13|=T,\u00B3\u00F4\u00D0Pp\u009C\u00F8\u00A9<\u00B5\\x0014\u00F5w#\\x0000\u00FE^\u00DD\t\u00FD'u\u00FD\u0087\u00A2R\u00FE<(Wq\u00F7D\\x0012\\x0004\u00B2\u00E9\u008E\u0089\u00E4#Q\u00D3\\x0004\u00E9\u00CE\t\u00FF+\u00C2\\x0014B\u00FDI\u00AB\r\u009AGks\n\\x000f\u0082&M\u0086p\u009C\u00CC\u0086{\u00EA;\u00F9p\u00AF\u00B1;\u00FE\u00FC\u00C4\u00C27?\u00F9\u00E9\u00FCo\\x0017)\u009D\u00FB\u00ED\u00E2\u0085\u008By{\n\u00D1T\\x000b\u00CB\u00B7\\x001c\u00E4/'\u0093\u00DF3\\x000f\u00EAo\\x0010\u00F0dE\\x0019\u009C\u00F8S\u00F7`\u00E9\u00D5\u00B7WP\u00B7\u00A1\u00CEC]\u0088\\x0004\u00AE\u009AZc\u0094\u00BCz\u00BE\u00E9\u00B9@\u00FDC\u00BFw\u00E0\\x001f:R_\\x0005\u0082\u00BF/\\\u00E1e\u00FEkM\u00EB}\u00F3\u00DA\\x001e\u00FF\u00F8\u00B8\u008F\u00F4\u00C9\u00F1\u00C7\u00E3\u0096\u00C2\u00A8?q \\x001a\u00BCQ0\u00A4\t\\x0005\u0091\\x001cuI\u00FD\u00DEl\u00A9\\x001a\u00BF\u00EF\u009A\u00E7V\u00FCc\u00EA7\\x0017T]\u00C2R\u0088V\u00DCR\u0094\u008CQdy\u00A2\u00ABC1%\u00A3\u00FE\u009A~\u00BD\u00F0\u00DB\u00A9\u00CE3\u00C3\u00C6-\u00B8\u00F6\u00B9\\x0015\u00BD\u00C7\u00EF\u00EB\u00FBfK\u00BF\u00A9G\u00FBMm\u00F5\u0091|\u008F\\x0005G\u00FBO\u00F3\u0093\\{>\u00FFP\u00A85g\t\u00F5w\\x0011\u0097~\u00E0\u00D3\u009D\\x0002\u00F7\u00EE\u0084\u00FE\u00EF\u00FE8\u00A3\u00FF\u00A4\u00B1\u00FF\u00E8\u00D2\u00E4\u00DF\u00ED\u00EEo\u00B1}\u00A74\u0093O\u00FE\u00F2G>^\u00B2n\\x0017\u00F3\u0097\u00B0$o\u0080\u00913k\\x0004X\\x000f\u00E9&ir\u00E6\u00EC'K6R\u00E7Q\u00A6u\u00A64\u00FB\u00F6\u0097Lm\u00A5y\\?\u00C9\u0087\u00B5S\u00EC\u00A2\u00EF\u00A1\u00DF\u00A7\u00CB\u00C7_\u00E5\u00A9\u00A5\u00A8\u00BFO\u00C2\u00EEw\\x0010\u00FC\u00DD{\\x0014\u00FA?\u00FA\u008F\u00E9\\x0019\u0089\u00C5\u00F8cH\u00936\u0097\\x0017\u00CD~S[\u00AA&6\\\u00F3\u00AF\\x001f\\x001e\u00CF-\u00E8>\u00FF\u009B\u00A1K\n\u00D2\u00A4uk\u00FE\u00CB*\u00C7\u00F4\u00F5_\u00F3\u0087\u00D7^\u00BC\\x0008\\x001d#\u0098\u00FCJ\u00B1^1\u00FA\u00C9\u00D9s\u00E7\u00DBNt\u00DC\u00FF\u00EA|\u00EAB\u00BD'4\u00E8\u008E\u0093\u00A3\u00BD^\u00DBq\u00CD\u00F3\u00AB\u00AE~\u00E6\u00FB\u00AB\u00FE\u00B9\u00F4\u00CA\u00A7\u00978\u00A6.\u00A5\\x000c\u0094\u00AE~f\u00F95\u00FF\u00FA\u00B1\u00F2\u0095M}h\u00D5\u008F\u00E7x*o\u0090\u00FC\u00B8X8\u00C7\u0089\u00E1A\u00F1\u00FA\u00E0YUa\\x0006\u00D4_t_\u00C0\u00DF\u00BB\u00E7\u00B3\u00EE\u0084\u00FE\u0083\u00FE\u00C3\\\u00BC\u00C9\\x001c\u008C\t\u009Dv\u0097\u00AEL!\\x0002\u00F4\u00BE{\u00C5#\u009F\u00FE\u00B8\u00B1\u009Ew\u0099\u0088\u00A5\u00C9\u00D2\\x0007\u00F2?T\u00E7\u00BF\u00EC\u00C3)\u0095>\u00F9UO_l\u00DDz\u00E1\u00B7|$I\\x0014\u00EFR\u0094\u00C9\u008F\u00A8\u009EN\u00C5\u00A6\u00B4\u00FE\u00864a\u008E\u0093\u00DA\u00E5\u00BF^\u00F1\u00C8'\u0095c\u00B7\u00F6\u00A1\r\\x0003\u00A6\u00B5\u00F6z}\u00E7\u00807~\u00BDw\u00CE\u00A1\\x0007\u00DE9:\u00F4\u00FD\u00B6\u0087>hwNm\\x000f\u00BF\u00AF\u00A4\u00A1\u00EF\u00B6\\x000e\u0099{\u00F8\u0096\u00DC\u00F6\u00CA\u0091+{\u00BC\u00BC\u00D1\u00B7w\u00C1\u00F1\u00DD\u00D1\u00C78N5\u00F7\u009F|\u00BE\u0085\u00F8\u00F5\u009A\u00C8\\x001b!r\u00FC\u00A2\u00FE\u00BE\u00F1z\u00DE>\u00F4\\x001f\u00F7~\u00E5\t\u00B0\u00C8\\x000c\u00E0\u009FB\u00FER^\u0093\u00AA\u00DC\u00FEkG\u00AE\u00BA\u00CC\u00FC\u00F3\\x0017.\u009E3'Mj\\x001c\u00D5\u00BD&_\u00DF\u009Co\u00FE)r_~\u00D1\u00AD\u009A4\u00F9\u00AA/\u00FBpq\u00FD\u00F8HtI\u0089e\\x0004.'M\u0080\u00EF*g\u00BA\u00CE\u00B5\\x001d?y\u00DB\u00C8\u008F\u00A8#Qw\"UQ5q\u00AF\\x0017V\u0093\u00D4`\u00B2\u00C3o\u00AA\\x001a\u00FD\u00B3\u0093:\u00F1\u00FBb\u00ED/0\u0085\u00BD\u008A\u0085o\u00DE\ne\u00A2\u00FE\u00DEw\\x0004\u00FC\u009D\t\u00A0\u00FF\u00A0\u00FF\\x00143@\u00C5\u00A4\u00FFx\u0087\u00C1R\\x0000,\u00EDK\u00F1\u00E7\u00C7\u00BF\u00FAn\u00CDnoi\u00F2U\u00BF\u00FC/\u0093\u00F2[\u00E7\u00E4\\x0017\u00DC\u0098_0 \u00BFqB\u00BEiE~\u00E3\u00C4\u00FC\u00C2\u0081\u0090&YSf\u00BC4\u00A1y\u00C0\u0093\u00A7:?\\\u00B4\u00FE\u00CF\u008Fy\u00C3\u00EB;\u00FA\u00BDy\u00A4\u00FF\u00D4\u0096\\x001e/\u00FE|\u00C7\u00D4\u00DD\\x000f\u00BF\u00CC)U=\u00B3\u00E0\\x000fw\u008E\u00A3D\\x001f\u00EC\u00DA\u00A5\u00C7\u00F3+hA|1\\x000fa\u00A0s[\u00A8\u00E6\u00FES\u00B4j\u00C6OC\\x0002T\u009ENA\u00FD\u00C3\"\\x0000\u00FEa\u0091\\x000cV\\x000e\u00F8\\x0007\u00E3\\x0016\u00D6Y\u00B2\u00FC\u00BD\u00A5\tmG\u00D1\u00E3\u00A5\u00F5W<4\u00AF\u00EB\u00DCo\\x0016\u0097\t\u00FD\u00A9\u0099\u00DB\u00F6\u00BD\u00F9\\x001f\\x001e\u00CD/\\x0019\u00A4\u00CC\u00E3\u0090\u009B\u0084yJ\u00BE$\u00DF\u00DD\u0091\u00BF\u00F8[\u00BE\u00EBx~\u00F5\u00B3N\u00D2\u00A4~V\u00EFK\u00F4\u00BDf5\u0094\u00C7~\u00EF\u009B\u00D3\u00AB\u00D7\u009Cz\u00C3\\x001f`\u00F9S\u00DAOP\u009E\u00CA\u0097\u00B5z\u00A7N\u009F\u00D9\u00D7\u00D0\u00C87\u00BCa\u00FF\u0081\u00D3\u009Dg\u00E9\u0088\u00A5\u00B7\u009C>\u00D3\u00D5|\u00E4\u00D8\u00E5\\x000f\u00BE\u00D5\u00E3\u00A5\u00BA\u00BE\u0093\\x000f\u0091u\u00EF=no\u00D5\u00E8\u00B5.\u00D2\u0084D\u00C9\u00CA=]\u0094\u00E8\u0083]\u009A\u00DC\u00FE\u00E6n\u00EA\u0099\\x000eVS\u00F6\\x0001PE\u0086\u00AF\u00A7\u00CEW\u00C9,\u00B3\u00AF\u00F2Yf_W\u00F1U\u00BE\u00AF\u0092Q\\x0019\\\u00E0\u00EFN\u00C9\\x0017\\x001f\u00F4w\\2\\x001d\u00D2\u0092'\u0091\u00FC5i2\u00EC\u00FDVz\u0091\\x0015\u00A6\u00DE\u00E3\u00EB)\\x0002\u00F1\u00F1\u0089_\u00DA]&\\x0005ir\u00FE\\\u00BE\u00EBD\u00FE\u00D8\u0096\u00FC\u00E2;\n!&?>\u009E?&\u00F1b\u00FE\u00DC\u00E9\u00FC\u009A\u0091$M\u00CE\u00FF\u0096\u00B7\u00A4\u00BD\u00A4Kz\u00CD\u00D9\u00AB\\x001do\u00A8y\u00CA\u00F8l\u00CDi?Wx$\u00A08\\x0010I\\x0013\u00BDV\\x0001k\"YaK\u00B6\u0080\u00F5\\x0017\u00A9\u0093`\\x0015\u00F0{V}C\u00E3g\u00F3k7\u00FC\u00B2\u0089\u009D\u00B8y\u00CB\u00B6\u00F9\u00F3k\\x001b\\x000f\\x001c\u00B2K\u0093\u00B3\u00DD\u00E7iN\u00E7\u00FE\u00D1\\x001fSw\u00A2NE\u009D\u008D\u00A2Y\u00AF\u00FB\u00D7\u00F2\u00FB\u00E75?\u00F4^\u00AB0U\u00DC1n\u00C5\u00EE\u00B3\u0094\u00E8\u00830\u00C3\u00D5\u00FF\\\u00D2wr\u00B3\u00D2o\u00A7\u0088\u00D2\u00E4#\u00FD<\\x0013\u009D\u00E8\u00D0\u00F3Kz\\x001c\u00F5/\u00EF]\\x0000\u00F0/\u0086\\x0000\u00FAO1\u00F4D\u00E7r\u00D2\u0084\u00E0\u00DA\u00C6\u00F1\u00BE\u00B9\u00E6\u009E\u00AF(\\x0001\u00B0\\x001bw5\u0091\\x0010\u00E9\u00B6%f\u0090\u00C8\\x000e)\u00FF\u00BAO\u00E6\u00BF\u00BB\u00AF MhNg\u00FB\u00DB\u00F9\u008E\u00C6\u00FC\u00EE\u008F\u00F3_\u00DF,\u0094&O^\u00D2\u00BBf\u009F\u00D9\u00F6\u00AB*\u00A1\u00E6)r\u00A4\u008CX\u00AA~\u00D6$\u0082\u00F6\u00B9\u00A1\u00A6\u00D7%O.c\u00A7|\u00AF\u009DN_i~\\x0017\u00B54\u00BE\\x0004\u00CAf\u00F9V;b\u00BE.!\u0096\u0081]\u00B7p\u00EE\u0088\u00A5\u00DA\u00F1\\x0011O\u00AA\\x0017{r\u0099R\\x0013\u00F5\u0083Z\\x0019\u00FBUl:\u00CC\u00AF\u00D5OJ~\u00D2%\u00A4N\u00B6\u00ED\u00D8E\u0089}`5\u00B7\u00F4\u0096\u00AE\u00F3\u00BF\u009D8\u00D5\u00B9d\u00CD6\u00EAN\u00D4\u00A9\u00A8kQ\u00BB\u00F6\u00B9\u00D5wO\u00DF\u00F7\u00D0;\u00AD|\u00EA\u00FD\u00CF\\x0005\u00A4EX2\u00A4\t\u00FB\u00B3\u00F73\\x000bx\u008D\u00D2\u00EC\u0086\u009Ec\u00B6\\x0014\u00AB!\u008Ca\u00C5S\u00C7\u00C8g\\x0010\\x000eU\\x0011\u00C9 \u00D4\u00DF~_\u00C0_\u00DET\u00A0\u00FF\u00A0\u00FF\u00C8\u00F7\\x0016{\u00CEh\u00FA\u008F\u0087\u00D7Dy\u00AF}a\u00DD\u00D5\u00C3\u00E7*\u00BA\u00E4\u00BC \u009D\u00BF\u0090\u00A7t\u00E1LG\u00FE\u00E8/\u00F9-5\u00F9\u00857\u0099\u0096\\x0010S\u00E8\t\u00C5\u00C3.\u00E8O\\x0007[?\u00FE\u00DC\\x0005r\u00F2\u009BROR\\x0000\u0096\u0083\u00F5sz\u0092\u00BD_\u00AAd;_\u00AFJ\\x0004\u00F5\\x0012\u0085\u00CFKG\\\u00F2\u00D4\u00F7\u00CA\\x0011\u00ED\\x0003\t\u0094\\x0011K\u00F9<t\u0096Z\u0082Z7\u00DB\u00B7\u00AC(\u0092D\u00F5,\u0083^\u00B81\u00AB\u00C4>(\u00D7\u00A5s\u00B5\u009A(\u00DE\u009D\u00A7\u00BE?\u00A7\u00D4\u00AD\u00F7\u00CC\u00FA\u00FC9\u00BA\u00B4\u00F1A\u00CB9b\tk\\x0008\u00E5\u00D1\\x001bU(\u00DF\u00B8P\u00F4\\x001f\u00EC\u0090\\x0003\\x001f\u0091\u00AF\u00FF\u00B6\u00ED\u008A(\u00A1\u00B4{\u00CF>\u00E3,{\u00879}\u00A6\u00BB\u00A5\u00B5\u00FD/\\x000f\u00BDu\u00DD\u00A8u\u00F4\\x000b\u0091$Mz\u008D\u00DD\u00D9\u00FB\u00C55\\x0016ib(\\x0012\u00A6K\u00F8\u00A4\u00B8O8\\x001d3x\u00F6\u00A1k\u009E\u00F9\u00D1\u00DB5\u00E2.)d\\x001e\u00CB\u00C0oE\u00F2j&pN\u00D4?0\u00BAPN\\x0004\u00FFP0\\x0006.\\x0004\u00FC\\x0003\u00A3\\x000b\u00E5\u00C4h\u00F8{xMz\u00BF\u00BE\u00F7\u00CA\\x0011\u00DF\u008E\u009E\u00B3\u0084\u00CCL\u0097(1\u00B3w\u00BEe\u009B\\x0012\u00F7*\u00DC\u00DA\u0084\u00D4\u00C9\u00E2\u00DB\u00F2_\u00F5s\u0095&\r3\u0099\u00DF\u0083\u008C:g\u00DAy3\u00CF}V\u00D4\\x0006\u00E9\u0080%O\u00A9\u00BAA\u00952\u00DC\u00BF\\x0011K,%X\u00BE\u00B5\u00C9#\u008B\u009E(\u00FCi-\u0087+\u00D9\u00F8\u008A}\u00B0\u00D7Ax\u0095\u00F4\\x001e\u00DC\u00BA}\u00D7\u00A7\u00F3k)\u00ED\u00DD\u00D7h(!{\u0087\u00E9\u00EC:\u00DF\u00DA~\u00F2\u00A9\u00DC\u0097\u00D4\u00A9\u00A8k\u0091\u00A4\u00E83\u00F1\u00E0u\u00CF,'\u0085\u00C1\\x000b\\x000eyiBg\u00D1\u00E9THQ\u00EA$\n\u00D5\\x001f\u00CA3/Y\\x0008\u00EA/\t*\u00A2l\u00E0\\x001f\\x0011X\u00C9b\u00C1_\\x0012TD\u00D9\u00A2\u00E1\u00CFI\\x0013\u00E1l\u00CE\u00E8-\u0097\\x000f\u00FBx\u00F3\u009E\u00C3\u00B4\u00C2\u0082\\x001c\u00F2\u00F6\u00C4B\\x001d\u00CF\u00B7l)\u00E8\u0092\u00EF\u00EE\u00C9{\\x0017\\x0017q\u00F2\u00F7|\u00FB\u00CE\u00FC\u008A'H\u009A\u00D8\u00E7\u0083\u009E\u00B8\u00A4\u00D7\u00CCz}\u009E\u00A8~v\u00CF^\u00B3\u00F7\u00B0\u00FF\u00B3\u0099#\u0087\u00CF$J\u009EX\u00BA\u00FC\tE\u00A0hy\u00F6\u00F2K\u009A\u00D5\u00B3\u00B4#\u00FCg\u00DB\u00CA\u00E7B\u009C\u00A69\u009Bv]\u00CB\u00D5\u00E9r\u00C6\\x0011\u00CB\\x0007>\u00A7h\u00DA\u00CB\u00DEp\u00FE\u0088=\u00B8\u00B8\u00C8#\u00EE\u0097\\x000b\u00FD\u00DB_7o\u00FDt\u00FE\u00E7\u00BB\u00F6\u00D4\u00EF\u00DD\u00B7\u009F}`\u00F5\u00B7\u00F7\u0096\u00B3\u00E7.\u00D0\u009C\u00CE\u00F2\u009Fw\u00FCq\u00F8\u00C7\u0095\u00AFl\u00E93\u00A9\u00B9\u00EF\u0094#\u00D7\u008EZ{\u00C7\u00B4\u00BD\u00B4g\u0089\u0091\u00DC&t\u00FE\u00B9\u00C0\u00E2b\\x0019\u00F8\u00C6\u00E6\u00CA\u0097\u00E9\\x0017\u00C9%\u00C2J\u009C\u00F2\u00B0GK\u00A2\u0084\u00BE\u0093\u008F(i\u008A\u00EF$Sx\u00F0<\u00A8\u00BF\u00D7\\x001d\t\u00CEV\u00A2WhqN\\x00129\u00D1\"\u00B9\\x0011\u00E8\u00FFi\u00EC\u00FFn^\u0093>\\x0013\\x000e\\\u00F7\u00FC\u009A\u00EB\u0086\u00CF\u00ED\u00BA\u00F0\u00DB\u00D9\u00F3\u00E2\u00C4\u00EC\u00DC9C\u009A|sg\u00BE\u00A5.\u00DF\u00B1_\u00F1\u00940'\nm\\x0005\u00BB\u00F6\\x0005Z<\u00ACH\\x0013\u00DB\u0094\u00D0\\x001e\u008A\u00D7 !\u00C2\u008E\u00EFUE\t\u00FB\u00BFq\u0084\\x0004\u0081\u00FA\u00D9\u009A\u00F3\u0092Kz\u00D64\u00A8\\x0005\u0092F!\u00A5\u00C2\u00C5\u00C1\u0098\u0084\u0082\u00ED[\u00A6fxId\u00D1@\u00F4\u00A7V\\x0007\u00FD\\v\u00F5'\u0097\u00EB\u00C7\u008D\\x000c\u0082\u009C\u00C2i/\u008F\u0083\u00FE\u00D5\u008C\u0087\u00BC\\x0010M\u00BD\\x0005\u00A9\u0098D9\u00E4&!9\u00B2u\u00FBNV\u00A5\u009D{\u00EA\u00E9\u00CF\\x0003M\u0087\u00E9\u00B3\u00B0\u00CFt\u009C\u00E9:\u00DC\u00DAv\u00D5\u00D09\u00D4\u00B5\u00A8\u0083\u00D1Pu\u00C3\u00EB{z\u008DZm\\x0011\\x001c\u00ECOS\\x0018\u00AC9\\x001e\u00C5\u00C8\u00FF[\u00CDW?\u00BD\u00DC<\u00E4\\x001d\u00EEG\u00BB\u00BA\u00F9Hz\\x0008\u00AD\u0084u\u0089dl\u00B5^\u00D7W\u00E5)3\u00EA/\u00A5,\u00A5\u00EF\\x001d\u00F8\u0087\u00CB\u00D3oi\u00E0\u00EF\u0097X\u00B8\u00F9c\u00C1_\u0097&\u00EF\u00B5\u00DA\u009F[\u00B2\\x0019W>\u00F5\u00CD\u00ABs\u0097\u00D2\u00EB\u00EF\u00D9s\u00E2\u00C4\\x000c^A\u009A,\\x001c\u0098\u00DF[\u009B\u00DF\u00B7\u00C0\\x001at\u00A2\u00C6\u009A\\x0008\u00A7\u0084v\u00B1hR\u00F5\\x001f\u00A9\u008D.U\\x0016\u00EC\u00D2'\u008F\u008Co{>9\u0082;\u00DE0\u00A3W\u00AF\\x0019{\u00B59&E1\\x0014\u00D6\\x001f\u009B\u00C5\rS<\u00FC\u00B7\u00DA\u0091^3\u00F7r\u00A13\u00BC\\x001e\u00A2K\\x001bu(\u009C;\u00E2[\u00CBqVIAN\u009A\u0096*\u00D4_\u00D8d\u00CB\u00C1\u00D0E\u0083\u00CCE\u00C3\u00CAs\u00E2\u00D4\u0099}\u00FB\\x000f\u00F2M8p\u00E8p\u00C7iZ\u008EsQ\u00D8g\u00D8\u009C\u00CE\u00D3\u0093\u00BF\u00BAr\u00C477\u00BC\u00B1\u009B\\x0004D\u009F\u00DC\u0081\u00EB\u009E]voM\u00E3C\u00EF\\x001e\u00B5$\u00934\u00B1}kd\u00EE\u00F1\u00FC\\x000f\u00B4\u00C1\u0089\\x001f-b~\u00F6|)\\x0012\\x001f\u008A\u00C7\u00EF\\x0013\\x001e4?\u00EA_\u00DE\u009B\\x0002\u00FE\u00E0_\\x000c\\x0001\u00F4\\x001f\\x0011=M\u009A<\u00FC\u00DEQZ\u0084\u00C9'\u008AR\u00EC1\u00FA\u00D7\u00CB\\x001e\u00FE\u00A0\u00A1\u00F98\u00D9\u00983\\x000e\u0089Y\u00B8n~B\u0087mmb\u008B;q\u0092&Al$E\u00A1\u00FA4\u00FFA\u00AE\u00E2\\x0010^\u0083\u00A2$\t\\x0008\u00FBLg\u00F7\u0085\u00F6\u008E\u00CE\u00BA\u00AD\u00FB\u00A8kQ\\x0007\u00AB\u00CA\\x001d\u00EC3\u00B9\u00B9r\u00CC\u00D6\u00DE/\u00AFy\u00F0\u009D\\x0016K\u00BA\u00E1\u009F_i\\x000bs\u00FE\u00F9\u00D5\u00D0wZ\u009C\u00D2\u00CD\u00E37\u00F7xi\u0083\u00B5\\x0003On\u00A6\u0092e\u0092\u00E5D\u0097?eJ\u00B3\u00E7\u0091/\u00DF\u00F4\\x0000\u00CAU\u009E.'_>\u00EA\\x001f\\x0005\u00AB(\u00CA\u00E4\u00EF\u0094|\u00F9\u00E8?\u00EE\u00AC\u00D0\u00FF\u00E5\u00FB\u0092<\u00AB(\u00CAT\u008CBe\u00E5%UUU\\x000f\u00BDw\u0094\u00AFJ\u00D5\u00A4\u00A6\\x001b\u00C6\u00EF\u00BB\u00FA\u00D9\\x001f{=\u00F6\\x0016s\u0099\u00F8\u0091&\u00E2\u00DF\u00F9\u00BB\u00B0~\u00FCYz\u0093\u0096N]\u00E7.:\u00A5o\u009F\u00BC\u00E4\u0089%\u0085o\u008D2%M\u00A6g6\u00F9J\u00BA\u00E4t\u00A9\u00BF\u00E5\u00AB\u00B4\u00D6\u00DF\u00A9\u00CFt\u009C\u00E9>\u00DC\u00DA~\u00DD\u00F0Y\u00D4\u00C1z\u008F\u00DF\u00D7gRS\u00D5\u00C4\u00C6k\u009FYv\u00DB\u00E4\u009DB\u00F1\u00A1\u00E9\u0095\u00B7[\\x001etHC\u00E64_9bI\u009F\\3\\x0005\u00AF\\x0018\u00A9/\\x0005\u00B2P\u0092\u00B0\u00DC\u00F2\\x000f\u00A1\\x000f\\x001d\u00C0\u00AE\u00AE&\u00ADJT=\u00CF\u0084\u00FA{\t2\u0099\\x001b\u00AA\u00E4\\x0001\u00F4Q_B\u00FFq\\x001b\u0085\u00E24\u00FE\u0088\u00BD&\u00E42\u00E99f\u00EB\u009F\\x001e\u00AB\u009DS\u00BB\u0086tIg\u00B7c:{\u008E\u00FC\u00F6\\x0017\u00BB\u008Fpa\u00B0\u00CC_B\\x000bvh\u00FAC?\u00E4W?\u00C3\u009C(\\x0017\u00EA\u00C6\u00B3\u00CCH\\x0019!\u00E0\u00D4mN\u009D=\u00DFz\u00FC\u00D4\u00EBo/\u00B9\u00E2\u00B1Z\u00F2\u00970\u00C7I\u00AF7\u00F6\\\u00F3\u00CC\u00B2\u00BFN\u00DCv\u00F7\u008C\u0086!s\u009B\\x001fx\u00FB\\x0008\u00EFAqq\u0099\u00B0\u00AFhN\u0087\u00B6q\u00A3\u009D\u008B\u00B9d\u00B2O\u00BC\u00AD2}\u00CEI\u00C9\\x00176\u00A2\u00F9\\x00121z\u00E6\u00A6>\u00A6Z\u00F15t\u00FF\u008C\u00FA[o\r\u00F8\u009B{8\u00FAO3m\u008F$\u00AB6\u00F0\u00FC\u00FA\\x001b\u0088\u00CA<\u00FE\\x0018\u00D2\u00A4\u00C5\u00E8\u00F4}&\\x001d\u00A2Q\u00FE\u00DA\u00E7W\u00DE\u00FC\u00EC\u0087m\\x001dg\u00C9\u00C0\u009CvNg\u00CE]\u00A4\u00D4e\u0097&+\u009E\u00C8\u009F=\u00A6\u00EC\u00C3\u00D6\u00B6=\u00FF\u00ED\u00DDL\u009A\u00B0\u00CC\u009E\u00C9\u00AF\u00E5\u00F6,\u00B0\u00C4\\x0019P\\x0006\u00DC\u00A5\u00DB\\x001c?\u00DD\u00B5\u00F7@K\u009F\u00A7\u00DE\u00A7nF\u009D\u008D\u00BA\\x001cu?\u00FAp\u00FD\u008B?_\u00F3\u00AF\\x0015W\u00FE\u00E3;\u008AD\u00B9r\u00C4b%=%\u0095\u00AE\u00E1\u00E7\u00BE\u0093\u009AL\u00C9\u00DFs(\u00AF\\x0018|\u00E6\u00B4\u00D4J\u00FEO\u00D4?\\x0014\\x0002\u00F2\u00C0\u00D1B\\x0001n)\\x0004\u00FC\u00A3\u00A0*_fb\u00F9\u00EB\u00D2\u00E4\u00DD#}\u00C9<\u00A8\u0089\"\n+G\u00FFrE\u00F5\u00A7\u00A3g}s\u0086DI\u0097[:\u00D3}\u00B1\u00EC\u00A9\u00B3\u00FB\u00A2%\u0095\u00BDJ\u00BE*\u0090\u00D6\u00FA\u00BB\u00F4\u009C\u008E3\u00E7\u008F\u00B6\u009F\\x001a\u0091\u00FB\u00E2\u008AG?\u00AB\u00A4\u0088\u0093\u0089\u00FB=^\\x0007\\x0003?`R'j=\u00DFx\\x0004\\x001c?L&\t\u00C5R\u00A9\\x0004\n\u00EA\u00AF\u008FK\u00CAM\\x0001\u00A9\u00FE`\u00D6\u00E8\u00DE\u00A7\u00A0\u00FF{=\u00CE\u00DE\\x000c\u00FD2\u00E7\u00F3\u0083\u00BF\u0080\u00BF@\u009A\u00F4|e\u00F3\u0095O-\u00BA\u00F7\u0085\u008Fv4\\x001c\u00A5\\x0017\u00DFS]n\u00C9nVq\\x0004\\x0004\\x0018\\x0001\u0097\u009E\u00D3q\u00F6\u00C2\u00F1\u00D3\u00DD\u00EB\u00B6\u00EC\u00BF\u00E5\u0099\\x000f\u00FE\u00F2\u00D4\u00A2\\x001e\u00AFl\"\u00C7\u0089K\u00F2\\x0016\r\u00BC\\x0001S>\u00FB\\x001a)d\u0087\\x0006\u00F7J\u00A2\u00FE\u00DCm\\x0002A\u00A7B\u00FF\u0091~\u0090\u00D1\u00B2\u00DE\\x000ci\u00D2B[jVM\u00D8\u00C3k\u00BB*\u0086\u00BC\u00D5\u00EF\u00D1\u00E9_,\u00DB\u00A8L\u00E5\u00B8\u00EA\\x0012\u00B2=Q\u0098\u00E1\u00D3]\\x0017}\u00A5(\u00EAPL\u0099\u00BE*O\u0099\u008B\u00B9V\\x0014\u00E7\u0086UwQ\u00CB\u00D4\u00C9{_\u00AD\u00A9|\u00E8\u00CD?<\u00F86-\u00B1)_\u00DA\u00D8\u00E3%\u00BF\u00A9\u008C\u00B5\u00B5_\u00DAo\u00E5)?\u00EA\\x001f\"\\x0001\u00F0\\x000f\\x0011f\u0080\u00A2\u00C0?\\x0000\u00B4\\x0010O\t\u008D\u00AF\u00D7vT\u00D1\u00C2\u0088\u0089\\x0007H\u00C2\u00EA+t\u00DE9Lk%*_\u00D9|\u00F53\u00CB\u0087\u008F\u009C\u00BA~\u00DB>E\u0094\u009C\u00FD\u00AD\u00C3+\u009D\u00EE\u00A6\u0090\u0082r'^\u00CA\u0094\u00BD2\\x0001*\u0090\u00D2\u00FA{v\u009E\u0093g.P\u00FAq\u00C3\u00AE\\x0007G\u00CE\u00AA\u00B8.\\x0012\\x0008\u0080\\x0000\\x0008\u0080@f\t\\\u00F5\u00F4\\x0012\u00DAQ\u00A2\u00F7\u00B8zZ\u0088cH\u0093\u00E6\u009Ec\u00B7_\u00F5\u00CC\u00B2\u009F7nf!\\x00022\u00BA\u0084l\u00CF\u00A9.\u00F2\u00DB#\u0081\u0080\u0080\u0080\u00A74a\\x0019H\u009D\u00A0#\u00E1!\\x0002\\x0001\\x0010\\x0000\u0081\u008C\\x0013\u00D8\u00B8e\u00E7\u0095O/!)B\u00CB6ui\u00F2vs\u00E5\u00E8MWTv\u00BC\u00E3l\u00C6\u00E9\u00A0\u00F9 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002%&\u00D0p\u00B0\u00E5\u00F2G>\u00ED1z\\x0013'M\u00DEi\u00EE\u00F1\u00F2\u0086?\\x000c}\u0087\u00FC%\u0092/\u00BB\u00C8\\x0006\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A1\\x0010\u00D8\u00BB\u00BF\u00B9\u00E2\u00C1\u00B7\u00AFi}U\u00EE@\u00C1kr\u00FD\u008Bu\\x0015\u00F7\u00BFE\u00A1\u008B'\u00C9\u00C7\u008E\\x0004\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A5\"\u00B0\u00BB\u00A1\u0089\u00E2lH\u008AP$\u00ACM\u009A(s\u00FF\u00D6t\u00A2\u00F3\\x0002\u00A5\u00E3\u00A7\u00CF\u00B7\u009F:\\x0017\u0087D5aU\u00B2W\u0095?R|\u00B5%/t\u00FA\u00EC\\x0005\u0096::\u00CF\\x0015\u0099X9\u00A7\u00CE\u009CG\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\u0088-\u0081p\u00C7|*\u00CD\u00DD\u009Ce\u00E1\u00DB\u00DD\u00FBH\u009A\u00BC\u00A5J\u0093F\u00AB4!\u00B7\u00CC\u00893\u00A6t\u00BC\u00F3B\u00CB\u00F1\u00AE\u0086\u00A6S;\\x001aNl\u00DEs<\\x000e\u0089jB\u00F5\u00A1ZQ\u00DD,\u00B55\u00FE\\x000c\u00A5\u00DA2\\x0017:u\u00F6B\u00DBI\u00E2sr\u00EB\u009Ec\\x001b\u00B7\\x001f->\u00D5m9\u00BC\u00E6\u0097f$\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00D8\\x0012\u00A0\u0081\u00BA\u00F8\u00D1\u009EJ\u00D8\u00BA\u00A7\u00B5\u00E1\u00D0I2\"dJ\u009C\u00CCYF\u008E\u00EFr\u0091&$\u00CD\u008Ew\\x0016R\u00FB\u00E9\\x000bM\u00C7\u00CEn\u00AF?q\u00B0\u00A5\u00B3\u00FD\u00D4\u00F9\\x0012\u00EF\u00F8\u00EEt9\u00AA\t\u00D5\u0087jEu\u00A3\\x001a\u00F2\\x0015f\u009F\u00C3\u00AA\u00B6\u00E7\u0085hs\u008E\u00C3\u00C7:\u00B7\u00EC:\u00B6\u00FF\u00F0\u00A9\u00F6\u008Es\u00A1\u00F0\u00D9\u00F0\u00A4\u00B2\u00C1?\u00FE\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0095\\x0000\r\u00D4\u00A1\\x000c\u00F8d8\u00C8|\u0090\\x0011!S\u00A2\u00EC\u00F6\u00C4\u00D9\u00DF\u00AC}\u00DEi\u0097&C\u00E75]\u00FB\u00C2\u00CF\u00BF\\x001f2\u0087\u00D4Y;\u0099v5\u00B5\u009D\u00BEp\u00B8\u00BDk[\u00FD\u0089\u0096\u00F6n\u00B6\u00B9\u00A7\u00B2\u00D4\u00B3\u00B8t\u00A4\u00BD\u00BB\u00C8\\x0012\u00D8\u00E9T\u0093\u00C3mJ\u00DD\u00A8\u0086TO\u00A3\u00CE\u00A1W\u00DB\u00E5B'\u00CF^h=\u00D1\u00B5Y\u00E9R\u00F4KC\u00E1\u00F0\u00A1\u00A6A\u009A\u00C4u,B\u00BD@\\x0000\\x0004@@#\u00C0\u00A4IX\u00E6\u00AC\u00A9\u00F5\\x000c\u0099\\x00122(dVxs\u0096\u00A9\u00CF;\u00F65\u00FD~\u00F0\u00ECkG\u00AD\u00EB=\u00BEA\u009B\u00D0\\x0019:\u00EF\\x0010\u00FDMG)>\u0083,=K\u00C7N\u009D\u00DF{\u00B0\u00E3\u00C0\u0091N\u00DA\\x0016V\u009D\u00E8!wS\u00B1\u00A9\u00F5\u00E4\u00B9\u00B0\u008A\u00A2\u00CA\u00EC?\u00D2I5\u00A4z\\x001au\u008E\u00A8\u00DA\u00C2\\x000b\u00D1\u0086\\x001c\u00F5\\x0007O44\u009F\n\u0091\u008F\u00D2(xM0\u00FA\u0081\\x0000\\x0008\u0080@\u00BC\t\u00D0@M#\u00F16\u00D1(a_S\\x0007\\x0019\\x00142+\u00BC9\u00CB\u00D4\u00E7\u00ED\u00F5\u0087\u00A4\u00A4Ik\u00C7\u00B9\u00AD\u00F5\u00C7\u00DB:\u00CE\u00D1\u00F6ka\u00DD\\x0000\u0092&\u0084>\u00AC\u00D2ZNtS\r\u00A9\u009E\u00FC\u00FD\u008B\u00A2\u00DA\u00C2\\x000bQC6\u00EFnm;\u00D9\\x001d\"\\x001fH\u0093x\\x000fG\u00A8\\x001d\\x0008\u0080\\x0000\\x0008(\\x0004B\u0097&G\u008Ew\u0091A\u00C9\u00B84\u00A9\\x0018<\u00FB\u00BAQ\u00EB\u00AA\\x000c\u00AF\u00C9C\u00F3\\x000e\u00D1\u00DFt\u0094\u00A2G\u008F\u009D\u00D2\\x0012\u00D9\u00E3_w\u00B5\u0093\u00DDU\\x0003Ph\\x000e,\u0084t\u00F4D7Y\u00DFP\u008A\u00A2B(\u00A6\u0084jH\u00F54\u00EAL\\x001f\u00A2\u00A8\u00B6\u00F0B\u00B4X\u00E9\u00E7\u00CDG$\u00F94\\x001e\u00E9X\u00B2z\u00BBL\u00C3\u00F7\\x001f<\u0081G\\x001f\\x0004@\\x0000\\x0004@ \u00CE\\x0004h\u00A0\u00EE\u00EC\n\u00CD22sF\\x0006\u0085\u00CC\no\u00CE\u00EC\u009F\u00E9=\\Y\u00FF!J\u00C7i\u00BAC7\u00DF\u00EE\u0085\\x0014\u00FF\u00AD\\x001a\u00E5\u00A9.\u00DDUk^|\u0081T\u00C2\u00B6\u00BD\u0087\u00AC\u00D2\u00C4\u0098\u00D0\u00B1H\u0093\u008D;\u00DA\u0088>\u00BB|(\u0089tC\u0088\u00D2\u0084\u00AAD5<r\u00A2\u00BB\u00F5\u00D4\\x0005\u0096\u00984\u00F1\u00AC6M\u00E9\u00AD\\\u00BFw\u00CEG?L\u009A\u00FB\u00CD\u009CO~\\\u00B5\u00A1\u00FE\u00E8\te\u00BD\\x000f\u00A5\u00E6\u00B6\u00CEY\\x001f-\u00B77v\u0083\u00F9Bt-\u00EAC\u00EB6\\x001f\u00A1M\u00EA<\u00C9\\x001cn?\u00F3\u00E8\\x000bs\u00AB\\x0006\u00BD^\u00BB\u00F4W\u00CF\u00CC\r\\x0007 M\u00E2<\"\u00A1n \\x0000\\x0002 \u0090\u00A7\u0081Zf\u00F0\u00F7\\x001c\u00F0\u00F9\\x000cdP\u00DC\u00A5\t\u00E9\u0092oVn\u00BD\u00FD\u00B1\u00E9\u00FD\u00EE\u009F\u00D4\u00FF\u0081)\u0096t\u00CFSo\u00ED?L\\x0011\\x000e\u009A54\u00CCb\u0080\\x000fNR\u00E3\u00E8\u00C9\u00F3G\u008Ew7\u00B7\u009D\u0099\u00F5\u00D1\\x000f\u00F7<5\u00AB\u00DF\u00FD\u0093\u00A9\\x000e/\u00BE\u00B9@1\u009D\u00ED]\u00F4m1\\x001a\u0085\u00A4\u0089\u00E3\u0084N\u00DB\u00E9\u00F3G;\u00B4t\u00F8x\u00D7\u00FA\u00ED\u00ADD\u00BF\u009Dv4qN\\x001f-\\w\u00DB#\u00B9\u008D\u00FF\u0094\\x000c0\u00CBF\u00DB\u00818%Z\u00F1\u00CB\u00B6HqIm\\x001d\u00E7\u00D7nm\u00F9f\u00ED\u0081\u00AD\u00FBO\u00B8_\u009A\u00BE\u00A5\\x001a\u0092\\x001f\u00AC\u00B5\u00E3<%Vs\u00CFj\u0093\u00F7\u00E2\u00AE\u00C7&U\u00DE5\u00E6\u0086{\u00C7U\u00DD\u009F\u00ABz`2\u00FD\u00D0?f/[\u00BB\u00EB\u00D0\u00B1\u00CE\\x0007\u009E\u009E\u00F1\u00F8\u00E8\u00F7\u00EC\u00D5\u00DB\u00C0]\u0088]\u00AE\u00FDT\u00F7\u00BA\u00CD\u00CDJ\u00EF\\x00145\u0087\u00AF\u00F9\u00D7?n\u00AE\u00BC\u00EB\u0095[\\x001f\u009F=\u00F8_\\x001f\\x001c\u00ED8gi\u0094q:;\\x000ei\u0082a\\x000f\\x0004@\\x0000\\x0004bN@\u0093&\\x000e\u00B6\u00CC\u00D3r\\x0019\\x0019\u00F8\u00F1\u00ED\u00E6\u00E6\u00B6S\u00DD\u0086\t\u00B6 \\x0003}k\u00F5\u009B\u00FD\\x001e\u009Cvc\u00F5\u00DB\\x0003\\x001f{\u009FOo\u00B9\u00F1\u00A6G\u00DF\\x001d\u00F4\u00EC\u0087\r\u00CD'\u008F\u00A9\\x0016\u00AA\u0098\u00E4T\\x0007\u00D2\\x001fM\u00C7\u00CE\u008C\u0099\u00F6U\u009F!\u0093\u00FA?Ts\u00D3\u00A3\u00EF\u00DC\u00FC\u00D8{\\x000f\u008E\u009A\u00FF\u00DA\u00EC\u00E5\u00AD\u00A7\u00CE7\u00B5\u009Du\u00A9\u00BC\u00E7W[\u00F7\\x001c\u00B4K\u0093\u0083\u00D7\u00BE\u00B0\u00F6\u00F7Cf\u00FB\u0095&\\x001f|\u00B5\u00A6\u00E7]\u00A3\u00AB\\x001e\u00C8\u00F5x\u00C6\u00C6\u009D\u0087=\u00EF\\x0007\u00DB\u008C\u00C4=[S[\u00D7\u0082\u0095\u008D,mm8\u00EE\u009E\u0099\u00A4\ti\\x0011\u00BE\u00CD\u00EE\u00D2\u00E4\u009D\u00CFWR\u0085{\u00DD7\u00AE\u00CF\u0083\u00D3\u00FA\r\u009B}\u00D3\u00A3\u00F3\u00E8\\x001e\u00DF\u00F8\u00C8\\\u00FA\u00DC\u00FF\u00E1\u00E9\u00F7\u008C\u0098C_\u008Dxc\u00BE\u00FD\u00A2\u00F6\\x000bQ\\x001fZ\u00B3I\u0091&\u009E\u00AD~\u00E6\u008D\\x000f\u00EF\\x00191\u00FB\u00F3e\u00DB\\x0006\\x000c\u009F\u00FB\u00F3\u00B6&\u00F7\u00FC\r\\x0007\u008E\u009B\u009F\u00C9\u009D\u009F\u00BF\u00F0\u00C2\u00E7;#~N\u00E9\"3V\u00B5\\x001a\\x0017\u00B1\u00FC\\x0019\u00D1\u00C5\u00BF\\x001fqI\u00EF9\r\\x0011\\x0015\u008EbK@ \u00A2~\\x0012Q\u00B1%\\x0000\u0082Kd\u0086\\x0000\r\u00D4\u00EE\u0083\u00FFK\u0093>{\u00FA\u00B5o\u00ADo\u00F14\\x0010F\\x00062(\u00EE\u00D2\u0084\u00A6Nz\\x000f\u009A\u00D0\u00FF\u0091\u00B9\u00DF\u00ADihn?\u00DB\u00AEz\u00FA\\x0017\u00AE\u00DC=\u00F0\u00F1\u008F(He\u00E9\u00BA}\\x0003\\x001e}\u00F7>U\u009D\\x0018\u00EF\u00EA\u009E\u0082\u00C0W\\x0006\u00BA\u00E8\u00F7\u00EBvS\\x001d\u00FA\r\u009Bu\u00D3\u00DF\u00FF=\u00F0\u00C9\u00CF\u009E\u009E\u00FC\u00FD\\x0007\u008B\u00B7n\u00DC\u00D5BWl9I\u00E9\u009C\u00AF\\x0002\u00F9\u00CC$M*\u0086\u00CC\u00BE\u00EE\u0085\u00B5U\u00E3\u00F7\u00E9[\u00AE\u00CD;x\u00DD\u00A8\u00B54\u00CDC\u00AB]\u00D4\u00D2\u0095D\u00FA\u00E8\u00E7\u00ADG)\u0096\u00A2\u008D\u0096\u00C0\u0088\u00D2\u00FB_\u00FEt\u00FD\\x001d/\u00F7\\x001e\u0092\u00EB?|\u00F6\u00BF&\u00D7\u00DCv\u0096\u00CFF\u009B\u0082\u00D8\u00D3\u0091\u00F6.\u009A\\x000f\\x0013~e\\x001c$\u00C5\u00B7j\u00F3\\x0011C\u009Dl\u00A9?\u00EE\u0092\u00BFn\u00EBQZ?L~$J\u009E\u00D5^\u00B9a\u00EF\u00B5\\x001b\u00D5\u00F3\u00BE\u00F1\\x0003\u0086\u00CF\\x001a\u00FF\u00F6\u00CAu[\u009Bw\\x001e8N\u00FF\\x001f?o\u00C5\u00CD\u008F\u00BD\u00DB\u00F8\u00BC\u00BE\\x000f\u00CF\u00E93t\u00D6\u00D3\\x0013\u00BE\u00A6\u0086X.\u00CA_\u0088]\u00AE\u00AD\u00A3{\u00CD\u00AF\u00CD\u00A7\u00CF\u00FE\u00E6\u00DE\\x001cRc\u00BD\u00EFyu\u00C2\u00BCeT\u00CF\u00BEC\u00A7O\u00FBp\u0095S~Fo_\u00A3\u00A44i]5\u0083\u0097\\x0013\u0096?\u00FD\u008D\\x0010eQ&yH\\x0013w\u00C9=w\u00C3\u009C\u00DE\u00A5VzV\ta\u00FD[\u00E9\u0093\u0085\\x0005}m>n\\x0013\u00DEP&a\u00F6\\x000b\u0094\\x0015\r\\x0001\\x001a\u00A8\u00DD\\x0007\u00FF\u00BE\u00F7\u008D%\u00E38\u00F0\u0091\\x0019s?[\u00DDr\u00BC\u00DB\u00DDL\u00D0\u00B74\u00F8\u00FF\u00F4k\u00F3\u00B1\u008En\u00C3\\x0004\u00DB?\u00D0\u0084N\u00AF\u00FB&\u00F4\\x001b\u00FE6Y\\x0013\u00F6-\u0099\u00F6e\u00EB\u00F6\u00F4y\u00A8F\r\u00F88\u00FF\u00ED\u00EA\u00DD\u00FD\u0086\u00CD\u00BD\u00FB\u009F\\x001fPi\u00CCN\u0085\u009Bh*g\u00F4\u009B_\u00F6\\x001e2\u00A5\u00DF#\u00EF\u00DE\u00F4\u00F8'7=\u00F1\u00E9\u00E6=\u00AD\u00EA\u00B5\u00CEQ\u0095\u00C8/\u00D0r\u00E2\u009CK\u00FD\u00DD\u00BF\u00DA\u00B2\u00FB \u00F9G\u00C8K\u00D2{\u0082]\u009A\u0090\u00F09\u00A1\u00A5\u00E667i\u00F2~\u00ED\u00EAko{\u00B1\u00D7\u00A0\t}\\x001f\u009A\u00F5\u00AC\u00A2K\u00BA\u009C\\x0014\\x000c\u009CjO\\x0004=s\u0092\u00FE\"u\u00F2\u00D5\u00CA\u00C6\u00AFV(\u0089\u00D4\u0089\u00D3)$\u009EHBi\rVk\u00EER\u00ED\u009B\\x001ex\u00ED\u00FA\u00BB^\u00EB\u00FD\u00C0\u00F4o\u00DA\u00C7\\x0017\u00D8p\u00F8\u00D4\u00BD\u00FF\u0098\u00DB\u00E7\u00A1\u00D9\u00FD\u0086\u00CF\u00A3\u00F4\u00F4\u0084E\u00F6\u00CB\u0099.\u00A4\u00F6\t\u00EAC?\u00FD\u00DAd\u0097n\u0087Z;?\u00FBf\u00FD\u00AB\u00D3\u00BExy\u00CA\u00E7\u00A3\u00DF\u00AC}\u00E2\u0095\u00F7\u00AE\u00BB\u00E3\u0095\\x001f74P\u0099O\u008C\u00F9\u00F0\u00C6a\u00D3\u00C7\u00CC\u00FC\u00F6\u00E57\u0095oss\\x0017\u00FF\u00B2\u00B3\u0089&\u00A4\u00F8\u00CB\u00EDkl\u0097\u00F3\u009A\u0084(M\u00CA\u00A3L MB\\x001d3K/M\u00B8n\u00A3\u00B8\u00F6\u00D4\u00BC\u00EF-\u00BF\u00F3\u00F3\u00C2\u009Fj\\x000eM\u009D\u00F0\u00C7)\u0093\u00ED,s)\u00A1RBa \\x0010\\x000e\\x0001\\x001a\u00A8]\u00DE\u00DBiH\\x001fp\u00FF\u00B8\u00AA\\x0007\u00A6\u0091\u00A7\u00BC\u00CF\u00D0\u0099C\u009Fo\u00F9\u00BA\u00DD\u009E\u0086\u00EF\u00A7_\u009A\u008E\u009D\u00EC6L\u00B0\u00FD\\x0003E\u00B9\u00F6\u00B8w\\\u009Fas\u00E9\\x0003\u00FB\u0096\u0094\u00C7\u00D2\u00D5;{\r\u009E\u00FCC\u00DD>\u00B2\u00AD';/\u00CC\u00FA\u00E4\u00A7\u00AA\u0087\u00DF\"\\x0011\\x0013X\"\\x0014N\u00D4\u00C5\\x0000\u00BB\u00D6\u0091\u00E3\u00E7\u009B\u008F\u009D\u00AD~\u00F1\u00BD\u00DE\\x000f\u00CE\u00E8W\u00FD~\u00FF\u00C7>\u00A6\u00B4\u00FB\u00E0\tR$d\u00F56\u00EF9\u00F2\u00D2\u0094/H\u00A3\u00B8\u00D4\u00DF\u00FD\u00AB-\u00BB\\x0004\u00D2\u00E4\u00C0u/\u00AC\u00A9\\x00182\u008B4\u00C1\\x0011\u00AA\u0081\u009Ahbe\u00DD\u0096\u00A3\u00B4\r\ti1Kz\u00AFv\u00F55\\x001bYy\u00CF8\u00AAb\u00F5\u0098/v4\\x001e?p\u00F4\u00CC\u00FE#\u00A7(\\x0006\u0087\u00A5\u0083G;\u00EDg\u00D1\\x0011U\u00C1(\u00E2\u00CE\u0092\u008E*\u00CD>g$Uat/\u00DF\u00D0\u00CC\u00A4\tS'\u00C2\\x0002\u00A9\u0086TO\u00A3\u00CE.\u00D5^\u00F2\u00D3\u00F6\u00ABo\\x001dUy_.\u00F7\u00EEJ\u00BE(\u00AA\u00EA\u00ED\u008F\u00E6\u00AE\u00BB\u00EB\u00B5\\x001b\u00EE\u009F^\u00F5\u00D0[U\\x000f\u00CF}j\u00DCB\u00FB\u00B5\u00EC\\x0017j=\u00D9\u00BDjc\u0093\u009DOn\u00EE\u00A2\u00ABny\u00BE\u00FF\\x0003\\x0013\u00FF\u00F6\u00E8\u008C\\x001b\\x001f\u009E:\u00F0\u0091\u00E9\u00C3^\u00FA\u0090*Ie~\u00B9l\u00D3m\u009Fus\u00F5,\u0092\u00D2\u00B7=6\u00EB\u00FA\u00BB\u00DF\\x00188|\u00EA\u00C6\u009D\u00CD\u00FC\u00E5\u00EA\u00F7\u008B\u00A4\u00C9*\u00E3\u00FD\u0093\r\u00F6\u0096\u00F7\u00CE\\x00193\u00F8\u00D7S\u00C5\\x0002\u00B0i \u00C3bpo\u00A6\u00BC\u008D`\\x000f\u00A9\u009B2Q\\x000c\u009E\u00F6\u00AFw\u00EF\u00DE\u0097\u008C\u00F8^{\u00AE\u00C9\u00E3a\u00FC3\\x000e\u00D2wN\u00C7E\u00E5\\x0014\u00BC&\u0085\u00B3\u009Cgx\u00845aE\u00B0\u00D3G|o\u00B1\u00CE\u00CAa\u00AA\u009Bz\"_\u00C7\u00BCzH\u00BB\u0092\u00FD\u00D2\u00E62\u0095\u00F6\u00BAV\u008F\u00AB\u0097Z\t\\x0006\u0088]\u00BBp\u00A2\u00D7q;8\u00A7\\x0012\u0084\u0090\u00CD\u0095\u00B0\u00B4V\u00A9\u008F\u00B0\u0096\u00C2\u009B\u00A5^w\u008Eq\u00DBu\u0080\u00EA\u00DD6Q\u00B497\u00DC\\x001dw\u008E\u00DFZf,\u00E13\t\u00C7t\u00A2\u0094h\t\u00D0@-4\u008E\u00C6`\u00DEo\u00F0\u00EB\u00BD\\x001fx\u0093\u00DEu\u00FB\u0092:yhV\u00AF!\u0093GO]\u00B8\u00EB@\u00BB\u00D0\u0090\u00B1\u0083dP\u00C8\u00AC\u00F0\u00E6\u00CC\u00F2\u0099\u00AC\u00E7\u00F5w\u00BF\u00DE{\u00E8\\x001c\u00FA\u00C0\u00BE\"[\u00F9\u00ED\u00EA\\x001d=\u00EE\u00CB\u00DD\u00F0`M\u00CF!S{\u00DC3^\u00FD<\u008B\u00CF@f\u009D\u00FE\u00E4\u00932\u00F9\u00A2\\x001bz\u0097\u00CBY\u00BE:|\u00FC\\x001c\\x0005\u009A\\\u00F7kt\u00AD>\u008F\u00BC\u00DF\u00B7\u00FA\u00DF\u0094\\x001ez\u00A9\u00F6\u00FB\u00BA\u00FAi\u00EF-\u00EFu\u00DF\\x001b=\u00EE\u009D@\u00AD0*\u00E6\u00F7\u00BA\u009BI\u009A\\x000c\u009Eu\u00ED\u00A85\u00BD\u00C7\u00D7\u00EB\\x0013:s\\x000f\\7rM\u00C5`E\u009A\\x001c>\u00A1\u00A5Cm]k\u00B7\u00B4\\x0010}\no\u00E1\u00D3\u00BC\u00F9+\u00AE\u00BC\u00E5\u00B9k\u00EFz\u00AD\u00E7\u00907o\\x0018:\u00FB\u00AF\u00F7\u00AF\u009F7`\u00E8\u0094>\u0083\u00DE\u00A8\\x001a\u00F4\\x001aK\\x0003\\x001e\\x001c\u00F7\u00C1Wk-'\u00B20\\x0019\\x0002d9\u00BE\u00BD\u00F1\u00E4\u00A2\u00B5\\x0007\u00BE\u00FE\u00C9\u0094\\x0016\u00FDt\u00F0\u00EB\u00D5\\x0007\u00BE\\\u00D1h\u00A4M{i\\x000b\\x0013kh\u00CF\u00DA\u00CD-TO\u00A3\u00CE\u00F4\u00C1\u00A9\u00DA\u0093\u00E6-\u00BE\u00EAo/\u00F5\\x0018\u00F4\u00E6/\u00BB\u008F\u00F2\\x0015x\u00F7\u00F3U\u00E4\u00D8xa\u00CA\u0082\u0097f|\u00F7\u00F2\u00CC\u00A5\u0094\u00E6~\u00B1\u00DE^sBa\u00B9\\x0010\u00F5\u00A1\u0095\\x001b\\x000f\u00D9\u00F9\u00AC\u00DD\u00BC\u009F.4\u00E4_\u00EF\u00AD\u00DF~\u0098*Lj\u008C$\u0097Qs\u00DA\\\u00BF\u00E5\u00F89Jo\u00F1\u00F3u\u00F7\u00E4\u009Ex\u00EDs\u00CB\u00B5\u0084\u00D2\u00C4x\u008D\u00E4\u00C6ww\u00AF\t\\x0013%\u00BA\\x000f\u009D3\u00B5I\\x0013*\u0088\u00D7\u00E5\u00FE4\\x001bu\u00CD\u00D2k\u00A6\u00D1\u00D0\\x0010\\&%\u0087\u00E8\u00B8C9\u009A4)\u0094\u00AB[t\u00FB\u0098\u00E2V\u0093\u0082\u00C5\\x0014K\\x0013V*\u00AFy\u008C+\n/\u00AD\\x000b\\x001dN\u0084\u0099\u0085\u0085\u00B9z\r\r\r\u00C6\u0081\u00C2\u0085\u00CC\u0085x\\x001e\u00E7+\u00D20g\u0084\\x0012\u0081\u00E3V\u0082\\x0013d\\x0007ag\u00A6G)\u00EDq\u00BAY\u00EAu\u00B5\u0082\u0098\u00A0\u00E1\u00FF(\u0088\\x0013K\u00B7\u00D1\u00F4\u00B2\u00C9kb\\x0002e\u00F3\u008E\\x0018\u00BA\u00D8\u00E4$\u00B1\\x0017\\x001b\u00AD\u0085A\u00E9 \\x0010\u0088\\x0000\u0093&vK\u00A1\\x001d\u00E98\u00DF\u00FB\u00BE1=\u00EE\u009Bt\u00C3\u0083\u00B3o\\x0018:\u0087\\x000c\u00E5\r\\x000f\u00D4T\\x000e\u009E2\u00E0\u00E1\u00A9\u00B5K6\u0099\\x000c\\x0019g^\u00C9\u00A0\u0090Y\u00E1\u00CD\u0099\u00E53\u00AD\u00B9\u00F6\u00CE\u00B1=\\x001f\u00A8\u00A1\\x000f\u00C6W\u00E4\u00E4\u00F8\u00E6\u00A7]K\u00D7\u00D6\u00AF\u00DEth\u00C9\u00DA\u00BD\u0095C\u00A6\u00F7z\u00F0-#\\x0003}\u00DB{\u00D0\u00B8\u00BE\u00F7O\u00EA\u00F7\u00E0\\x0014>\u00D1q\u0097\\x000b\\x001d>N\\x000bJL\u00A9\u00B9\u00FD\\x001c\\x001di\u00A7\n\u00DC1\u00B6\u00E7\u00FD5\u00BD\\x001f~\u00AF\u00F7\u00C3\u00EF\u00AB\u00E9\u009D\u009E\u00F7\u00CF\u00EC1hJ\u008FASoy\u00FC\\x001dCB\\x0004\u00B8\u00EE\u00A6]\\x0007I\u0084\u0090\\x0014\u00A92\u00A4\u00C9\u00D0y\u008D\u00D7\u008E\u00FA\u00E9\u00F7\u0083k\u00C8;\u00D4LN\\x001b5\\x001d<\u00D6\u00B5fs\\x000bmjb\\x0011\\x0004=n\\x001bu\u00D5\u00AD\u00AF\\{\u00CF\u00A4\\x001eCfT\\x000e\u00A9\u00A9\\x001c2\u00B3\u00C7\u00E0i\u00F4\u00E7\u00B5w\u00E7\u00F8\u00D4\u00E7\u00C17\u00EDJ\u00E2\u00D0\u00B1\u00B3\u00CA\u00D2&\u00B3\u00C2\u00F8\u00FA\u00A7\u0083_\u00ACh\u00F4L\\x000bV\\x001f\u00B0\u00F7\u00835[Z\u00A8\u009EF\u009D]\u00AA\u00FD\u00D2\u0094\u00F9W\u00DE\u00FAJ\u00D5\\x00033\u00B6\u00EFo7*@\u00ED\u0095\\x000cc&\\x0014\u0096\\x000b\u00D1\\x001e-+6\\x001c\u00B2\u00F3\u00A1\\x0002\u00BF\\\u00BE\u0085\u009AO\u00DE\u00BC/\u0096o\u00B5\u00D7\u00B9\u00E1\u00C8\u00A9g\u00C7r\u00E5\u00AD/\u008Fx\u00E3\u00F3\u00DDMJ\u00BC\\x0012\u009F\u00F66\u00B4\u0099\u009F\\x0014\u00F3KeA\u0090xK\\x0013.x\u00D6\u00E5\u0085V\u00F9\u00CA\u0092S\u00FB\u0093\u00B7\u0097\u0086#\u00C0\u00E4r`5\u00D5\\x0014\u0081mFA?\u00E0P\u008E6\u00A1S\u00F0\u009D\\x0014\u00BC\r\u00D6\u00B1\u00C2\u00A9\\x0004\u00CB\u009C\u0090\u00934\u00E1\u00BD$\\C,g\u00EB\\x0017\u00B1U\u00883\u00F8\u0096\u008A\u00D8\u00C64\u00A1\u00E8) \u00B2i/'t|-\u00E5 [\u00DA\u00C8\u00D7LTi\u00C7\u009B\u00A5\u00F9{\\x0004\u00BA\u00CC|\\x0005K\u00B7Q\u00F2\u00BByMT7\u009FI\u00B7h\u008E?\u008B\u0096\\x0011\\x0014\\x001b\u00C8p\u00E0$\\x0010\u0088\u0096\\x0000\r\u00D4\u00C2\u00C1_\\x001b\u00CCO\u009D\u00EFy\u00F7+\u00D7\u00DC5\u00BE\u00C7\u00E0\u00E9d(\u00B54x\u00FA\u00F5\u00F7\u00BDIs\u00FA&\u00A3\u00C0\u008D\u00FFdP\u00C8\u00AC\u00F0\u00E6\u00CC\u00F2\u00B9\u00B5\u00E3\u00C2\u00D5\u00B7\u008D\u00E91x&}\u00E0\u00BF2d\\x0004\u0099\u00D7\u00EB\u00EF\u0099\u00DC\u00EB\u00FE9F\\x0006\u00FA\u008A\\x000e\u00F6\\x001a4\u00A5j\u00E8\u009C>\\x000f\u00CFeI\\x0011.\u00BA\u00A1\\x0017_\u008E&.\u00B8\u00D4t\u00FC\u00DC\u00A1\u00B6\u00EE\u00A3\u00A7\u00CE\u008F\u009C\u00F8\u00E95w\u00BEVy\u00CD\r\\x000f\u00BD\u00A3\u00A5\u00A1o\u00F7zp^\u00AF\u00FB\u00DF\u00EA\u00F5\u00C0\u00DC\\x0019\\x001f\u00D7\u0091\u00CB\u0084\\x0015\\x0018\u00E0\u00BA\u00BF\u00EE\u00B4{M\u00E6\\x001d\u00BC^\r\u0083%\u00A5\u00D3t\\K\\x0007\u008Eu\u00AD\u00DEt\u0084\u00E8[\\x0002n'\u00CE]\u00FC\u0097[_\u00BD\u00E6\u009E)\u00D7\u00DE7\u008D\u00D2\r\\x000f\u00CC\u00ECI\u00E8\\x0007M\u00E3\u00D3\r\u00F7\u00CF\u009C\u00F2\u00EF\u00D5\u00F6H\u00DD\u0083\u00C7\u00CE\u00D2\\x001ak\u00CB\u00F1\u008D{\u00DA\\x0017\u00AC:\u00F0\u00E5\u00CAF>}\u00B5\u00AA\u0091\\x000e\u00F2z\u00E5\u00E7\u009Dm\u00F6\\x0002\u00A9\u0086TO\u00A3\u00CE\u00F4\u00C1\u00A5\u00DA\u00FE\u00DB\u00E8k\u00EE\u009ED\u00B1\u00C4\\x0001B\u0088\u00ED\\x0017\u00A2\rT~\\O\u00BF\u00A3`\u00E5\u00C3\n\u00DF\u00B4\u00F7\u00E8\u00B0\\x0017?\u00B8\u00F2\u00B6\u00B1\u00AF\u00CF^\u00CC\u0082\u0095X\u00A2\u00E9\u009B\u009B\\x001e\\x001c\u00FB\u0097[F\u00CE\u00FAT\u00C0\u00872D#M\u00B4\t\\x001e\u00C1\u00C3\u00EA\u00ACL\u00AC\u00D6\u008B3\u00DD\u0096\\x0019\u0083\u00C2\u00DC\u0083y\u00DE\u0084\\x001dw*\u0087)\u0083\u00EF\\x000b3F\u00FA\\x000c\\x0011\\x0015\u00C2M5\u00900p,AV\u009A\u00F0V\u00B5P\u0098e\\x0016D\u009F\u00B10I\\x0013\u0087<f\u0090\u0082\u00D9\\x0012\u00AB\\x001cp\u0082\u00A7\\x001d7J(\u00C8 q\tv\u0099\u00A1\\x001f\u00B1\u0089\r\u00BD\u008E\u00C2/\u009C\u00CB1}c\u00FA\u0083/H$!\u009C\u00A5\u0089]\u0098\\x0018\\x0000\u00CD_A\u0099DkOQzh\\x0004\u00984q1%\u00D7\u00DD\u00F9\u00E2_n{\u00FD\u009A\u00BB\u00DF\u00BC\u00E6\u009E\u00A9F\u00BA\u00FF\u00F9\u008F\u00D7m?\u00ECt\\x0016\\x0019\\x00142+\u00BC9\u00B3|>\u00DAq\u00E1\u00AA[G_\u00DFt\u00FA \u00CC\u00A6f\\x0018c\u00C9@BAq\u00B7\u00DC\u00F3\u00E6\u00F5Cf_\u00BF\u00A2K\u00E8\u0088\u00CBU,_\\x001dl?GV\u0095b6\u009E\\x001b\u00FF\u00C9U\\x001b}\u00ED]\u0093\u00A8\u009C\\x001e\u00F7\u00CF\u00B3\u00A4\\x0017\u00A7\u00DFx\u00F4,\u00AE\u00DF\u00EB\u00FE\u00B2\u0093\u00BC&\u00B3I\u008A\u00F4\u00E1V\u00E8\\x001c\u00B8~\u0094\\x0012kb\u0091&\u00AB~=,\u00A4?n\u00CE\u00B7\u00B9}\u00FCUwN\u00BE\u00EA\u00AE)\\x000f\u008C\u00FC\u00F8\u00E7\u00ED\u0087\u00D9st\u00C3\u00CE\\x0016#m\u00AE?&\u00A4/\u0094&\u0094\u00F3`k\u00D7\u00FE\u00A3g\u008D\u00D4x\u00B4k\u00CB\u00D9\u00E5\\x001b\\x000f\\x001b\u00D2d\u00DD\\x000eq\u0081TC\u00BB4\\x0011V{\u00D1\u00CA\u00ADW\u00DC\u00FC\u00E2UwLxu\u00F6\\x0012a\u00DD\u00C6\u00CD\u00FAj\u00F8s\u00B3g|\u00B0L\u00F8\u00AD\u00FDB\u00D4\u0087~\u00A8;\u00E0\u00D2;\u00E9^R\\x0008\u00CB\u00A3\u00A3?\u00E2\\x000b\\\u00BF\u00A3\u00E9\u00B2~O\u008F\u009B\u00F3\u009DS\u00EF\u00DC\u00DBp,\\x0002\u00AF\u0089\u00A34qV&\u00B6\u00D7\u00F0\u00E8\u00A4\u0089\u00D7\\x0012\u00E2\u00E2\u00A5I\u00C1]\u00A1\u0094\u00A5\t(\\x0007cn\u0093&\u00EE\u00D5SU\u0094m\u00C6\u00C7\u00A741\u00BCO\u00AA<S/\\x0018ki\"\u0094\\x0010\\x000e\u00D2\u00C4E\u0097\u00A8\u00CD\u00B6LRF\u00BEP>4\u00E3\u0084\u0082\u00B2L\u0080\\x0006jwir\u00CD\u00AD\u00A3.\u00BFe\u00CC_\u00EE\u0098\u00F8\u0097;r\u0094z=0c\u00CE\u00E7u\\x0014\u00AE\u00E1\u00A2f\u00C8\u00A0xJ\u0093\u00BF\u00DC\u00F22\t\\x001d\\x0017i\"\u00CC\u00C0T\u00C2\u009Fo\\x001d\u00EFW\u0097\\x001c8\u00D6\u00BD\u00FF\u00E8\u0099\u00C6\u00A3\u00B4\\x0013\u00E9\\x000f\u00FE\u00EBKW\u00DF9\u00E1\u00DA\u00FBf^7x\u00CEuC\u00DEb\u00E9\u00911\\x000b^\u0098\u00B6l\u00C9\u00BA\u00FD\u00A4K\\x001a[Mn\\x0002\u0092)\u00BE\u00AE\u00ABH\u0093!\u00B3(\u00EC\u00B5j\u0082\\x0011k2O\\x000b\u0083%o\u00CC\u00A1v-\u00D1eV\u00FEr\u0098~\u008BX\\x0018\u00E8\u00FB\u00FA\u00ECo.\u00BF\u00F5\u00B5?\u00DD>\u0081\u00D2\u00F3\u0093\u00BF\u0096\\x000c\\x0006>\u00D0J[\u00B2HE\\x000e\u00AF\u00D9\u00DA\u00FA\u00F9\u008F\u00FBYZ\u00BB\u00E3\u0098S\u00F9TC\u00AA\u00A7Qg\u00FA\u00E0R\u00ED^\u00F7\u00BCz\u00C5m\u00AF\u00FF\u00E9\u00F6\u00F1\u00B5\u00CB\u00B6Z\n\u00FC\u00F7\u00C2\u00B5\u00BF\u00EF\u00F3\u00C4e7>\u00FF\u00C4\u0098\u008F\u0085\u00D7\u00B2_\u0088\u00FA\u00D0\u00F7?\\x001fp\u00E2C\u0085PH\u00F6e7>W\u00BB|;}\u00AE\u00DB\u00DE\u00F4N\u00ED*V\u00F2\u00ED\u008FN\u00BA\u00FB\u00A99N-\u00DA\u00B3\u00AF\u00B0\u00BD\u0088\u00FA\u00E4\u00876\u00A1#\\x001a\u00F3]\u0094\u0089\u00A34\u00B1\u00AD\u00AC\u00E1&nLV\u00DCa\u00B6\u0082\u009F\u00F4\u00D0bX\u00CD\u00CE\\x0016\u00DB\u0080\\x0017\u00864\u00D1L=\u00A7L\u009C\"[df\u0098\nU4+\\x0008\u00B7\t\\x001d\u00B5\u0091\\x0016\u00C1a\u00AA\u008Ei\u00E6\u00C6)\u00A7\u00B9v\u00DC\u00F4\u009A\u00A3\u00D7\u00C4&r\u00D4\u00EB8\u0096#\u00E35\\x0011;7D\u00D2\u00C4K\u0097h\\x001d\u00BC\\x0010\u00DC\re\u0092e{\u009F\u00A0\u00B6\u00D3@\u00ED2\u00F8\u00D3\u00F0~\u00E5_\u009F\u00FB\u00C3\u00CD/\u00FF\u00F1\u00B6\t\u0094F\u008C\u00FBjS}\u009B\u00A7\u0095$\u0083Bf\u00857g\u0096\u00CF-'/(/\u00D8wM9z\u00F2\u00820\\x001b\\x001dg\\x0019(\u00A7%CS\u00BB\"\\x0014\u00E8\u00FF.\u00E5\u008B\u00CB\u00EC\u00B8p\u00FD\u00ED/S\u00B1\u00B9m\u00DCUwO\u00BD\u00E6\u00BEY\u00D7\u00DC7{\u00D4\u00D4\u00A54\\x0001B\\x0006\u009D\u00FC\\x0008\u008D\u00AD\u00AA[\u00A1\u00A5\u008Bt\u008C\u00BD\\x0004\u00F9\u00EBn\u00DC\u00A1H\u0093\u00EB_X\u00D3\u0087\u0097&\u00D7\u00ABa\u00B0\u0087O\u009C#\u00EF\rK\u00FB[\u00CF\u00AE\u00FC\u00A5\u00F9\u00F8\u0099\\x000bGhoZQz}\u00F6\u00B7\u0097\u00DD2\u00E6\u008F\u00B7\u008E\u00FB\u00E3\u00DF\u00C6\u00FE\u00E3\u008DO\\x000fR\u00BC\u00A7CN\u00E38\u00B5\u00A1\u0085\\x0016\\x0001\u00B9f\u00A3\u00D8\u009C\u00D5[ZjW\u00ECgi\u00ED\u00F6V\u0097;J5\u00A42\\x000f\u00B5\u009Fc\u00C9\u00BD\u00DAK\u00D7\u00EE\u00BEl\u00E0K\u0097\u00DF:\u008E\u00FCl\u00CFN\u009C\u00BF\u00BCn\u00EF\u00AF{Z\u00BE\u00AF\u00DB\u00F3\u00CF\u00D7\u00DF\u00FFC\u00DFT\\x000cx\u00FE\u008F}uY]\u0083\u00B0zt!\\x0002b\u00C0\u00A1\\x000fGNt-\u00FF\u00B9\u00D1\u0089\\x000f\u00D5y\u00E4\u00C4\u008F\u00AF\u00BCeTs{\u00F7\u00E7K6\u00FDy\u00E03\u00FF\u00D9g\u00C4\u00B0\u00E7\u00E7\u00D2R\u00AB\u00B7?_u\u00D9M/\u00FC\u00B2\u00BB\u00C5\u00DE.\u00BA\u00B4/i\u00C2\\x0005\u0089\u00A86\u00A00\u00AE\u009B\\x0004\u008D\u00E9;>\\x000c\u00D6M\u0099X\u00EC(\u009Br`\\x001aB\u00B1^~\u00C2`yk\u00C7\u0095\u00A3YG\u0093\u00DB\u0081\\x0004\u0091\\x001a\\x0004j\u00F9\u00E7P\u0082\u00D5\u00C0\u00F2\u00E6\u0099\u00CD\tq\u00A2G\u009B4\u00B1\u00C6\u00C3\\x0016\u00B2\\x0014\u00E2O=\u00F3\u00A8e\u00A9\u00B9\u00F8K\u009A\u00DB\u00C6\\x0017l\u00AC\\x0011\u00B2\u00CD\u0090\u00A8\u00B9\u00F8F\\x000b\u009DSj\u00C9\u00EE\u00F0\u00B9,\n\u00BCB\r\u00B5\u00CF\\x0005\\x0012\u00DF\u008F\u00F0\n\u00835-\u00C42\u00FE0\u009A\u00EA0\u00EDb\u0093&\u00F6\u00C5`\u00BA\u00D8\u00B6\u00ECq\u00C2\u00FE\u00C4lN\u0082,s\u00E6\u00ABJ\\x0003\u00B5\u008Bq\u00A4\u00B1\u00FD\u00F2\\x001b\u009F\u00AE\u00B8\u00E9\u00C5\u0081\u00D5\u00B3\\x0017\u00FC\u00B8\u00D3S\u0094\u00B0\\x000cdP\u00C8\u00AC\u00F0V\u00C6\u00F2\u0099\u00F2\\1p\\x0014\u00F9`\\x001aZ:\u0085\u00D9\\x000e\u00B4v\u00B2\\x000c\u0094\u00D3\u00A5\\x001c\u00CF\u00AF\\x000c\u0093\u00DA|\u00FC\u00DC\\x000b\\x0013?\u00A52\u00FF\u00AC\u00EA\u0092\u00AB\u00EF\u0099~\u00F5\u00BD3\u009Fx]qF(\\x0006\u00B7\u00AD\u00FB`\u009Bf|\u0099\u00FD-&m\u00D8q\u00A0bp\u00CDu\u00A3~\u00AA\\x001a\u00BF\u00D7\u00D8r\u00AD\u0091\u00FE\u00A6\u00A3\u008A4i\u00D3\\x0012\u00E9\u00A0\\x0015\\x001b\u009Ah\u00B39\u0097\u00C5Ecg.\u00FA\u00C3\u00C0W.\u00FB\u00EBk\\x00188\u00E6\u00A7\u00CD\\x0007<\u0097!Q\u0099\u00D4$\u00F7l\r-g>\u00FF\u00B1\u0081\u00A55\u00DBZ\u00DD3S\r\u00A9L\u00A3\u00CE\u00F4\u00C1\u00BD\u00DA\u00D3\u00FE\u00FD\u00C3\\x001foy\u00F5\u00B2[^\u00AF\\x0018\u00F8\u00CA\u00F6\\x001f\u00F9\u00FB~\u00CF\u00FE\u00EF>#\u00FE\u00A3\u00CF?\u00E9\u00F3\\x001fo\\x0019;\u00F3\u00935\\x0014\u0087,\u00BC\u00A2\u00FDB\u00B4\\x001f\u00C9\u00B2u\u00FB\u009D\u00F8\u0090\u009C\u00ECq\u00C7\u00C8\u00FB\u009F\u009D;\u00B6\u00E6\u00DB\u00FF\u00E8\u00FB\u00EC\u00A0\u00A7gO\u00FD`\u00C5e\\x0003_\u00A6\\x0015V5\\x001f\u00AF\u00F8\u00C3\u008D/\u00CC\u00F8h\u00B5\u00F0B\u00BB\u00EB%\u00BD&\u00FC\nbuh\u00D7\u00E2\n\u00D9\u00C2\u009C\u00C2\u00B2au\u00BB\t\u00EE]\u0094\u00B3\\x0017\\x001e\u00CAD7p\u00DA$\u00C3\\x001c\u00B6\\x0016\u0097\u00FD\u00E3\u0082AL\u0081'\\x000e\u00C7\\x000b\u00D1\\x0018\u00BD\u00E7\\x0018\u00E5\\x0014^\u00DC\u00F9\u00B3\u00DCV\u0099\u00D8jb}\u00F7\u00E7\\x0016\u00C9\u00B2\u00A5\u00BB\u00BC?\u0086\u00B7\u00D6\u00C6\u00C8j\u00BF\u00B4\u00ADLScY\u00F5l\u0086\u00DFZ3\u00BEX^!9\\x001c\\x0017\\x0000p*\u00C1\\x0019~\\x0001\u00B2\u00BE\u00E2\u00B7\u00C0\u00D2\\x0014\\x000e\u00A3\\x001f\\x0016\u00DE,o\u00AF\u0089@B\\x0008\u00BB\u009B\u00E5`\u00A1#\u009A\u00BF\u00D0\u00FB&\u0094I\u00E6\u00CD}\u0092\\x0000\u00D0@\u00EDn\\x001c\u00E9\\x0007\u00DA^\u009F\u00FD\u00DD\u00FE\u00963\u009Ef\u00D1\u00C8@\\x0006\u0085\u00CC\no\u00CE,\u009Fi\u00C5\u00EF\\x001fo\\x001a\u00F5\u00A7;r[\u00F6\n\u00DE\u00D8iU\u00C7\u00C2\u00EF7\u00FFq\u00E0\\x000b&ir\u00E2\u00BCK9\u00F2_\u00D1\\x000c\u00D4\u009D\u009Fz\\x0005\u00CDL\u00DD\u00F5\u00E6\u0095\u00F7\u00CC\u00A0t\u00D73\u00CA\u00C4\u00C2!]'\u00C8\\x0017\u00E5\u0099s\u00C3v\u0092&\u00EA\n\u009Dq\u0085\t\\x001d\u0092&\u00ABI\u009A\u0090D:pLK\r-g\\\u00DFD\u009B\u00B7\u00DA\u00D7\\x0011\u00F1G\u00C6\u00D6,\u00BE\u00EE\u00EE\tw\u00FD\u00E3\u009D\u00DD\u0087:\u00DCs\u00D2\u00B7\u00FB\u008F(\u00F7\u00C9=\u00DB\u00C1c\u00DDK\u00EA\u009A\u00BFZy\u0080\u00FC%\u009E\\x0005R\r\u00A9\u009EF\u009D\u00E9\u0083g\u00B5?_\u00BA\u00B9\u00EF\u0083S\u00FE0p\u00EC\\x001f\\x0006\u00BE\u00FA\u0087\u009BF\u00FF\u00FE\u00C6\u0097\u00E9\u00FF\\x0003\u0086\u00CD\u00F8\u00F2\u0087].\u0097\u00B3_\u0088\u00B6\u008F[\u00BAv\u00BF\\x0013\u009F\u0086#g\u00AE\u00BD\u00F5\u00F9\u00FF\u00EC\u00F7\u00FC\u00EFo|i\u00EC\u00ACo\\x000f\\x001d\u00EB\u00A6\u00C2Wo:\u00F0\u00D7G\u00A7+\u0092\u00A8\u00FF\\x000b\u0093\u00DF\u00FBQx\u00B9\u00DD\u00F5G\u00C3x@-\u009BE\u0088\u008B\u00A4L\u00BC\u00FF\u00DC\u00F2\u00A7\u00C0s\u00E1\\x0015\\x0014\"Us\u00BB\u00E9\u0097:\u008D\u00CB\\x0014\u00B0\\x0004\u00ABT\u00F1{Y?\u00F9\u009D\u00AE%_\\x0007\u00F9\u009C~\u00EA\\x0015F^\u008F~\\x0012\u00F4\\x0012\\x0011\\x0015\\x001b\u00B4:8\\x000f\\x0004\u00DC\\x0008\u00D0@\u00EDi\\x001c=\u00ED\u0097%\\x0003\\x0019\\x00142+\u00BC9\u00B3|\u00A6\u00FC=\u00EF\\x0019\u00FB\u00A7[)\u008Eb\u00D2\u00E57\u008F\u00BE\u00EC\u00C6\u0091\\x0014\u0084\u00C0'\\x0012.W\u00DC\u00F2j\u009F\u00A1\u00B3)\u00A7K9\u00F2_\u0091\\x0004\u0099\u00FA\u00EE\u00D2+\u00FE\u00F6\u00DA_\u00EE|\u00F3/wM\u00A7\u00D5=\u008A\u00E8\u00D1E\u0082|929\u00D7o\\x0013yM\u00AEW\u00A5\t\u00AD\\x0011j<\u00A6\u00A5}-g\u00BF\u00AF;D\\x001b\u00CC\u00B9\u00ACe\u00F2\u00FB\\x0015\\x0019l\u009A\u00AF\u00F1{\u0096K~\u00AA!\u00D5\u00D3\u00A83}\u0090\u00A9\u00F6\u00CE\u0083'\u00DF_\u00B8\u00F1\u00E5\u00E9\u008B\u009F\u0099\u00F0\u00D5\u00CB\u00D3\u00BF\u00FDp\u00D1\u00A6]\u0087N\u00B9\u00D7\u00CA~!\u00DA\u0085\u0096z\u0092\\x0013\u009F\\x0003\u00AD]c\u00A6\u00F5\u00AF\t_,\\\u00B9\u008B/\u00B9\u00E1H\u00E7\u00C4y\u00CB\u009E|\u00ED\u00B3\u00A5\u00EB\\x001a\u0084W\u00DC\u00B5\u00B7d\u00D2\u00C4s\\x0013Xz\u00D5\u00B6{\u00F3\\x0003\\x000cX\u00C5\u0097S|\t\u00F6\u00E8\u008A\\x0000\r\u0091?%\u00C5\u00D2$\u00A2=\u00D1\"*V\u00FE\u0096!'\\x0008\u00F8 @\\x0003u\u00B8\u00C6\u0091\u00CC\\x0001\\x0019\\x00142+\u00BC9\u00B3|&\u00C7\u00C3\u009COW\u00F5\u00BE\u00EA\u009F\u00EF\u009C\u00F2\u00A7\u00DBs\u00BAm\u00A2=\u00D1o\u00AD\u00CC\u00FB\u00E2\\x0017\u00CA\u00E9R\u008E\u00AF\u00AFH\\x0015L}\u00FF\u00C7{\u009F\u00FE`\u00EC\u00EC\\x001f\u00C8|\\x001fPK\u00AE?b2\u00BB\u00BE\nt\u00CA\\\u00A7I\u0093\u00D5U\u00E3\u00F7\\x0014&t4i\u00A2\u0084\u0098h\u0089\u00AE\u00FD\u00FD\u00FA&\u00FAE\u009B\u00A6\u00F6sA\\x0012\u00ED\\x001cgK\u00FB\u008Et\u00D2ji\u00FB\u00F1`G\\x000e\u00B5wS\r\u00EB[\u00CE\u00EE?vNK\u00AD\n\u00B2\u00A2\u00AAm4\u0096\u00AB\u00BC\u00E0B\u00C7\u00CEQ\\x001fZ\u00B2\u00A6\u00916\u00BF\\x000bVy\u00F1Y\u00ED\u00E7v\u00EDm\u00F1\u00F1|8f\u0095\u00F2\u009Ax]\u00C84\\x000b \u00D8b\u00D4\u00EB|\u00FD\u00FB\u00E2\u00CB)\u00BE\\x0004S|\u008Cl\u00C5\u0083\u00E7K\u00B14\t\\x000e\\x0005g\u0082@j\\x0008\u00D0@M\u009B\u00C1\u00878\u00F8\u0093\u0095Y\u00F2S#\u0099\\x0015\u00C3\\x0004\\x000b?\u0090\u00C7\u0082\\x0005\u0096:%\u00FA\u0096\u00F2\\x0014lb\\x0018\u009FY@\t\u00C5\u0091\u0090\u00AA\u00A0\u0092\u00F7\\x001e\u00E1l._\u00BE.\\x001e\u00DC\u009B\u00E0\u00F4m\u00DD\u00D6\\x0003\\x0015\u0083j\u00AE\u00FE\u00A7>o\u00E8\u00B1&\\x000f\u00CFk\u00EC\u00F1\u00C2O\\x0018RC\\x0012dk7K\u00F5G\u00CE\u00AC\u00FA\u00A5\u0089V\u00C0\u00D2A#(\u00A6\u00C8\\x000f\u00F5\u0087;i\u00CE\u00A8\u00C8B\u008C\u00D3\u00F74wR\r\u00A9\u009EF\u009D#\u00AA\u00B6\u00F0B\u00E4y[\u00B9\u00F1\u00E0\u0081\u00A3\u009D!\u00F2\u00A1\u00A6\u0085$MR3\\x0002\u00A0! \\x0000\\x0002 \\x0010;\\x0002\u008A49\u00A5\u0084\u0082\u0086\u0095\u00F64\u009D&\u0083Bf\u00857g\u0099\u00FA\\\u00B7\u00B5\u0091D\\x0008I\u0091\u00BE\\x0013xi2\u00EA\u00A7?\\x000c\u00AE!\u00CA\r\u00AD\u00DD,\u00ED;\u00DAU\u00B7\u00A3uk};\t\u00C3b\u00C2n\u00F9s\u00F7\\x001e\u00EE\\x000c\u00B1\u00B4_\u00F6\u00B4S\r\u00A9\u009EF\u009D#\u00AA\u00B6\u00F0B\u0087\u008Fw\u00D3>.\u00BF\u00EE9\\x0016b\u008B\u0088\u00D5\u00CE=\u00A1xMb\u00F7$\u00A3B \\x0000\\x0002 \u0090\\x001a\\x00024P\u0093\u00CB<,\u00CBH\u00E5l\u00D8\u00D9J\\x0006\u0085\u00CC\no\u00CE2\u00F5\u00F9\u00E7\u00AD\u008D\\x0015Cj\u00AE\u00E1\u00A7>\u00864yh^\u00E3\u00F5\u00EA\n\\x001d\u00F2\u00DB\u00EC;J\u00A2DI\u00F5-]\u00DB\\x001b;Vll\u00DEq\u00A0\u0083\u00D6+\u0087\u0092\u00B6\\x001f\u00E8\u00A0\u00B0\u009AP\u008A\u00DA\u00BA\u00FF\u00E4\u008F\\x001b\u009A\u00A9\u0086\u00F5G\u00BB\u00F6\u0091\u0090b)\u0082j\\x0017.\u00D4\u00D2e\u00C0\u00A1\\x000fM\u00ED]\u00FB\u008E\u009CZ\u00B6\u00EE\u00C0\u00F6\u00FD'\u008AjQ[\u00F7\\x0001#\\x001d\u00EB\u00DE\u00B9\u00E7Hj\u009E^4\\x0004\\x0004@\\x0000\\x0004RI\u0080\\x0006j\u00DAo\u00BE\u00A8\u0091\u009FYUu\u00F0\u00DF\u00D2pb\u00E9\u00CF\\x0007\u00C8\u00A0(fE7\u00C1\u00C9\u00F8`\\x0018_\u00D5\u00FE\\x0016\u0093\u00D6\u00D9\u00BD&\u00864\u00A1\\x0008\u0097z\u00B2\u00EEz\u00DA\u00DB\u00D2\u00B5\u00A9\u00E1\u00C4\u008F\\x001b\u009Ah/\u00F9\u009D\u0087N7\\x001e\u00EB.>\u0091c\u00A6\u00C8B\u00A8&\\x001bv\u00B7\u00FD\u00B0\u00A1\u0099\u00EAF5\u00E4+\u00CC>\u0087Um\u00CF\\x000b5\\x001d\u00EF\u00DE\u00D9x|\u00D9\u00CF\\x0007\u00EAv\u00B6\u00EE<x\u00AA\u00C8v\u00B1\u00D3!MR9\u0090\u00A1Q \\x0000\\x0002i\"\u00A0H\u0093\u008E\u00F3\u00C5\u008F\u00F9d8~\u00DE\u00D1\u00BAd\u00DD\u0081\\x001d\u008D\u00C7\u00C9\u00A0\u00D8\u00CDYv\u008E\u00AC%\u00AF\u00C9\u00E0\\x001a\u00F2\u0092\u00F41\u00F651bM\\x001a\u00DB\u00CE\u00ED%\u00D3\u00CE\u00A5=-][\\x001b;\u00D6mo\u00FD~\u00C3\u00A1\u00EF\u00D6\\x001dtOK\u00D6\\x001d\\x000c+\u00B9\\\u0088jB\u00F5\u00A1ZQ\u00DD,\u00B55\u00FE\u00F4Um\u00E3Z\u0096\u00CA\u00FF\u00B0\u00E1\u00D0\u00CF\u00DB[\u00B75v\\x0008\\x0005\\x0010\u00EB1Jg:rj\u00FD\u008E\u0096\u00EF\u00D7\\x001fX\u00BCj\u009F\u0091\\x0016\u00AD\u00DA\\x001745,^}\\x0010\t\\x0004@\\x0000\\x0004@ \u00BE\\x0004V5\u00F0\\x0003\u00BE\u00E5\u00B3\u00FC\u00E0\u00BFt]\u00E3\u00CF\u00DB[\u00F66\u009F\"S\u00E2d\u00CE$\u008F\u0087(b$\u00AF\\x0018n6\u0092&\u00D6X\\x0013\u00C5k\u00F2\u00C2j\u009A\u00E6\u00A1\u00C5\u00C7\u00F5-4\u0095cJ{\u008FtQ\u00DA\u00DD|F2\u00EDj>S|r\u00BF\\x0016\u00AB\\x0012\u00AB\u00E7^=\\x0015Ym\u00E3\u008A|\u00E5\u00F7\\x001c\u00E9\u00A2d\\B\u00F8\u0081\u00B6\u00C1mj\u00EF>\u00D4\u00D6E?Ml\u00A4C\u00C7\u00BA$\u0093\u00E9\\x0014\u00B5\u00A8\u00A6\u00B6\u00A2\\x0012\u00FDDd\u00F1I\u00BE\\x000e\u00C6\u00B5\u00E4Oq\u00CFY|\u00E5\u00A9\\x0004\u00F9\u00CA\u00A0\u00FE\\x0016V\u00E0\u008F\u00FE#\u00FF\u00F8\u00D8sf\u00A4\u00FF\u00D8\u00C7\u00FC`\u00E3?\\x0019\\x000ee\u00CCo\u00B7\u009A]\u00BB!\u0096<\u00E2n\u00AD$\u00BF\u0095\u00BC\u0096\u008B\u00FD\u0095/\u00C1\u00C8\u00B9vK#\\x0005\u00BC\u00F6\\x0018\u00B5\u00BA\u00AF\u00B1xX\u00F1\u009A\u008CZMGii\u0090d\u00D5\u0091\r\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004B!\u00B0f\\x000b\u009B\u00D0Y\u00DD\u00C7$M\u00D4\u00C5\u00C3\u00B4\u00E0x\u00CF\u0091n$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010(\\x0019\u0081\u009F6\u00DB&t\u0086\u00CDk\u00AC|\u00E1\u00A7\u00CBTi\u00B2\u00FBH7\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000#@[T\\x0000E\u00D4\\x0004Von\u00BClpM\u00E5\u00A8\u009F\u00FA\u0099\u00C2`\u00D5\t\\x001dE\u009A\\x001c\u00EEF\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010`\\x0004\u00F6\\x001e\u00E9\\x0004\u008A\u00A8\t\u00AC\u00DE\u00C4\u00BC&\u00AB\u00FBN\u00D07\u00AAW\u00BD&\u00AB\u00C9k\u00B2\u00AB\u00E9\u00EC\u00EE\u00C3]H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u008C\u00C0\u00AE\u00A6\\x000e\u00A0\u0088\u009A\u00C0\u00F2\u00BA}\u00A20\u00D8\\x0017V\u0093`!i\u00B2\u008Bn\\x0003\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080J`\u00C7\u00C1\u00E30\u008BQ\\x0013p\u0090&\u00EA\u0084\\x000e\u00A4I\u00D4\u00F4Q>\\x0008\u0080\\x0000\\x0008\u0080@\u00B2\\x0008l\u00DB,Y\\x0015NbmI\u009A\u00A8\u00B1&\u00AB\u00FB\\x0019+t\u0086\u00CD\u00DB_9j\u00D5e\u0083g\u00924\u00D9\u00D9\u00DC%L_\u00F1\u00F9K\u0083\u00AE\u00E1\\x0013\\x001dq\u00CA\u008C\u00E3 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x000e\\x0002\u009B\u00F7\u00B5\u00C02F}+U\u00AF\u00C9\u00CC\\x001e\u00A3V\u00F5\\x001d\u00BF\u00BB\u00B2\u00B2\u00F2\u0092\u00AA\u00AA\u00AA\u00E1\u00F3\\x001a{\u00EA\u00B1&;\u009A\u00BB\u0084\u0089DI\u00DB\u00CEZJ]\\x0007\u00BF\u00A3\u00B4s\u00E9\\x0004:\u00E2\u0094\\x0019\u00C7A\\x0000\\x0004@\\x0000\\x0004@ \\x001d\\x0004~\u00DD\u00D3\\x000c\u00CB\\x0018\u00F5\u00ADT\u00BC&CjH\u008A\u00F4\\x0017\u0086\u00C1\u00EEh:kO_\u00D7\u00CE\u009F>\u00F2\u00FE\u008D\u009F\u008C\u00A0\u00F4\u00CB\u00A7OR\u00DA\u00F4\u00F1\u00F0\u00B7\u009E\\x001d`\u00F1\u00A3\u00D0\u009F\u0094SX\u0082\u00F7\u00C1\u00F5\u00DF\u00F5\u00B8\u00E3\u00BBe\u00A2\u00AB\\x0017\u00CE\u0095\u00C9C%Hfs\u00BF\\x0016\u00BE\\x0005\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00A6\u00B3\\x001bw\\x001d,\u008Fe\\x000cl\u00CB\u0082\u009D\\x0018\u00EC,K\\x000f\tZ\u0088:\u00A13\u0093&p\u00FA\\x0019^\\x0013~\u0085\u008E\u00F0\\x0006\u0090\u00E6\u00B8x\u00F2\u00C7\u008B'(\u00FD\u00F0\u00DBq5\u00B5\u00FFp\u00A1\u00ED{%\\x001d[~\u00BEu\u00F9\u00F9\u00A3\u00CB(un\u009BK9\u00E97\u009C,\u0085\u00984\u0087S\u00BDe\u00DA#\u0093\\x0007\u00D2\\x0004C\t\\x0008\u0080\\x0000\\x0008\u0080@x\\x0004\u00EAv\u00EC\u008F\u00C22R\u0099\u00CBf\u008C\u00FF\u00AF\u00BF\u0092\u00A5\\x001e3t\\x0001dX:I\u0093goi\u00B0\\x0013\u0083\u009D\\x0015\u00A54)\u00C4\u009Alo:kO$8~;\u00F1\u00C3\u00C5\u00F6\u00A5\\x0017\u00DB\u0097\\l\u00FB\u00F6\u00E2\u00B1\u00C5\\x0017\u008F~}\u00B1e\u00C1\u00C5#_\u00E4\u009B\u00E7\u00E7\u009B>\u00CD\\x001f\u00FC\u0088\u00D2\u00E9\u00A5#\u00984\u00B1\u0094p\u009D\u00EA\\x000e\u00D1\\x000e\u00AE\u00FF\u00CE\u00F4\u00A7\u00E7q\u00BE>N\u00E7Z\u00EA,\u0099M\u00D4Ra\u00F3q\\x0010\\x0004@\\x0000\\x0004@ \u00B3\\x0004\u00D6m\u00AD\u008F\u00C22*\u00BA\u00A4`\\x001c\\x0019\u00FA\u00FB'\u00AF\u009BqP\u00B9\u0090a\u00C2\\x0002\u00DB\u00B2`'\\x0006;+$\u00FB+\u00F0\u009A\\x000c\u009F\u00B7\u00BF\u00A7\\x001e\\x0006\u00EBx\\x0003\u00DA\u00B8x\u00EC\u009B\u008B\u00AD\u008B.\\x001e]x\u00F1\u00C8W\\x0017\\x000f\u00D7\u00E6\\x000f~\u0090o|'\u00DF\u00F0V\u00BE~V~\u00EF\\x000cJ\u00FE\u00A4\tQ\u00D0\u00D4\u00E2\u00F81\u00EB\u00F5\u009B\u00A1\u00A0y\u00E8\\x001d\u009A\u008A\\x001c\u00BA@\\x00154\u0085\u009COj7\u00D2r.\u00AF=\u00E9N\\x001b|\\x0017\u00BC\u00FF_\u00AF\\x0016\\x000e\\x0015\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002\u0081\\x0008\u00AC\u00D9\u00BC;\n\u00CB8\u00D4b\u009E4\u00CBup\u008Cn\\x0001\u00AF{\u00F6}z\u0093\\x001f\u00F3\u00AC\u0093A,\u0098N5\u00CF\u00FB\u00EF\u009A^\u00F5\rK\u00AA\\x001b\u00C1\u0082\u00DD\u00D4sZ\u008EXL\u00E7\u0082\u00829\\x001e\u00BA@\u00AB\\x00153\u00CA\u009C\u00B3\u00C7V\\x0007\u009B\u00FD-d\u00E6\u009D\\x0014\u00B6\\x001b\u00C1\u00A4\tI\u0091\u00FE\u00DC\u0084N\u00C1k\u00B2\u00AD\u00E9\u00AC=\u0091/\u0084\u00E6nT7\u00C9\u0097\u00F9\u00E6\u00CF\u00F3\\x0007\u00DE\u00CF\u00EF;\u00BFoN\u00BE\u00BE&\u00BFgz~\u00F7\u00D4\u00FC\u0096\u00D7(\\x0019\u00D2\u00C4R\u0082.A4\u00BE$/\u00966\u00FD\u00F2\u00E0\u00EF\u00DF\u0087]Km\u00C9R\u00E3\u00FF\u00EA\u00DDR\u008E+\u00C2\u0082\u00F2P\u00CE'\\x001f\\\u00C0\u00E5\\x0014\u009E\u00AB\u0097\u00F6\u00CE\u00B3\u00EF\u00BFS(J\u00BF\u0084\u00A8Q\u00C2\u0096\u00E2 \\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00F0\\x0004V\u00FD\u00B2#\\x0012\u00CB\u00A8\u0098B\u00DE\u00E0\u00EAf\u0091\u00990f\\x001c\r\u00F3G\\x0006\u00D1\u00C9t\\x001ay\u008C\u00D2\u0094\\x00135K\u00BAT\u00F5\u00CD\u00A86W\u00B3\u00A4\u00CA\u0091g\u00D9f?b1\u009DF!\u00FAK\u00BEb\u0094-u\u00A6#T\\x0014_OA!\u009A!V\u00AC\u00B3\u00B3-\\x0016\u00C5\u009A\u00CCm\u00A8\\x001c\u00B9\u00F2\u00B2\u00C13h\u00F1\u00B0\u00D3\r8t\u00B92ws\u00E8\u0093|\u00C3\u00BC\u00FC\u00BE\u00D9\u008A\u009Bd\u00F7\u00B4\u00FC\u00EE7\u00F3\u00BB\u00A6\u00E47\u008Da\u00C9Q\u009A\u00F0\u008D)\u00D4[W*\u008A\u00EF\u0084\u00D3\\x0013\u0085\u00CC\u0084r\u00FC\\x0018E\u00B8\u00E9\u00F7\u00CF\u00E9\\\\x0015\u00B1\u00AAct\\x0005\u00C3\u00FF\t]\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002A\t\u00AC\u00D8\u00B05r\u00CB\u00A8\u00D4M$M<\u00CD\u009F\u00A1c\u00F8\u00D6\u00F1\\x0007\\x0015\u00DD\u00A0[\u00D8\u0082\u0089t8b\u00B1\u00A4\u0086B\u00B2\u00D0Cd\\x0014\u00B1b\u00BD\\x001cg\u008E-\u00D6\u00D9\u009F4\u0099\u00D7P9J\u0097&\u0087\u00CEn\u00B3%\u00F2\u009A\u009C;\u00B24\u00E0Ce\u00EEFq\u0093\u00A8\u008Ad\u00E7\u00E4\u00FC\u00CEI\u0086.1I\\x0013s\t\u008A\u00B60\u008E\u00F0>\\x0012>\u009B\u00E0\u00B8*M\u00BER\u00A5\t\u00CB\u00E9t\u00AEV\u008E.P\u00D4l\u00EF0a(j\\x000e\\x000e\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080$\u0081\u0095\u00E45\u0089\u00C02*\\x0006\u008E\u00A6\\x0008,\u00C6\u00D1\u00B0t\u00FC\\x0007\\x0017\u00F3\u00C7\u00CC\u00A2\u00A5z\u00FCA^\u009A\\x0018\u0096\u00D4\\x0010+\u00B6#\\x0005\u00D3i\\x0014b\u00F9`xS\u0084\u00B5\\x0012\u00DB_\u00DD:;[d\u00D5k2\u00A3\u00E7\u00A8\u0095\u00FD\u00C7\u00EF\u00D2\u00F65yd\u00DE\u00FE^\u00A3V\u00FDQ\u00DDr\u00CD\u00E9\\x0006t7-\u00C97\u00BC\u00A3(\u0092]\u00AA\"aI\u00F7\u0097X\u00BD&\u009E\u00D2\u00E4\u0090\u00EA\\\u00FA\u00CAvWx\u00A0_\u00A9\u00BE#%\u00A7v\u00FF4\u00C7\u0094\u00E8\u00DC\\x0007g\\x001cTkN\u00F3a\\x00055\u00F3\u00CE\u00B3JT\u0091d\u00E7C6\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00B0\\x0013X\u00F5\u00EB\u00AE(,\u00A3n\u00D1\u0098\\x001dTl\u00A2f\u00B0\u0098\u0098\\x0010J\\x0013'\u00D3\u00E9,M\u00B4\u00E9\\x001b\u00EED\u00C7#\u00BA\u00FD\u00D5L\u00A7\u008B4\u00D1\u00C5\u0090\u00D6\\x0004\u008B\\x0012R\u00BF5\n1Yg^\u008A\u0099\u00EB,\u00885\\x0019>\u00AF\u0081\u00A4\n\u009B\u00D0\u00D9zH\u0090\u00C8k\u00E2K\u009AX\n!M\u00B7\u00C4(Vm\u0083\u00F2\u00A7:;\u00A5\u00AD\u009B\u00A2#\u00EC8\u00F0\u00F7\u00EF\u00BF\u00CD\u00CE\"\u008D\u00A2\u00E6d1A\u0082sU\u00E8Z\u009E\\x0019\\x0007\u0095\u0092\u00B5+j7[\u00D8(\\x001c\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001O\\x0002?m\u00DE\\x001b\u0085e\u00A42\u0097p\u008B\u0087\u00E9]\u00DD\u00B8\u00CA\u00DBj\u00E8k\u00C1\u00E41\u008B\u00E9b:-\u0086\u00DBb^\u00D9\u00B7\u0085\u0083\u00BAm\u00B5\\x001c\u00B1\u0098N\u00DE\u00E0\\x001a\u0097V?\u00B0\u00EA\\x0015jX8\u0091\u00AB\u00A7&\u00B6\u00BE3Yg\u0091\u00C0`\u00AD&i\u00F2\u00C7\u00C13z\u008DZ9@\u00E85\u00D9z\u00F0\u00AC=\u009149\u00FA\u00F5\u00DF)\u0094\u00C4=Q\\x001e\u00B6xXX\u0088\u00D4\u00C1:\u0095\u00BE\u00A8\\x000eR\u00A7\u00E3D\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0008\u0095\u00C0\u009A-\re\u00B6\u008C\u00A16'\u009E\u00C6T\u00E85),\\x001e\u00DEr\u00F0\u00AC=}\u00F5\u00F9|\u00FB\u00C6\u00AF\u00C2#\\x000b?z\u008B\u00A4\u0089\u00B0\\x0010\u00A9\u0083\u00AA4\u00F9NT\\x0007\u00A9\u00D3q\"\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0084J`\u00ED\u00B6\u00C62[\u00C6P\u009B\\x0013Oc\u00AA\u00C5\u009A\u008C\\\u00D9\u009C\\x001ek\u00C2O\u00E88U\u009A\\x0004\u0087\u00E4\u00BFx6\\x001b\u00B5\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0000\\x0004\u00D6m?\\x0004\u00CB\\x0018\u0080\u009B\u00AFS\u00B4\t\u009D\u0091+\\x0007\\x0018\u00D2\u00E4\u0091y\r4\u00C1C\u00D3<\\x0014k\u00E2\u00AB,d\\x0006\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081t\\x0013\u00A8\u00DB\u00D9\u009C\u00EE\\x0006\u00C6\u00A1u\u0082X\u0093\u00E1s\\x001bz\u00EA\u00FB\u009A\u00C4\u00A1\u008A\u00A8\\x0003\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0084\u00C0\u00FA]-1\u00A9I\u008A\u00AB!X<\\x000ci\u0092\u00E2\u00FB\u008D\u00A6\u0081\\x0000\\x0008\u0080\\x0000\\x0008\\x0014C`\u00C3\u009Ec\u00C5\u009C\u008Ese\\x0008\\x0008&tdbMd\u008AF\\x001e\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H\\x0019\u0081\u008D{\u00DBS\u00D6\u00A2\\x00186G\u00B4xxnC\u00AF\u0091\u00885A\u009C\r\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008X\t\u00FC\u00BA\u00EFd\\x000cmy\u00CA\u00AA\u00840X<x \\x0000\\x0002 \\x0000\\x0002  K`\u00D3\u00FES)\u00D3\\x00011lN\u00C0\u00C5\u00C31l\t\u00AA\\x0004\\x0002 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x0002\\x0002\\x001e\u00B1&\u008B\u00BE\u00FB\\x0001\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004JF@\u00E45\u00E1\\x0016\\x000f\u00E7\u00F35H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002 P2\\x0002\\x0002i\u00F2\\x0008\\x0017\\x0006[\u00B2z\u00E0B \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002 @\\x0004\u00E05\u0081[\\x0008\\x0004@\\x0000\\x0004@\\x0000\\x0004@ F\\x0004<\u00C2`!\u00DF@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u0094\\x0004 Mb\u00A4\\x0013Ky\u00E3q-\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088'\\x0001L\u00E8@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\u0080\u00E07t\\x0010\\x0006\\x001bO\\x0015\u0089Z\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\\x0016\\x0008`\u0085N\u008Ctb\\x0016:\\x001c\u00DA\\x0008\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00EE\\x00040\u00A1\\x0003i\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0010#\\x0002\u0090&1\u00BA\\x0019\u00D0\u00D1 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u0098\u00D0\u00814\\x0001\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001A\\x0018\u00EC\u00F0y\r=G\u00AD\u00BCl\u00F0\u008C]Mg\u00A1\u00DD@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u0094\\x0004D?\u00EF\u0087\u00DF\u00D0\u00C1/\\x0007\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0094\u0089\\x0000&tb\u00E4\u00C2*\u00A5&\u00C5\u00B5@\\x0000\\x0004@\\x0000\\x0004@ \u009E\\x0004D\\x0013:\u00F0\u009A\u0094I'\u00C6\u00B3\u008B\u00A0V \\x0000\\x0002 \\x0000\\x0002 PJ\\x0002\u00DA\u0084\u00CE\u00A8\u0095\\x0003\u00C6\u00EF\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj8\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u0099\\x0008`\u00F10&t@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004bD\\x0000a\u00B01\u00BA\\x0019\u00A5t\u0097\u00E1Z \\x0000\\x0002 \\x0000\\x0002 \\x0010O\\x0002\u00F8\u00E5aH\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\\x0010yM\u00B0\u00AFI\u0099f\u00D7\u00E2\u00A9^Q+\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010(%\u0081(y\u00F8\u0087;\u00F2H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002Y#P\u00DC\\x001b~\u0094+t\u00B2v'\u00D0^\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\"\\x0010\u00BA4ydnC\u00AF\u0091+\u00FFX\u00FCF\u00F5\u00B8= \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\\x0019$P\u00B44\u00A1_\u00CB\u00E99re\u00FFq\u00A1\u00EFkb\u00DC\u008C\u00FC\u008A<\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u00BA\t\\x0014\u00EC~QA\u00B5QnT\\x000fi\u0092\u00EE.\u0088\u00D6\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000O :i\\x0012\u00DAn\u00B0\u0090&\u00E8\u00B2 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x001d\\x0002\u0090&\u0098$\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001H\u0093\\x0018\u00DD\u008C\u00EC(b\u00B4\\x0014\\x0004@\\x0000\\x0004@\\x0000\\x0004\u009C\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\\x00144\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\u00942\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088@v\u00A4ISm\u00BF\u008A\u008A~\u00B5M\u00B6\u009F/n\\x001a]]qiE\u008E~\u00DE\\x0010\u00BFl\\x000c\\x0002 \\x0000\\x0002 \u0090L\\x0002u\u00C3*h$/$\u00CBh_[[}iE\u00F5\u00E8\u00A6\u00F0\u00C7\u00F9bJV\u00CF\u00F5\u00B4>ekZ\u00F9z\\x0002\u00A4I\\x001e\u00D2$\u00FCg\u00B5|\\x001d\\x001am\\x0001\\x0001\\x0010\u00C8\\x001e\u0081\u00BA\\x001c/J\u00B8\u00CF\\x0005\u00AB_\u008C\u0080p\\x001f\u00D0\u008A)\u00D9[\u009A\u0094\u00B5i\u00E5\\x001b\u00C9!M M\u00E0.\\x0002\\x0001\\x0010\\x0000\u0081\\x0004\\x0013`N\\x0005\u008BG\u0084\u00BDsV\\\u009A\u00AB+\u009F}\u00F5\u00D6\u0088^\u00D2$\u00C1M+\\x000e;\u00A4\t\u00A4I\u0082\u0087$\u00EF'\u00BF\u00B8\u00C7\\x0003\u00E5\u0083\\x0000\\x0008\u00C4\u009E\u0080\u00FBd}umm\u008C\u00878\\x000fi\u0092\u00E4\u00A6\\x00157\u00F6B\u009A\u0088\u00A4\u0089\u00DA]\u008C9K\u00B3\\x0018W\u00DCk\u00CA\u0091B\\x001e\u00BD\u00EBsgY\u00E7\\x000e\u00CD\\x0005z\u00CE,\u00C6~,\u0088\u00F1\u00A3^\u00DC\u00F3\\x0000\u00F2 \\x0000\\x0002I#\u00A0\u00DAoO\u00EF\u0088}\u00DA\u00A5&\u00C7\\x0007\u00A6\u00D4)^\\x0016\u00D3`N\u00E3\u00BC\u00EEz\u00A1\u00F2\u009D%\\x000e_\u00B2\u00FEY\u00EAD\\x001a\u00ACd\u00A4IL\u009A\u00C6\u0086V\\x0013Fu\u00B2iX]~\\x00057\u00EB\u00A4\u00FC\\x0019\u0082\u0081\u00804\u00B1J\\x0013\u00AEKq\\x0011U\\x0005\u00DCL\u009A\u00D4\u009A\u00A76suf\u00F1\u00C1\u00F7c\u00AF\\x0002C\u00B8\u008B\u00A1t\\x0005\\x0014\\x0002\\x0002 \\x0000\\x0002I$\u00C0\u008F\u00B1\u008E/~fi\"\\x001e\u0096\u00CD\u00D2\u00C4\\x0014T\u00AB\u00BC\u00AC:\u00A8\\x0013\u009B4\u0091=\u00D1[\u009Ah\u00E6\u0089\\x0015X\u00E6\u00A69J\u0093\u009C5\u00D0G\u00B4\u00DC\u00C4o\u00BF\u00CA\u00984q\\x0008\u0095\u00E2\u00EE\u00BA\u00A6\u00FE\u00B8N`9\u00A2\u00FDi\u00B8R\u008C.n\\x001c1\u00CD\\x000ej\u0092\u0085\u00EF\u00D3L\u00E3{Ge\u00FB\u00BD\u0097\u00C8\\x000f\\x0002 \\x0000\\x0002\u00D9$ \u0094\\x001a&[.\\x0010\\x0010\u0085aY?\u00DD\u00EA\\x0002\u00D7Kp\\x001d\u00B4E\u00D2D\u00EAD\tiBw3.Ms\u0092&dU\\x000bZ\u00C4n@\\x0003\u00BE{C\u009Ah\u00AE\\x0011\u00AD'\u00A9.>\u00EB\\x00023&/4\u00C7\u0089\u008A\u009EW\u0085\u00A6o\u00AD./\u00B5W\u00D9\u00B5\u00B6\u00E1\\x0007\\x000bx\u00DB\u00B29\u00FA\u00A0\u00D5 \\x0000\\x0002 \u00E0J\u00C0\u00B6\u009E\u00C5\\x0018\u00AB9\\x0001!\\\u0095\u00A9\u00BER\u009A\u00A5\t?7!4\rvkm7\\x0007.'\u00CAI\\x0013\u00BD\u00BD\u00E5n\u009A\u00934\\x0011-\u00D2\u00D6\u00CDep\\x0003\u00971i\u00E2\u00B5\u00AF\u0089\u0083\u0092\u00E0c\u0091l\u00AA\u00C2>\u0085\u00C9\\x001d\u00B1\u00AEGwYv\\x001f\u00C6\u00FC\\x001c\u0086-\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u0085\u0080\\x001eJ\u00A2\u00BDvZ\u0087e\u00EB\u00CA\\x001d\u00D3\u00E0\u00EF:\u00AA[\u00F1\u008AbM\ny\u00DC\u0097\\x0016{\u00AD\u00D0\\x0011\u00DF\u00CA\u00B24\u00CD-\u00D6\u0084\u0097 \u008E\u00A1\u00BB\u00BE\u00BA%\u00A4\u0089)\u00D6\\x0004\u00D2\u00C4W\u00EFAf\\x0010\\x0000\\x0001\\x0010(;\\x0001\\x001a\u00B7\u00C5q\\x0018\u00BC\\x000f#\u0099\u00D2$FM\u00834\u00C9\u00D3\u00C6\u00AC\\*\u00A8\u00A7\u00A2\u00FC\nr\u00BB\u00C1JN\u00E8\u00F0\u008E>W}\u00ED\u00A0u\u0082\u00BB\u00B9\u00CA>\n\u00A0\\x0002 \\x0000\\x0002 \\x0010#\\x0002\u00CC\u0085 \\\\x0018\u00E2 M$'tL3\u00FB.\u00CE\u008F\u00E8\u00BC&\u00F1h\u009A\u0089\u00AD\u00C9D\u00DA\u00C2\\x001b\u00F4)*L\u00E8\u00C8\u00DBx9i\u00A2/\u0082\u00F2\\x0008\u0083\u0095\u0096&\u00FA\\x001ac\u0093\u00F3P\\x000bk\ni\u0091U\u008C\u00C6\u0088\u00A2\u00B4\u00A3\u00FC\u00ADDN\\x0010\\x0000\\x0001\\x00100\\x0008\u00E8A\\x0018\u00C2\u00A0\\x0007c\u00C1\u0081\u00FF0\u00D8\u00F2K\\x0013cQn\u00B9\u009A\u00A6U\u00C0\\x001a\\x001d\u00AC\u0093\u00D1\u00C9\u009BW\u00B0\u0086\u00B2\u00C8\\x0003\\x0013:\u00B6}M\u00F8\u00C5\u00EEFh\u0088%\\x0002Y^\u009A8\u00C4W{\u00AF\u00C2\u0087\u0099\\x0007\\x0001\\x0010\\x0000\\x0001\\x0010\u0090!`\u00DD\u00BBA\u00B4+\u0095\u00FF\u00C5\u00C31\u0090&\u00DA>\"\u00B6\u00D5\u00C8\u00E6\u00DDo\u00A3k\u00DA\u008A\u00BC%\\\u00B2zX\u008E\u00FB)\"\u00E65\u00A9\u00E6\u00B7\\x0001s\u00F4`\u00C9\u00DCG.\\x000f\u00A4\u0089\u00F7\u0096k\u00E6YLa\u00B0\u009AK\u00C3\u00F2\u00E4\u00C0_\u00E2\u00B3\u009B\u00C23\\x0004\\x0002 \\x0000\\x0002\u00EE\\x0004lk\\x000e\u00CC\u0081\u00AE\u00F6\\x0019\\x0019\u0089-\u00D7\u00A4\u00A2Y\u00A3\u009B\u00D0\u00D1\u00C7\u00C9\u00B25M\u00A9\u0080\u00B6pZ[\u00BB*\u00DCr\u008D3pa\u00FD\u0080bv\u00A4\t\u00FC\u009F \\x0000\\x0002 \\x0000\\x0002  &P\u009E\u00B8\u00C0`+t|\u00BE\u00DAE\u00D6\u00B4\\x0008w\u00C1\u00C8\u008841\u00FFX\u00B6\u00F3\u00C6kB\u00BFY\u0094\\x00071L\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0004&\\x0010\u00DB\u00B1\u00DD^1Q\\x001b\u00DD\u00A4I\u0082\u009A&\u00ACj\u00E0{\u00AA\u009C\u0098\\x0011iR\\x0014#\u00F8QA\\x0000\\x0004@\\x0000\\x0004RD\u00C0\u00B6}\u0099\u00FBN\u00F0>\u00BD\\x0014>@\u0085\u00EF5)e\u00D3\u00E05\u00B9C\u00D1P>\u00EEwt=\t%\u0083\\x0000\\x0008\u0080\\x0000\\x0008$\u009E@!\u0084B\u00F5\u008B[w`+\u0091\u00B9\t_\u009A\u0098\u00A2C\"n\\x001a\u00A4\t\u00A4I\u00E2\\x0007\\x0002(K\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0090\"\u0080\t\\x001d)L%R\u00D0\u00D0\\x001f \\x0000\\x0002 \\x0000\\x0002 \u0090y\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0001\u00DF\\x000c\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A\u00A4_\u009At\u00AE\u00C8w.\u00B6\u00A5\u00F9\u00F9NJ\u00E6\u00E3x\\x001e@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u00EC\\x0004 MR%M4\u00A9\u00C1d\u00C7\u00FC|k\u00A0\u00C4\u00CE5TK\u00D9\u00FB(*\\x0000\\x0002 \\x0000\\x0002 \u0090)\\x0002\u0090&\u0089\u0097&\u008A\u0086(B\u0088\u00C8\u00C8\\x0017C\u00ACd\u00EA\u00D9@cA\\x0000\\x0004@\\x0000\\x0004\u00CAB\\x0000\u00D2$\u00A9\u00D2\u0084)\\x0012\\x0019a\\x0011n\\x001e\u00C3\u00A1R\u0096\u00FE\u008A\u008B\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u00A4\u009E\\x0000\u00A4I\u00C2\u00A4I\u00B9\\x0014\u0089P\u00DF\u00B0I\u009F\u00D4?$h \\x0008\u0080\\x0000\\x0008\u0080@)\t@\u009A$\u00C3\u00B2\u00C6J\u0091Xd\n\u00F3\u00A3\u0094\u00B2\u00D7\u00E2Z \\x0000\\x0002 \\x0000\\x0002)&\\x0000i\\x0012w\u009B\\x001a\u0096(\u00D1\u00E2E\u00F8\\x0010W=Z6\u00AC\u0089!\u00A5\u00AA\u0099\u00DF_9\u00C5\u0083\\x0005\u009A\\x0006\\x0002 \\x0000\\x0002\u00A5!\u0090$ib\u00D45#\\x001f\\x0016\r\u00C8V\\x0019$-\u00AA\u00CC\u00D3\u00B9,\u00F9ee\u009CH\u0085\\x0004\u00BE\u00BA\u00DF\u008B\"?\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00D8\t\u00E4k\u00F2E\u00A4\u00E5u\u00FB.\\x001b<\u00A3\u00E7\u00C8\u0095\u00FD\u00C7\u00ED\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj\u00F8\u00DC\\x0006\u00FA\u009B\u008E\u00EEj:[L\u00D1\u00BE\u008Dk\n\u00EEn\\x0000Q\u00C2\u00E4\u00C8\\x000f\u00FE\u00B5\u0088'.&V\u00FC\u00CA\\x0014\u00AA\u008Fg\u00C9\u00C8\\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002.\\x0004\u008A\u00D0%$< M\u00EE\\x0008\u00C7\\x0012\u00FB\\x0012\\x0001\u00D1\u00C9\\x0011\u00A7\u008E\u00A2\u00C8\\x0014?\u00DE\u0094\\x0000n\\x001b<\u00A5 \\x0000\\x0002 \\x0000\\x0002 \u00C0\\x0008\u00C4W\u009A\\x0014W\u00B3\"\\x001bV\u00BA\u00D3\u00D7\\x000f\u00CD\u00AF\u00AF\u00C8\u00D7\u00C8%\u00CA\\^,\u00C9\u00AAmyY\u00E1\u00EA \\x0000\\x0002 \\x0000\\x0002\u00E5 \\x0010\u00A5\u00D7\u00A4\\x001c\u00ED)\u00B5\u00E1'K/#JH\u00BB\u00E4\u00CB-JL\u00B7\u0083\u00E4\u0094t\u00CD\u00CB.\u00A7\u00B2\u00D0\u0091\u00D0F\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u009D\\x0000\u00A4I\u00D0P\\x001dY\u00D3\\x001e+Ebkl:Z\u0081\u00E7\\x0019\\x0004@\\x0000\\x0004@ E\\x0004 M\\x0002I\\x0013\u0099\\x0019\u009C\\x00049\\x001bd\\x0004\n59A-J\u00D1#ZjG \u00D0\u0081\\x0000\\x0008\u0080@\u00B9\t@\u009A\u00F8\u0097&\u009E\u00BA$\u00A1&\\J\u00A0\u00C4\u00DB\tT\u00EE\u00C7\t2\\x0002\\x0004@\\x0000\\x0004@\u00A0x\\x0002\u0090&~\u00A4\u0089\u00A7\u00F1VbJ\u00FC\\x0014\\x0018\u00C3\u00CC\u00DEm\u0084:I\u00F8-\u008Ea\u00AFC\u0095@\\x0000\\x0004@\u0080#\\x0000i\"mf2d\u00B3\u00BD\u00D6\\x001c\u00A5@\u0081a\\x0014\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088+\\x0001H\\x00139i\u00E2>\u0089\u0093\u00D0\\x0019\\x001c\u00F7N\u00E9.\u00C5\u0094\u00D0\\x00139tq\u00ED\u00FA\u0089\u00F7o\\x0001,\\x0008\u0080\\x0000\\x0008\u00A4\u0094\\x0000\u00A4\u0089\u0084}\u00CD\u00A0.\u00D1\u00BA\u00BB\u00A7\u00FBD\u0082^J\u009F\\x001c(\\x001b\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u0088\\x0008@\u009Ax\\x0019W\u0097mK22\u00AF\u00E1\u00E1>A\u00E8\u0089W\\x0017\u00828\\x0003\\x0001\\x0010\\x0000\\x0001\\x0010\u00F0C\\x0000\u00D2\u00C4\u00D9\u00AE\u00C0$\\x001b=\t(\u00FC<T\\x0011\u00BDF\u00A0X\\x0010\\x0000\\x0001\\x0010\u00C8\\x0008\\x0001H\\x0013\\x0007iB\u0081\\x0014n\u00FE\u0092\u00EC\u00B9\n\u00A0N\u00A0N@\\x0000\\x0004@\\x0000\\x0004JB\\x0000\u00D2D$M\u00A0K\u009C:\\x001f\u00E4ZI\\x001e\u00CB\u008C\u00BC\\x0018\u00A1\u0099 \\x0000\\x0002  $\\x0000i\"\u0094&\u00CE\u00BF\u00D5\\x0007\u00CB\u00E4\\x0012\\x0014\u008C5;\u00E8\\x001e \\x0000\\x0002 \\x0000\\x0002E\\x0013\u00804\u00B1\u00FF\u00AC\\x000ct\u0089W\\\u00A7\u009B:\u00C9\u00DETW\u00D1\\x000f!^\u009B@\\x0000\\x0004@\\x0000\\x0004x\\x0002\u0090&f3\u00ECbta\u0081x\\x0002N\u00A02\u00B2j\t\u009D\\x0001\\x0004@\\x0000\\x0004@ 2\\x0002\u0090&\u009C4q\u0089\u00F4\u008C\u00EC\\x0006$X)C\u009D\u00A0W\u0080\\x0000\\x0008\u0080\\x0000\\x0008D@\\x0000\u00D2D\u0097&\u00D0%\\x0001\u00BA\u0097\u00A3:\u00C1\u00B4\u008E\u00D7\u00A4X\\x0000\u00DA8\\x0005\\x0004@\\x0000\\x0004\u00B2A\\x0000\u00D2D5!.Kr\u00F2\u00B0\u00B2\u00AEV\u00D6i\u00CDN*7\u00EF\u00CF\u00C6\u00A0\u0090`O\\x001en\\x0010\\x0008\u0080@*\\x0008@\u009A0i\u00E2\\x0010\u00FA\n\u00FB*\u00D3\u00CB\u009D\u00D4\u0089\u00CC\u00B9\u00C8\\x0003\\x0002 \\x0000\\x0002 \\x0000\\x0002f\\x0002\u0090&\u00A4K\u0086\u008AwW\u0083.\u0091|Z\\x001c\\x0001V\u00E0\u00FD\\x001b\\x0004@\\x0000\\x0004@\\x0000\\x0004\u00FC\\x0012\u00804q\u00D8\u00F5\\x0015+M$u\t\u00CB\\x0006y\u00E7\\x000b\\x00172\u0083\\x0000\\x0008\u0080\\x0000\\x00088\\x0013\u00C8\u00BC4q\u009A\u00CAA\u00A7\u00F1K\u00C0qR\\x000c\\x0001\u00A1 \\x0000\\x0002 \\x0000\\x0002 \u00E0\u0083@\u00B6\u00A5\u0089\u00D3\u00BB>B_\u00FD\u00EA\\x0012\u0096_\\x0018t\u0082y\u00B1`0q\\x0016\\x0008\u0080\\x0000\\x0008d\u0095@\u0086\u00A5\t\u00E6 B\u00EF\u00F4@\\x001a:R\\x0014\\x0008\\x0002 \\x0000\\x0002\u00D9#\u0090ei\"Z\u0095\u0083\\x0010\u0093\"\u009F\\x0001\u00A1:\\x0001\u00D5\"\u00A9\u00E2t\\x0010\\x0000\\x0001\\x0010\u00C8\\x0012\u0081\u00ACJ\\x0013\u00C7\u00A9\\x001c\\x001f\u0093a~C\u008E\u00B3\u0092\\x001f\u00D3:Y\\x001aA\u00B2\u00D2\u00ABqOA\\x0000\\x0004JH \u00B3\u00D2D\u00E82\u00C1\u00EEja(3\u00C8\u00BE\\x0012>\u00C0P\\x0006 \\x0000\\x0002 \u0090>\\x0002\u0099\u0094&\u00B0\u009DQ\u00DBN\u00E1j\\x001d\u00C4\u00C3F\u008D\\x001d\u00E5\u0083\\x0000\\x0008\u0080@*\\x0008dS\u009A\u00C0e\\x0012\u0086w\u00C4\u00FD\\x0001\\x0010N\u00EB\u00A4\u00E2\u0099I\u00DF\\x000b\nZ\\x0004\\x0002 \\x0000\\x0002\u00B1\"\u0090=i\u00828\u00CD\u00D2\u00E8\\x00031gL\u0099E/\nKsq\\x0015\\x0010\\x0000\\x0001\\x0010\u0088\u008C@\\x0006\u00A5\u0089\u00C8e\u0082\u008DL\u00A2\u00E8ap\u009CDA\\x0015e\u0082\\x0000\\x0008\u0080@\u00DA\tdO\u009A\u00D8\u00ED%\u0096\u00B6F\u00D4\u00CB\u00E18\u0089\\x0008,\u008A\\x0005\\x0001\\x0010\\x0000\u0081T\\x0013\u00C8\u00984Axf\u0089{3\u0084`\u0089\u0081\u00E3r \\x0000\\x0002 \u0090|\\x0002\\x0019\u0093&\u00B0\u0094%\u00EE\u00B2p\u009C\u0094\\x00188.\\x0007\\x0002 \\x0000\\x0002\u00C9'\u0090%i\\x00023Y\u0086\u00FE:T\u00F0\u00C3:XE\\\u0086\\x001b\u0081\u00F0[\\x0010\\x0000\\x0001\\x0010H\\x000c\u0081LI\\x0013a\\x0000lbnU\u00ACVv\u00F9\u00A8\u008Cp\\x0012\r\u00B6\\x0019\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x001c\\x0008dI\u009A\\x0008fs\u00B0\u00965ze\\x0006g\\x0015F\\x001f\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001?\\x00042#M\u0084\\x0006\\x0012k\u0086\u00FD\u00F4\\x0015\\x001f\u009E\\x0012K\u00B1\\x0008\u00F1)\rg\\\\x0005\\x0004@\\x0000\\x0004RA ;\u00D2\u00C46\u009B\u00835\u00C3%\u00EB\u00C1\u0098\u00D3)\\x0019j\\\\x0008\\x0004@\\x0000\\x0004\u0092O 3\u00D2\\x0004\u00B39e\u00EC\u00AC\u0098\u00D3)#|\\\\x001a\\x0004@\\x0000\\x0004\u0092F \\x001b\u00D2D<\u009B\\x0013}\u0098E\u00D2zC\u00F0)\\x001b\u00CF\u0096\u0096dN\u00A7\u00A9\u00F6\u00BA\u008A\u008AK\u0085)W\u0087\u00DB\u009Db\\x0002\u00FF\u00CA\u0099\u00EF{u\u00ED\\x001b\u009E\u009D\u00B9.g\u00E9*\u00B7\u00D5yvcd\\x0000\\x0001\\x0010(\t\u0081\u008CH\\x0013\u00AC\u00CD)\u00B7Y\u00B2\u00CF\u00E9\u00848\u00A1\u00D64\u00BC\u00DAA\u0091\u00D8d\n\u00CCO\u00B9{B$\u00E3\\x001a\u00A4I*o+\\x001a\u0095]\\x0002\u00D9\u0090&\u0098\u00CD\u0089\u00C4\\x001e\u00F8yl\"s\\\u00D9\u00DE}\u00C5^\\x0013^\u00A3\u00C8\u00BCR{\u00BEs#C\u009C\\x0008@\u009A\u00F8y\\x0018\u00CB>\\x001a\u00A0\\x0002 \u00E0E\\x0000\u00D2\\x0004\u008Ft\u00A9\\x0008\u0084/\\x0010\u00AD\\x0006\u00C9i6\u00C7~\\x001c\u00EA$N\u00C2\u00A2\u00F8\\x001e\\x0008iR<C\u0094\\x0000\\x00021\"\u0090\\x0001i\\x0012\u00D9\u00FBz\u00BA\\x0006\u00F7\u00E8;e\u00C8s:\u00C1u\tS*\u0088>IQ\\x0007\u00864\u0089\u00FE\u00F9\u00F5z\u00CDMQw\\x0002\u00CC\u00F2\\x0013\u00C8\u00A44\t1\u00CA\\x0001\u008F\u00AB<\\x0001\u00BBF,\u00E2F8\u00CE\u00E3T\\x000fo\u00B2T\u00C9)\\x0012\u00C5\u009ES\u00BE-\u00C8\\x0019/\\x0002\u0090&\u00E5\u00B7%\u0090& \\x0010\"\u0081,H\\x0013\u00FB\u008E&\u00D8\\x0004\u00B6\\x001c\\x0003Y\u0088\u00EE\u00AB\u00BA\u00DB\\x0004s7\u00AERC\u00B8x\\x0007\u008E\u0093\\x0010\u0087\u0092\u00B2\\x0016\\x0005iR\u008E':^\u00F2\\x0014\\x0004RE \\x0003\u00D2$\u00FC\\x0010\u0087T\u00F5\u0080\u0092Z\u0094p\u00EE\u00C5\\x001b\u00B5\u00D5\u00B6XW\t\\x0017\u0088@\u009DH\u009CUR>\\x0018\u00EB\\x0003\\x0012\u00804\u00C1\u00A0\\x0004\\x0002\u00A9\"\u0090Ii\u0082\u00FD\u00E9\\x0003\\x001a\u0080\u00A2\u00BB~(\u00D2D\u00E02\u0091\\\\x0012l\\x000fO\u00B1\u009Dh\u0099\u00FD\u00D1\u00B4\u008BU\\x000c\\x0019\u00EE\\x0016\u00EB\u00BC\u0092X\u00EB8\\x0019N\u00BB\u00C6rk\u0088MZ9f\\x0016\u00B9\u0088\u00AE\u00ABmr\u00BD}>\\x001bnQlA\u00AE\u00A8vB9\u0080\u009E\\x001d\u00AFD\u00D2D\u00E8{\u00F3\\x000c\u00A9\u00B6\u00B4\u0091\u00CBo\u00EB\u0090\u00A2\u00FEc\u00BF\u00A8\u00BC\u00B7/\u00F0}\u0081\"\\x0007\u0081\u00F2\\x0012H\u00BB4\tq\\x0012\u00A1\\\u00E6<M\u00D7\r#\\x0012\u00D6\\x001ee\u00E2i\\x001b\u008Cg\u00CC\\x0018\u00A9\\x001d\\x0007w\u0081\u0085\\x0016\u00C7\u00DB\u00B2\\x0012\u00E4,\u00AB\u00A3\u00E1\u00F4cul:&\u00F7/\u00FB\u00D8\u00E1\u00B2\u00E9\u009CG\u00F0\u00AF\u00CF\u0086\u00DB\u0091\\x0006\u00DB\u00ECN\\x000e`\u00D9\u00A5\u0089\u00C8Qg\u00D9J\u00C7\u00D9\\x0003'\u0092&nA\u00DC\u0085\u00FE,\u009C\u00B8\u00D4\u00AE\u00EB!\u00C7\u0083\u00F7\u00844\r8hKb\tdO\u009A\\x0014\\x0011zY^\\x0015\u0099\u0086\u00AB\\x000b\"a\u00FD\u00C6\u00FD\u00D8\u008D\u0084\u0097?\u00C0\u00D7\u00C3i\u00B5\u00D0\u00B7\u00E5\u00EC\u0093Gd\\x001bt;$gY]\u00DE\u00E9m&J$8\u0094[o\\x000b\u00E6\u00B5\u00AB+\u00D9-^\u0084\u0097\u00F0\u00D9p\u00D6\\x001b\u008B\u00BAbR\u00BC&>6\u00F4\\x0013wE\u00AB4\u00C9\u00DD\u00E6\u00B9C \u00A9\\x0013OmQQ\u00E1\u00A8N\u008A\u00BF/i\\x0018m|=\u00F8\u00C8\\x001c3\\x0002\u0090&\u009E/d\u00C8\\x0010\\x001e\u0081\\x0010\\x0016\u00E9H\u00F9\u00C0\u0083\\x000f\u00ACrv\u00C8x\u00AF-Z\u009A\u00D8\u00AD\u00BB\u00D8\u00DEx\u00CE\u00E6\u00C8Z#\u00F5\u009D[\u00E0g\u00F2\u00D9p\\x001f\u00BA\u00C4\u00E9\u008AQJ\\x0013\u00F9\\x001dn\u00B8\u009C\"\u00F2rX\u00B8B\\x0004\u00EA\u00C4\u00D7\u00AD\u00F1Us\u00A1\u00BF\u00D0\u00D7\u00E5\u00E4=\u008E\u00C1\u009F\u00A9\u0098\u00D9<4$\\x0011\\x00042(M\u00FC\u00BE\u00A6\u0087g\u0098\u00F1\u0088\\x0016/M\u00EC\u00A6\"\u00DCPV)ST\u00B0a\u00C5K\u0093\u00BC\u00CDi/\u009Al\u00F2\u009A\u00CD\u00F1\u0088\u00BF\u00B1O\\x001f\u00D8,\u00A8\u00CF\u0086\u00DB\u00ABm~\u0089\u0097\u00B8b\\x0002\u00A4\u0089h\u00DA\u00C5\u00D4\u00DF\u0084\\x0013=V\u0089\u00E3\u00A0\\x0015\u00B8[\u00E0\\x0002\u009F\u00BB\u009C\u00A0\\x001c{\u00E7/\u00BE'`\u0098\\x0002\u0081\\x0018\\x0010H\u00BD4\u00C1\u00CA\u00E18I\u00AB\u00E2C\u00EC\u0083\u00B8\u00D3\\x000cH^jO6\u00AB\\x000ep0\\x0012N\u00B1)!H\\x0013{=\u00ED-\u00B2\u00D6\u00CA\",l\\x0006R \u00D7\u00BCf\u008E\u00FC5<\u008C+\u00C6^\u009A\u00D8\u00A7T\u0084>\\x0006\u00C1\u00CC\u008B\u00F9\\x000e\u008A\u00A4\u0089\u00CDC#\\x000c+\u00B1\u00F6\\x0004\u00CF\u00B8\u00E9\u00D0\u00EEK\"^\u00ACQ\u00C9\\x0014\\x0013\u00804\u0089\u0093\u00E5\u008E\u0081V\u008D\u00BC\u00AF\u00DB\\x0017\u00E9\u00F8j\u00B5}\\x0004\u008F^\u009A\u00B8,\u0088\\x0008C\u009A\u00D4xN\u00D6X3X\u0094\u0087D\\x0018\u008Ar[\u00AD\u00E8\u00CC\u00D6Q$Md\u0083\u0085\u009D\u00B6\u00D6u\u00BF\u00A2\u00AF\u00FB\u00EE\u0091YJ\u0086z\u00CD\u0095X\u00E4\u0082\u008F\u00A9C\u00F7\\x001f1\u0096\n\u00DC\\x0016\u00F0\\x0017L0\u00D9\u008A2\u008B\u00D4PzB\u0098\u00F7\\x0005\u00A3+\\x0008\\x0004$\\x0000i\\x0012\\x0010\\\u00E4&<\u00AD\\x0003D\u0091\u00D2\u00A4\\x000c^\\x0013\u00B7\u00A5\\x0010\u00A1H\\x0013\u00AF\\x0010W\u00EB\u00AB\u00B0\u00E5\u00DD\u00DDS\u00D9\u00E8}\u00D5jkM\u00CAC\u00CE4\u00B2\u00A2\u00C2\u00B9b\u0098=<\\x0002i\"5\u00D1\u00A6\u008F\\x001e\u00AE\u0099=\u00F4\u0084\u00C6AJ\t\u00D9\u00C8\u009B\u00A4I\u00FC\u00EE\\x000bFW\\x0010\\x0008H\\x0000\u00D2$ 8H\u0093\u0080\\x0004B\u0097&\u008E\u00B1&R\u00E6\u00CA{B\u00C7\u00D1+\\x0013\u00C2\u00E2a\u009D\u00A1k(\u0089\u00C7l\u008E\u00E4\\x0002f\u00AA\u00AD\u00AB\u00C4\u00F1\u00A1\u00F9B\u00BAb\u0094\u00D2D&\u00BA\u00D3\u00DD\u00D5\u00E1.\\x0002l\u009D\u00DFmc\\x0015\u00F7\\x000b9\t\u00C7\n\u00A9\u00C5\u00E1&i\"'\u0094\u00BDzB\u0098\u00F7\\x0005\u00A3+\\x0008\\x0004$\\x0000i\\x0012\\x0010\\@\u00C3\u008C\u00C7\u00BEHi\"\u0088 q\u00F2j\u0084#M\u00DC\u008D\u009C\u009C1\u00F0\u00DE\\x0010\u00CC\u00E5}\u00D7c6\u00C7&8\u00BC\u00A6-\u00B8\u008Dty\u00E3g\u0093&\u00CE\r\u0097\u00D8\u00E4\u00C3\u00B2\u00E7\u0087\u00F1\u00A7\u00AB\u00CE+\u00E2\u0099\u00F2&l/\u00DC\u00E7,\u008C\u00FB>\"n\u00E22\u00984\u0091\u008Bk\u00E1\u00A5I\\x000c\u00EF\\x000bFW\\x0010\\x0008H \u00ED\u00D2$\u0094\u00EDG\u00A1'B$P\u00AC4)n_\\x0013O/\u00BD\\x000f\\x000b\\x001d\u00A2\u00D7\u0084\u008Ar\u009Am\u00F1\u0098\u00CD\u00B1\u00FBB M\u00C4\u00AB\u00A3m}\\x0018\u00D2\u00A4\u00D0U\u00A2\u0092\u008C\\x0001\u00CDR\\x0011\"\\x0015WL\t\u0081\u00ECI\u0093\\x0010\u00AD,\u008A\n@\u00A0Xib\\x000ft\u00B8T\u00E8\u00FA\\x0016\u008Fn\u00FE\u00A5\u0089\u00FB\u00A6\u00E0R^\\x00139\u00B9c-\u008AY\\x000b\u00EB\u00B9\u00F6w\u00F7\u0090\u00DE\u0095%#(\u0095;\\x001e\u00D2\\x0015\\x0003t\\x001e\u00C7S\u00E05\u0089\u00E7}I\u0089\u0099\u0084T*=\u0081\\x000cJ\\x0013\u00ECkR\u00D6\u00F1\u00A2hib\\x000f\\x001a\u00AD\u00A8\u0090\u00DE\\x00106ji\"\u00DC\u00A0SN\u009A\u0088W\u00D0X*,z\u00BB\u0095\u0092G\u009E:\u00C0\u00874\u0091\u008F5)YO\\x000b_\u009A\u0094=\u00D6\u00C4\u00FF\u0084N\\x000c\u00EFK\u00C9:\\x0000.\u00946\\x0002i\u0097&\u0082\\x001fm\u00814)k'.^\u009A\\x0008\u00DF\u00DA%7^+\u008B4\u00B1]\u00D4!\u008CC\u00F0#\u0082\\x0016\u00D9!t\u00E1H\u00AF\u00CBp\u00BD\u00EF~\u00A4I8W\u00F4TK>2\u0084/M\u00E4\u00B6\u00C2\\x000b\u00B6BG\\x0018\u00B6\"\u00D5\u0084\u0090V\u00E8\u0094u\\x0004\u00F0q[Q\u00CF\u00EC\\x0012\u00804\u00C9\u00EE\u00BD/\u00BD\u008FN\u00B9b\\x0008\u00D2\u00C4\u00BEE\\x0007\\x000b\u00ED\u00F4\\x0019\u00A8\u00A8\u00C6fz\u00AE\u00D0\u00F17\u00A1#\u00AA\u0083\u00E4\u00CE]\u0082E\u00B9\u00B9\u00DBr\u00A6xR\u0087\\x0006z\u00EA-\\x0019c\u00E0G\u009A\u00F83\u00DB2W/6\u008F\u0094]\u00B7tx\u00AF\u00E8T\u00A9\u00D5\u00BC\u00AC\u00CC0\u00C2V\u00A4\u009A\u00E0\u00E1\u00CB\t\u00A5'\\x0014{/0\u00A2\u0082@\\x0008\\x0004 MB\u0080X\\x001e\\x001b\u009F\u00D0\\x0011$\\x0014i\u00E2\u00F2\u00C3rv\u00F7\u0089\u00EB\\x0016\u00ECEJ\\x0013\u0089\u009F\\x000e\\x0016,\\x0014r\\\u00FC\u00E2\u00BE[\u00BC\u008F\u00CD\u00E5\\x0004\"\u00C6\u00A8\u00AA\u00F8\u00EA\u00BE\u00A4\u0089\u00DC:)\u008F+\n\u008D\u00BA\u00A4\u00F7\u00CB\u00DA\u00F9\u00A5\u00EC\u00BAOi\"\u00F8\u00F1B\u00B9I\\x0016\u00EBO\\x0014yi 6\\x0004I5\u00C1k\u009A\u00C9\u00DE\u00D9\u00FC\u00F7\u0084\u0084\\x000e,\u00A8v\u00BA\\x0008@\u009A@\u009A\u0094\u0096@H\u00D2\u00A4\u00A8`L\u00CE\\x0015Q\u00A44\\x0011\u00FD\u0094\u008C\u00F7o\u00A3\\x0004[\u0097\u00EB\u00E2\u00BF\\x0011\u00FDJ\u00AD\u00FBf\\6'\u0093?i\"\nF6G\u00FC\u0088\u00AA$\u00B1\u00BDi\u009C\u00A4\u0089].(\u00CE\u00B9\\x0010~C'\u00AA\t\\x001d\u00D1nxt\u00A3}\u00F6\u0084tY8\u00BC7&\u0094\\x0000\u00A4Ii\rs\u00C6\\x001f\u00FB\u00E2C\u00C7\\x0004\u00B0\u0088\u00A5\"\u008A:\\x0011\\x0005\u00CF\u00FA\u00B4\u00D0b\u00EB\u00E5\u00B4\u00AB\u0087~\u00DCm\u00AF\\x0014\u00E1o\u00A9X-\u00A2\u00BD\u00D3\u00FAFa\u00AD\u0083\u00EF\u0086\\x0017}\u00C5\u00D8{MD\u00BB\u00FBs\u00BB\u00C2\u0088\u00EF\u00B2\u00CC/\\x000fG(M\\x0002Hv\u0099\u00ED\u00E9\\x0012j\u00DEP\u00ED\u00E4\\x0012\u00804\u00814)!\u0081\u00E2y\u00D8{w\nO\u00E3\u00A1fp\u009A\\x001c\u00F1m\u00A1\u0085\u00FE\\x0003K\\x001dn\u00CB\u00E5LG\\\u008D\u0081x\u00A78\t\u00FB!\u00B5\u00C5\u009C\u00B6\u0095\u0085\u00F7/\\x0008\u00DA\u00A2p\\x0004\u00AA\u00BA\u00B8+&B\u009AP%\u009D\u00C4\u00A2@\u009A\u0088W\u008A\u0095pBG<7\u00E4\u00B6\u00D5\rv4\u00C9\u00F8\u00EBb\\\u009B\u009FAiR\u0091\\!\u0099\u00F8\u009AG M\u0084\u00F3\u00F4.c\u00B1\u0087\u008D\u00F7/M\\x001c\u00BC\u00E8\u00BA\\x0016Q\u00FD\u00FF\\x0016\u00E3\u00E4o\u0087Y'\\x0007\u008FhL\\x0011\u00FD\u00C8\u00ADU\u00AB\u0089'\u0086\\x00025\\\\x0014\\x0001*\u0090\u0086E\u00FF>\u00A2\u00A7z\u0096\n\u00D4\u00F0\\x001bk\u00C2\u00E5\u0097p\\x00119OE\u0095\\\u009A\\x0008#s\u00FD\u00DD\u0097\u00C4\\x000f5q\u00B5\u00B8\\x0000+I \u00F5\u00D2d\u00A8uI\\x0008-'F\u00AF-\\x0017\\x0001\u00814\tu-\u00B7s\\x0018\u00A9\u0084\u00D7A\u00B5A-\u00B4\u00C8\u0091^\u00F0\u00DB\u00FB\u0092&\u0082\u008D[|F`\u0088\u00E2<\\x001c&\u00B0\u008C\u009E\\x0010\u00BC\u00E1\n\u00B7 WL\u008A\u00D7\u0084{X\u0084\u00CD\u00F4\u00ECZe\u0091&l\u0094\\x000b|_0H\u0082@y\tdO\u009AP\\x0018f\u00B9\\x000c3\u00AE\u008Bmfd\u00FA\u0080\u00E4\\x0016m2E!\\x000f\\x0008\u0080\\x0000\\x0008$\u0090@\u00DA\u00A5\t\u00DD\u0092\u00D0\u0096\u0084xz\u0095\u0091\u00C1\u008B\\x0000~\u00D2Hb\u008C\u00F0Z \u00EA\\x0005Y\u00E2\\x0012P\u00E7 \\x0000\\x0002 \\x0010g\\x0002\u0099\u0094&4\u00AD\u0080\u00E1\u00BB,\\x0004 M<\u00B1\u00DB\u00E7\u00A4|\u00CE\u00E6\u00A0o\u0083\\x0000\\x0008\u0080@\u00D2\td@\u009A`\\x0012\u00C1\u00D3\\x001c\u0096&C\u00C8+\u0087\u00D3\u00E8<\\x0010\u00C5\u00CA\u00B8oG\u009B\u00F4\\x0001\\x0008\u00F5\\x0007\\x0001\\x0010\\x0000\\x0001;\u0081,H\\x0013D\u00C2\u00C6\u00C3\u008AG\u00B5<'\\x001e\u00AD\\x000b,\u00EF\u00DC\u00D7\u00A6\u00C2e\\x0012\\x0018,N\\x0004\\x0001\\x0010H,\u0081LJ\\x0013D\u00C2\u0096\u00A5\u00BF\n\u00DCW\\x0008I\\x0016\u00AC\t\u00E2V>K\u00FF\u00A2rYn(.\n\\x0002 \\x0000\\x0002\u00D1\\x0010\u00C8\u00AC4A\u00B8I\u00C9\u009D\r\\x00084\\x0011?\u00C3\u008E\\x001b\u0097a*\\x0007\u008En\\x0010\\x0000\u0081l\\x0012\u00C8\u00804\\x0011.\u00D2A$l4R\u00D7\u00F1)B\u00A0\u0089#p?\u00BF\u00FFW\u00E2\u00BB\u0086\u00CB\u0081\\x0000\\x0008\u0080@9\\x0008dC\u009A`*\u00A1\\x001c}\u00CB$S M\u00CA~\\x000bP\\x0001\\x0010\\x0000\\x0001\\x0010H\\x0008\u0081\u008CH\\x0013[$,\u00C2MJ\u00DCA\\x0005\u00B39\\x00084)\u00F9\u009CZ\u0089o:.\\x0007\\x0002 \\x0000\\x0002\u0081\\x0008dD\u009A\u00886^\u00C3\u009CN\u00A0\\x001e\\x0013h\u00E2S$\r\u00C1\u00BFt\u00FC\u00A1\u0081@\\x0000\\x0004@ I\\x0004\u00B2!M\u00C8\\x0006`N\u00A7\u008C\u0086\\x0010\u00B39e\u0084\u008FK\u0083\\x0000\\x0008\u0080@\u00D2\\x0008dG\u009A`N\u00A7|\u0092\\x0019\u00B39I\\x001b\\x0017\\x0002\u00F9\u00C6\u00CA\u00D7\u00C1\u0080\\x0017\\x0004@ ]\\x0004\u00B2-M0\u00A7P\u0082\u00DE,t\u0099\u0080|\t\u00C8\u00E3\\x0012 \\x0000\\x0002 \u0090L\\x0002\u0099\u0091&\u00C29\\x001d\\x0004\u00C3\u0096\u00A0\u00D7\u00DA\u00A7\u00D2\u0080\u00BD\\x0004\u00D8q\t\\x0010\\x0000\\x0001\\x0010H,\u0081LI\\x0013\\x0004c\u0096\u00C3\u00E5\u008E\u00D9\u009C\u00C4\u008E\\x000e\u0098\u00D6\\x0001\\x0001\\x0010\\x0000\u0081\u00B2\\x0010\u00C8\u00924!\\x000b\\x00013Yb3\u0089\u00D9\u009C\\x0012\\x0003\u00C7\u00E5@\\x0000\\x0004@ \u00F9\\x00042&M\u00C4\u0093\\x000b\u00D8\u00B4>2o\u008A]\\x000bb6'\u00F9\u00A3FY\u00DE\u00A2pQ\\x0010\\x0000\u0081\u00EC\\x0010\u00C8\u009A4\\x0011\u00CE\u00E9`\u00EF\u00AFh\u00A4\t\\&P! \\x0000\\x0002 \\x0000\\x0002\u00FE\tdL\u009A8\\x0006\u00C3\u00C2q\\x0012\u0081:\u0081\u00CB\u00C4\u00FF\\x0003\u0099\u009D\u00B7\"\u00B4\\x0014\\x0004@\\x0000\\x0004\u009C\\x0008dP\u009A\u00C0q\\x0012\u0081\n\u00B1\u00DB`\u00B1\u00CB\\x0004\\x000e\u00AA\u0092\u00C0\u0087$\\x0002\\x0001\\x0010\\x0000\u0081$\\x0013\u00C8\u009E4\u0081\u00E3\u00A44\u00FDU\u00E82Y\\x000f\u00C3\\x000c\\x0002 \\x0000\\x0002 \\x0000\\x0002\\x001e\\x0004\u00B2)M\u00E08\u0089\u00F8\u00C1\u0080\u00CB\u00A44\u00FA\\x000fW\\x0001\\x0001\\x0010\\x0000\u00814\\x0012\u00C8\u00A44qr\u009C`\u008B\u00D2p\u00BA\u00B8H\u00F9\u0091\\x0013\\x0005x\u00C3\u00C1\\x001b\u00B1\u00ACD%A\\x0000\\x0004@\u00A0\u00DC\\x00042+M\\x001c\u00CCg\u00B9\u00EFG\\x001a\u00A2\u00A2\u0084+\u00B4\u00A1K\u00D0\u00B5@\\x0000\\x0004@\\x0000\\x0004\u00E4\\x0008dU\u009A8:N\\x0010\u00A7Y\u00DCK\u00B9p*\\x0007{\u0099\u00C8=\u008Di\\x0010\u00A6h)\\x0008\u0080\\x0000\\x0008\\x0014M \u00CB\u00D2\\x0004\u00F3\\x000e\u00C5\u00A9\\x0010a\u00E7\\x0013G\u00BFbmv\\x0004\u00A8\u008B~\u00F8\u00A1\u0084@\\x0000\\x0004@ \u009E\\x00042,M\u009C\\x001c'x\u00C5\\x000fl\u00F3\u00C4S9qrD\u00D1\\x0012!\u00F2\u00EB(\u0089b_\u00F4\u00C4\u00CB\u00A9\u00C2q\u0096\r\u00A2\n\u00A2\n\\x0004@\\x0000\\x0004JM \u00DB\u00D2\u0084l\u00B0\u00F8-?N\u00D64\u00B0P(\u00F1\u0089NS9e_0\u00AC\u00C9\u0091\n\u00F1\u00BD\\x0016v\\x0000\u00E1o-A\u00A6\u0094\u00B8G\u00E1r \\x0000\\x0002Y%\u0090yi\u00E2hP\u00F1\u00BA\u00ECG&\u00C7\\x0010\u00A3\u00E1\\x001d\u0091\\x0014\\x001f\u0092\u00D9\\x0014\u00B7\n\u00FA\u0086\u009F\u00BE\u0091\u00D5\u00B15\u009E~r\u00D4\n\\x0004\\x0012A \u00F3\u00D2\u00C4eZ\\x0007\\x0016H\u00DE\u00A8\u00C4\u00CA\u00F9\u00C4\u00E6k$\u00A5F\u00E0l\u0098\u00EE\u0091\u00EF\\x001e\u00C8\t\\x0002 \\x0000\\x0002~\\x0008@\u009A\u00A8\u00EFN\u0096\u00CC\\x000f\u00CADH\u00D1H*\u00E9d\u00DDKO\u00AF4\u00A2\u00C4\\x0012\u009BR\u00FAf\u00E2\u008A \\x0000\\x0002 \u0090j\\x0002\u0090&L\u009A8\\x0004\u009D $\u00D6\u00B3\u00F7;\u00A9\u00BA\\x0012\u00FB\u009CJ/J P<\u00FB\\x00062\u0080\\x0000\\x0008\u0080@ \\x0002\u0090&\u00FA\u00AC\u00B9c\u00B4\\x0004Bb\u009D\\x0003\\x000b\\x001cuIi\u00A19\u00DD;'w\\x000e\u008B\\x0017\u00E1\\x0013{xL\\x0007\u00D5\u00F5;\u00BE\u00A6{J\u00AC\u00C6\\x0002=\u00F0\u0091\u00B8\u00CDP\\x0013\\x0010\\x0000\\x0001\\x0010\\x0008\u0095\\x0000\u00A4\tgw\u00A1N|\u00F5\u00AD8\u00E0RV\u00DF\u00C8\t\\x0008-|\u00D5\\x0004+\u00D3+\u0092\\x001a\\x0005\u00EA\u00C4W\\x0017Bf\\x0010\\x0000\\x0001\\x0010\\x0010\\x0011\u008041\u00BB\\x0004b\u00E2\\x0006\u0088gu\u00B1\u00D6%3\u00CF2\u008A!\u00CC\\x00055\u00D2\\x001a%\u00FE\u00B7\\x000f5\\x0004\\x0001\\x0010\\x0000\u0081\\x0018\\x0013\u00804\u00B1\u00CDV\u00B8\u00CC\\x0002\u00C4\u00F8F\u0096\u00D4Q\\x001f\\x000b]\u00E2\u00E5,\tS\u0094X\u00F4\u00AB\u0084\\x0013\u00A5d\u00FA\\x000c}\\x0012\\x0004@\\x0000\\x0004RG\\x0000\u00D2D\\x0014H\\x0001u\u00E2\u00D2\u00D1\u00E3\u00AFK\u00A2\\x0013%<\\x0016O\u009F\r\u00D4I\u00EA\u0086\u00CB\u0092\u00BE\\x0000\u0080\\x001e\\x0008d\u0098\\x0000\u00A4\u0089H\u009A\u00B8[\u009D\\x000cw\\x0017\u00B7\u00C0\u008E\u0092Yb\u00F7\u00E0\u0092\u0092U\u0083u\\x0003\u00F7\u00AER\u00E2\u00CAd\u00B9g\u00A2\u00ED \\x0000\\x0002)\"\\x0000i\u00E2\u00B0\u00FC\u00C4C\u009D\u00F8\u008F\u00A6LA\u00A7q\u00D1\\x0004%\u00B3\u00C1nu(\u00ED\u00B2 \u00E3\u0086B\u009D\u00A4\u00A0o\u00A3\t \\x0000\\x0002q\"\\x0000i\u00E2\u00B22\u00D65\u00A4\u00A0d\u00C68\\x0016\u00DD%\\x001e(\u00E2\u00A0\u008D\u009CnG\u009C\u00EB\\x0016\u008B.\u0084\u00BD\u00EDA\\x0000\\x0004@@\u0096\\x0000\u00A4\u0089+)\u00BC\\x0010\u00C7g\u00CE\"\u00FE\u00B6?\\x000eQ8P! \\x0000\\x0002 \u0090|\\x0002\u0090&\\x0012\"\u00CEeO\\x000b\u00B2\u0097\u00C9\u00EF\\x0004nM\u0088I`GR\u00AC~R\u00EA\u0099\u00EEN\u008B\u00D6\u0081\\x0000\\x0008$\u009C\\x0000\u00A4\u0089\u00844Q<\\x0007\u00AEKUS9\u00B9\\x0013\u009F\\x0015(.5\u0089\u00E1\u00E3\u0097\u00AC\u00DA\u00C6\\x0010 \u00AA\\x0004\\x0002 \u0090y\\x0002\u0090&r\u00D2\u00C4[\u009D\u00A4\u00CB}\u00E2\u00ADK\u00A4\u00B9\\x0015\u00FF\u008C\u00C5\u00E7\u00E7\\x0003%\u00DB\\x0012\u0087}r%\u00AB\u008Al \\x0000\\x0002 \\x0010?\\x0002\u0090&~L\u00AC\u00B7\u00C1N\u00FE\u00CA\\x001d\u00EF6\u0096V\u0084\u00C5\u00E4\u00E7\\x0003\u00FD>\u00BA\u008E\u00EA$\u00F9=\u00C4/\n\u00E4\\x0007\\x0001\\x0010\\x0000\\x0001\u009F\\x0004 M\u00FCH\\x0013\u00C5w\u0092\u00E2\u009D@i#v\u00CF-VKkY\\x0013m\u00E0\\x001dE\u0095\u00CF.\u00E7\u00F3\u0091Ny\u00F0\\x0013h\u0080\\x0000\\x0008d\u0080\\x0000\u00A4I ;\u00E1m\u00C2\u00D5\u00DF\u00B6ML\\x0007\u0092\\x0010%4\u00ABR\u00FA\\x0016\t9\u0097\u00BE\\x001a\u0081\u00EF\u00A3p**\u00F5\u00A1\u00D3\u0081q\u00E1D\\x0010H4\u0081\u00BAO+*\\x0016\nSu\u00ED\\\u00FF\u00E6\u00E0\u00DD\u009C^Z\u00AE.\u0090\u009Dr\u00839\u00B7\u00B6zaE\u00F5\u0087Mq\\x0005\\x000ei\\x0012\u00F4\u0096K\u00B9O\u00CAa\u00CE\u00FDu5IQR\u00DAI\\x001c\u00D6\\x0004'\u00C2\u00FE\\x001a\\x0018\u00F4\u00FE\u0086s\\x0015\\x0007\\x001f[\u0082\u00D4U8\\x001c\u00CA{\\x0017pu\\x0010(\t\\x0001gi\u00A2\u00E8\u0095\u00DC\u00BB\u00BE\u00D4I]\u00CEP9\u00B5\u00B5M\u00A1\u00D7\\x001f\u00D2$\u00C5C\\x001b\\x0019\\x0018O\u00F7\t{o\u008E\u00A1)\u00F2W\u00F9rx\u0080\u00C4.\u0087r\u00D4\u00A4\u0098>,\\x0014Xp\u009C\\x0014\u0083\\x0014\u00E7\u0082@<\t\u00A8\u00D2D\u00E4\u00E1`\u00FE\\x000f_\nC\u0095\\x000e\\x0015\u009F\u00D6E\u00D5RH\u0093\u00A8\u00C8\u0086\u00AE\"\u0083\\x0016(\u00E3>\u00D1\\x0004J\\x001c4\n\u00C9)\u0089p\\x0019\u00A3\u00C2\u00E5\u00BA}b\u008B\u009E4]\u00C2\u00E8\u00A5Cc\u0095\u00AB'\u00E0\u00BA \u0090\\x0014\\x0002\u008E\u00D2\u00A4&\u00EF\u00F2\u0095\u00B8uQK\u0087\u00A8\u00CB\\x000fjOu\\x001a\u0098\u00D0)\u0096\u00A0\u00E6\u00A3\u0093t\u009F\u0094M\u00A3\u00F8Q$\u008A\u009B\u00A7\u00DC*Jh\u00CE\u00932BY\u00EA\t\u00C7IBo\\x001c\u00AA\r\\x0002\u00BE\\x0008\u00F8\u0093&\u00CC/\u00A2'~\u00BA\u00C721\u00A4|\u00A5f\u00CE\u00BD\u00DBT[\u00AB\u009Eb8`\u009C\\x000bQk\u00AE\u00E7gW\u00E1}0\u00864)D\u00B4\\x0004\n\u0088\t\u00C9\u0080\u00DA8C\u009A\u0084GV~\u008A\u00C4\u00B0\u00BB\u009A\\x0002\u0088\u00CC\\x0019\\x0010\u00BCJ\u00E1a\u00F1\u00F5l\u00BBD\u0099\u00C4pRL\u00BEiI\u008F\u00E7\u0095o)r\u0082@f\t8I\u0093\u00A6\\x000f\u00AB-\\x0013:\u00DA\\x0011K\u00CC\u00AC.\\x001d\u009C\u00A4Iu\u00ADZ\u008E\\x001e\u00BE\u00EA^H\u00BE\u0086\u008BV\u00B1\u0087\u00AD0i\u00F2i\u008E\u0097G\\x0015\\x000b\u00E3\u00A3N M\u00C2\u00B6\u00C1\\x0001\u00D4\\x0000\u00EFJQN\\x000f\u00ACT\u00D4s\u008B\u00AC@\\x001c\u0086\\x0015\u00A1!\u008FC\u00C5\\x0002\u00D7!M\u00F3S\u0081!\u00E0D\\x0010H7\\x0001\u00D70X\u00CE\u00EAk\u00AE\\x000e^\\x0007h\u00EE\u008D\u0082\u00EF\u00C42\u00E1b?\u00C5\u00B3\\x0010\u00D5\\x001d\u00C2\u00AF\u00C1Q\u00AB\u00A7_Tw\u00B7\\x0018\\x0019X\u00E5}\u00C6\u00EA\u00FA\n\u00EC\u00F5\u0095\\x0019\u00D2$lib\u00BC\u00F7\u00FB\u009A\u00E2qZe\u00CA\u00DC*nI\u009D|q\u00F9\u0095\\x001f\u0099\u00AF\u00CA>}c\\x0019\u00B0\u00ECu\\x000e.\u00D7\u00A2\u00B9\u00BF\\x0001FX\u00FBmB0l\\x0000\u008C8\\x0005\\x0004bK\u00C0Y\u009A\u0098bcUo\u0087\u00DD?\u00A1:9\u008C9\\x0017\u00A14\u00E1fd\u00BC\\x000b1fj\u0084\u00B1\u00B4L\u009A\u00F0\u0091\u00B96)SV\u00CE\u0090&Q\u009A.&)d\u00C4A\u00B9\u00F2\u00C4M\u0094\u00D0\u00C3 $\u0096\\x000f\u00ECI\u008A\u00F2\u00FE\u00FAzt\u00E18\u00F1\u0085\\x000b\u0099A q\\x0004\u00AC\\x0013:\\x0002\u00C7\u0086\u00E29ps\u00AE\u0098\u0083H\n>\\x000f[\u00D4\u00AAD!\u00E6@\\x0013uN\u00C7\u00D1+C\u00E3d\u00BC\\x0002c!MJb\u00BA\\x0002O\u00B2D$Yb\u00A8H\u008Ca(\u00C5\u00DE\u0085Tz\u0083\\x0012g?Pa\\x0010\u0088\u0088\u0080 \u00D6D\u00A4N$T\u0085M(\\x0004\u0091&\u00EA\\x0004\u008A9N\u00B60\u00C5c\\x0017\"\u0090&\\x0011u\u008BD\\x0014[^\u008D\\x0012gEb\u00DC\u00BE\\x0014\u00DB\u00EF\\x0014\u00AB\u00AED<}\u00A8$\\x0008DJ@\\x001c\\x0006k\u00DB\u00D4\u00C4a.\u00C6\\x001c\u008A!\u009A\u00D0\u00E1\\x0003G\u00A4\n\u00B1\u00BCx\u00F35\u00814\u0089\u00B4+$\u00B7\u00F0b\u00E2U}\u00B9R\u008Ch\u0095D\u00B0\\x0012\u00CF\u00E6\u0094\u00C4\u00B3U\\x0002>\u00E9n]\t\\x0000\u00E2\\x0012 \\x0010g\\x0002N+t\u0098\u009B\u00C42;c\u00D9\u009CM[n\u00E3\\x001akb\u00DAW^s\u0087\u00D8\u00A3X\u00B4\u0080\\x0015V\u00A0\u00E0\\x00146g\\x0004i\\x0012\u00E7\u009E\\x0014\u009F\u00BA1o\nK\u00BE\u0094\u0087\u00C0\u00C7\u00A0\u00EFJ\u0092\u00C4\u00D0\u00D1\u00D4\u00FB\\x0015R\u00EC\\x0013\u008A\u00CF\u00D3\u0084\u009A\u0080@Y\\x00088\u00EFk\u00C2\u00D6\u00F1\\x0016B_\u00C5\u00EB~\u00F9\u009Dd\u00BD\u00BC&\u00D4@\u00AFBD\u008B\u0087\u008Dp\\x0013H\u0093\u00B2t\u0091\u00A4_\u00B4\u00B0$G\u00D7+\u0086p\\x0011|\u00D0\u0097\u00F0$\u00BD\u00D5T\u00814I~\\x0000,_ MR\u00D0K\u00D1\\x0004\\x0010\\x0010\\x0012p\u00DB\u00F2\u00D5\u00BEW\u00BD%\n\u00C4\u00B2\u008EFB\u009A\\x0008BI\u00AC\u008Bq,\u0091\u00B0\u009C\u008B\\x0005\u00D2\\x0004\u009D\\x0018\\x0004\u00E4\t\u00A4\u00DEr\u00A7^{\u00C9\u00DFk\u00E4\\x0004\\x0001\\x0010\\x0000\\x0001\\x0007\\x0002X\u00A1\u0093\u00968\u0086ttq\u00BB4I\u00C1\u00B2a\u00FE\u00D6\u00D8\u00C3M\u00B0\u00BBI:\u00BA.Z\u0091m\\x0002\u0085-\u00E7\u008D\u00BD\u00E7\\x0013\u00FB\u00C1\u00D7\u00DEh\\x0011e\u00864\u00814\u0089\r\u0081,D\u0089B\u009Ad\u00DB\u0080E4\u008E\u00A3X\\x0010H\\x0019\\x0001H\u0093\u00D8\\x0018f\\x000c\u00D9Y\u0090&\u00E4\\x0004\\x0012x\u0086\u00D0\tA\\x0000\\x0004@\\x0000\\x0004\n\\x0004 M\u00D0\\x001bbC #\\x001e\\x0005H\\x0013\u00A8p\\x0010\\x0000\\x0001\\x0010p%\\x0000i\\x0012\\x001b\u00C3\u008C\u009E\ni\u0082>\\x0000\\x0002 \\x0000\\x0002 \u0090\u00AF\u00814\u00814\u0089\r\u0081\u00D4oj\u00C2F\\x001cxM0\u00F2\u0082\\x0000\\x0008\u0080@\u00D9\u00BC&?\u00DC\u0091G\\x0002\\x0001y\\x0002\u008B*\u00F3\u009F\u0099\u00D3\u00A2\\x0001)\u00ECB\u00966\u00D2\u009F\u00F2\u0088\u0090\\x0013\\x0004@\\x0000\\x0004\\x0012A\u00A08\u00ED\\x0015\u00A5\u00D7$\\x0011\u00F8P\u00C9\u00F8\\x0010\\x0010H\u00934\u009AmH\u0093\u00F8t9\u00D4\\x0004\\x0004@ \"\\x0002\u0090&x\u00E9L\t\\x0001\u00F2\u0091X\u00BD&\u0090&p=\u0082\\x0000\\x0008\u0080@\\x0002\t$@\u009A\u00E4W\u00E4\u0091@\u00C0\u0093@\u00E7\u00E2|\u00EB|S\u00EA\u009C\u009F\u00C2\u009Eci#\u00FD\u00E9I\\x0006\\x0019@\\x0000\\x0004@ \\x0011\\x0004\\x000c\\x001f\\x000c\u00A4\tF\u00F6\u0094\\x0010\u00B0K\u0093\u00F4\u0099\u00ED,\u00B41\\x0011\\x0003(*\t\\x0002 \\x0010\\x0005\\x0001H\u0093\u0094\u00D8\u00E3(:Gr\u00CBL\u00BDG!#\u009E\u00A1\u00E4\u00F6@\u00D4\\x001c\\x0004@\u00A0\\x0018\\x0002\u0090&\u0090&)$`\u0097&d\u00CB\u008ByN\u00E2v.\u00A4I\u00DC\u00EE\\x0008\u00EA\\x0003\\x0002 \\x0010\"\\x0001H\u0093TY\u00AC\\x0010{F\u00A2\u008B\u00A2\u00E0\\x0012k\u00B8I\u00CA\u00A4I\u00DA\\x001b\u0098\u00E8\u00EE\u0087\u00CA\u0083\\x0000\\x0008\\x0014I\\x0000\u00D2\\x0004\u00D2$\u0085\\x0004\\x0004\u00D2$]Q\u00A2\u00A9w\\x000b\\x00159\u00AE\u00E1t\\x0010\\x0000\u0081D\\x0013\u00804I\u00A1aNt\u008F\\x000c\u00A5\u00F2)\u008F\\x0012\u00B5-A\"\u00A5\u0092\u00B2\\x0019\u00ABP\u00BA\\x0001\n\\x0001\\x0001\\x0010H(\\x0001H\\x0013H\u0093\\x0014\\x0012\\x0010K\u0093\u00B4\u00CC\u00E9\u00A4\\xa\u008F\\x0000\\x0010\\x0000\u0081\u00CC\\x0013\u00804I\u00A1aN\u00A8L\\x000e\u00B7\u00DA)\u009E\u00F2\\x00104-]\u00D3U\u00E1\u00F6\\x0004\u0094\\x0006\\x0002 \u00908\\x0002\u0090&\u0090&\u00E9$`\\x000f7I\u00C9\u00EE&\u0098\u00CD\u00C9\u00FC\\x000be\u00E2\u00CC\\x000c*\\x000c\\x0002~\t@\u009A\u00A4\u00D30\u00FB\u00ED\\x0007\u00E9\u00CB/\u009C\u00F5HA@\\x0006fs\u00D2\u00D7W\u00D1\"\\x0010\\x0000\\x0001\\x000b\\x0001H\\x0013H\u0093\u00D4\\x0012H\u00E5\u00C4G*\\x001b\u0085q\\x0019\\x0004@\\x0000\\x0004x\\x0002\u0090&\u00A95\u00CC\u00E8\u00E8\u00E29\u009D$\\x0007\u00C3\u00A6\u00D5\\x0015\u0084\u00BE\n\\x0002 \\x0000\\x0002\u0090&\u0090#\u0099  6\u00E4I\u008E\\x0018\u00B5\u00BBLR\\x0012@\u0083\u00F0\\x0011\\x0010\\x0000\\x0001\\x0010\u00E0\\x0008\u00C0k\u0092\t#\u009DY=\u009E&\u00C7\t\\&\u0099\u00ED\u00C6h8\\x0008d\u008D\\x0000\u00A4\t\u00A4I\u009A\t\u00A4\u00C9q\\x0002\u0097I\u00D6Fg\u00B4\\x0017\\x00042K\\x0000\u00D2$\u00CD\u00869\u00B3\u00DD\u009Ao\u00B8\u00D0q\u0092\u00B8\u00A5:\u00E2V$yr\n\u009D\\x0013\\x0004@\\x0000\\x0004\u009C\\x0008@\u009A@\u009A\u00A4\u009C\u0080\u00D0q\u0092\u00AC\\x0010\u008D\\x00144\\x0001C0\\x0008\u0080\\x0000\\x0008\u00C8\\x0013\u00804I\u00B9a\u0096\u00EF\n\u00A9\u00CD\u00B98\u009Fl\u0097\u0083h\u008F5\u00FChNj\u00BB+b!A\\x0000\\x0004V\u00E4!M M2A@\\x0018\u00A8A\u0092%\u00FE\\x0016.\u00B95\u008F?[\u00D4\\x0010\\x0004@ \u009E\\x0004 M\\x0012`\u009C\u00E2\u00D9u\u0092U+\u00A79\u0091\u0098\\x0007\u009D\\x0008\u00FD=p\u0099$\u00AB\u00EF\u00A1\u00B6 \\x0000\\x0002~\t@\u009A@\u009Ad\u0085@\u00E2\u00CC|\u00E2*\u00ECw\u00F4A~\\x0010\\x0000\\x0001\\x0010\\x0010\\x0012\u00804\u00C9\u008Aa\u00C6\\x0003@\\x0004\u0084\u0093#\u00F1tB8\u00EA\u0092$LB\u00A1\u00B3\u0081\\x0000\\x0008\u0080@1\\x0004 M M2D\u00C0iZ'n\u00EA\u00C4I\u0097$kaQ1\\x0003\\x0013\u00CE\\x0005\\x0001\\x0010\u00C82\\x0001H\u0093\\x000c\\x0019\u00E6,wt\u00A3\u00ED\u00F1W'\u00D0%\u00E8\u00A8 \\x0000\\x0002\\x0019'\\x0000i\\x0002i\u00929\\x0002n\u00EA\u00A4\u00AC\u00D3%.\\x0015\u008B\u009B_'\u00E3\u00E3&\u009A\\x000f\\x0002 \\x0010)\\x0001H\u0093\u00CC\\x0019\u00E6H\u00FBSR\n\u008F\u00A1\\x0008\u0088a\u0095\u0092r7QO\\x0010\\x0000\u0081\u0094\\x0011\u00804\u00814\u00C9(\\x0001\\x000f)PB\u00F7\u0089{M\u00E0/I\u00D9\u0098\u008B\u00E6\u0080\\x0000\\x0008x\\x0012\u00804\u00C9\u00A8a\u00F6\u00EC\\x0019Y\u00C8P~M\u00E0\u00B0S-\u00BF\u0092(\u00E6;\u00AFd\u00A1\u009F\u00A0\u008D \\x0000\\x0002%&\\x0000i\\x0002i\u0092i\\x0002\u009E\u00EADsZ,\\x000e\u0099\\x0012]\u00D7%\u00DC\u0095I\u0093DlV[\u00E2\\x0001\\x000b\u0097\\x0003\\x0001\\x0010\u00C8\\x0002\\x0001H\u0093\u0090MN\\x0016:M\u00CA\u00DA\u00D8\u00B9\u00C2[%0\u00A1\\x0010\u0082\\x0003\u0083\\x0014\u0089\u00C3o\u00E2X\u00F6\\\u0081.IY7Cs@\\x0000\\x0004\u00E4\td\\\u009A4\u00D5\u00F6\u00AB\u00A8\u00B8TO\u00C3\u00EAL\u00E0jr\u0085\u00AF.\u00CD\u00D5\u0085\u00FF\u0093Ku9\u00CB\\x0015\u00C3\u00BFD\u00A4\u00C2+\u00E2\u00FA\u00D7\u00D6V\u00AB\u00B7\u00A6zt\u0093|\u0087\\x000e\u009C\u00D3\u00E6\u00C3\u00A8{\u00EE\u0096:\u00A7\u00DF\u00AFQ|\\x001e~\u00FC(,\u00BF\u00D3\u0086o\u00F6\u00E3\u00BE\n\\x000f\u00DCd\u009C\\x0008\\x0002 \\x0000\\x0002\u00F1$\\x0000i\u00C2I\u0093~\u00B5M\u009C8\u00A8\\x001b\u00C6}\\x0015\u00BA4a\u00BA'\u00B9\u00D2\u00A4\\x0004\u00F5/\u00AD4\u00A1\u00E7\u00B30\u00C9\u00F2J\u00EE\u00D2\u00FFRq\u00A9\u00834\u00B1\u00BB7\u0098\u00F2\u00B0&\u00D5\u00D1\"/G\u00B4I\\x001c*'a\n5R\u00F9\u008B\u00C2A\\x0000\\x0004\u00B2H\\x0000\u00D2D\u00D3\\x001f\u00D5\u00FD\u00AA+.\u00AD\u00AE\u00AD5:\u0081\u00EAP\u00E9W\u00CD^\u00DC+B\u0096&u9VlR\u00A5I\u00D2\u00EB\u00EF\u00F6\u00A8w.\u00AE{\u008Et\u0089\u00B44\u00F1+>\\x001c7\u00CB\\x000fe\u00C2\\x0008\u00B2\\x0006\\x0004@\\x0000\\x0004\u0092O\\x0000\u00D2D\u0093&\u00B9a\u008A\\x001b#Wc\\x0018-\u00D5\u00FA\\x000e\u00CBi\\x001a\u00C2&M\u00BC|*\u00E6\u00A9\"\u00D3\u00AC\u0084n\u00D7\u009D&\u0092\u0094^\u00A5\u009F\u00DE\u00AF\u00B6n4i&\u00B5\u0092\\x0005\u00A7\u008E\u00A9\\x0004\u00AE\u00CE\u00E6\u00CA\\x001b\u00E5\u009B\u00BDA\u00AA\u00FB\u00CE\u00A5\\x0004Nv\u00E8~\\x000b\u00B38\u0093\u00A9?\u00D7\\x0004\u00BD\\x001a\u00E6y\\x0019\u00CF\u00AB\u00E4\u00F3V\u00AF\tw\n?\u00D7f\u0092w2y\\x0018%'\\x0002\u00DA\u00F1\u00DF\u00FD7U\u009D\\x0014\\x0004J\u00D3\u00EC\u00CB\u00F5#\u00EA\u00F1\u00DB\\x001fk2\u0089\u008CY\u00B5\u00B7\\x000b\u008FK8N\u00C2\u0089bI\u00FE`\\x0014O\u00C72j\\x0005\\x0002 Pz\\x0002\u0090&\u00BA4\\x0019\u00ADF6\\x0018vN5~\u00D5\u00A3kE\u00D2\u00C4f\u009B\u00AD!\\x0011V]\u00A2i\\x000b\u00ADp\\x0019\u00D3.(A3\u00ED\u00A6\\x0008\\x0018Q\u0094\u008CIO\\x0018sR\\\u00AC\u008CG\t\u00E2\u00D6q\u00DA(`\u00FD\u00CD^\"\u00CF\u00AB8K\\x0013Cr\t\u00B4\u0097D\u00B1d\u00C2\u00DD\\x0008\u0098J \u0081\u00F2;eZ\u00C7\u00AAK\u00CC\u00AAE\u009D\u00B5\t$M JJ?\u00E4\u00E1\u008A \\x0000\\x0002\u00F1'\\x0000i\u00C2\u008C7M\u00E5\u00A86Iw04)\u00BE\n:hH\\x0004\u00C3\u00B4\\x0017D\u0083\u00EE\u00AE0\u008E\u00E8\u00F3A\u00BA\u00E53\u00FC\\x0019\u00BA\u008B\u00C5\u00980\u00F2\u009C\\x0010\u00E1\u00A4\u0089\u0093W\u0080\u00BD%[\u00AFe\u00AD\u00B0\u00DA\\x0010>\u0098\u00D4vik\t\\x0005\u00DB\u00AC\u00FB9l\r4\\\\x000eN\\x0013R\u00F2\\x0004\n\u00FE$\u00DBU\u009C\u00BC&\u009C\u00824|W:jNX\u00E8us\u00CCc\u0096\u00A1\u009C\u00CF\u00CC\u008A\u00A8\u00B3&\u00A7h\u0094\u00FFR\u00F1\u00DC+Z\u00EC\u00C8\u00E2[\u0098\\x0007\u00A5z\u00F6,=\u009A\u00C4\u008F4\u0081\"\u0089\u00FF\u00C8\u0088\\x001a\u0082\\x0000\\x0008\u0094\u0091\\x0000\u00A4\u0089!M\u00F2\u00AA\rc\\x0012\u0084\u0099I\u00FAl\u0093&\u00E2\u00D8L\u009313\u00D4\u0080s(\u0089\u00BC4\u00E1\u00C3_\\x000c!b\u008B\u00891\u00AC\u00B5M\\x0013\u00B0\u0099\u008B\u00C2\u00A4\u008F\u0096\u00C1\u00B9\\x0004Cv\u00F0\u00D3@N\u00F2\u00C5A\u009A\u00F8 \u00E0r\\x0015Gi\u00C2\u00AF\u0096\u00B2\u00904\u00A4\u0089s\\x001ey\\x0002z\u00EB\u008C\u00E6\u00FC\u00EE\u00DE:\\x0016*\\x001b$\u00BEU\r%\u00C1\u00D2\u009B2\\x000ev\u00B84\\x0008\u0080@R\\x0008@\u009A\\x0014\u00A4\t\u00B3@\u00AA\\x00157<(NN\\x0008\u00B3b\u00E0BC\u00945>\u0082)\\x0015K~yibZ\u00B4\\0\u00F9\\x000e\u0093\\x001az\\x0006\u00CB\u00E5\nQ\u009F\u009E%\\x0014\u00820x\u00D9\u00E1S\u009A\\x0004$`\u00B9\u008AK\u00ACI!\u00AE\u00A2\\x0010\u0094\u00A3\u00AE\u00AE\\x0012\u00825\u00E5\tB\u00C0\u00E1\u0086\\x0016\u0096\u00E4\u00E8\u00B2\u0083\u00A9\\x0016-\u00E9kv\u00922\\x0016\u00A0\u009E \\x0000\\x0002 \\x0010\\x0013\\x0002\u0090&\\x0005i\u00C2&G\u0094Y\\x000cf\u008A\\x0014\u00DB,)M\u0098\u00C7\u0085[\u00C8#\u008Cf(\u00C4\u00D2JK\\x0013\u00B7\u00F5\u00CC\u00FC\u00DAfm*\u00CAS\u009A\u0098\u00A3w\\x0005%\u0084#M\u009C\u00E29\u00DC\t\\x0004\u0091&\\x0016\u00F2b\u00B0\u00FC\u00DD)\u0092\\x0000\u00B7\u00D5M\u00E8\u00EB\u00B6\u00B2\u00B8D0&\u00E3 \u00AA\\x0001\\x0002 \\x0010+\\x0002\u0090&\u009C\u00A4`\u008AD_\\x0014\u00C3\"-,\u009A\u00C3\u00C1\u00F6[\u00DE\u00DD\u00CD+\u00909\\x000f\u0087\\x001e\u00BD\\x0011P\u009A\u00E8Ww\u00DC\u00FF\u00CDS\u009Ax\u0096\\x0010\u009A4\u00D1\\x001c\\x001bN+\u0095D\\x0004\u0082H\u0093\u00C0^\\x0013\u0097=\u00F4\\\u00EE\u008E\u00CB\u00C2+\\x0008\\x000b\\x0010\\x0000\\x0001\\x0010\\x0000\u0081p\\x0008@\u009A\u00F0\u00DE\\x000ef\u0093r9\u00D5\\x0005\u00C2\u00E23\u00AC\u00EE\\x0010\u0089X\\x0013E{R6\u0093\u00C3\u00C3!$\u00C2q_\\x0013\\x0007\u00AD#\\x0008%1\u00F7\\x0003A\\x0006\u00B5(\u00C7\u0090O{7\u0092\\x0010\r\u009Ea\u00B0\u00C1\\x0008HJ\\x0013\u00D3B\u00EE\u00C0\u00B1&\u00FCBq\\x000b\\x0004\\x0011\\x0001\u008F\\x001b\\x001a\u00CE\u00D3\\x0018\u00AB\u00B7\\x0016T\\x0006\\x0004@\\x0000\\x0004\u00CAE\\x0000\u00D2\u0084\u0097&\u00FC;\u00B1\u00F6Vm\u0095&\u0085)\\x001e\u00C3\u00B6Y\u0097\u0096\u00D8\\x0016\u00C5\u00D8\u00D7\u00C1:yYl\u00EE\\x0016\u00EB\u0096$\u00B60O\u00DD\u009C\u00DBV\u00D3\u00E8^\\x0001cj\u00C9\u00BAt\u00D9\u009A\u00C1\u00CD\u00A3\u00E3\u00B4\\x000eH\u00B0c\u008A\u00D2\\x0004\t\\x0002\\x0012\\x0002(\u00EA\\x0015:\u0086\u00C4qbhZ\u00AEe\u00DE2\u00DF\u00AEPK\u00BEwm\u00B9\u0086\\x000c\\\\x0017\\x0004@\\x0000\\x0004\u00A2&\\x0000ib\u008A\\x0011)\u00C4H\u00EAf\u00C9&M\u0084Q\u00AE\\x0005/\u008Bz\u00C3\\x001c\u00F65\u00E1\\x000c\u00B9)\u00E2A\u00E0;q\u00D6.\u00C2(\\x0016^\"\u0088\u00F75\u00E1\\x0002c=J\u0090\\x0010\r\\x0005g\u0092\u00D3\u009E\u00B6\u009E\\x0004$\u00AE\u00E2\"M,Q\u00C0\\x0005\u0080\u00CE\u00FB\u009A\u0088\u00A2zM\u0081#nw\u00C7\u00B39v\u00F5\t?\n\\x0008\u0080\\x0000\\x0008\u0080@@\\x0002\u0090&\u00E6\u008DV\u00AD>\\x0006\u00C3\\x0001`\rM\u00F0\u00DA\r\u00B6\u00E090\u00EF\u00B7&\u00DA\u00B0U\u00E0{pu\u00ABX\u00C4\u0087@\u00D9\u0098-\u00B4\u00BD|\u00B7\\x0012$D\u0083e7U/\u00DF\u0089\u0088\u0080\u00C4U\\V\u00E8p\u00F5\u0097\u00D9dV\u00F0\\x0003\u0081\\x001e\\x000c9\u00806\u00DF\u0089\u00F8\u0086\u00C2k\u0082\u00EDhA\\x0000\\x0004@ $\\x0002\\x0019\u0097&\\x0001\\x0005]\u00D4\u00BE,\u0094/\"\u00E0\\x0019;\u00EC\u00B4x\\x0018w\\x0019\\x0004@\\x0000\\x0004@ I\\x0004 M\u0092t\u00B7\u00B2-Y M\u00D0WA\\x0000\\x0004@ \\x0013\\x0004 M2q\u009BS\u00A1i M\u00D0WA\\x0000\\x0004@ \\x0013\\x0004 M2q\u009B!MRA\\x0000}\\x0015\\x0004@\\x0000\\x00042A\\x0000\u00D2$\\x0013\u00B7\\x0019\u0086\\x0019\\x0004@\\x0000\\x0004@\\x0000\\x0004\u0092B\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004@\\x0000\\x0004@\\x0000\\x0004@ F\\x0004 Mbt3\u0092\u00A2gQO\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\u008E\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8fD\u00A7@Q2\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008$\u0085\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f$E\u00CF\u00A2\u009E \\x0000\\x0002 \\x0000\\x0002 \\x0010\\x001d\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\u00804\u0089\u00D1\u00CD\u0088N\u0081\u00A2d\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H\n\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\u00804\u0089\u00D1\u00CDH\u008A\u009EE=A\\x0000\\x0004@\\x0000\\x0004@ :\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0011\u009D\\x0002E\u00C9 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x0014\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\u0091\\x0014=\u008Bz\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080@t\\x0004 M M@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004bD\\x0000\u00D2$F7#:\\x0005\u008A\u0092A\\x0000\\x0004@\\x0000\\x0004@ )\\x0004 M|H\u0093\u00BA\u00FA\u008A\u008AV.\u00D5\u00D7\u0099os]\u008E}k=\u00EE\u00E3\\x0012\u00E2~\u00F3k\u008E]7\u00F7\u00ABsQ2yV\\x0014]\\x0013{\t5\u00B9\u008AK+\u00F8\u0094\u00AB\u0089\u00E0*Q\u00D4\\Xfmm\u00F5\u00A5\\x0015\u00D5\u00A3\u009B\u008A}\u0080\u00C3*G\u00A6\u00E1\u00A5\u00BC\u0096\u00BD>\u00E5\u00BD\u00BA\\x000c\\x001f\u00C9<|C\"jTD\u00C5J60p\u00B6\u0098V\u00BB.G#\u00CF0\u00CB \u009C\u00E4\u00C1'\u00F0\rJ\u00E3\u0089\u0090&r]Y7\u00FC&i\u00A2\u00C8\u0085\u00EA\u00DAuF\tY\u0093&\u00EA\u00D0 L\u00FDj\u009B\\x0012\u00FA\u00B4\\x0004\\x001f\u0085\u009Bj\u00FBq\\x0003e\u00F0r\u00E4:$\u008F\u00B7\u0094\u00D7\u008AV\u009A\u0098\\x0019\u0096\u00B8\\x000bE\"M\u00CA\u00D7+\u008A\u00A2\u0097\u0088jC\u009A\u00F8\\x001f+\u008A\u00EA\\x0015%\u00BD\\x001c\u00A4\u0089\\x0004\u00EEu\u00B5\u00D5\u00BC\u00B3\u00C4\u00FA9W\u00A7\u00DD\u00EFLI\\x0013u\u00F0Rt\u0089\u00D1|FR\u00D7+\u0099{\u009B1\\x000f\u0094\u00A5\u0094\\x000b\u00A5\u00BCV\u00B4C[Y\u008DM$\\x0018\u00CB\u00DA\u00A2\u00E07\u00AB|\u009D\u00D9G\u009D\\x0013\u00CAV\u00C2\u00E2\u00F8\u0080\u0090\u00DA\u00D2 M<omS\u00ED!}\\x0012\u00E7\\x0010\u00E7\\x000c\u00E0\u00F4J\u00F5\\x000e\u00E6\u00FF\u00E7\u00A4\t\u00AFf\u00F8\u00B3,\"\u00C6i\u009A\u0086?\u009D\u00A6\u0087\u0084\u00935\\x0012y\u009AvT\u009B\u00DC<\u00A6\u009A\u00E8\u00ED:T[gd\\x0013TU\u00CC\u00A7it\u00B5\u00A2K\u00C4\u00FA\u0083\u00A9\\x0016\u008Bd\u00F1\u00E4\u009C\u00F4\\x000c\u00E5\\x001b\u00CD#\u00B1\u00A9e\u00B9\\x001de56\u0091`,k\u008B\u0082[\u00B8\u00F2uf\\x001fuN(\u00DB\u00B2<Y\u00C9\u00BB(\u00A4\u0089\u00D7=3\\x0014\u0080=\u0082D\u00FD\u008A\u008B\u00FF\u00D0\u00A5\u0089\u00DD\u00C5\u00C2\u009B|\u00E1\u00DC\\x0010_\u00B8\u00E3\u00E4\\x0011w-\u0089<\u00D6\u00C8\\x0018V\u00ABBM8\u00C9\u00A5WX\u00D7X^LVx\u0089\\x000f\n@1T\u008B:\u00E2\u00E7jt/\\x000b\u00CD\u00F5\u00D8m@\u00E1\u0088\u009A\u00CD2\\x001f\u00A4\u0095\u00A0\u00D7J\u00FD\u00D3\u0098H2\u0085\u00B6\u00D8\u00AF\u00C5F:\u0097S,C\u00A1\u00B5n\u0086sH\u00BD\u00A2\u0093+\u00C8^\u00BEQN!\\x0016\u00A7\u00BA\u00B6\u00D6\\x000cV\u00BEV\u00AC\u0092|X\\x000f_\u0093P\u00AE\u00E5Q\\x0019g\\x000e\\x000ewS|\u0083\u0094\u00868\\x0014%G\u00A3n\\x0018?\u0087\u00C8#5\\x000c\\x00157\u00CFh\u00BA_^\\x0019\u00DC't\u009C\u00E0\u00AB\u00B7F\\+\u0097^a\u00F4:s\\x001eS\u0090\u0093^\\x001f\u00ED5@\u00E9\u00F3\u00B6.$\u00EA\u00BD\\x0006\u00F9\u0080\u00A5E\u00DA\u0099m\u00BDEE\u00C7\u00B5\u00CB\u0092\u00C1\u00ADWx\u00DDP\\x001f*\u00C7s\u00C4C\u0086R\\x0013\u00804\u00F1\"\u00EE#\u00BC\u00B4 M\\x000c\\x001b\u00AF\u00EB\\x0003#$\u00C56\u00E9c-\u00DF(D?\u0085\u00F3\u008E\u00E82H\"\u008F~\u0096\u00A1\u009Ct\\x000f\u008AQ\\x0013N\u009A\u00F8\u008D\u00DBe\u00E3\u0085\u00E4\u0094\r\\x001bk\u00FA\u00A9^\\x0016\\x0016a\u00EA&M\u00F2\u00EA@l\\x001a\u0082\u00D5\u00C1K\u00F3\u00C1p\u00C34g\u00A2\u00CC2\u00C8t\u00AD\\x0015\u00AC@[L\u008C\u00AB\u00C8\u00D0\u00C7tQ0\u008D0\u008C\u00C6i4\\x001f\u0096\u00E3U\\x0014\u00DF.\u00B5\\x0012\u00B6\u00C2\u00D2\u00EA\"\u00AE\u00E5U\\x0019W\\x000e\u00E6\u00BB\\x0019\u00BC(oib\u00D64\u00DA=5\u00BA\n3T9k\u00FCS\u00E1~yep\u0096&\u0082F\\x0015\u00FA\u008Fs\u00AD\u00BC\u00A4\u0089Lg\u00B6u]Gu\\x0012Zi\u00D1vf\u00CB\u00BB\u0087\u00D6\u00B5\\x000c\\x0015\u00C5?\u00FER}\u00C9\u00ED\u008E{\u008D\u00ED\u00D0.1&\\x0000i\u00E2\u00D1}m\\x0016\u00DD%\u00BF\u00A1\\x0018\u00B8\u00B9\\x000c\u008B\u00F2\u00D0\u00FE\u00E4\u0083gu\u0089\u00C0\u00F4\u0081H\t\\x0019\u00F32\u009A\u00CE\u0090\u00C9c\u00EAs\u00BC\u0083\u00C4.M\u00F8\u00CA\u00C8=\u00CCvm\u00E1\u00D2\u00C5\u00B5\u0091\u00CE\u00F9\u00C5H\u00F7jh\u00C3\u0093\u00B5p\u00CEmk/J\\x0005\u00D7|'\\x000e\u00D72k\\x001d\u00CD\u0096\u0088W\\x0012\u00F1WW_\u0094\u00F9WO\u00EB\\x001b\u009E\u00A9\u00D5\\x0002\\x001f8:{\u00B1v\u00AC\u00A7\u00A5!\u00E2\u00B7a\u0083\u00A1\u00D9k\u00A5\u00DB\\x0012\u00A3\u00AA\u00FE\u00AE\u00E5I\u00D5\u009D\u0083\u00CD\u00A2\u00BB\u00D1\u00F6@\u00EA\u00EA\u00A2g~\\x000b^S\u009AJ\u00D3\u00F5\u0093E\u008B\\x0018\u00CC\u008D((\u00A7\\x000cN\u00D2\u00C4\u00CA\u00C7\\x000c_\u00A6V\\x0016\\x0011\u00A9\u00AD\u00FF\u00D2*\u00CC\u00F5C\u00F3\\x0011\u00FD\u00B6\u00EA\\x0019\\\u00FB\u00AD\u00DE\u00BA0K3W;\u00AC\u00CE\u00AC\n\\x000e}\u00844d\u0090v-N\u00B8xvKAX\u009B;\"\u00B9\u00C1-\u00C6\u00D6\u00BA\u00D8e\u0083\u0089j\\x001a\u00A4I\\x0004\u00D2D4;\u00C3T\u00855\u00F8\u0083\u009F\u00FAQ\u00A7Z\u00C4J\u00C8\u00ACEd\u00F2(\u009DX\\x001c\u00BDk\u0097&\u00FE\u0083B\u0084\u00D2\u00C4\u00B6\u008A\u0098\u0097\\x001a&\u008B\u00E2\u00EA5\u00D1\\x001c\u00FE\u0086\u00FDP\u008Be\\x0003\u00AE\u00DD\u00A1R\\x0008\u00BCeC\u009B\u00CD\u009D\u00E3}\u008A\u00CB\u0084\u008E\u00D1\")\u00FF\u0090H\u009A\u00F0.\\x0016\u00CE\u008E\u00FA\u00AE\\x0015\\x0007A0<\u00B1V\\x0007\u00BD\u0096we\u00DC9pw\u00B3\u00D8\u00A2\u0098\u00B1\u0091\u00A1\u00CD\u00BD\u00D9\u009B\\\\\u00A2\u00A9@\u00BD@\u00B5p\u0097\\x000cN\u00D2\u00C4\\x001d>\u00DF\u009Cj%\u0094&6\u0095f\u00ED\u00C0v\u00DF\u00A4\u00F0\\x0014n\u00B2\u00CF\u00BA\u00E8\u009D/\u00C1Wi\u0096\\x001bQ\\\\x0007\u00B3\u00F6X\u00CB\\x0013\u00DD\u00AF\u00B6\u008E\u00C4\u008Av_\u0094{\u00C4Z\u00E1\u00DD\u0097X%\u00DD\u00EE8\u00B4H\u0082\t@\u009Ax\u00DD\u00BC\\x0000\\x0013:\u00CE\u00D2D\\x001c\u00FF\u00C1E\u0081\u0088e\u0087yvF&\u008FY\u0097(\u00E2\u00C3qBG:\u00F4\u00B50\u00C4\u00D8\u00879K$\u00841wc\u00F1\u0088p\u0091\\x001f\u00C2\u0089p\u00ED\\x0012\u00CA\u00E0\u00A5y\\x0008\u00F8\u00D9\\x001c\u00F3\u008C\u00BEy\u008E\u0086\u008DP6\u00D1\u00E3}\u008A[\u00AC\u0089\u00C0W\u00EF\u00BCk\u008BW\u00E4 W7\u00BF\u00B5r\\x0018\u00A6M\u00C17N<=\u00AF\u00E5\u0099\u00C1\\x001a\\x001d\u00A2\u00DE\u00DC\\x0002\\x0007\u00EDrG\u00EA!M\u0084\\x001e~\u00934\u00B1\u00CA\\x001a~\u00FA@X\u00B8\u00F55\u00DD\u00EE\u00BA\u00F3\u0080\u00EF0c(\u00AE\u0095\u00B7\u008Cs\u00A8\u008F\u00D3\u0083\u00A3\u00F7^\u0087J\\x0006,M[g'v\u00F6\\x0014\u0082\u00B7X\\x001b%\u00FA\u008Fe\u008C-\u00E8\\x000f\u00E5\\\u00BA\u008A\u00F1\u00BCs\u00AAE\u00A2X\u00AF\\x001b\u009A('A\u00A6<\"\u009D\u008B\u00F3\u009D\u00F3M\u00A9u~\u00DEH\u00EC\u00ABE\u0095j\\x001a\u0090_?\u0094\u00C2\u00EC\\x0002\u00A7\u00E5u\u00FB.\\x001b<\u00A3\u00E7\u00C8\u0095\u00FD\u00C7\u00ED\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj\u00F8\u00DC\\x0006\u00FA\u009B\u008E\u00EEj:\\x001b\u00B8\\\u00E5\u00C4\u0082z*KW\\x000b\\x0010\\x0006\u00EB\u00ED5qtT\u00C8xD\u0082\u00E5\tS\u009Ax\u0086\u00C1:\u00BD\u0080JJ\\x0013\u00F5}H\\x001d\u00F8L\u00A3\u008F\u00F7h\\x0015\u00B24\\x0011\u0084\u00D0Z\u00A6x\u00B8\\x0001%\u00C5\u00D2\u00C4\u0095\u0083?i\u00E2\u008ETbB\u0087\u008F\\x0006\u00B5O\u00E8\u0094^\u009A\u00D8\u00C3\u009C]j\\x0005ibD\r+\u00EF\\x0012\u00CA\u00EDV4\u00AE\u008A\u0085>\u00F0s=\u00DE\\x000f\u00BB\u00D8\u00C7&\u008A\u00A3/\u008B\u00E1\u00C0E9\\x0002\u008A\\x0016Q\u00E5\\x0008/A\u00DC?V\u0099g\u00A9\u00A6BI\u00EBY\u00F2-SR,M\u00C8\\x000c\\x0007X<l\u00DC\\x0015q\u00AC\u0089\u00F3\u00BE\u00AE2q$\\x0012yt\u00F7LA\\x0003\u00D9\\x0002r\\x000b\u008B\u0087\\x0003l\u008F\u00E6\u00BAx\u00D8\u00EC\u00BDp\u0098\u00BEq\\x000e\\x001a\u00D0\u0097<\u00D0\u00E0\u00C5\u00B9O\u009C}\u00BC\u00DC;\u0099\u00EDZ\u009E\u00AF\u00BC\u00D6\u0097\\x0015\u00E1\\\u0095q7\u0099\\x001d\\x0012o(\u00E7C\u009A\u00F8\u00AE\u0095\u00C4\u0084\u008E\u0093\u00D7\u00C4\u00F3Z\u009E\\x0019\\x0004\u00EFs<\\x0007os\u00EB\u00EA\u00984!u\u0093&\u00BC\u00FF\u008C\u00F3\u00AE\\x0019\u00C1@\u009E\u00EE}\u00AF\\x000c\u0081&t\u00A4jU\u00C4\u0084\u008E\u009Bs\u00917~r\u00D3C\u00B2\u00A5\u0089&t\\x0002w0\u0087\u00FE\u0093\u00ABS\u00803\u00E7(\u00DB\u00E1\u00AD\u0096\u00DF\u00B4P\u00A2[z\u00DDP\u0088\u0083\\x0018\\x0010\u00F0\u00ABH\\x000c\u00BDb\u0091&L\u00A0\\x0014d\u008A\u00ACFI\u00B34q\n\u00DA0v\u00ACw\u00DDr\u00CDq\\x0001\u008E~\u0096\u009E\u00C1\u00BA9\u008A\u00B1\u00CFl\u00A0\\x0015:FP\u008BVla\u00B1\u00B1-\u00D6$\u00C0\u0084\u008E\u00D2\u00E3\r\u00CF\u00BCu\u00C9\u0080\u00E1uw\\x0008k\u00A5sY\u00B8\u009F~\u00A2>Co\\x001a\u00FBTQ\u0092\\x001bfLB\u00F3o\u00DB&\u009F\u0093I$9\u00C9 \u00F3&+n\u00BA\u00CAjh\u00CD\u009B\u00D6\u00DB'\u00DD\\x000b\\x000f\u00BFy\u00A0t\u008F\u00A7\u00D1\u009A\u00EC\u00DC\\x0010q\\x0018l!?k\\x0002\\x001fT\u00EBhu<\u00AF\u00E5\u0095\u0081]\u00CB^\u00BE&\u00D1l\\x0016\u00DD\u00B2\u00A5\rO\u00DB\u00A3(a\u00F4\u0080\u008E\u00C2\\x0014\u00DB\u00CBM Z\u0097S\\x0015\\x001c'\u00968S=N\u00D6)\u0083\u00934\u00B1\u00F1\u00E1\u00E1K\u00D5\u00CA\u00D0\u00B2\u00A6^!\\x0015\\x0006\u00EBOL\u00F0\\x0013m\u0096\u00C0X\u00F7\\x000ei\u00B5aQvfc\u00E2\u0095V\u00ED\u00E9d\\x0014\u008C\u00FD\u00AA\u0099\u00EFD\u00932^\u00DDR\u00B4\u00BB\u00A3\\x001d\u00A9\u00D7|}\\x000c\u008Cw*\u00A7r\\x0002+\\x0012\\x0019iR\u00D0(\u00DE\\x0002%\u00DD\u00D2\u0084\u00BA\u00AF\u00C4>\"\u00A6-\u00D7\u009C\u00BC&NEyn|b\u00D9\u009C\u00CD\u00B3>\u00CE;\u00D8\u00EA\u00CB\u0089\u008B\u00F2\u009A\u00A8\u008F\u0093p\u00D9\u00A4\\x001e\\x0002\u00E22Qm\u009B\u009F\u00AEV\\x0017\u00BE\u009A\u0083\u00F8\u00B4Q\u00C6\\x0012\u00D9'^Oh\\x000e\u00F8\u00F7w\u008A[\u00AC\u0089n\u00CC\u00A4~$\u00A8@\u00C3\u00F0Q\u00BB\u00D8\\x0015\u008F\u0086\u00D8FLA~\u00B1\u00C1\u00B3\u0086\\x0002\u00E8\u00DE&\u00FBO\nX\u0085\u008Em\u009D*\u00A7\u00B9E?G \\x0014F^\u00EDrGjfh\u0081`\u008B\u00B3\u00D6*\u00AC\u00F54fM\\x0015\u00F3fj\u0088E\u0088\u00B8dp\u009E\u0085t\u0083\u00EFQ+\u00D7^!<W\u00FA\u00B6\n\u00C3K\u00AD71`i\u00D1v\u00E6\u00C2\u00D0a\u00DC\\x001d\r\u0085\u00E9=G\u00AA/\u00D9\\x0017\\x000f[\u00D6u'\u00F7G3\u0092)\u009B:W(s7\u009E\\x00137J@\t\u009B\u00E5QS\u009E\u0092\u00DA^\u00E3\\x0008E\u0099(I\u009F\u00D0\u00E1\u00BD&\u0096\u00CF\u00AE\u00B3<\u00A9\u0097&l\u008A4\u00C0\u00CF\u00FByn\u00E4*\u00FC9@\u0089\u009D^M\u0081\u00AE\u00C2\\x001dc\u00AD;\u00D2\u009AW)\\x001b\\x0013U\\x0001\u00BD&\u0096\u0097\\x001b\u00D1.#n\u00B1{\u0085\u00B1O\u00BC\u00D3\u0089c\u0088\u00BEu\u00FF4\u008F\u00B5?\\\\x001d\n\u00A3\u00B6\u00CB\\x001a\\x0010\u00EB\u00CB\u00A5E~\u00B9\u00AEf\u00D2-\u008D\u00E7\u00DE-\u00E6\u00F7B\u009B\u0098s\\x001a\u0092xK&\u00DCr\u00CD8\u00D1\u00D1{\u00E4|-\u00DDwe\u00B6\u00F7\u00C6K\u00A73\\x0007\u00DF\u00D7rE\u00CA3\u00B4s0\u00D9r\u00BA\\x0017\u00FC\u00CB\u00BD>\\x0019\u00C45D v\u0089\u009BS\\x0006\u00F7\\x0000)'\u00F8\u009C\u00FFF\u00FF\u00DD\\x0006\u00B3\u00CBA\u00A2W\u00B8\u00EC\\x001f(\u00ED5\\x0011\\x0004\u00F1\u00D8w#\u00F4Q\u009AD\u00B5\\x0005\u008E4C\\x0017z-\u00B32\u00B9\u00FDt?\u008A`\u00AA\u00D4\u00AD[z\u00DEq\u00C4\u009D\u0094\u00DAi\u00E4\\x001eM\u00C2\u00E4\u0088\u00A4\u0097\u0088_\u00A1C\u00E2CI\u00DC\u009C\u008E]\u00A98\\x0008\u0094lH\\x0013I\u00A6\u00C8\\x0016\\x0006\\x0001\\x000c+\u00B2\u00CFp\\x0018\u00B4Sp-\u008F\u00D5=\u00D6U'\u00C9|%\u00C5\u00BD\\x0006\u0081x\\x0012p\u00F1\u0094\u00F8R$F\u00EB\u009C\\x0016\\x000f\u0093\\x0004q\u00F2\u00A0\u0090v\u00B1\u00AD\u00E5\u00814\u00C1H\\x0017.\\x0001\u0097-\\x001c\u00C2\u00BD\\x0010JK\t\\x0001H\u0093\\x0014\u00E8K4!\u0091\\x0004\u009C\u009C%t\u00DC\u0098\u00A9\u00F1\u00AB\u00A8\u00DC\u00F75qq\u00A2\u0098\u00DD'\u0090&)\\x0019\u00DFc\u00F0`\\x0014<\u00E7\u00FE\u00F7\u0082\u00C3]\u00C8.\\x0001H\u0093\\x0018<\u00BC\u00D9\u00ED~\\x0019\u0085O\u0091%\u00C2\u00B0\\x0012E\u0094\\x0014\u00D7\\x0019d\u00B6\\s\\x0012(\u009C\u00FB\\x0004\u00D2\u00A4\u00B8\u00DBP\u00E4]L\u00D5\u00E9\u00DA\u00EC\u00B2\u00D7/\u0099\\x00018\\x0008\u0098\\x0008@\u009A\\x0014k\\x000cR5\u008C\u00E0\u00E9\u0088\u009E\u0080p\\x0012\u00A7\\x0018O\t\u00DF\\x0003e\u00A4\t\u009B\u00BE\\x0011N\u00F1\u00E8\u00EA\\x0004\u00D2$\u00FA~\u0080\u0081\\x0003\\x0004@\\x0000\\x0004@\\x0000\\x0004\u00E2@@\u00ACK\u00A4\u00A3\\=\u009B /M4\u0081\"\n\u0092]?\\x0014\u00D2\\x0004\u00D2\\x0004\\x0004@\\x0000\\x0004@\\x0000\\x00042@ j]B\u00C2\u00C5\u00AF4qp\u009F@\u009Ad\u00A0;z\u00EA\\d\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H7\\x0001\u00BB.)>\u00B2\u00C4N,\u00804\\x0011\u00A9\\x0013H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H5\u0081\u00D2\u00E8\u0092`^\\x0013c\u00E50\u00B7\u00BA\\x0018\u00D2$\u00D5\u00DD1\u00DD/\\x0001h\\x001d\\x0008\u0080\\x0000\\x0008\u0080\u0080'\u0081\u0092\u00E9\u0092\"\u00A5\ti\\x0014]\u009D\u00A4Y\u009Ap?\u00EFg\u00DF\u00B9\u00D5\u00B4a|&\\x0017\u00BB~_[\u00BD\u00B0\u00A2b1\u00FD\u008E\u00A8m\u0081\u0080\u00FAU\u00F5\\x0012\u00E5\u0097\u00D3\u00F3\u00FC\u00E7\\x0010e\\D\u00C5\u0086XC\u00C7\u00A2\u009Aj\\x0017\u008B\u00B95-\u00A9\u00AEXX\u0091[\u008E\\x0005\\x0017 \\x0000\\x0002 \\x0010\\x0017\\x0002\u00F6u\u00C2Q\u00CC\u00E3\\x0018\u00F2(\u00D8\u0084\\x000e\u00BF\u00E5\u009A\u00AAN\u00B2#M\u00CC\u00DB\u00BA\u009B\u00B7\u00AE\u00CF\u00A24av\u00B4bau\u00ED\u00F7Y\u0090&\u00AA\u009E\u00F8\u00A6\u00CE\u00F3\u00F5B\"\\x0003\u00A4I\\\u00C6\\\u0089\u009B\u0085\u00AA\u0082@\u00D6\tX\u00F6U\u008BT\u0097\\x0014\u00EF5a\\x001a%+\u00D2\u00A4\u00FAPu\u0085\u00F1\u0083\u00C0\u00CA\u00DB\u00B0\u00EAP9T]\u00AD\u00FE\u00F6^Ek\\x0006\u00A5I]\u008Et\u00C979\u00F5\u00FF6\u0083]\\x0002\u00AFI)\u00DC\\x001b\u00FC\u0090\u00C4\u00DA\\x000bi\u0092\u00F5a\\x001aj\\x0006\\x00042E\u00C0>\u0095\\x0013u\u00F3\u008B\u00F7\u009A\u00A8Q\u00B1\u00D9\u00F0\u009A\u00E4\u00EAs$A\u00F4_\u00EE\u00A5\u00D1\u00B9.\u00A7L\u00F1\u00E4\u0094\u00FF\u00DB\u00A4I\u00D3\\x000e\u00D21\u00EC\u00B8\u009A\\x0004\u00BF\u00A2\u00A7\u009E\u00EE\u0096!\u00F6\\x0006`y\u008EM=\u00D4}#r\u009C@\u009A\u00B8)'xMb\u00DF\u00BDK-|\\x0001\\x0004\\x0004bJ\u00C0\u00B2\u00E5k\u00D4\u00BA$,\u00AFI\u00BE&#\u00D2dG\u00AD\u00E2 \u00A1\u009F\u00F9ec\u0096\\x001ahR\u00BD\u00A3\u00D6.M\u00AC\u00BFQlW'\u00FC\u00CF\\x0002\\x0017\\x0004J\u00B2\u00FC.\u00AAq]\u00A8\u00D6Y\u00D5(ZX\u00891\u00A0\u00FB\u0090&\u00AC(=\u00F1n\t\u00BD\\x0010}\u00E6\u00C8\u00AC\u0081L\u00B1&\u0086KC\u00FD\u00C0\u0092\u00C9\u00C3\u00E1\u0099A\u00BD\u00AD,zFO\u0085\u0098\\x000f\u00F1q\u00E7\u009A{\\x00186?\u00D2\u00C4|i3g\u00A5Q\u00CA\u0091B\\x001e}r\u008D;\u00CB\\x001a\u00B9\u00E2\u00D4F\u00A5\u00CER\u0094T1j$\u00DBt\u009E\u00DA\\x001f\u00B4\u00B4\u00B8\u00B6N\u0099\u00F53\u00E7q\u00AB@LG\u00E7\\x0012\\x000c\u00C7\u00B8\\x0004\\x0008\u00C4\u0090\u0080u*'\u00BC}\u00D5\\\\x001a\\x001b\u008A\u00D7$#\u00D2\u00A4\u00BAv\u009D\u00EA\u00E7\u00D0\u00FD\\x001f\u00AA_\u0084\\x000e\\x001aq\u00B2\u00BA\u00B0\u00D0e\u0087\u00E1_\u00D1=(\u0094\u0099\r\u00BB\u00D6S\\x000c\\x0017K\u00F5\\x000e5h4\\x0011\u0089Y\\x0017\u00CD\u00F635`\u0096V\u00B2\u00D2\u0084S\\x0012\u009C=\u00D3\u00E2j\u00CD6L7x&\u00EB\u00AB\u009Bjnv\u0089\u00D3\\x0016\\\u0088\u00AEg\u0086<'\u0080lRI`M]k\\x001e\u00924q\u00AB\u0092\u00AE$\u00AA\u0097\u00D4\\x0016\u00D4\\x0018\u00BB\\x0011Vn\\x0005e S\u00A06I'\u00C6hVcZ\\x001e\u00AF\u00F29i\u00E2U\u0081\u0084\u00F4\u00FFD<\u00A4\u00A8$\\x0008\\x0014G\u00C02\u0095\\x0013u\u0088I\u0088a\u00B0j\u00B8I&\u00BC&\u008A\u00B0P\u00DD!\u00CC\\x00003yA\u009Fm\u00D2\u00C4\u00D4\\x0015\u00F8\\x0005>\u00BA4\u00D1\u00D7\u00F5X\u00E6\u0086\u00B8?\\x00130:[&q\\x0004\u00EBJ$\u00A5\u0089\u00CD\u00E3b*Y7\u00B1\u00FA{\u00BFf\\x0017\u00B5?\u00ED^\\x0013\u00D3r!M:\u00E8\u00E7\u00EAJ\u00A2\u00B0\u009E\u00C8\u009CA\u00BB\\x0016\u00FF~o\u00BE\\\u00C1\u00A3\u00A0\u00DE \u00F7\u009A\u00CBH\\x0013\u00DE\u00F6\u009B?[\u00EA\u00CC\u00B9=\u00C4\u008D2\\)\u0086\u00E17\u008E0\\x000f\\x0007\u00BFT\u00CA\u00EC\u00C3\\x0010\u00B5\u00D1\\x0005#\u00F3\u0088\u00F0\u00EE(\u009E\u0083\u008D\u00A15P\u00DA\\x001br\\x0002:2^\\x001e\u008A\u00B3Ih#\\x0008\\x0010\\x0001\u008B\u00CB\u00A4dL\u00E05\u00F1\\x001c\\x0007\rm\u00A1\\x0008\\x000b\u00E6\u00DEP5\u0084\u00E1A\\x0011I\\x0013\u00F1|\u008D&MlN\\x0014\u00CF:\u00C40\u0083j \u00F95\u00C3\u00F6U\u00C4~\u00A4\u0089m\u00F2Eo\u00B2\u00C97c\\x0013\\x0004vibY\u00C6lw\u00ED8gP\u008D\u00A8}\u00A9\\x0011\\x001f\u00FAj\\x000e\u00835\u00A6-\u0082\\x0004\u00C6\n}\\x000f\u00B6\u0089$\u00E7\u00992\u0093\u00BF\u00CA~#D\u0093b4\u00AC\u00C8\u00B6\u00D1\r#\u00D7\\x001b9\u00DF\\x000c\u0093>\u00C2\u0095\u00CF\u00BC\u00D6\u0094\u00A8@\\x000c{;\u00AA\\x0004\\x0002Y$`u\u0099\u0094d*\u0087\u00A9\\x001fH\\x0013\u00CF\\x000eg\u0092&z|IS\u009E\u0089\\x000f%\u00EE\u00C4qB\u00C7\u0088\u008D\u00B5h\u00914H\\x0013>\u0098\u00C0\u00F4\u00BA\u00CF\u0099vIiB\\x0000\u00F9@\\x0013\u00B54K\u0084\u0087)\u00BA\u00C2\u00B1X\u00E1\u00F2\\x0019>\u00A4\u00C3#\u00839~\u0082\u008F\u00A50D\u0098\u00A5\\x0004\u00D7\u009A\u00CBxMD\u00FB\u00C1\u00F0\u00D6\u00DD\u00C1\u0090\u00BB6\u00CA\u00BE\u00D7\\x000bw\u00C4\\x001b\u00F5)Hn\\x0017\\x0016\u00E1\u008C\\x000c\u00BBGj\u00F9\u00D6\u0090)\u00BE\\x0015\\x0012\\x0015\u00F0|$\u0091\\x0001\\x0004@\u00A0\\x0014\\x0004x\u0097I\u00C9\u00A6r M$o\u00ADYy0Er\u00A8\u00B6Nu\u009F\u00B0\u00D0\\x0010=\u00E8U\\x001b\u0091\u00ED\u00CA#u\u00D2\u00C4\u00F5\u008D\u00DFx_\u0097\u0095&\u0082\u00E0S\u00CB\\x0004D\\\u00A5\u0089k\u00CD\u00D3*M\n\u00AAT\u0097\u00A1\u009Ck\\x0007\u00D2\u00A4d\\x001eo\\\\x0008\\x0004\"%PF\u0097\t\u00BC&2\u00EA\u00C4\u00E2\\x0014a+~s9%\u00E8D[Hl\u0091&\u0096?9\u00ED\u00E2\\x0012k\u00A2^\u00C5X\u00FB\\x0013\u00F3Ib\u00FB$\u008BVas0\u00AC/i\u00C27\u0099\\x0019?\u00E6Qp\u00F5\\x0001\u0098\u00BF\u00B5\u00CD1\\x0019\u00CBm\u00F8X]\u00DF\\x0013:|'\u00F1\u00DA\u00D7\u0084\u00AFy\\x0018\u00D2\u00C4e\u00E9\u0093iB\u00C7a\u00FAF\\x001b\u00B98\u0086\\x000en\\x0018[\\x001b\u009D)\t\u00C4\\x0007'M\u0082N\u00E8\u00C8<\u0089\u00C8\\x0003\\x0002 P:\\x0002\u00E5\u008A2\u0081\u00D7D\u00F2\\x001e[\u00A4\t\\x001f\u00D6\u00AA\u00B9I\\x001c\u00BC&\u009AO\u0085\u00CD\\x0001\u00A9\u00C9q\u0085N!O\\x0012\u00D4\t\u00F3\u00C9\\x000bwRg\u0096I\u00B09\u00BD]a\u00E8\u0096\u00DBt\n;\u00C8\u0087\u00AD\u00F8\u0095&\u00A6\\x0008M\u00870\u00D8\u0082!\\x0017\u0086\u00C1\u009A\u00E6#\u00B4\u00C9\\x000b\u0091\u00B8\u00F1\u00A8y(\u00D2\u0084\\x0005\u00DE\u009Ah\u008B\\x001a%-M\u00F45\u00C6^mt\u00C6h\u00BD\u00FB\u00BA\\x0013\u00C5)\u00CC\u00D6!\\x000c\u00D6\u00A5\\x0002\u0092\\x000f&\u00B2\u0081\\x0000\\x0008DE\u00C0\u00B2-=yP\"\u00F5\u00D0\u00D8\\x000bG\u00AC\u0089'q\u00C7\u0085\u00BE\u00C6*b\u00AB\u009BD\\x001c\\x0003[\u00F0\u00B2(\u00B7\u00C15N\u00B6\u00C4\u009D\u00C0\u00E7\u00E5D\u00CE\u0089\u0082\\x0019\u00E6\\x001c'\u00B2^\\x0013\u00D1\\x0012\\\u00C3\\x0018\u00FB\u0095&\u008B\u00AB\u00F9]I\u00CC\u00D1\u00B5\u00AC\u00E6.\\x0019\\x001c\\x0016\\x000f\\x0017\u0082'\n3Y\u00AA2s\u00ADy8\u00D2D[\\x0007\u00C4m\"\u00A2\\x0006\u00C1X\\x0016\\x0019\u00C9K\\x0013=R\u00D5Z`\u00A1\u008D^\u0094\u009C\u00C2\u008C\u00F4:\u0088\u00D7\\x0006{.\\x001e\u00B6E\u00A8\u00F8\u00EC\u0096\u009E\\x000f22\u0080\\x0000\\x0008\u00C8\\x0012\u00B0\u00CC\u00E6\u0094\u00FEa\u00844\u00F1\u00BCU\u00BA41\u00B6s5\u00BC \u00BA\u0087C\\x000f%\u00E1^\\x0004y\u00E5\u00A1\u009C\u00A8\\x0017br\u008A$s7X}\\x0007X\u00A7\u00CEZx\u00AB\u0096\u0095&t\\x000b,\u00C1+\\x001cI\u00BF\u00D2\u0084\\x000c\u00A4m\u00D9\u0088^U}:\u00C61\u0083(v\u00C4\u00B2\u00FA\u00C6\u00E2$p\u00A9yX\u00D2\u00C4p#\u00D9w\u0081\u00D3\u00F751-\u00E5u'\u00C6\u00FB\u00A5\u00DC7\u00A6s\u00A1dR't\u00B3lj\u00D5\u00E7\u0096k!\u00ED\u00FD\u00EF\u00F9,#\\x0003\\x0008\u0080\u0080\\x0014\u00812\\x0006\u00C0bBG\u00EA\\x000e\u0095^-\u00E2\u008AA\tx\\x0005\u0082Xv%\u0089y@O\u00D9\u00AA\u00E7\u0089\u00D1\u00F7\u0083#\\x0011\u00E0\u00E2\u00BB\u00CC\u00A0\u009D\\x0004\\x0017\\x0002\\x0001\\x0010\u00F0&\u00C0\u00EFL_\u00FA\u00D9\\x001c\u0084\u00C1z\u00DF!\u008C\u00806\\x0002\u00E6U\u00B5\u00CE\u009B\u0086\u00D9\u00A6\\x000c2u\u00A2{\u00D7\u00CA\\x0014\n_\u008D\u00C5#\t\\x0002 Pf\\x0002e\u009F\u00CD\u00814)s\\x000f\u0080\u00EE\t\u0095\u0080\u00E7\u00EB\u00BEg\\x0006\u00F4\\x0007=\u0080&\u00C8&r\u008C^1\u00F17\u00E0\\x000f\\x0002 P~\\x0002e\u009F\u00CD\u00814)'\\x0008\u00D56g\u00BC9\u009E\u00CA\u00C33C\u00C6\\x0001r\u00DA\"\u00B84\u00A1B\u009C#\u0087\u00CA6K\u0085;\\x000b\\x0002  K\u00C0$MJ\u00BE6\\x0007\u00B1&\u00B2\u00F7\t\u00EA\\x0001\\x0004@\\x0000\\x0004@\\x0000\\x00042B\u00A0\u00EC\u0081&\u00F0\u009A@\u009D\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0014\\x0008\u00F0\u00D2\u00A4\\j\\x000c\u008B\u0087\u00D1#A\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x0014\\x0002q\u0088\u0081\u0085\u00D7\\x0004}\\x0011\\x0004@\\x0000\\x0004@\\x0000\\x0004@@#\u00C0K\u0093\\x0012\u00FF\u00A4\\x001f\u00EF\u00A1\u0081\u00D7\\x0004=\\x0012\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00C0\u00EA5\u00814\u00C9\u00E7k\\x001cSA=!\u00BC\\x001f\\x0004@\\x0000\\x0004@\\x0000\\x0004@ 2\\x0002\u00F0\u009A\u00B8\u00C9\\x0011^\u00A9@\u009A\u0094+\\x0010\t\u00D7\\x0005\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0014\u00818\u00AC\\x001cF\u00AC\t<x \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002z\u00AC\u00C9\u00FC\u00BC\u00B1B\u00A7,[\u00D4c_\\x0013\u00F4E\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0002\u00818l\\x0005\\x000b\u00AF\tz$\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000V\u00E88G\u00BC\n\u0083a\\x0011k\u0092\u00A9\u0099N4\\x0016\\x0004@\\x0000\\x0004@\u00A0\\\\x0004\\x0010\\x0006\u008B0X\u00E8t\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001l\u00B9\\x0006i\\x0012\u00A3\u00EEX.\u0085\u008E\u00EB\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u008A\\x00006\u00AA\u0097R'\u0098\u00D0\u0089U\u00AFEe@\\x0000\\x0004@\\x0000\\x0004RL\u00C0$M\u00F0\u00CB\u00C3N\u00BB\u00AEA\u009A\u00A4\u00F8\\x0019@\u00D3@\\x0000\\x0004@\\x0000\\x0004bE \\x000e[\u009B`\u00A3z\u00CC\u00AA\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0088\u00B66\u0099_\\x001e,\u0090&\u00E5\u00E1\\x001e+\u008D\u008C\u00CA\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000#\\x0010\u0087HXH\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u00C1\u00D6&\\x0014wR\\x0016\u00C5\\x0006iR\\x001e\u00EEe\u00B9\u00D9\u00B8(\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008x\\x0012\u00E0#a\u00CB\u00B2]=\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u0081@\u00D9\u00B7\u00AB\u00874Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00E0\u00A4\u00C9\u00E2\u00C2\u008F\u00FC)s:%_B\\x000ci\u0082\u00EE\\x0008\\x0002 \\x0000\\x0002 \\x0000\\x0002 `\"P\u00DE9\\x001dH\\x0013tG\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0013\u0081\u00F2\u00AE\u00D3\u00814Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010p\u0093&%\\x000e\u0086\u00854Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00B0\\x0012\u00E0\u0083aK\u00BC\u008A\\x0018\u00D2\\x0004\u00DD\\x0011\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00C0&M\u00CC\u00C1\u00B0\u00A5t\u009C@\u009A\u00A0;\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0008\\x0008X\\x001c'%S'\u0090&\u00E8\u008E \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\"ibq\u009C\u0094jsXH\\x0013tG\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x00011\u0081\u00B28N M\u00D0\\x001dA\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x001c\t\u00F0{\u009C\u00D0\u00E7\\x0012L\u00EB@\u009A\u00A0;\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x00088\\x0012\u00B0\u00ECqR\u0082\u00FDaC\u0091&\u00EB\u0087.\u00AF\u00DBw\u00D9\u00E0\\x0019=G\u00AE\u00EC?nWee\u00E5%UUU\u00C3\u00E76\u00D0\u00DFttW\u00D3\u00D9|\u00BE&x*TQ\u00FD\u00BDf$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081R\\x0012\\x0010\u00A8\u0093(\u00CDq\u00F1\u00D2d\u00FD\u00D0|M\\x0005\u00A4I\u00947\u00A9\u0094\u00FD\\x000f\u00D7\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001;\\x0001K\u00D0I\u00A4;\u009D\\x0014)MT]\\x0002i\\x0002]\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A9&\u00D0\u00B9\u00C2\u00F4\u009B,\\x0000%\"\rW\u008C4\u00D1u\t\u00A4I\u00AA\u00BBcD=\\x000f\u00C5\u0082\\x0000\\x0008\u0080\\x0000\\x0008$\u008B@\u00C9\u00D4I`i\u00C2\u00E9\\x0012H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0006\\x0001\u00CB\u0082\u009D(\u00D6\u00EC\\x0004\u0093&f]\\x0002i\u0092\u008D\u00EE\u0098,u\u008F\u00DA\u0082\\x0000\\x0008\u0080\\x0000\\x0008DD ju\\x0012@\u009A\u00ACW\u0082KLi=\u00C2`#\u00BA\u00FD(\\x0016\\x0004@\\x0000\\x0004@\\x0000\\x0004bH@\u00A0N(\u00F4dq8\u00D1'\u00BE\u00A4\u0089\u00CDY\u00A2\\x0008\\x0014R*y,\\x001e\u008Ea\u00BFA\u0095@\\x0000\\x0004@\\x0000\\x0004@ \"\\x0002\\x0014wb_\u00B3\\x0013\u00D6\u00E4\u008E\u00AC4\\x0019\u00AAH\\x0010\u008B\u00B3D\u00D1%C\u00D9~%X<\u008C9\\x001d\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0018\\x0001\u00FB~'\u00CC\u009BR\u00E4\u008E\u00B12\u00D2D\u00E8,\u00E1tI\u00DA\u00A5Im\u00BF|\u00C5\u00A5\u00E2T=Z\u00C2yU\u009B\u00AFVO\u0097\u00CA\u009C\u0090n]7\u00AC\u00A2\u00E2R{\u00CA\u00D5\u00B9\u00D7\u00BF\u00B6\u00B6\u00FA\u00D2\u008A\u00EA\u00D1MAT|1\u00E7\u00F2\u00B5\n\u00AB\u009C\u0084\u00DC\u00A9 \u00A8kr\u00FA\u00CD\u008D\u00F2\u0086\u00FA\\x0005\u0098\u00F4\\x001bW\u00A3\u008E!\u00C3\u00B8\\x0011C\u00E6\u0088_J\u00C8\\x000f\\x0002%'\u00E0\u00A4N\u008A\\x0011(n\u00D2\u00C4\u00C1S\u00C2&q\u00D6\u009B\u00F6wM\u00B5\u00D7\u00C4E\u009AX\u00C7\\x001aa\u009F\u00C8\u00904!\u00B1R][\u00EB,\u00D7\u008A\u00B1.\u00C1\u00CFm\u00AA\u00EDWQ1\u00ACN3\u00D2\u00C1\u00CB\u0091\u0090\u00A1%\\x001f\\x0014\u0082(\\x000f\u008FJ\u00D6\u00E5\\x000c\u00D1\u00D9\u00AF\u00B6\u00C9\u009A\u00B9|0\u0093~\u00E3d\u0084\u0088=O\\x001azTF\\x001e\u009C\u00AC7S8\u00B9\u00A3yP\u00FC;Q\u0084\u00D2\u0084\u00DC$\u00C2\u00E9\\x001b6\u00A1\u00A3O\u00E2\u00F0[\u00CFgY\u009A\\\u009Aw3\u00C6)\\x001dYT\u00AF\u0089\u00ED\u0095\u009A\u00BDm\\x000b\u00ECYy\\x001fZ\u00D5\u00D6B\u009AHvEU\\x0001\\x0014pY\u00CF*\\x001fLH\\x0013\u00C9;\u0088l P&\\x0002\u00E4>q\\x0011(\u008A\\x0013E\u00D5(2s=\u00864Q\u00E4\u0088\u00AB\"\u00D1\"^\u00C5?\u0086\u0093\\x0005i\u00C2{b\u00D5\\x001b\u00DF4Z\u009B\u00E5\u00C9\\x0011\\x0014\u00F5\u0088\u00E6_\u00E9\u0097\u00AF\u00D3\u00BF\u00AA\u00E8\u0097or\u00F0\u009A\u00E4\u00B8I\"\u00A3\u0084\\x0008^\u0082#\u0091\\x0005bi\u00B2B}\u00A5\u00B6K\u00962=':\u00CC\u00F2Y\u00D327<\u00D0\u00AD\u00F7P\\x0000\u00E5\u0083\ti\u0092\u00C4\u00EE\u0084:g\u008F\u0080\u00A7@1\u0096\u00F6\\x0018J\u0085\u00E9\u0095B\u009A\u009F_T\u0099\u00FFLM\u00F6\\x0010W\u00FE\u00882\u0083\u00A3E\u00BC\n\u00A7/\u00DB\u00D2\u00C4\u00F0\u009A\u00D8\u00A7~\u0094\u00F8\\x0012\u00BB4an[K\u00B2I\u009F8\u00CB\\x0014\\x0007i\u00927\\x001dWmI\u00AE\u0086\u00E9\\x0015\u00D5\u009Bb\u00B7.\u00EC\\x001d]On\\x0012\u00CDz\u00AE^,;\u00D7p\u008AX\\x0006\\x0002{\u00F9F9\u0085\u0088\n\u00DB$\u0094|\u00AD4\u0091Z\u00AD7A)\u00AAi4\u00FD\u00A9\u0097\u00E9\u00D0dS\u00C0\u008D\u00E7\u00E5\u00B8\\x000c\u00BF\u00FBo\\x0015c&\u00EA\u00CF0\u00BD\u0082\u00CC\u00AA\\x001d\u00F2_*n\u00ACi\u00D3c\u00D5\u0097\u00FE\u0097\n5U0K};\u00E1\u00DEQL\u00AF)\u00E6\u00CB\u00F15\u00B1\u0084\\x0010YoGI`\u00E6\\x000b\u00F7\u00C5|[C\u00B9q\\x001e\u00A8\u00BD:U1\u00A7cB'{F:\u00CEcx\u00D4u\u0093\\x0017(\u00F6E\u00C8t\u0084\u00E9\\x0012\\x0017i\u00A2\u00B8R\u00BC68\\x000b\u00D2D\"\\x0012\u00B6 Mx\u009Da\u0093&\u009A\u00BF\u00C4\u00C8\u00A3+\u0095\\x0004\u00F9N\u00DC&t,S'\u00FD4\u00B3\u00AD\u0098@\u00B3\u009DVM\u00B8-\u0096\u00D6Ud\u00E8v\u0094\u008B\u0087p\\x000b\u008C ]h\u0093>\u00AC\\x000e\u00C3r\u00BC$\u00E2Cd\u00FC\u00D5j\\x0005Sc|\u00AA\u00CE\r\u00F3!M</G\\x0019H\u008E(IS\\x001e\u00AA\u00FE\u00B8\u00A5N{\u009Eg\u00D5\u00DE\u00CE\\x001f\u00D7\u00D5\u00C9\u00ECY\u0082_\u00BB\u00A0S\u00F6<\u00A6\u0094f\u00C5\u00AE3\\x000f(M\u00C2\u0083)\u00A0a\u00E9NE\\\u00CB\\x000b\u00B5G\u00A7*\u00F2t\u00F6\u008Ab\u008A\u0085\u00979\\x0002s\\x000e\\x0002I&\u00A0,0\u00F6\u009A\u00E5\u00F1%M\u00BC\u00DC$\\x0016\u00DFI\u0086\u00A5\t\u00BF&\u00C5\u0090&\u00A6\u00E8\\x0013\u008B4\u00D1\u0085\\x0008\u009FG;19\u008E\\x0013\u0087\\x0015:\u00E6@\\x0013M\\x0016p>\t^\u009A\u00D8\u00BF\u00D5\u00E6\u0083\u00C8\u00D1\"\u009A\u0089\u00E0\u00CFU_\u00ACm\u00AF\u00FBN\\x0011\u00B8\u00829\\x0008\u00FEt\u00D6\\x0016\u00ED\u00A2\u0081j\u00C5+\\x001b\u009D\u008C\u009C\u00D7\u00C4\u00F5r\u00CA#\u00AD)\u008FjNj4\u00CD\u00BE\\Q'\u00CF\u00BD\u00A2\u008A\\x000f]\u009Ah\u00CE7\u00AB\u00AE\u00E2\u00E3R\u00DDs\u00AAva\u0099U\u00F7\u00A9f\u008F\\x000b\u00CC\u00FDO\u00E8D\\x0006\u00D3<?\u00A8\u00ABL\u00E3\u00BE\u00FB\u00BBq\u009Ew\u00D6\u00BDS\\x0015y:Y\\x0017\\x0019!b\u00CF\u0093d\u00B3\\x0014\u00F5{9\u00CAO\\x0016\\x0001\u00A6Q\u00DC\u0083Q\u008C\u00C1\u008A\u00F7\u009A(r\u00C4c\u00E2F8\u009B\u0093\u00E1\u00C5\u00C3lR\u00C6>\u00A1cZCk\u0096&F\u0084\u008A`N\u0087\\x0002S\\x00122\\x00129J\\x0013~\u0085\u008E=\u00A0\u00923{\u00A6Y\u008FB\u00AB\u00CD2\u0082\u00A7a\u0093&n\u00F38&\u008C\"i\u00C2\u00C7\u00EAr6\u00C9o\u00AD\u00D8\u009B\u00B4EK\u00A9p\u00A4\u00A4\u0089\u00F0r$\\x0017\u00C6\u00E8~\\x0011u\u009A\u0086\u00D7%Lg\u00A8\n\u00839N\u009841\u009C(t\u00E4\u0095\\x001c\u0089\\x000f\u009A\u00E2\\x0011\u00BC\u008B\u0088\u00BER\u00A6\u0084\u00C8\u008F\"\\x001b&\\x001c!L6\u0095\u00E3\u00E8;d\u00DD)\u00E8\u008D\u00F3\u00BE\u00B3\u00C6D\u0092\u00C8oW\u00E4\u00E9\u00CC\u0084\u0090\u00BB\u00D4\u00B2\u0083\u0080\u00CC\u0091d\u0099\\x001f\u00D4\\x0016\\x0004d\\x0008\u00F0a%\u0085\u00D9gc\\x001a\u009AbM\\x0006(\u0089\u0082a\u00D5\u009D\u00D3\\x0002\u00A7,xM\u00EC.\r#dD\u00FF\u00CA\\x0008\u00835)\\x000c\u00B34\u00A9\\x001b\u00E6\u00B8K\u008A\\x00123\u009B$ib\u00DF\u00F4\u0082\u00BD\u0082KYegq\u00E3\u00B0\u00C6\u00C7\u00F46o\u008E\tP\u00E7S\u009C\u00A7\u00C3\u00BC\"7\u00B9\u0092\u00FD\u00D6J8\u00B1%\\x001fkb\u00B9\u009Ci\u00D6\u00E6\u00F2\u00DAM\u00F3\u00F3\u008Boa\u00E1#\u00A2\u00A4f`\u00D2\u00C4$D\u00ECGt\u00C7\u0089\u0083\u00D0Q\\x001d-\u0097\u00D7\u00EEa\\x000b\u00FC\u00FC{M\u00ECq3\u00EC\u0088_\u0098\\x000e\u00E6_w\u00A1\u00B9F\u00EDx^\u00CB3C^w\u00DA\u00F1\u00B3]F\u00A7*\u00F2tC\u009AXz)I\\x0013\u00CF#2\\x0003=\u00F2\u0080@\u00CA\\x0008\u00C8l\u00B9&!Y\u00B2)M\u00B8%9LR\u00C8H\\x0013\u00C3k\u00E2\u00B1;Y\u00BC5\u008AS\\x0018\u00AC\u00C9\u00B0\\x0015gK\u00ACO\u009ACi\u00BC!q\u00D8\u00CC-\\x0001\u00D2\u00C4\\x001aJBZ\u00A4\u00E4\u00D2D\\x0011:,\u00AE\u00D6m[\u00BC\\x0008a\u0096[\u009A\u00A8\\x001a\u00C8\\x001c\u009Cd\u00CCUIH\\x0013\u00B7\u00D3!MRf8\u00D1\u009C\u00A8\t@\u009Ax/\u00B0t\\x000c\\x0004\u00D1\u00DD!\u0086\u00B7CF\u009A\u0090\u00D0cS9\t\nz\u00B5\u00F7\u00C2\u00E2\u00A5\u0089\u0087\\x001d\u00B2+3\u00F7\u00B7y\u00B7-U|XS\u00BF\u00B5\u0092\u009C\u00D01- 2\u00CF\\x001f\u00FD\u00EE\u00BF)\\x000bj\u0084\u0081`t\u00D0\u00C1\u00CF\u00C1\u00E5\u00F7\u00E35\\x0011\u00CF\u00F5X\u00A6\u0084\u00D4?\u0087<\u00E6\u00B4co\u00840e&t\u009C<4\u009E7\u00CE3\u0083`\u00A8\u00E5:U\u0091\u00A7\\x001b\u009B\\x000bX\u009Ez\\x001a1<\u008FDm\\x0003P>\\x0008\u00C4\u0090\\x0000\u00A4\u0089\u00B44qX\u00A1\u00C3\u00EF@/%M\u00D4)g\u00A6N4\u00C7\u0089.V\\x0012\u00B4\u0093\u00BD\u008341\u00C7T\u00BAzM\u00F4\u00D7S\u00D3\u00AC\u0090\u00B6\\x0008B\u00B8H\u00C7\\x001a\u00A7b\u00DE\u00F0\u00DE\\x001e\u0088`\u0089_1b\\x0014\"\u00A8\u0095h\u0081\u008F\\x0011\u0093+\u0098\u00E4b\u00EF\u00E2\u00CAl\u00EB\u00FBl}Mn1\\x0017\u00AC\u00AA-\\x0003\u00E6CI\u00BC2HN\u00E8hA*F\\x0008\u00AD\\x0011\u00B6\u00C2\\x001f\u00E1\u00B4\u008Ehg$\u00B59\u00D1\u00C2,t\t\u0093\u00F2+\u00F2\u00C6i\u00EE\\x0010\u00C7\u00FE\u00C6\u00AE%X\u00D4\u00CD\\x001a[\u00E4\u00E9\u00F1v\u0082\u00C6\u00D02\u00A1J\\x0019'\\x0000iR\u00B44\u00E1\\x0002D$\u00A5\u0089\u00E181E\u00C2&'\u00D0\u00C4#\u008C\u00C0%\u00A0Rf\u00F1\u00B0\u00D3\u008Em\u00A6sE\u00EB<\\x001d\u00C3M\n\u0081)\u00CA\\x001b\u00AA\u00BB\u0085Sv\u00D2\\x0013-iv\u00DEG\u00CE\u009E\u00BFZY/]X.d\u0099\\x000b`\u00EB\u0096\u0087<\u00A3\u0085\u00A9r\u00FB\u0091\u00F0\\x0001%\\x0005\u00B1\u00E2\u0091\u00C1\u0097\u00D7D\\x000f\u0092\u00B5\\x0006\u00AF\u00B0\u00B0\\x0015\u0096\u00CC\\x0005\u00B2=\u0091\u00B8Q\u00B2\u00D40ee\u0090\u00C4\u008D\u00F3\u00BA\u00B3\\x001e\u009D\u00AA\u00C8\u00D3\u00B5\u00A7\\x001e\u00BF\u00A1\\x0003\u0095\\x0006\\x0002\\x0012\\x0004 M\u008A\u0093&\u00E6\u00D8XYi\u00A2\u00AF$,H\u0093\u00E4,\\x001bfV\u00CAi\u00EA\u00DD\u00C9\u00DF\u00AE\u00D96\u00CFx\\x0011\u00A7MM\u00F4\u00D7V\u00AE|K$\u00AC\u00EB\\x000f\u00D1\u00E9\u008B/\u00EC{\u00AB\\x0018\u00E1\\x0005.{\u00A09\u00EF\u00DAn\u008A\u00D0dQ/\u00A4~l\u00CE\u00FFBUY\\x0005\u00D8&i\u0085I\\x001c\u00CB\u00DE$\u00FCr\\x001bN.\\x0014\u00F4\u00C4-u\u0085\u00ED\u00D4\u00DEW\u00D6\u00D7\u0090\u00D0)\u00A8\\x0007\u00FD\u0088\\x0016\\x0003o]?\\Xo\u00CC\n\u00D4W\\x001d\u008B\u00A5\u0089\u00E0GD\u00A3\u0086\u00E9\u00B9\u00E5\u009A1\u00AE\\x0005\u00E8N\u0096P\\x0012k\u00F3\u00EAT\u00C5\u009C\u008E-\u00D7$\\x000cR\u00C6]\\x0005h\u00BEA\\x0000\u00D2\u00C4[\u009A\u00A0\u00BB\u0080\u0080/\\x0002.q\t\u00B4\\x0001\u0091SX\u0089\u00E7q\u00F9\u009F\u009F\\x0010\u00D6\u0096)\\x0015\u00CF\u00AB8e\u00A0\u00AB\u00FB\u0082\u0080\u00CC \\x0000\\x0002 \\x0010\u0098\\x0000\u00A4\u0089\u00C7\u0080+\u00D8}\u00C49\u00E8$\u0094\u00CC\u0081\u00EF%N\u008C\t\\x0001'i\\x0012L\\x0019\u00D8\u00A6T\u008A\u0096\\x0008A5\n\u00D4IL:\\x0018\u00AA\\x0001\\x0002\u00A9'\\x0000iR\u00F4@\\x000f/%\\x0008\u0098\t8l\u00A4\u00E6\u00DBc\u00A1\\x0004y\u0098\u00E2<B\u00EE\u00AB\u00C16\u0090\u0096\u00F9\u00D5\u00D0\u00D4\u008F\u009Bh \\x0008\u0080@\u00A4\\x0004 MB\\x001e\u00EE#\u00BD[(<\\x0011\\x0004\u00EC\u00D2\u00C4\u00AF\u00BF\u00A4\u00A4\u00E6\u00DF\u00FF/\\\u0094\u00B4z\\x0010\u00BE \\x0000\\x0002\u00D9#\\x0000i\\x0002i\\x0002\\x0002\u00D1\\x0012\u00F0\u00A5K\u00CAf\u00F5}\n\u0094\u00B2\u00D53{ct\"\u00E48*\t\\x0002\u00E1\\x0012\u00804\u0089\u00D6,\u0085{\u00B7PZ\u00E2\\x0008\u00C8\u00EB\\x0012%\u0092#\u00CA\u00E9\\x001b\\x0019t\u00F2\u00B5e\u00BF\\x000e(S&\u00F2\u0080\\x0000\\x0008\u0080\u0080_\\x0002\u0090&\\x0018^A *\\x0002\u00F2\u0096>Vf^\u00F2\u00A7A\u00A1N\u00FC\u008E\u00B6\u00C8\\x000f\\x0002  I\\x0000\u00D2$*\u00B3$y\\x0003\u0090-\u00AD\\x0004\\x0012\u00AAK\u00D8\u00ED\u0090\u00AF|Zo\\x001f\u00DA\\x0005\\x0002 PF\\x0002\u0090&\u0090& \\x0010>\\x0001I\u00D3\\x001e\u00E7\u00E5\u00B8\u0092M \u00DFI\\x0019\u00C7/\\\\x001a\\x0004@ \u0095\\x0004 M0\u00B0\\x0016G\u00E0\u00FB\u00DA\u00EA\u0085\\x0015\\x0015\u008B\u00D5\u00DF\\x0019\u00B1$\u00F5\u00AB\u00EA%\u00EAF\u00A5\u00FC\u00E7\\x0010#\\x0019#*\u00B6\u00E8\\x001aJ\u00ECl\u00D6\u00F4\u00C1\u00BBbnMK\u00AA+\\x0016V\u00E4\u0096\\x0017w_\u008An\\x0002\u00BB\u009B\\x0012\r\u00C9\u00C7Y`\u00A5r\u00D4F\u00A3@ \u00F5\\x0004 Mba\\x0000\u0092\u00DB\u00CF\u0098\\x001d\u00ADXX]\u00FB}\\x0016\u00A4IS\u00ED\u00E2\u008A\u008Ao\u00EA\u00DC\u00EF\u0097L\u00ACF\u00E7b\u00B5(\u0091\u00A4\u008B\u00954\u0091U'\\x0008\u0089\rI\\x000b&w(@\u00CDA D\\x0002\u0090&\u0090&\u00C5\\x0010\u00A8\u00CB\u0091.\u00F9&\u00A7\u00FE\u00DFf\u00B0K\u00E05)\u00B5=`\u00EDu\u0093&2\u00F3 j\u00D0kb\u00A4\t\u00D4I\u0088\\x0003.\u008A\\x0002\\x0001\\x0010\u0090!\\x0000iR\u008Ca\u00CE\u00FC\u00B9\u00CBsl\u00EA\u00A1\u00EE\\x001b\u0091\u00E3${\u00D2DZ\u0097$L\u009A\u00C8\u00A8\\x0013L\u00EB\u00C8\\x000c\u00B8\u00C8\\x0003\\x0002  C\\x0000\u00D2$\u00F3\u00F2\"\u00B8\u00E3A}\u00EF_\u00A8\u00FE\u00E4\u00AF\u00AAQ\u00B4\u00B0\\x0012\u00A3@\\x001f\u00D2\u0084\\x0015\u00A5'\u00DE-\u00A1\\x0017\u00A2\u00CF\\x001c\u00995\u0090)\u00D6\u00C4pi\u00A8\\x001fX2y8<3\u00A8\u009D\u0081E\u00CF\u00E8\u00A9\\x0010\u00F3!>n\u00AA\u00F9\u00EF\u00DE\u00ABs\\x000f\u00CE\u00E0\u00EC\u00B7\\x001f\u00AF\u0089\u00F9\u00D2f\u00CEJ\u00A3\u0094#\u0085<\u00FA\u00E4\\x001aw\u00965r\u00C5\u00A9\u008D\u00CA\u00BDs\u00A4\u00C47m\u00F1{\\x0015\u0097\u00CE3R\u00F5\u00ECO\u0094\u00A8\u0094\u00C2\\x0012h\u00B5?hiqm\u009D2\u00EBg\u009E\u00F2s\u00AB\\x0000\\x001eI\\x0010\\x0000\u0081\u00AC\\x0013\u00804\u00C9z\\x000f\u0090\\x0011\u00B0\u00E2<\u00CC\u00BAh\u00B6\u009F\u00A9\\x0001U\u00A6\u00F8\u0096&\u009C\u0092\u00E0\u00EC\u0099\\x0016Wk\u00B6a\u00BA\u00C13Y_\u00DDTs\u00B3K\u009C\u00B6\u00E0\u00E29<3\u00E49\\x0001d\u0093J\\x0002kj\u00AA\u00F9\u00EF>VM\u00F5\u00BB\u00B5\u009B\u00E6;F\u008Fr$e\u00A5\u0089[\u0095t%Q\u00BD\u00A4\u00B6\u00A0\u00C6\u00D8\u008D\u00B0r+(\\x0003\u0099\\x0002\u00B5I:3\u00C6=\u00DA\\x000f\\x00177\u00CD~\u0097\u00D7%\u00EC\u00B3\u00A6N\u00A8\u0081\u00E2\u00F29i\u00E2U\\x0001<\u0092 \\x0000\\x0002Y'\\x0000i\u0092\u00F5\\x001e\\x0010X\u009AX&q\\x0004\u00C1\u009B\u0092^\\x0013\u009B\u00C7\u00C5T\u00B2nb\u00F5\u00F7~\u00CDK\u00A1\u00FDi\u00F7\u009A\u0098\u0096\\x000bi\u00D2A?WW\\x0012\u0085\u00E0Ss\\x0006\u00EDZ\u00FC\u00FB\u00BD\u00F9r\\x0005\u008F\u0082\u00DAm\u00CC5'\u00B7\u0081\u00EAK\u00D0\u008C\u00B4\u00DD}bFmv\\x0014\u00F1\"@\u00FDl\u00A93\u00E7\u00F6\\x00107\u00CAp\u00A5\\x0018\u0086\u00DF8\u00A2\u00F24-\u00952\u00FB0Dmt\u00C0\u00A8\u00CCX}\u009CS\u00B4\\x0008\u00EF\\x001fR\u008F\u00DC\u00FE\u00EF&\u00C5q\u00F2\t\u00F39\u00D9\u0095\u0090\u00C5\u0097\u00E3\\x0002\\x0019\u008F$\\x0008\u0080@\u00D6\t@\u009Ad\u00BD\\x0007\\x0004\u0095&\u00AA\u0081\u00E4\\x0017\u0098\u00D8W\\x0011\u00FB\u0091&\u00B6\u00C9\\x0017\u00FD\u00BE\u0098|36A`\u0097&\u00965/v\u00D7\u008Es\\x0006\u00D5\u00A8\u00DB\u0097\\x001a\u00F1\u00A1\u00AF\u00E60Xc\u00DA\u00E2\u009B:\u00CFU9\u00B6\u00FD^\u00E5\u00A4\u0089\u00F3L\u0099\u00C9_e\u00BF\\x0011\u00A2I1\u00DD\u00A5!\u00D1FgJ\u00A6\u0096~R{\u00BB>\u00AD\u00C3\u00A4\u00C9\u00A6W\u0093\u00F7\u00C82\u00C4kM\t\u00C8x$A\\x0000\\x0004\u00B2N\\x0000\u00D2$\u00EB= \u00A04\u00E1\u0083\tLo\u00FC\u009C\u00D9\u0093\u0094&l\u00AD\u008A\u00D9m`\u0089\u00F00EW8\\x0016+\\>\u00C3\u00CF\u009Bxd`\u00DE\\x0005q\u00D2L\u00B5\u00A5\u0084B\u00CD\u008D\u00C0\u008B\u00E7>\\x0016\u00CC\u00E6\u0088BD\u00A5&t\\x001c\\x000c\u00B9k\u00A3\u00EC{\u00BDpG\u00FC\u00B7\u0091= \u00A6\u00DA\u0092\u00FE\u00E0\\x0002M\u00B4\u00C9\\x001d&M\u00C8o\u00F4\u00BBy\u00E6y=m\u008AG\u00EB\\x0018\\x0012\\x0015\u00C0#\t\\x0002 \u0090u\\x0002\u0090&Y\u00EF\\x0001\u0081\u00A4\u0089\u00EB\\x001b\u00BF\u00F1\u00BE.+M\u00D4[`\u008B)q\u00DC\u00AB-F\u00D2D\u00AB\u00F9\u0090B@\u00A8b\u00A7\u0099\u0091\u00E6\u0093\\x0008rb\u00A5\u00C9\u00F2\u009C\\x0016UcL]q\\x0013:\u00EA\u0094V\u00EEG\u00F36'\u00BC\u00C0\u00824\t\u00F4\u00C4a\u0098\\x0002\u0081l\\x0011\u00804\u00C9\u00D6\u00FD\\x000egX\u00B4O\u00B2h\u00A1\u00AF\u00E6`X_\u00D2\u0084\u008F\u009Fe.\\x0019\u00E6\u00A8p\u00F5\\x0001\u0098\u00BF\u00B5\u00CD1\\x0019\u008A\u0087\u008F\u00D5\u00F5=\u00A1\u00C3\u00F7\\x0010\u00F1\u00BE&\\x0005\\x0015\u00C2\u00E20\u00CC\u0091\u00B0\\x000e?\u00DD'%M\\\u0096>\u0099&t\\x001c\u00A6o\u00B4\u00DB\u00CD1tp\u00C3\u00D8\u00DA\u00E8LI\u00D5\\x0016\u00B9\\x001fy\u00ED\u00C5I\\x0013\u00E6P\\x0019\u00F3\u00B1\u00E9\u00B1\u0092\u0098\u00D0\u00C1c\\x0008\\x0002 \\x0000\\x0002\\x0005\\x0002\u0090&\u00E8\r\u00BE\t\u00B0\\x0017_\u00E1N\u00EA,\\x0006S\u00E0\u00F0\u00B0+\\x000c]\u008B\u0098Na\\x0007\u00F9\u00B0\\x0015\u00BF\u00D2\u00C4\u00B4`\u00D8!\\x000c\u00B6`\u00C8\u0085a\u00B0\u00A6\u00F9\\x0008-\u00AAT$n\u00D8WC\u00BE\u00E0|$,\u00F6\u0082\u0093&\u00CE\u00BB}\u00C8I\\x0013\\x0016xk\u00A2-j\u0094\u00B44\u00D1\u00BDS^mt\u00C6h\u00DC}M\u009015f\u00F8\u008A\u00B4\u00E8\u0093\u00EA\\x000f\u00F4\u00DD\u0081\u00AD\u00FB\\x0005k\u00EE1\u0097\n\u00F8\u00EE\u0090\u00E1\\x0008\u00EE\u00E0\u00AB\u00E8Qa\\x0010\\x0000\u0081\u0090\t@\u009A\u0084\\x000c4\\x0003\u00A3\u00A4\u00C89Q\\x0018\u00D69\u00C7\u0089\u00AC\u00D7D\u00B4x\u00D80\u00C6~\u00A5\u00C9\u00E2j~W\\x0012st-\u00AB\u00B9K\\x0006\u00A7\u0085\u00AF\u0086\\x001d-\u00CCd\u00A9\u00CAL)\u00D0\\x001eu\u00C1\u0087\u009B8\u00B8L\u00AC\u00D1\\x001b|\u00B7\u00B1\u00AEu\\x0012\u0086\u00F5X\\x0016\\x0019\u00C9K\\x0013\u00C7\u00C5\u00BDF\\x001b\u00BD(\u00E9\u00F5\u00D1\u00A7ut\\x0002\u00FA\u009A\\x001d\u00E68\u00F9\u00DD<K\u00D4\u008E\u00D7\u00EAe\u00CB\u00CAs\\x0008\\x0005\\x0010\\x0000\u0081\\x000c\\x0013\u00804\u00814\u00F1I@\u00DF\\x0001\u00D6I\u0084\\x0015|*\u00B2\u00D2D\u00B7\u00D3\u0085\\x0010T\u00EE\u0095\u00DA\u00AF4!#\u00CD\u0085\u00AD\u00D8w'S\u00E6A\\x001c3\u0088\u00A2^,\u00DB\u00D2\u00EB\u0086\u0099\u0095L?\u0085c\u00DE\u00E4#\u00B7\u0098\u009B\u00E9p\u00DD U\u00D2k\"\u00A8\u0092\u00D9_e\u009Bcr'\u00C6\u00FB\u00A5\u00DC7\u00A6s\u00A1\u00A4CPe\\x00195\u00B9\u00EE9\u00CB4\u0096\u00EAJ\u0091\u00DFr\u00CD\u00F3g\u00892\u00A0\u00F8}>\u0086\\x00196Z\u00E8\\x000cY \\x0000i\u0082\\x0011!5\\x0004\u00C4\u0081 \u00DCc\u00EC\u0099\u00C17\n\u00F75\u00C3\u00CE.\\x0013\u00DF\\x0017*\u00E1`\u00E4\u0083\u0092d\u00F3%\\x0002\\\u00E2\\x000c\\x0004u\\x0003\\x0001\\x0010(5\\x0001H\u0093R\\x0013/\u00A1\u008D\u0089\u00A8i\u00CE+l\u009DV\u00DE\u00A6\u00F7\u00B8}6G?\u00A2\u00AC\u00D0q\u00BE\u00D7ia\u00C86\u00C0uH\u00B69\\x001d\u0099VG\u00D4iQ,\\x0008\u0080@\u0092\\x0008@\u009A$\u00E9n%_\u00D6DJ\u00DB\u00F3u\u00DF3\u0083\u00BF\u00EA\u00B9\u00FF\u0098_2]&Z\\x0000\u008D\u00FC\\x000c\u008B\u00CDq\u00A2N\u00EE\u00E8I\u00F0SD\u0098\u0089\\x0000\\x0001\\x0010\\x0000\\x0001/\\x0002\u0090&\u00FE\u00AC\\x0011\u00C4A\u008C\tx*\\x000f\u00CF\\x000c\u00FE:\u0083\u00FBtF\u008CA\u00B97\u00D3\\x001f%\u0091>+\u00C4\u00DFP\u00A8\u00AC\u00F5\u0097\u0095\u00BC\u0086\u00A4\u00C4r\u00F3\u00D7y\u00D0L\\x0010\\x0000\\x0001\\x0017\\x0002\u0090&\\x0018P@  \\x0001\\x0017i\u00E2\\x001a\\x0000\\x001b\u00F0r\u00B1\\x001d\u00C8\\~l9S\\x001cb{\u0083P1\\x0010H\\x001c\\x0001H\u0093\u00B4\u00D9\u0089\u00C4u\u00C1\u00E4V\u00D8\u00CD$\u009B\u00B7CMn\\x001bej\\x000e\u0089&C\ty@\\x0000\\x0004\u00E4\t@\u009A@\u009A\u0080@\\x0010\\x0002\u00EE\u0081&\u00F2O`\nr\\x0002E\nn\"\u009A\\x0000\\x0002\u00B1\"\\x0000i\\x0012\u00C4,\u00C5\u00EA\\x0016\u00A22e!\\x0000{\\\u00C0\u00BEX\u00F0\u008B\u0086\u0086K)\u00B1\u00E1\u00C0\\x0018\\x0019@\\x0000\\x0004\u00CAF\\x0000\u00D2\u00A4l\u00E8\u00CBbPq\u00D1\u00B0\\x0008`\\x0016\u0083'\u0089\u00B9\u00AD\u00B0\u00FA\\x0015\u00CA\\x0001\\x0001\\x0010 \\x0002\u0090&\u0090& \\x0010\u0084\u0080\u009B4\u00C9R\u00A0\t\\x001bF!\u00D4`N@\\x0000\\x0004B$\\x0000i\\x0012\u00C4,\u0085x\\x0003PTB\t\u00C0O\u00C0\u00DF8\u0097\u00E9-,\u00D2Ih\\x000fG\u00B5A\u00A0\u008C\\x0004 M M@\u00C07\\x0001\\x0004\u009AX\u00C6,H\u00932\\x000e\u00E2\u00B84\\x0008\u00A4\u008F\\x0000\u00A4\u0089o\u00B3\u0094\u00BEN\u0080\\x0016\u00F9%\\x0000i\"/M\\7\u00EC\u00C7\u00D3\\x0007\\x0002 \\x0000\\x0002\\x0002\\x0002\u0090&\u00E8\\x0016 \u00E0\u009B\\x0000\u009C\\x0004v1\u00E72\u00C3\u00E5W\u00F9!?\\x0008\u0080@\u00C6\t@\u009A\u00F86K\\x0019\u00EF1h\u00BE\\x0012\u00F5\u00E9\u00BC\\6\u00B3\u00A1\\x0015\u0090&x4@\\x0000\\x0004\u00C2\"\\x0000i\\x0002i\\x0002\\x0002\u00BE\t@\u009A\u00C0k\\x0012\u00D6\\x0010\u008Cr@\\x0000\\x0004\u00EC\\x0004 M|\u009B%t#\\x0010\u00C0\u00CAaH\\x0013<\\x0005 \\x0000\\x0002\u00D1\\x0011\u00804\u00814\\x0001\\x0001\u00DF\\x0004\u00DC\u00BC&\u00D9\u00DB\u00D4\u0084\rO\u0098\u00D0\u0089n\u0098F\u00C9 \u00905\\x0002\u0090&\u00BE\u00CDR\u00D6\u00BA\\x0008\u00DAk'\u0080\t\\x001dxM\u00F0\\\u0080\\x0000\\x0008DG\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004|\\x0013\u00804\u00814\u0089nPF\u00C9 \\x0000\\x0002\u0090&\u00BE\u00CD\\x0012:\r\\x0008@\u009A@\u009A\u00E0)\\x0000\\x0001\\x0010\u0088\u008E\\x0000\u00A4\t\u00A4\t\\x0008\u00F8&\\x0000ib\\x001d\u0092\\|8\u00BA\u00F1\\x000b%\u0083\\x0000\\x0008\u00A4\u0092\\x0000\u00A4\u0089o\u00B3\u0094\u00CA~\u0080F\u00F9\"\u0080\u00DD`-\u00B8\\x0000\u00C4W\u00FFAf\\x0010\\x0000\\x0001w\\x0002\u0090&\u0090& \\x0010\u0084\\x0000\\x0016\u00A4\u00F0#\\x000b\u00DCH\u00B04 \\x0000\\x0002!\\x0012\u00804\tb\u0096B\u00BC\\x0001(*\u00A1\\x0004\u00F0\u00CB\u00C3&i2\u00DFq\u00F1pf\u00B7\u00C7Mh\u00C7F\u00B5A \\x000e\\x0004 M M@ \\x0008\\x0001\u00EC\u00BA\\x0006i\\x0012\u0087\\x0011\\x001cu\\x0000\u0081T\\x0012\u00804\tb\u0096R\u00D9\\x0015\u00D0(_\\x0004\u00DC\u00A4\u00C9\u00FC\u00CCu*\u00F8\u0090|u\\x001ed\\x0006\\x0001\\x0010@\u00ACI\u00E6\u00EC\\x0004:}\t\\x0008 \u00F0\u00D3\u0080\\x000c\\x0014%\u00E8o\u00B8\\x0004\\x0008d\u008A\\x0000\u00BC&\\x0010. \\x0010\u0084\u0080\u00BB=\u00A6o\u00B33\u008E@\u009Ad\u00E7^\u00A3\u00A5 P\\x001a\\x0002\u0090&\\x00192!\u00A5\u00E9R\u00D9\u00B9\nf1\u00D8\u00BDv\u00E3\u0090\u00BD\u00B9\u00AD\u00EC\u00F4\u00B4\\x0014\\x0004\u00A2#\\x0000i\\x0002i\\x0002\\x0002\\x0001\t\u00B8\u0084\u009B\u0090\u00B5\u008E\u00EE\u00A1\u008DW\u00C9\u00AE\u009B\u00ADe\u00CA{\\x0014\u00AF\u00FB\u00A2\u00AAF$\\x0010H(\\x0001H\\x0013<\u00BD \\x0010\u0090\u0080\u00C7DF6\u00E6t0\u00B1\u0095\u00D0\u00A1\\x001f\u00D5\\x0006\u00818\\x0013\u00804\th\u0096\u00E2|SQ\u00B7\u00D2\\x0010\u00F0\u00B0\u00CA\u00D9p\u009C\u00B8\u00CC\u00E6d\u00C8u\\x0004\u00FF\\x0004\\x0008\u0080@\u00A8\\x0004 M M@ 8\u0081\u008C\\x001bf\u0088\u00B3\u00D2\u0088`\\\\x0005\\x0004\u00B2F\\x0000\u00D2$\u00B8Y\u00CAZ_A{\u00ED\\x0004\u00DC\u00C3MR\\x001fi\u0091\u00F1\u00E6\u00E3\u0089\\x0000\\x0001\\x0010\u0088\u0088\\x0000\u00A4\t\u00A4\t\\x0008\\x0004'\u00E0\u00EE6H\u00F9\u008C\u0086{\\x0000l6\u00E6\u00B3\"\\x001a\u0097Q,\\x0008d\u009C\\x0000\u00A4Ip\u00B3\u0094\u00F1\u00AE\u0083\u00E63\\x0002\u0099\u00F5\\x001cd\u00B6\u00E1\u00E8\u00F9 \\x0000\\x0002Q\\x0013\u00804\u00814\\x0001\u0081\u00A2\\x0008d\u00D3q\u0092\u00CDVG=\\x001c\u00A3|\\x0010\\x0000\\x0001F\\x0000\u00D2\u00A4(\u00B3\u0084n\\x0004\\x0002\u00D9t\u009C\u00B8\u00C7\u00FF\u00E2\u00D7\u0086\u00F1\\\u0080\\x0000\\x0008\\x0014C\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004\u008A%\u00E0\u00E9BHY<\u00ACg{\u008B\\x0019\u0092p.\\x0008\u0080\\x0000\\x0008@\u009A\\x0014k\u0096\u00D0\u0087@\u00C0\u00D3q\u0092\u00AAxX\u00D7\u00E8Wj)\\&x\"@\\x0000\\x0004\u008A$\\x0000i\\x0002i\\x0002\\x0002!\\x0010\u00F0t$\u00A4\u00C6q\u00E2>\u0095\u0093*\\x0011\\x0016\u00EA\\x0016RE\u008E\u00D48\\x001d\\x00042E\\x0000\u00D2$\\x0004\u00B3\u0094\u00A9\\x001e\u0083\u00C6:\\x0011p_\u00B1\u00A2\u00B8\\x0013\u0092\u00BFu}\\x0016\u00DA\u0088\\x001e\\x000e\\x0002 Pv\\x0002\u0090&\u0090& \\x0010\\x000e\\x0001O\u00C7\u0089\u00E2QH\u00B2:\u0091j <\r \\x0000\\x0002 P4\\x0001H\u0093p\u00CCR\u00D95&*\\x0010\\x0007\\x0002\u009EN\u0085\u00E4\u00CEw\u00C8\u00E8\u0092\\x0014\u00B8\u0085\u00E2\u00D0\u008BP\\x0007\\x0010\\x0000\\x0001H\\x0013H\\x0013\\x0010\\x0008\u0093\u0080g(F\\x0012\u00D5\u0089\u0094.\u00C1\u00F6\u00AFE\u00BF)\u00C2 \u0081\\x0000\\x00080\\x0002\u0090&a\u009A%\u00F4*\\x0010\u0090\u00B1\u00E2\u00C9R'\u00E9k\\x0011z)\\x0008\u0080@\u00CC\t@\u009A@\u009A\u0080@\u00C8\\x0004\u00D2d\u00CB%\u00DB\u0082\u00A9\u009C\u0098\\x000f\u00F4\u00A8\\x001e\\x0008$\u008B\\x0000\u00A4I\u00C8f)Y\u00B7\\x001f\u00B5\u008D\u0088\u0080L\u00D0I\u00FC\u00A3b\u00A1K\"\u00EA\\x001e(\\x0016\\x0004@\u00C0\u009D\\x0000\u00A4\t\u00A4\t\\x0008DB@&\u00E8$\u00CE+\u008Aeu\tBL\\x0010b\\x0002\\x0002 \\x00106\\x0001H\u0093H\u00CC\\x0012\\x00141\\x0008\\x0010\u0081\u00E4\u00AA\\x0013I\u00AF\\x000f6~E?\\x0007\\x0001\\x0010\u0088\u0082\\x0000\u00A4\t\u00A4\t\\x0008DE@\u00D2\u00F1\u00A0m\u00EE\\x001e\u008F-O\u00E4\u00EB\u009C\u00AC`\u00DE(FO\u0094\t\\x0002 \\x0010\\x0011\\x0001H\u0093\u00A8\u00CCRD7\\x000c\u00C5&\u008B\u0080/K_\u00F6`RIg\t\u00F3\\x0006u\u0086\u00ED\u00C2M\u00D6\u009DEmA\\x0000\\x0004\u00A2#\\x0000i\\x0002i\\x0002\\x0002\u00D1\\x0012\u00F0\u00A5N\u00CA\\x0015}\u00E2\u00BB\u0092\u00D0% \\x0000\\x0002 \\x0010\\x0019\\x0001H\u0093h\u00CDRt\u00A2\\x0012%'\u0088\u0080o\u00C3_\u00C2\\x001f\u00DC\tR\u00B7\u00C8\u00C6\u00A3\\x0004\u00DDST\\x0015\\x0004@ :\\x0002I\u0092&F]\u00F1\\x0001\\x0004\u0092H\u00E0\u00B3\u00CA\u00BC\u00DF\u00B4h@aW\u00C4\u0090\u009B< \u00BF(@}*#\u00AB\u00CF\\x001d(\\x0019\\x0004@\\x0000\\x0004\u00AC\\x0004\u00F25\u00F9\"\u00D2\u00F2\u00BA}\u0097\r\u009E\u00D1s\u00E4\u00CA\u00FE\u00E3vUVV^RUU5|n\\x0003\u00FDMGw5\u009D-\u00A6h\u00DC*\\x0010H\\x000f\u0081\\x0000j\u0080\u00D4\\x000c\u009D\\x0015\u009AF!E2\u00C0\u00B7Bb\u008A*\u00B4:@\u0085\u0080\\x0000\\x0008\u0080\u0080\\x001c\u0081\"t\t\t\\x000fH\\x00139\u00CA!\u00BF\u00F8\u00E2\u00A2\t$\\x0010X\\x0019\\x0018\\x001a\u00C5\u00AFD\u00A0\u00FCJ\u00F2\u00EF#\u00E1}<~/\u008A\u00AE\\x000e\\x0002 \\x0000\\x0002\u00C5\\x0013\u0088\u00AF4)\u00AEfE9lpi\\x0010\u0088\u0082\u00C0\u00FA\u00A1\u00F9\u009A\u008A\\x0010\u00D2\u00FA\u008A\u00BC\u0092\u0086\u008A\u0092\u00FAUhW)\u00CA\u00A7\u008Ag\\x0010\\x0004@\\x0000\\x0004\u00CAB J\u00AFI\\x0014\u00B6\\x0001e\u0082@\u00D9\t\u0084%\\x001dB\u00D1\\x001fN\u0085\u0090\u00EE);(T\\x0000\\x0004@\\x0000\\x0004\\x0002\\x0011\u00804\u00C1k%\\x0008\u00F8'\u00A08<B\u00F2m\u0084.P\u00A8b\u0081\u00C6\\x0002\u009C\\x0005\\x0002 \\x0000\\x00021!\\x0000i\u00E2\u00DF,a\u00DC\\x0007\\x0001F \u00AC\u00F9\u009D\u00B0\u00D4\t\u009B$\u00C2\u00DD\\x0001\\x0001\\x0010\\x0000\u0081\u0084\\x0013\u00804\u00814\\x0001\u0081\u00E2\\x0008\u00C4A\u00A0@\u0094$| \u0086\u00A0\\x0004\\x0001\\x0010\u00E0\t@\u009A\\x0014g\u00960 \u0082\u0080\u00E1A)\u00CB\\x0014\\x000fD\tz \\x0008\u0080@\u00EA\\x0008@\u009A@\u009A\u0080@x\\x0004J\\x0019\u0083\u00C2\\x0016\u00F8\u00A4nHB\u008B@\\x0000\\x0004@\\x0000\u00D2$<\u00B3\\x0004#\\x0001\\x0002\\x0006\u0081\u00884\u008A\u00B1\u00EA\\x0018\u00A8A\\x0000\\x0004@ \u00BD\\x0004 M M@ J\\x0002\u00DA\u00E6%E\u00ECV\\x00029\u0092\u00DE\u00F1\\x0017/\u00C7 \\x0000\\x0002B\\x0002\u0090&Q\u009A%\\x000c\u00A9 `'\u00C0\u008B\\x0015Mv\u00B0\\x001d\u00D8\u008C\u00A4o\u00C5\\x0006z \\x0000\\x0002 \u0090I\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0001\u00CF\\x001e\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\u00942\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0094\u008F\u0080\u00B6\t\u00A1\u00BE\u00D3 \u00FB\u0091\\x0007\u00F6\u00BB\u0095F\u00CA\u00E4\u00B6cY\\x0016(\u0090&\u00E5{ \u00F1\u00B0\u0081\\x0000\\x0008\u0080@\u00A6\\x0008\u0084\u00F8\u00BB\r\u00F8m\u00CBT\u00F7\\x001cH\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00C8\\x0008\\x0018^\u0090\u009A\u008A|\u00E8\t\u00BF0\u0095R\u0081\\x0002i\\x0012\u00D9\\x0003\u0099\u00D2\\x001e\u0093e\\x001f#\u00DA\\x000e\\x0002  K \u00A2\\x001f\u00DFv\\x00117l\\x000e\\x0008\\x0003o*\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0084D\u00A0\u00F4\u008A\u00C4.V\u00A0Q\u0092\u00AFN MBz \u0093\u00DF\\x0015\u00F0\u00B6\\x0001\\x0002 \\x0000\\x0002\\x0001\t\u00AC\u00AFQ<\\x0016\u00A1\u00CF\u00D7\\x0014Y 4Jb\r\\x0013\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080@P\\x0002\u00F1\\x0014%\u00BC\u00A6\u0081@I\u00A0@\u00814\t\u00FA@&\u00F0f\\x0007|\\x001fBKA\\x0000\\x0004@@H\u0080\u00AC~\u0091\u008E\rv\u00BA\\x0016\u00CDj^0l\\x001c\\x000c\u00ED\\x0012\u0088DI\u008C\u00BD\u00834I\u00CC\u00AD\u0082\u00B0\\x0000\\x0001\\x0010\\x0000\u0081\u00B8\\x0010(F\u0094\\x0018{\u0096\u00E4}j\\x0005c\u00EDq`\u00B1B\u0097\u0086\u00CAL\\x0002\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001i\\x0002\u00C1bJ\u00A2\u0098UaJ%\u0080L\u0081@\u0089\u00BD:\u00814\u0091~ c/\u00F16\\x0000\\x0002 \\x0000\\x0002\\x0011\\x0012\\x0008\u00B0\u00FAFY\u00CD\u00EB\u00D35\\x0012d\u00A4\r\u00A4Q\u00B0\u00D28\\x0008\u00EA\\x0012YLH\u0093\\x0012\u0081\u008Ep\u00BC\u0088q\u00F7B\u00ABA\\x0000\\x0004RB\u00C0\u0097\"\n\\x001f\u0089\u00D4@\u00A7nr/\u00EFG\u0081:\u0091\u00A2Z\\x0006+\tiR\\x0006\u00E8)\\x0019\u00AA\u00E2\u00DA\u00A7\u0081\\x0017\\x0004@ L\\x0002\u00CA\\x001a\\x001ci{\\x001f\\x0013c//\u00A4\u00CA\u00A6\u00A2`z\u00DC\\x0008@\u009A\u00A0\u0080\\x0000\\x0008\u0080\\x0000\\x00088\\x0010\u00F0a\u00E3K0q\u00E3\u00F36\u00C9\u00CF@\u00C5DQ\u00E1}O'\\x0000i\u00E2\u00B3\u00AF\u00A3\u00EB\u0080\\x0000\\x0008\u0080@F\\x0008H\u00EA\u0092\u0098\u00DBu\u00D9V`\u00F1N\u008C\u00AC!\u00A4I\u008CnF\u0098>\u00D8\u008C\\x000c\u009Dh&\\x0008\u0080@D\\x0004d&q\\x0012\u00B4\u00D4EF\u00A0$\u00A89\\x0011\u00DD\u00F4\u00D8\\x0014\\x000bi\\x0002i\\x0002\\x0002 \\x0000\\x0002 `& \u00A5K\u00E27\u0083\u00E3aY\u00E5\u0082dcc\u009E\u00B3\u00FC\u00B2\ni\u0082!\t\\x0004@\\x0000\\x0004@@' \\x0013\u00F4\u009Ah\u00EF\u0082\u008C\u00FB\\x0004\u00EA\u00A4\u00DC\\x0004 M0$\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u00A8\\x0004H\u0097x\u00AE\u00BC\u008Dyd\u0089\u008CM\u0095Q')h\u00A6\\x000c\u008A\u00B8\u00E6\u00814\u00C1\u0090\\x0004\\x0002 \\x0000\\x0002  \u00F7\u00D3\u00C1q\u00B5dA\u00E6><'\u00AD\u00A0N\u00CAw\u00BB!M0$\u0081\\x0000\\x0008\u0080\\x0000\\x0008xm^\u0092\u00E8I\\x001c'\\x0013\u00EB\u00E9>)\u009Fm\\x000e\"\u00B6RT[H\\x0013\\x000cI \\x0000\\x0002 \u0090y\\x0002\u00EE.\u0084\\x0014\u00FB\\x000f<\u00D5I\u008A\u00DB\\x001ec)#\u0096&7\u00BC\u00F4\u00F3U\u009F\u00BFa\u00EFI\u00FA\\x001a\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004JF`\u00E9\u00CF\u00F5$BH\u008A\u00F4\\x001f\u00B7\u00AB\u00B2\u00B2\u00F2\u0092\u00AA\u00AA\u00AA\u00E1s\\x001b\u00FA\u00BC\u00BA\u00B9\u00E7\u00C8\u0095\u00F4\u00C5e\u0083g \u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u00C9\\x0008\u0090\u00FC \\x0011BR\u00C4$M\u00FA\u00BD\u00BE\u009D\\x000e\u0091`\u00A1\u00EF\u0090@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0d\\x0004H~\u0090\\x0008!)\u00A2I\\x0013\u00F2\u009C\u00DC_SO \u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@y\t(\\x0013:\u00F4\\x001f\u00FE\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@L\\x0008\u00FC\u00FF\u00EDM\u00B9\u00AD\u00E4\u0098U\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        }
                    ],
                    "count": "28",
                    "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.</p>",
                    "otherinfo": "",
                    "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html</p><p>https://owasp.org/www-community/Security_Headers</p><p>https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security</p><p>https://caniuse.com/stricttransportsecurity</p><p>https://datatracker.ietf.org/doc/html/rfc6797</p>",
                    "cweid": "319",
                    "wascid": "15",
                    "sourceid": "1",
                    "tags":[ 
                        {
                            "tag": "OWASP_2021_A05",
                            "link": "https:\/\/owasp.org\/Top10\/A05_2021-Security_Misconfiguration\/"
                        },
                        {
                            "tag": "OWASP_2017_A06",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A6_2017-Security_Misconfiguration.html"
                        },
                        {
                            "tag": "CWE-319",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/319.html"
                        }
                    ]
                },
                {
                    "pluginid": "10021",
                    "alertRef": "10021",
                    "alert": "X-Content-Type-Options Header Missing",
                    "name": "X-Content-Type-Options Header Missing",
                    "riskcode": "1",
                    "confidence": "2",
                    "riskdesc": "Low (Medium)",
                    "desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>",
                    "instances":[ 
                        {
                            "id": "59",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "117",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "46",
                            "uri": "https://google-gruyere.appspot.com/0",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/0 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: a9f0ac717d65264e0a123b06e2bc74bf\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "67",
                            "uri": "https://google-gruyere.appspot.com/1",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 73e1a5b9c1417e1d6b0ae95cd2637949\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "62",
                            "uri": "https://google-gruyere.appspot.com/2",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: daec9d0ea756ad5b852dda0f1c3f35e0\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "64",
                            "uri": "https://google-gruyere.appspot.com/3",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ae5bf9d4631ee9b68a8f0dc194d790c\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "115",
                            "uri": "https://google-gruyere.appspot.com/4",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: d526efc028ff43bac2d548501f7ec6ce\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "54",
                            "uri": "https://google-gruyere.appspot.com/5",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6e4e4f9574397074b8c5de69b04233ee\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "79",
                            "uri": "https://google-gruyere.appspot.com/6",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/6 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6b64469b26d2e767d2aa4b32bcb07104\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "114",
                            "uri": "https://google-gruyere.appspot.com/7",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/7 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: b79e83e770fdf4f2e8c5079ae5fb3622\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "63",
                            "uri": "https://google-gruyere.appspot.com/8",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/8 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 1efa39b9dda98d4c2c7fa8bde0f71130\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "66",
                            "uri": "https://google-gruyere.appspot.com/9",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/9 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ac5f78b2f3cc5f49983bb060c2740d1\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "119",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "125",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "139",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "136",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "124",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "57",
                            "uri": "https://google-gruyere.appspot.com/robots.txt",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/robots.txt HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 621003ecdd3a754888cc08e69df4b24a\r\nServer: Google Frontend\r\nContent-Length: 184\r\nDate: Fri, 28 Feb 2025 11:48:50 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:50 GMT\r\nCache-Control: public, max-age=600\r\nAge: 486\r\nETag: \"3m8CBg\"\r\nContent-Type: text/plain\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "User-agent: *\nDisallow: /0\nDisallow: /1\nDisallow: /2\nDisallow: /3\nDisallow: /4\nDisallow: /5\nDisallow: /6\nDisallow: /7\nDisallow: /8\nDisallow: /9\nDisallow: /start\nDisallow: /resetbutton\n"
                        },
                        {
                            "id": "109",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "39",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_b.png",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_b.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: eaad6a378c8e3be9968480d7d8b527a8\r\nServer: Google Frontend\r\nContent-Length: 682\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001b\\x0008\\x0002\\x0000\\x0000\\x0000\u00F3\u00BD8\u008F\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x000b\\x0013\\x0000\\x0000\\x000b\\x0013\\x0001\\x0000\u009A\u009C\\x0018\\x0000\\x0000\\x0002 IDAT8\u00CB\u009D\u0094\u00BD\u008F1Q\\x0014\u00C6\u00AD\u00AF\\x0017\\x0011\\x001f\u0089\u00AC\u00C2GA\u0081\n\u0080DE\"\\x0012\t\u00A5F\u00A2 \u00A1\u00D4Q(D\u00A3\u00A3\u00C4\u009F\u00A0PPHD\u00A1UH$\\x0012\\x0015\u0089DE\\x0010D\"\\x0012\u00EF3\u00EE\u00EE\u00EC\u00CC\u009DY\u00FB\u00EE\u00FBT3\u00E7\u00DE\u00DF\u00B9\u00E7>\u00E7\u00CCH\u00DE\u00F92\u009B\u00CDz\u00BD\u00FE\u00CFSZ\u00AD\u00F6] \u00AC6\\x001a\u008D\u00C7S\u0092\u00FFP&\u0093\u00F9\u0080\u00DF\u00F8\u00C2\u009A\u00D7\u00EB\u008DD\"d\u00DF\u009B\u0098\u008CFc\u00ADV[\u00AF\u00D7\\x0012\u008A\u00F4\u00F9|\u00FB\u00FD\\x001eY+\u0095\u008AT*\u00A5VI:\u00F2`\u00B1Xh8\u0097\u00CB\u0091\u0092n\u00B7\u009B\u00CDf\u00E3\u00EE\u00A6$\u0097\u00CBi8\\x001c\\x000e\u00DF\u00EFw\u00C0\u00FD~_\u00A5R\u00B1[\u00A3\u00D1h\u00BB\u00DD\u00AEV\u00ABV\u00AB\u0095D\u00D4j5/\\x0019x\u0099L\\x0016\\x000c\\x0006\u00E3\u00F1\u00B8\u00C1` A\u00D8\u00DB\u00EDv\\x001f\u009F\u00DAl6\u00C9d\u00F2\\x0003Fz\u0093\u00C9\u0084\u00C6\\x0008+$\u00AF\u00A1P\u00E8\u00C1\u00D7x<\u0086\\x001dJ\u00A5R2\u009B\u00CDv\u00BB\u00DDt:M\u00A7\u00D3B{\\x0011I\u00A5R\\x0014<\u009F\u00CFq\\x0018\\x0003\u00B3\u00A1\u00E5r\u00A9\u00D1h(\\x001e\u00AF\u00B1X\u008C\u0082'\u0093\tn\u00C7\\x0014\u00CB\u0086\u00AE\u00D7\u00AB\u00D3\u00E9\\x0014\u00C2\u00B8|\u00AF\u00D7\u00E3n\u00FB\u00BA3\\x001b\u00DDn\u00B7\u00E8\u00BEh\u00E5\u00D8W.\u0097\\x0017\u008B\u00C5h4\u0082\u009D_n\\x001f\u008FGB\u00A2\u00C3\u00DF\u008D\\x0014\u00D9\u008DK\u00C1'\u00D6N\\x0006\u00F6x<h\u008C\u00B0`Q\u009E+\u0091>\u00BF\u00E6\u00D1W\u0087\u00C3\u00C1\u00CC\\x0016\u0081_\u009C@\u00C5\u00E1p\u00AB\u00D5\u00BA\\.\u00B8?ID\u00C3\u00F8\u009E\\x000b\u0085B\u00B1Xt\u00B9\\\\\\x001e\u00CF:\u009D\\x000e\u00E3\\x0005\u0083\\x0006\u0083\u0081\\x0008\u008CP\u00A9Tb'\\x0001\u0083I\u009D\u009FH$:\u009DN \\x0010\\x0010)\\x001b\u00A1z\u00BDN\u00E0\u00F3\u00F9l\u00B7\u00DB\u0085\u00C5\u00F3\\x000c\u00A3\u00D6\u0090\u00F5p8`\\x0012\u00B2\u00D9\u00ACh\u00CF\u00D9\u0099\\x00177\u00CC\u00EDv\u00FB\u00FD\u00FE\u00D7\u00FE\u00FF\u00CE\u00ED\u0082_\u008C\u00C7\u00AFa\u0082a\u00FE\u00F0\u00D3\u00E5\u00A6\u00F8\\x0019\u00C6\\x000e\\x0018N\\x0006c\u00B5Z\u00C1B\u00F4\u0096\\x0007\u00BF\u0090B\u00A1\\x0018\\x000e\u0087\u00DC/9\u009F\u00CF\u00B3\u00AB\u00CC\u0090\u00A8\u00BF\\x0011\u00BEu\\x001c{:\u009D\u00B8p\u00B3\u00D9\u00C4\\x000fD\u00F5\\x0014\u00BE\u00DF\u00BF\u008E\u00DD3\u00CC\\\u00C7\u00AF:\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "41",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_bw.png",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_bw.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 1de77feb127c6999ace87f981c06e3a7\r\nServer: Google Frontend\r\nContent-Length: 740\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001b\\x0008\\x0002\\x0000\\x0000\\x0000\u00F3\u00BD8\u008F\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x0013\u00D6\\x0000\\x0000\\x0013\u00D6\\x0001\u00B16\\x0010u\\x0000\\x0000\\x0002ZIDAT8\u008D\u0095\u0094\u00CF\u008Bqa\\x0014\u00C7\u00BD,xmPSVV\\x0016X\u00F1\\x000fLY\u008DI\u008A,,f%\u0096\u00B6h\u008A\u0086\\x0019J\u0094\u008D\u0085\u0092\u009D,D)C(\\x001b\u00A5X\u00D8(\u00A5d\nY`\\x001a\rS\u0092_\u00CD\u00FB\u00ED\u00BD\u00DE\u00EB\u00BAw\u0098w\u00CE\u00E2v\u00EF}\u00CE\u00E79\u00E7|\u00CFy\\x001e\\x0016\u00EB\u0087f2\u0099\u00F2\u00F9\u00FC\u00E7_c\u00FD:5,+\u0095J\u00ADVK\u00B8\u00D2V\\x0001\u00F4z\u00BD\u0087\u0087\u0087\u00EDvK\u0087\u00E1\u00ADR\u00A9\u00DE\u00DF\u00DF\u00B1\u00E0\u00F7\u00FB\u00D9l6m\u0095\\x0008\u0098\u00CDf\u00C1g2\\x0019:l\u00B3\u00D9\\x0008\u008F\u00CDf#\u0091H\u0088\u00E0D\\x0016\u009F\\x0014{{{\u00B3X,tX\u00A3\u00D1\u00ECv;,\\x0017\u008BE\\x001e\u008FG\u0096\u00AA\u00D3\u00E9*\u0095J\u00A7\u00D3\u00D9\u00EF\u00F7\\x0004\u00EF\u00F5zO\u00C4\\x0000\u00CF\u00E1p\u00D4j\u00B5\u00D1h\\x0014\n\u0085\u00C4O\u0081@\u0090\u00CB\u00E5<\\x001eO2\u0099|zz\n\u0087\u00C3\u00EB\u00F5\u00FA\\x0000c\u00FB\u00AB\u00AB+.\u0097K\u00CD\u0090\u00DC\\x000b\u00CF\u009B\u009B\\x001bj\u00C2\u00E9t:\\x001e\u008F\\x001f\u00E0v\u00BB=\u009B\u00CDZ\u00AD\u0096\u00D5je\u00CA\u008B?f\u00B3\u0099\n\u00AFV+`x\u00F1\u00F9|G\\x0019\u00FA\u00FD>\u009F\u00CF\u00A7\u00F1\u00F8\u00D4\u00EB\u00F5\\x0000H7\u00D4\\x000c\\x000cr\u009E\u00C0\u00F0\u0090J\u00A5L\\x0018\u00C5\u00D7j5\u00D2\u00AD\u00D9l\u0086B!\u00BC<>>\\x001ea\u00A8/\\x0012\u0089\u0098\u0099\u008F\u00C7c\u00A7\u00D3\u00F9\u00FC\u00FC\u008C\u00F1(\u0095J\\x000e\u0087c0\\x0018\\x001cj^,\\x0016\\x0004\u0089\\x000e3Ib\u00AA \nF\"\\x0012\u0089\u00A4R\u00A9\u00D7\u00D7\u00D7c\u00AB\\x0014\n\\x0005\\x001a\u00C3L\u0098$\u00CF\u00D9\\x0017}\u00BE\\x000c#\u00E1\u0097\u0097\u0097#\u00CC\u00EC\ru/*\u00D9h40*\u00D0\t\u0095\r\u008B\u00C5b\u00BB\u00DD\u00EEr\u00B9d2\\x0019-,f\\x000b\u00E39\u0099Lpf\\x000ej\u00D3\u00C2\u00BA\u00DDn\u00C2\\x0015~\u00DDn\u0097\n\u00D7\u00EBu\\x001c&0\u00E5r\u00F9\u008B\u00C8\u0080!)\u00E1\\x001a\u008DF\u00AB\u00D5*-\u00F8p8<[3\u00E0\u00EB\u00EB\u00EB\u00F9|\u008E\u0081A\u0090\u00E5r\u00F9\u008D\u00DAL\u00C1\u00E4ry\u00A1P\u00C0\\x0016\\x0017\u00C8Kj_\u00C6\u00CE\u00C2\u00DF\u00CE\u00C670\u00D5\u00E3\u00E3\u00E3\\x0003w@0\\x0018\u0084~\u00A3\u00D1\u00E8\\x00070\u00AEH\u00B4\\x0014\u00D7\u00DDt:\u00C5\u0084\u00DC\u00DF\u00DF\u00A3\u00C9'0\u00CD\u00A8{\\x0003\u0088\u00C5b\u00E4'\u00EE\u00B0D\"q\\x0002\u00FF>5\u00EF?C\u00CC\u00BB\u00BB;\u009CD\u00D2\\x001bG\u00D2`0\u00E0?V\\x0003\u0081\u00C0\u00ED\u00ED\u00ED\t{\u00CE\u00FE\\x0000M\u0095@\u00B1\u00AF\u00BB\u0092\u00C3\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "52",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_w.png",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_w.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: e61a2c7e71b4950a548fb0d1ea66b04c\r\nServer: Google Frontend\r\nContent-Length: 727\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001a\\x0008\\x0002\\x0000\\x0000\\x00008\u00E1\u00EB*\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x000b\\x0013\\x0000\\x0000\\x000b\\x0013\\x0001\\x0000\u009A\u009C\\x0018\\x0000\\x0000\\x0002MIDAT8\u00CB\u00B5\u0094Io\u00A9a\\x0014\u00C7}3\u0089\u0085XZYX\u00FA\\x00006\\A\u00CCC\\x000c!\u00A2\u0092\nb\u00A3\\x0012\u0082\u0088)TXH\\x0008\\x000b\u00ADech\u0082\u0090\\x0018B\u00A2\u0086\u00D6\u0090\\x000e\u00F7\u0095\u00B7\u00EE\u008B{kq\u00CF\u00EAq^\u00BF\u00E7\u009C\u00E7\\x0006\\x001a\u009DN\u0097H$\u00BF\u00CE\u0099@ \u00A0x\u00C4b1\u0087\u00C3I&\u0093\u009F\u00BF\u008D\\x0006\u00D7\u00E75\u00D6j\u00B5\\x0014\n\u00C5n\u00B7;\\x0003\u00CFf3\u00B7\u00DBm2\u0099j\u00B5\u00DA%>\\x001a\u008D\u0082\\x000f\u0087\u00C3T\u00D8n\u00B7\u00A7\u00D3\u00E9n\u00B7\u008B\\x000c\u00DB\u00ED\u00F6%~2\u0099\u00F0x\u00BC?\u00E0\u00CDfc4\\x001a\\x0011\\x001cg\u00A7\u00D3Y(\\x0014\\x0008\u00FF\u00C7\u00C7G\u00BD^\u00CF\u00E5rOOO\u00EF\u00EF\u00EF\u0084S\u00A5RQ#\\x0007\\x0002\\x0001\u009B\u00CD\\x0016\u008F\u00C7\u00A5R\u00E9|>\u0087\\x0007\u00CF\u00BB\u00B9\u00B9Q*\u0095~\u00BF_\u00A3\u00D1X\u00ADV\u00C48\u00C0B\u00A1\u0090\u00B8\u009B\u0080qq\u00A9T\u008A\u00C5bH\u008C\u00F0\u00DC\u00DD\u00DD\u00F9|>\u00F2\u00F6P(\u00E4\u00F1x\\x000e0\u0093\u00C9\u00C4\u00C5\u00C8\u00F6\u00ACB\u00AF\u00AF\u00AF\u0088F\u00A4@\u00D8\u00DB\u00DB\\x001b0\\x001c\u00B4Z-\u00ED\u00F9\u00F9\\x0019\u00FF\u0080B\u00C8\u00B3\u00D9lR\u00E0\u0097\u0097\\x0017\u009DN\\x0007\u0080\u00F4 5`\u00DB\u00EDv\\x000f\u0093\u00DEb\u00B1\\x0008\u00A9O\u0083C\\x0002|\"V\u00ABU\u00B3\u00D9\u008C\u0083Z\u00AD\u00FE\u0086\\x001f\\x001e\\x001e,\\x0016\u00CB)<\\x0018\\x000cD\"Q\"\u0091@{d2\\x0019\\x0008\u00DC\u00E9t\\x000eo^,\\x0016\u00C4\u00DBp\\x0013n=[\u00D5\u00E9t\u008A\u0096\u00804\u00C1`p<\\x001e\u0097\u008A\u00CDf;\\x001c\\x000e\u0090\u00F7\u00F7\u00F7W\u00F5\u00E9\\x001e\u00E6\u00F3\u00F9Pe\u00B9\\\u00FE\\x0004@\u00C2\\x0010\u00F8b\u0093\u00C0\u00D6\u00EB5^qJV*\\x0015\u00B4\nr\u00C4\u00CB\u00CF\u00C3\u008F\u008F\u008Fr\u00B9\\&\u0093e\u00B3Y\n\u008C\u00DEB{\\x000e\u0087C\\x0014\u00EF\u00A0\u00F61\\x000c\u00F1@\u00F6z\u00BD\u00D5j\u0085\u00C1h4\\x001a\u00C7p\u00B9\\\u00C60\u0091\u00EAP#\u00F7\u00FB}\u00B4\\x001aq\u00BE\u00BD\u00BD%\\x0007\u00834\u00F4\u00D2\u00DF\u00DE\\x000c\u00E5\u00BD^o$\\x0012A\\x0010\u00C4\u00FF\u0087\u00DA\\x0014\\x0018j\u00E5\u00F3\u00F9T*E\\x000c\u00E6u\u00F0uu\u00FE\u008F0\u0086\\x0011;\\x0000+\r\u00FA\u00A1\nW\u00C0\u00D8!()\u00D6\u00DDh4B\u0087\u00A0x(\u00F2Oa\\x0000.\u0097\u008B\u00FC\u0089\\x001dv\u00BCR\u00F60\u0083\u00C1\u00D0\u00EB\u00F5\u00AA\\x0013CL.\u0097\u008BI<\u00DE\u00D8\u0098\"\u00F8\u00F1\u00D5`0\u00B0X\u00AC/\u0094\\x0013 \u00D8\\x0008\\x0007\u00B9!\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "45",
                            "uri": "https://google-gruyere.appspot.com/static/codelab.css",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/codelab.css HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 2dd89b22c206b11ab8877b68cd66e5d6\r\nContent-Encoding: gzip\r\nServer: Google Frontend\r\nContent-Length: 740\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: text/css\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "body { padding: 0px }\nbody, th, td, form {\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 12px;\n}\nh1, h2, h3, h4, h5 { color: #660066; font-weight: 600; text-align: left; }\nh1 { font-size: 18px; }\nh2 { font-size: 16px; border-top: 1px solid #e5ecf9; padding-top: 6px; margin-top: 1px}\nh3 { font-size: 14px; }\nh4 { font-size: 12px; }\nh5 { font-size: 11px; }\n\n.banner { border-bottom: 1px solid #e5ecf9; }\nhr { border: 1px solid #e5ecf9; }\nimg { border: none; }\n\ncode {\n  color: #660000;\n  font-size: 110%;\n}\n\npre {\n  margin-left: 14px;\n  font-family: Courier New, Courier, mono;\n  font-size: 110%;\n  color: #660000;\n  background-color: #e5ecf9;\n  border: 1px solid #e5ecf9;\n  border-radius: 1em;\n  -moz-border-radius: 1em;\n  padding-left: 1em;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n  overflow: auto;\n}\npre p {margin: 0em}\n\n@media print {\n  code, pre {color: black; }\n  pre {\n    background-color: white;\n    border: 1px solid black;\n  }\n}\n\ntable     { border: 0;border-collapse: collapse; }\nth        { padding-right: 4px; padding-left: 4px; }\ntd        { padding-right: 4px; padding-left: 4px; vertical-align: top; text-align: left; }\ntd.right  { text-align: right; }\ntd.center { text-align: center; }\ntd.centered { vertical-align: middle; text-align: center; }\n\na { color: #2244ff; text-decoration: none}\na:visited { color: #cc33cc; }\na:focus, a:hover { color: #0000ff; text-decoration: underline; }\na:active { color: #cc33cc; }\n\ndiv.column2 {\n  margin-bottom: 0px;\n  background-color: white;\n}\n\ndiv.column1 {\n  width: 250px;\n  float: right;\n  background-color: #E5ECF9;\n  padding: 5px;\n  padding-left: 4px;\n  margin: 0;\n  margin-right: 5px;\n  margin-left: 15px;\n}\n\nli.L1 { margin-left: -20px; padding-top: 6px; }\nli.L2 { margin-left: -24px; }\n"
                        },
                        {
                            "id": "42",
                            "uri": "https://google-gruyere.appspot.com/static/gruyere-78.png",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/gruyere-78.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: fb56c7df3c23aa76f1e5de09d8f0ecaa\r\nServer: Google Frontend\r\nContent-Length: 2527\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000N\\x0000\\x0000\\x0000N\\x0008\\x0002\\x0000\\x0000\\x0000\\x0001\u00C8\u00B7J\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008F\\x000b\u00FCa\\x0005\\x0000\\x0000\\x0000\\x0001sRGB\\x0000\u00AE\u00CE\\x001c\u00E9\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z&\\x0000\\x0000\u0080\u0084\\x0000\\x0000\u00FA\\x0000\\x0000\\x0000\u0080\u00E8\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017p\u009C\u00BAQ<\\x0000\\x0000\t]IDATx\u00DA\u00E5\u009Bm\u0088UE\\x0018\u00C7\\x000fY\u00BA\u00AB\u009B\u00BBn\u0096e\\x0011\u00FA!\u00E8CDPD}\u00E9\u0085\u00C8@\u00E8S}(\u0082\u0088 !B\\x0010\\x0014$\u0084\n\u0084\u00EC\u008BE\t\u0085\\x0015\\x0018E\u0089\\x0011\u00BD\\x0018$\u0082\u00A0\\x0010\\x0016\u00B6\u00EE\u00BD{WM7\u00B5\u00AD\u00F5\u00B5\u00DA\u00DA\u0092\u00960\u008C\u00E97w\u00CE\u0099{\u00EE\u00CC\u009Cs\u00E6\u009C{\u00EE\u00BDk\r\u00C3\u00B2{\u00EFy\u0099\u00FF<\u00CF\u00FC\u009F\u00FF\u00F3\u00CCl \u00FE7-h\u00EB\u00D3G\u00CF\\x001e\u00DF;qp\u00F3\u00FE\u00ED/~\u00F9\u00FE\u008A\u00CF7\u00DA\u009D\u00CF\u00F9\u0096k\u00B8\u00F2\u00E2\u0083\u00BA\u00FF\u00D4\\x0018\u00A3\\x0007\u00C6\u00AD\u009BW\u00E4\u00ED\u00DC\u00C5\u00BDm\u0082\\x001d\u0094h@L\u00B4\u00EC\u00BD5\\x0005\\x0010\u00DA\u009D\u00E7\u00F0\u00B4\u00B1\u00C9\u0089\u0099\\x0005u\u00FB\u0091\u00BD\\x000f~\u00F0l)\\x0008\u00ED\u00FE\u00D0\u00B6\u00E7x~\u00F7\u00A1\u00B6\\x0015d\u00BC\u00F3\u0096\u00F7Gw\u009D\u00BF\u00F0w\\x0017\u00A0\u00E2\u00AEO|\u00FAR\\x0007@\\x001a\\x0016\u0086\\x0008:\\x0007\u00F5\u00DC\u00F9\u00E9\u008D_m\u00EB0\u00C8xa\u00CF;\u008C\u00A1\u00EDP\u00E1\t\u00A6\u00B6\u008B8\u00B5y\\x000b0V\\x000e\u00A8\\x001f\\x001d\u00DAs\u00E7\u00DB\u00CFt\\x001d\u00A7\u00EA\u008Cd\u00E7\u00F1o\u00DA\\x0002\u00B5\u00BBN\u009B\u00D47\u00ED\u00FB\u00B8L\u00A8\u00F0\\x001e\u00CBc\\x0006\u00E2T\u00FD\u00D9]oy2s\u0090\u0089s\u00E5\\x0017\u00AF\u00CEX\u009C\u00AA3B\\x001f\u00B4\\x0019P\u0099\u00B3\\x0019\u008ES\u00A3m\t\u00EAL\u00F6[g\\x0010*\\x0008\\x0015u\u00D2\u00BEa\u00DD\u00B3eU;\\x001e\u00CB\u0098sCE\\x000c\\x0015\u008E+\u00DCH\u0082\\x0002c\u0093\u00A3 n\u00E8v\u00C4gi\u00B5\u0083\u00D2yuJV\\x00148\u00F5P^e\u00FB\u00E8G\u00EB\\x0019\u00FA\u00CEc\u00DF\u009C:7\u00E9\u00CF\u00FE\u00BB\u00C7\u00AB\u00A5\u009B\u0097\u0091'i)\\x0007T\u00B2'\u00CF\u00E7\u00AE\u00DE\u00F9:\u008Ar\u00FA\\x000f\u00C7\u0083\u00A7\u00AB\u00E2\u00D7\u00AD\u00E2\u00D4\u00F3\u00E2\u00C4\\x001a\u00F1\u00ED-a\\x001f\u00BET\u00EC\\x000f\u00E4\u00CF\u00B3/\u00AB\u00AB\u00C6\u00A7\u00CE0M\u00E5\u00A2e\u00FC^Pq\\x0000\u009F\u0099C9\u0099\\x0008\u00FF>#\u00B1M<-\\x000e\u00DE(\u00F1T\u00FBEu\u00BE\u00FC\u00C5\u00D9\u00AB\\x0003\u00E2\u00E8\\x0003\u00E2\u00C2\u0094rf\u00FF\u00C9\u00F5\u00ECN7\\x000e\u008C%\u0094>\u00C7|\u008B\u00D75=\u00E0\u00AF\u00C3\u00E2\u00E4:Q[,*s%\u00B6\u00A1 \\x0011\u009E\u00D1\u0087/\\x0013\u00A3K\u00A5\u00F1\u00EB\r\u00E7/Qu2N;\u00D2\\x0006\u009E\u00AC\u00BB\u00EC\u00BD5X\u00B2q)\\x00069\u00BD^\"\\x0004\u009Er\u00CB\\x0002\u00BD2[\\x000c\u00F7\u0088\u00A9\u00CF\u00B43\u0097\u0098K\u00D8l\\x001c\u00C4M\u009AT.i\u00CA\u009Bp\u00D4\\x001f\u009F\\x0012\u0095yr\u0094n\\x0000|5G\u00BA1\u00AB\u0094\u00B5\u00AA\u00FB\u00D1\u00E5\u00A2\u00D2+\\x001d{\u00A8~\u008D4\u00EC%\u00A2\u00DA'F\\x0006\u00C4\\x000fO\u008A\u00FE*W\u0084\u0082\u00C50l\\x0010\u00E7Cw\\x0002q,J \\x0018\u00CD\u00C4J\u00E9\u00A8)fd\\x0011\u009E\\\u00AB\\x0016\u00A1\u00BBM}\"oWP\\x001b\u00CE\u00DC+\\x000e\u00DD$\u00CE\u008F\u00EB\u00E2F)\u00CEl\u00AC\u00B5\\x0006T{\u0095\\x0012\t\\x001ai\u00E1\u009F_\u008B\u00DA\u00D5\u00A2\u00D2\u0093\u00E5\u0093\u00BD\u00D9A\u00E6\u00FB\u0087\u00DD\u00F7\u00D6\u00AE\\x0014\u00BF\u00EF(11\\x0006\u0091\\x0003\u00AAM\u00BCM8O\u00BF(\u00CD\u00E5\u00B5\u00FC\u00E6J\\x000fOoG\u00EEHd/\u009C\\x0019\u00C7\u0089\u00C2{\u00EB\n<N\u00C5AR,\u00DD;q02\u00C2#bd\u00BE7\u00AF\u00CE\u0096\u00C6\u0087\u00B1`f\u00A3\u00E1\u00D5\u0093[dtM\u009F5\\x001c\u0087u\\x001e\u00CDW\u008B\u00F5\u0080x\u008C\r\\x0014\\x0019\\x0018\u00AA\u00A5!\u009DyS\u008C\u00F4\u00E7\u00A6V\\x0018K1\u00B3\\x0016\\x000f\u00F2\u00CF9\u0092\u0084<\u009F\u00C0|\u009D\u00DB\u00AD=\u00AEp]\\x0012\\\u009A\u009C\\x0002\u009B\u0090\u0098\u00C5P\\x001e\u00B0>G\\x0016f\\x000fk$f%\u00C0T\u00E6\\x0014\u008C=6\u00C3\u009DX\u00AD\u009D\\x0019e\u00D6\"9\\x0005v1\u0085\\x0015\\x0012\u009A\u00F4\u00C0\u00D2\\x000cI\u0080c\u008F\u00DD\u00A7\u00B9\u00A4\\x001e\u00B2\u00C6\u00C5\u00D9W\u00A4M\u00FC\u00F1`|ip\u0097WW\u00FA\u00A4GD|N\u00A8,\u00E0\u00CC\u00A0k@5\u00B87\u008C.\\x0000\u00C8`\u00A0\\x001e\t\u00C9\u00D9~~#\u009B\u00ABG\u00AE\\x0010\u00E3\u008FK/%\u0086\\x0001\u0086_\u00F8\u00B36\u00E8\u00BA\u00F2J\u00E9_\u00913\u00E7\u00DD+\u00D1<\\x001c\u00E0\\x001bn\u00D6B\u00CDf\u00AA\u00BC\u00EA\u00E5*\u00F4\u009B\u00ED\u00C4\u00DA\u00E4e\\x001c\u00C5dB\u008E?9csDH\u00E4\u00CCyk@J\u00FF\\x0004v\u0098\t\\x00131<'|M\u00B8\u00FC\u0086\\:\u00B6\u00B6Pj`l\u00A2:\u00F6\\x001c\u00BBWT\\x0007\u00B3]\\x0017\u00F1\u0094+\\x000e\u00A1:\u00F86r\u00E6-\u00D5\\x001dyCN\u00804I\u0083\u008A\u00F3\u00A0oX~L*oR\\x001fb\\x0019\u00A6\u00B9\\x001a13\u00FA\\x000ew\u0095\u009F\\x000c\u00C8\u00B8\u00EA\u00CB\u00B1\u0083R`2;,o\"\\x0013\u00BF\\x0000>=\\x000e1\\x000b\u00A3\u00D7jg&\u00E9\u00F7tf\u00B5$\u0083M\u00FB>N\u0083\u008A\u00A0\u00B7%\\x0001N\u00CB\u00C8\u0098\\x0002\u00F0\u00B3\u00C0\u00B8\u00B2V'j\"\u008AD\u009B\u00E0\\x0002Ng\u0096\\x0013\u00D4\\x0017\u00DE\u00E89G\\x0004\\x0005$M\u00BD\\x0011)|6rq\\x0001\t\u00D5&\u00F1&\u00A8XI\\x0019\n6\u00E6\\x0013\u00A5\u00E0\u00C1\\x0019M\u00AD\u0099\u00D0\u00F1U\u00BA\\x000b\u0094\u00D2%\u00F3\u00DF\u00A5\u009Dy\u00F3\u00FE\u00ED>B\"\u00B0g\u00C5\\\u00ABN\u0092PF@\u00F1r\\x0019\u008E\\x00076\u0094\u0090\u00F2F_\\x0017\u00E8\u00CB\u00E7\u00F0\u00A9\u00E9.\u00CE\u009CR\u00BB\u00C1\u009C\\x0012\u00AA\u00AD\u00F2\u00B3\u00A1\u00BA\u00F1\u00F7\u0085\u00DE\u00A8\u00DC\u009E\u00DB\u00E1p\u00E0\\x0011\u00B4\"\u00DD\u00D3\\J\\x001b\\x000fi\u008Ck`2]\u008E\u00E1!J\u0093\u00F8,\\x0001\"VT\u00BB\u00C1\u0099\u0093\u00F6A1\u00A7\u0084jk\u00AEl\u00A8\u009E\u00A5\u0086\u00A1HK)\\x0017P:\\x0011T`\\x0003\u00A1\u00D3\\x0005d0\u00D9-g\u0087k\u0098)\u00E9\\x0002\u008B3\\@\u00D5n\u00A2\u0098gS\u008F\\x000e\u00AD\u00F9\u00A12\u0091\u00CA\\\\x000czd\u00B0h\u00FDan\u0099.@\\x0008\u00A8]\u00A3'\u00CE.D\u00821?\u00D4C77\\x0011\u00F2\u00D4g\u00A2\u00B6\u00A8\\x001c\u00A6\u00C9t\\x0001;U2\\`\u00F2]\u00FD1\\x0010\u00E2\u00CE\u009C\\x001f*!\u00C1~\\x001f\u00AF1J\n\u00A5\u00F7\u00D0\\x0005\u00EA\u0089$\u0094\u00C6\u00C0\u00A07\u00DE\\x000b\u00D5)]\u0099\u00D044\u00B2\u00FC\u009C\u00B4\u00C4'v\u00C3\u00C8\u0085Y\u00B4\u00D5\u00D4\u00A7?\u00CC\\x0016\u00D4\u00D8\\x0008o\u00E0'\u00D4E\u00B4\u00AC\u0083KHK\\x0019q5\u00DE#\\x0015j6U\u00F8u\u00D8a\u00A0x1\u00B1\u00F0\\x0012@\u00C0\u00F0\u00D2\u00FA*\u00D3PU\u00FA\\x001d\u00D8{'n\u00A8\u00DCf\u0083\\x001bj\u00FCJ\u009C\\x0019\\x001fS\u00AB\u008B~b\u0095\u00A4\u00AE\u00E1\u00DE\u00CEZ\u00BBOQ\u0094\u0086\u00AA6\u00D7\\x0003\u00BB\u00F6\u009BhU\u00A4\u0092\u00B3!\u00A4\u00B4\u00AC\u00B5-\u00CFZ\u00FA\u00E1\u00C9\\x001c\u00BA\u00AF\rPUM8@g$B\\x001d\u00CA\u00B3V\u0091/\u00C4\u00B7\u00A4\u00C6W\\\u00D0%\u00A8\u00AAN\u00E6\u00C8WC\u00A8\u0088L\u00FB)\u00D3U\\x0013\u00C3\u00F8c!\\x0006\u00E2mJ\u00AD\u0090\u00AF\u00AA\u00F3K\u00A6e8\\x0002\u0087\u00B2\u00EBU\\x0016\u00D40_\u00B5\u00AB\\x0010\u00A6U\u0087b\u00C1f\u00F4\u00BA\u00A6\\x0010O\u0086\u00A1\u00F38g\u00AA\u00DDd\u00D8\u00E5\u0089D\u00AAh\u00CC\u0093\u00C3\u00B8\u0098x\u00AB\u00A7\\x0015T\u0087o\u0093\u0095\u00CA\\x0004\u00A8*\u00D2\u00B8kK\\x0019j\u008911\u009D\u00AA\\x0008\u00A8\u008B\u00A6\u00E4\u00AB\u00C8\u00FD\u00F4F\\x00180*l\u00B8\\x0003\u008F\"<2nR%8\u00CCG\u0090\\x001c\u00B8\u00C1\u008C\u00A5\u00FC\\x0019\u00D7m\u00CDP\u009BjK\u00B8r\u00ABr\\x001f\u00CB\u00D8\u00BEmoa\\x0018\u00A9\\x001cy\u00BF\u00B1\u00E5A\u00B2\u009En\u00DB\u00E1\\x001eYd\u00B6\\x001b\u00A2\"\\x0001\u00AA>\u0096\u00E8\u00A8\\x0003\\x0017\u0082:\u00E0\u00CE`\r\\x0011\\x0017\u00E7a\u00D6\\x0005j.\u00AF \\x0001\u0086\u00D3}d\u00E1n\u00AE\r\u00D5\u00AC\\x0003\\x001b\u0087Y\u008A@E\u00BB\u00C6K\u00A4\u00CE\u00C6\\x0010\u00E3\\x0014\u0092\\x0014\u00A83\\x0016\u00EA\\x001c\u00B9\\x0010\\x001c\u0085\u00BB5N\u00AB\u00C6\u008F\u00BD\\x0004:\u00B5m\tj\u008A\u00C0\u00D0\u00CD.A\u00DAL\u0086\u00E5\u0087g\u00D5S\u00B6\u0084\\x000e)\u008C\u00DD\u00ED\u008A\u00EDK\u00EA;\u009A\u00F5kbj)~\u00A86\u00B0\u00C5q\u00C1\u00D4\\x001c\u00DEOoZi\u00C4\u00F3Ac\u0085\u00A3c\u00873\\x0019\u00B8O.\u00FBx\u0093\u00BBg\u00F3\\x001a\u00D3\\x0011A\u00D5\u0084dB\u00D5Im\u00D1*D\u00BF9\u0082&\u00EF}W\u008C,p\u00EF\u00CD`m\u0095\u008B\u00F2F\u00CF\u00CCA\u00A6\u00E3\u00CB\u00C3\\x001dj8\u00DC(\u0094G\\x000el\u009C\u00D6p\u00EC\u009A\\x0017\u0084\u00EAdT\\x001d\u00FAT1!I\u00A6\u00B7RdJVKig!TM\u00B88T\u0085\u00F6\u00D7\u00ADM\\x0011\u00EF\u00A7\u00D7\u00E4\\x001eq7\u00E4~\u00C6a\\x001e\u0094SKP\u0095\u00A8R\u0095DY\\x0016\u00E9\u0091\u009B\\x001d\u009D\u00CEc\u00FD\u00A06\u00B6\u0099\u00BB\u0092mw\\x0012\u00AAo|+R\u00B9\u00ED\\x0015\u00A3\u00D7G\u00A5\u00E0E\u00F9n$\r\u00D6[\u00D2\u0099\u00D5s|\u00CA\u0095xt\n\u00AAL\u00F1\u00967\u00B4\u00EBo\\x001fzma\u00A9\u00CD>\u0092\u00A78\u00DB\u00C1\u00F3)\u00FB\u00B7\u0095z\\x0019 \u00DFy\u00E0\u0092\u009D\u00CA*\u00C1yr\u00813IN\n]t\\x001c\u00A7\u00CBP\u00ED\u00D7\\x001f8;YO\u0091\u00D6\u00B6 \u0091\u00FC\u00BF\u00C8\u00FD\u00AE\\x000c\u00A8zU\\x000c\u00B5\u0087*\\x0010F\u00EAs\u0094\u00A0z\\x000b\u00BEW\u00E9kz#\u00BA'\u00A9\u009D\\g\u00E6@\u00F1\u00F5\u009F\\x000f*\u00FE\u00A6\u00F6\u0094\\x0018Sx>e\u00A0\u00A5\u00B5\u00CA\u0092\u008B\\x001f\u00A1u\u009Ev\u0091\\x001f\u00C6\\x0000|w\u00E2\u00F0\u00C8.\u00E2\u00C7MjW\u00A5yP\u00BE)R\u00C7\\x0015\u00D4Q\u00C1p\\x001fe \u00DFa\\x0016\u0095\u00D3\u00AB\u00FD8\u009Fs!\u0095Y\u00F2L\u0089OJh\u00EF\u00A7\u0094\u00FC\u009F\u008Ej+\u0095q\\x0003\u00A0E\u009B\u00E7\u00E2$#\u00D1\u00AF.\u00C8\u00E6\u00852\u00FFU\u00B7u\u009B\u00E7=\u00B1H\u0092`\u00AC\u00CF\\x000eAM\u00B7y\u00E6\u00A1\u00EF\u00BC\u00D9\\x0012\u00F1\u0099\u00A7\u00A5\u00AC\u0082\u00CE\u00FF[\u00BDy\u0094_\u009D\u00E3W9\u00B4\u00E7~1q\u00D2\u00DE\u0080\"\u00E3;|{\u008E\u00C0\u00D6Q\u00A8vZ\u00A76\\x000b\u00A1\u00F7\u00DA\u00C2p\u00A9;\\x000bh\u00C3\u00B3\u00E5Q\u00E1x\\x0006\u008F\u009D\u00D3q\u00CE,\u00A8\u00CE\u00A5~f\u0083\\\u00EAJ\\x001b\u00A8\\x000cv(\u00E6\u00C9\u00CC\u00C8\u00E8\\x0012\t2\\x0013\u00E7\u008C\u0086ZzT\u00BF\u0098\u00A0\u00B6\u00C8\u00F0\\x0017\\x001f\u00D4\u00E4\\x001d\u00F1\u008C\u00A8~\\x0011[5\u00AF\u00CD\u00FF\u00B3P\u00FD\u00DA\u00BF\u0089U\u00AC\u00AA\u00CA-\u00A4\\x0017\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "95",
                            "uri": "https://google-gruyere.appspot.com/static/gruyere.png",
                            "method": "GET",
                            "param": "x-content-type-options",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/gruyere.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: e61a2c7e71b4950a548fb0d1ea66b04c\r\nServer: Google Frontend\r\nContent-Length: 40079\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0002\u00DE\\x0000\\x0000\\x0002Z\\x0008\\x0002\\x0000\\x0000\\x0000\u0097\u00D7\u00D7\u00C6\\x0000\\x0000\\x0000\\x0001sRGB\\x0000\u00AE\u00CE\\x001c\u00E9\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008F\\x000b\u00FCa\\x0005\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z&\\x0000\\x0000\u0080\u0084\\x0000\\x0000\u00FA\\x0000\\x0000\\x0000\u0080\u00E8\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017p\u009C\u00BAQ<\\x0000\\x0000\u009C\rIDATx^\u00ED\u00BDi\u0094\\x0015E\u00DA\u00EF\u00EB\u00FDz>\u009Eu\u00BE\u00DD\u00B5\u00AE\u00F7\u00DCs\u00CF]\u00AB\u00BF\u009C\u00F3\u00BE]mkw;S \u00C5\u00A4\u00D8\u00B6\u00F3\\x0000\u00A8(X\u00DA\\x000e\u00B4\u00AD\u00AD\u00E0\u0080\u0088\u00CA\u00B0\\x0001\u0099\n\\x0010\\x001c\u00DB\\x0011K\\x0005AeP\\x0019\\x0004,@\u0099\u00C7\u00A2(\u00A0\n\u008A\u00A2\n((\u00A8\\x0002d\u00DF'32sGfFfF\u00E6\u00CE\u00DC;\u0087?+t\u00ED\u00CA\\x001d\\x0019\\x0019\u00F1\u00CB\u00C8x\u00FE\u00F9\u00C4\\x0013\u00B1\u00FF\u008F\\x001eO\u00CC\u00BFD\u00FD\u00F7\u00B6}y\u00FE\u00FCy\u00F6\\x0019\u00FF@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0d\\x0004\u00CE\u009D;w\u00E2\u00FF\u00BAS\u00BB\\x001cI\u0093{\u00EF\u00BD\u00F7\u0085\tsg\u00FEx\u00EA\u008D\u00EFN\u00BF\u00FA\r\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@$\\x0004nzl\u00CA\u00A4\u00E5\u009D\u00A1\u00A4x\\x0016\\x0015\u00A0i\u0083\u009Ey\u00F3\u009D\u00B5g\u00E6\u00AC<5\u00FC\u00B9\\ee\u00A5\u00E21\u00A1\u00FF\u009E{c\u00CE\u00C4e\u009D\u00FF\u00F8\u00BC\u00E3\u00FE\u00F7N\\x000e~\\x0017\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@ \\x0012\\x0002\\x001e<\u0089\u008Cw(\u00A66\u009EE\\x0005h\\x001a5\u00E4\u00C5\u0085\u00A7H\u0081<\u00F0\u00DE\u00C9\u00BF>:^\u0091&\\x0003\\x0007\\x000e\u009C\u00B4\u00AC\u0083tI\u0080\u00E2p\n\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080<\u0081x\u00EA\u0089\\x0010k%\u008F\u00C2\u00C8\u00C9\u00A4\t\u00FD9\u00E4\u00BD\u0093\u0083\u00DEn'\u00C7\u00C9%UUU#\u00BFR\\x000e\u00DD\u00F7N\\x0004\u00E9\u00ED\\x0013\u00F7\\x0005KQT&@\u0099\u00C1*Og\\x0005\u00B8V\\x0014\u00A7\u00A0\u00FEQP\u0095/\\x0013\u00FC\u00E5YE\u0091\\x0013\u00FC\u00A3\u00A0*_f\u008C\u00F9\u00D3\\x000b\u00FA\u00E8E\u00A7'/\u00EF\u009C\u00F2}'Y\u00C0AB\\x000b(W\u00FFgj;>\u00F8\u00F9\u00EC\u00B4\\x001f:\\x0007\\x0019\u00F9]\\x0011\u00FDi\u00D0\u00A4\u00DC\u00B2\u00CEPl\u0084\u00B0\u00A8\u009B^\u00DF\u00F0\u00FF];\u00C8%\u00DD\u00F4\u00DAz\u00BB]V\u008AZzZ;.w\u008B\u008DK\\x0018m\u00B1\\x001f\u0091l&]\u00FD\u0085\\x0005\u00A7\u008C\u00CC\u009A4y\u00E6\u00F3\u008E{\u00E7\u009D\u00F0No\u009F\u00B87@\u0092)\u00D9\u009EG\u00FEB\u00F2\u00E5\u00CB\u0097\u00C9\u00E7\u0094/\u009F\u00CF)-\u00F9\u00F2\u00E5\u00CBD\u00FD\u00E5Y\u0081\u00BF;+y>\u00E8\u00FF\u00EE\u00AC\u00E4\u00FB$\u009E_yV\u00F2\u00FD\u0093+\u00F3\u009F\u00B5\\x001d\u008B\u00B7v\u00CD^uf\u00CC\u00C2cS\u0096\u00B4\u00FD\u00B0\u00EB\u00EC\u00D2\\x001dg\u0087\u00FF[d\u00E0$\u00CA\u00F4\u00A3\u0093\u00BF\\x001e<?mI\u00EBmS\u00F7kf\u00D4\u00B5\u00FEW\\x000c\u009A4q\u00E9i\u00CD\u0098J\u0094\u00EFR\u00A6\u00A9(\u00FD\u00A2\u00FF\u00F3\u00DAA\u00CBwukig\u00F7r[\u00FA\u009F\u00D7\\x000c\u00B2\u009B\u00FB+\u00EESk\u00C5\u00EA#\u00C1_\u00BB\u008AZ8+\u0090\u00FEo\\Kp\t/&\u00A3\\x0016\u009C2\u00AE\u00ABI\u0093\u00A7?\u00EF\u00B8{\u00DE\u0089\u00A8\u00D2\u00DC\u00E3wG\u009A\u00A2\u00AB9+9\u00D2\u00CAS\u00E1\u00A8\u00BF;\\x0001\u00F0w'\u0080\u00FE\u0083\u00FES\u00CC3\u0092\u00BD\u00FE\u00F3\u00F7ON\u00AEo<\u00F7\u00CF\u00CF\u00DA\\x0006N\u00D8\u00F6\u00B77\u00F7\u00DD6\u00FD\u00E0#\u00EF\\x001e\u009A\u00BE\u00E4\u00C8\u00DFr\u00DB\u00EE\u009Cs\u00CC: \u00CB\u00B1]\u00B7\u00AF\u00FB\u00A5O\u00F6\u00FDmJ\u00BD\u008C\u00BD\u00B8\u00FC\u00BE\u00DC\u0084%\u00A7\u00B5\u009C\u00C5\u00F1\u00BF\u00FC\u00BEI\\x0013\u0096\u009E\u00B6\u00D4\u0099\u0097\\x0008v]\u00C2\u0094\u0084\u00BD\u009E\u00A6Z\u00C9\u00B5\u00DA\u00A2Ex]\u00E2\u00D7\u00AEQC\u009E\u00FF\u00EA\u0094q\u0096&M\u00FE1\u00FF\u00E4\u009Do\\x001dG\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081t\\x0013\u00F8\u00E2\u00D7\u00B3\u009F\u00AE\u00EF\u00EC?v\u00E3\u00AD3\u009A\u008D\u0096\u00DE6\u00F3\u00C8\u00CD\u0093\u00F6\u00DE1\u00A7\u00FD\u00D9\u00DA\u008EY+;\u00DF_w\u00E6\u00D5\u00C5\u00A7\u00D8\u00B7\u00F7\u00CE;\u009E[vz\u00EE\u00EA\u00CE\u00B7\u00D7\u009Cy\u00F8\u0083\\x0013\u00EC e\u00A3\\x0019\u009C\u009A\\x0015\u009D\u0093\u0097\u009D~\u00FC\u0093\u0093k\u00F7\u009D\\x001b\u00F9\u00F1\u00BE\u00BFMm|\u00EA\u00B3\u0093sVu~\u00B0\u00EE\u00CC\u0088\u00CF\\x001c\u00AD\u00EA\\x001f\u00EF\u00CD\u008D\u00FB\u00EEt(\u0090\u0085E\u00FD\u00BF\u00D7\\x000cZ\u00B6\u00B3\u009B\\x0012}\u00B0$\u00E3\u00B8\u00FD\u00EA\u00C1je\\\u008B\u0095\u00CC.\\x001a\u00A0it\u00F5\u00E7\u00BE\u00E80N\u00D4\u00A4\u00C9\u0088\u00CF;\u00EE\u0098{\u00C2Gz\u00EB\u00C4\\x001d\u00F1I\u00BEj\u00CE2\u00C7\u00A7\u00F2T\\x0013\u00D4\u00BF\u00BC\u00B7\\x0003\u00FC\u00C1\u00BF\\x0018\\x0002\u00E8?\u00C5\u00D0+\u00FE\\\u00FF\u00FC9p~\u00C2\u00D7\u0087o\u009A\u00B0\u00D3n\\x0008h\u00FB\u008C\\x0005\u009B\u00BB\\x001e\u0098w\u00E4\u00D1w\\x000fn>tn\u00F2\u0092\u00E3w\u00CD=AG^\u00FF\u00F6\u00D4=5\\x0007\u00DE^u\u00BCn\u00F7\u00E0\u00B7\u008FM\u00FF\u00B1s\u00EE\u00EA3\u00FF\u00F8\u00F4\u00D8\u00E6C\u00E7\u00DFYu\u00FC\u00D6\u00A9\u00FB\u00D7\u00EF?\u00F7\u00CF\\x000f\u00F6=\u00FE\u00EF\u0096\u0085[\u00BA\\x0006\u00CF=:e\t}u\u00EE\u00D6\u0099G\u0084\u00B6\u00E6\u00B2{'\u00914\u00D1\u00BE\u00F2_\u00BELSQ:\u00CC\u00FFq\u00CD\u00A0\u00A5;\u00BB)\u00D1\\x0007>\u00B3\u00D3q\u0096GX\u0094\u00B7\u00AD\u009C{\u00C2(V\u00BB\u00A2g\u008BD7\u009D\u00AE\u00FE\u00AF/N\\x0019\u0097\u00D3\u00A4\u00C9\u0093\u009F\u009E\u00BCm\u00F6q$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H7\\x0001\u008A\\x000b\u0099\u00FE]\u00F3\u00C0I\r\u0096f\u00DE1\u00E7\u00F8\u00BA\u0086s\u00A3\u00BFl\u00ED\u00FF\u00C6\u00D6\u00BF\u00CDl\u009D\u00F1\u00C3\u00C9u\u00FB\u00CE\u00BE\u00BA\u00A0\u00E5\u00A7\u00FAstd\u00E0\u00E4\u00FDw\u00CD9\u00F6\u00CB\u0081s3\u0096\\x001c\u00A6#O|\u00D0t\u00E3\u00C4=\u00D3\u0096\u009FX\u00BE\u00FD\u00F4\u00CD\u00B9\u00DD4C\u00F4\u00E4;{>X{\u00EA\u009D\u009FN\u008D\u00F9\u00A2\u0089\\,O\u00D4\u00DC\u00E7\u0095\u00F5B\u0092\u00B8'\u00F7\u00FA\u00B7\u00A7\u00ED_\u00FD\u008F\u00AB\\x0007\u00B9$\u00F9\u00A2\u00A8\u0090\u00A5;\u00BA)\u00D1\\x0007\u00FE,\u00A7\u00E3,\u008FS\u00AD<;\u0083Q\u00AC\u00FD\u008A\u009E\u00E7\\x001a\\x0019\u00E8\u00EA\\x0014Ml\u00FC\u00A9I\u0093'>=y\u00EB\u00EC\u00E3H \\x0000\\x0002 \\x0000\\x0002 \u0090n\\x0002\u00DFl\u00EBZ\u00B1\u00AB\u0093\u0084\\x0005k\u00E6\u00F3_v\u00BC\u00B7\u00EE\\x000cy;(\\x0008t\u00E3\u0081\u00F3o|up\u00E0\u0094Fv\u009C|$\u00D3\u00BEm\u00DE\u00D0xn\u00E0\u00B8M,3Y\u00DF\u00B9?\u00B4|\u00BB\u00B5\u00F3\u00DF?\u00B5\u00DD<\u00B5\u0089&t\u00DEZ\u00D1\u00DE\u00F7\u00B5M$M\u009Ezw\u00CF\u00C7u\u00A7\\x0016m>}\u00DF\u00CC\u00FA\u009B&\u00EF\\x001f0a\u00F7\u00CDS\\x000f\tIV\u00A8\u00D2\u00C4\u00F2\u00D5\u00FFs\u00F5\u00A0%;\u00BA]\\x0012e\u00B0\u0097\u00E6^\\x0014\u009DbI\u00AC|\u00F9\u00A2<{\u0082\u00BD\u00DA\u00C2\u00C2=\u00CB\u00A1\u0086Pl\u00B2\u0091M\u0093&\u008F|\u00F2\u0096\u009A\u00E3r\u00A9\u00FD\u0096\u009A\\x0000I\u00B2\u00F0\\x0012d\\x000bPy:\u00A5\\x0004\\x0015\u0093\u00BC\\x0004\u00EA/\t*\u00A2l\u00E0\\x001f\\x0011X\u00C9b\u00C1_\\x0012TD\u00D9\u00D2\u00C0\u00FF__tlm:?\u00E5\u009Bff\u00CBn\u009F\u00DD>\u00F8\u00ADf:\u00F2\u00E4{\r\u009F\u00D6u,\u00DF~j\u00C0\u00C4}t\u009C\u0094\u00CA\\x0017\u00BF\u009C\\x001e4u\\x001b}\u00F5\u00AF\u00EF\u00FB\u00EB\u008C62\\x0004+\u00F7\u009C\u00FB\u00FB\u00DB\u00F5\u00F7\u00CE\u00A8o\u00D5\u00B1\\x0005\u00BF\u009C\u00FAx\u00FD\u00D9\u00FE\\x0013\u00F6\\x000e\u00CC\u00ED\u00D9\u00D0x\u00FE\u00D1\u00B7v\u00BF\u00F8E\\x001be\\x001e6g\u00EF\u00CD\u00D3\u008F\u00BAX\u008D\u00DF\u00DF\u009D\\x001b\u00BB\u00F8\u00B4%\u00C3\u00BFj\u00D0w\u00DB\u00BB]\\x0012e\u00B0\\x001b_\u00B5\u00A8S\u0096\u00E3\u00FF\u00FD\u00AA\u00FB\u00BE\u00DB\u00DE\u00C5%k\u00B1jQ\u00D6\\x001e\"\u00AC\u0095\u00BB\u00ED\u00E3\u00EBl\u00F9\u00ECp\u00A2c\u00FF\u00A1\u00AB?=\u009Ft\u0088\u0096A\u0093&\u008F}|\u00E2\u00E6\u0099\u00ED\u00DE\u00A9\u00A6\u00FDf-\u00B5\u00DD\\\u00E3'\u00CDl\u00BB\u00D9G\u0092\u00A8\u0089Lm\u00EDyP\u00A9\u00BB\\x0000\u00FE\\x000e\\x0004\u00D0\u00D0\u0082\u008D<\u00EC,\u00F4\u009F\u00D8\u00F4\u009F\u00B1\u008B\u00DA~=\u00D8\u00FD\u00C5/\\x001d/.\u00EC\u00F8\u00FB''\u00C6~s\u00F2\u0097\u0083\u00E7\\x001e\u009A\u00B5\u00ED\u008E\u009AC\\x000b\u00EDxwe\u00EB\u00B8\u00EFHv\u009C\u00B9w\u00D6\u00FE\u00AA\u00D7\u00B6\u00BC\u00FA\u00F5q\u00D2+\u00AF/j\u00A5i\u009A\u00DC\u00D2S7\u00BC\u00B2q\u00C0\u0094\u0083w\u00CFiY\u00BA\u00ADsM\u00FD\u00D9A3\u00F7\u00DC=\u00B7}\u00D5\u00DE\u00EEY\u00CB\\x000e\u00DF=\u00AB\u00F9\u00EDU'7\\x001e8\u00F7q\\x001d\u00ED\u0098r\u00DA\u00C9\u00A4\u00FE\u00E7]9\u008A\u00B1\u00B5|\u00FB_u\u00DF\u00B7\u00DB\u00BB\\\\x0012e\u00B0\u00DB\u00DF\u00FF\u00BC{\u00E2\u00AB\u008B;,\u00E6X\u00AA(\u00DB\u00BD\u00F8\u00CF\u00BB\u00D4\u00A2\u00A4{8\\x0015\u00A5n3\u00DB\u00EDGL\u00A5\u00B9\u00F6j\u00C8\u0088\u00F9'\u008C\u0086h\u00D2\u00E4\u00D1\u008FO\\x000c\u00ACi\u00F3\u0091f\u00B6\r\u008C.\u00F9\u00AAI\u00B0\u00CC\u00D1U\u009EJ\\x000eV%_g\u00A1\u00FE.\\x0004|\u0091\\x000c\u0096\\x0019\u00FC\u00C1?X\u00CFag\u00A1\u00FF\u00C4\u00A0\u00FF\u00DC9\u00A3\u0091\u00D6\u00D4L\\|x\u00EC\u00D7\u00AD\u00CF\u00CCo\u00BD}Fc\u00CF\u0097\\x001e0\u00E5\u00D0M\u00D3\u008F\u00DE;}\u00D7\u00E0\u009A\u00FA\u00BE\\x0013\u00EA\u00AB^\u00DFv\u00E3\u00B4#t\u00BFnys\u00FF\u0090\\x0019;\u00EE\u0098\u00B1\u00BF\u00CF\\x001b;o\u009D\u00BA\u008FT\u00CB\u008C\\x001fO?[\u00DBN\u00D3:?7t\u00DD\u00F3V\u00CB-5GozcS\u00DFq;n\u009C\u00DEr\u00D7\u00F4=\u0083\u00A6m\u00B9q\u00C2\u00F6>\\x0013\u00F6\\x0008\u00CD\u00C1\u00DC=q\u00CC\u00E2\\x000e\u00FBWd\u00DA]R!?G\u00EF?\u00EER\u008B2\u00F3\u00AC|i\u009D{Q\u0094\u00C1\u00DE\t\u00B5\u00A2\u00FCtl\u00E3*F\u00DD\u00ECG\\x0004\\x0004Dw\u009F\u00AE\u00FE\u00D4g'\u008CZi\u00D2\u00A4\u00FA\u00A3\\x00137\u00CDh\u00F3H\u00D3\u00DBn\\x000c\u009A\u00BC\\x000b\u00F7\u00BC\u00BAK\u0086\u0099^5g\u00E7\\x0006\u00AD<\u00B5\\x001a\u00F5w#\\x0000\u00FE^]\\x000b\u00FD\\x0007\u00FD\\x0007\u00E3OTOA\\x0011\u00E3O\u00FF7[\u00FALh\u00A8zcO\u00D5\u00F8\u00FA\u00BE\\x0013\\x001b\u00E9O\u00C3\u00C6\u00F5\u009Fr\u00B8\u00DF\u00E4f\u00F6'\u00AB\u00F9\u008D\u00D3Z\u00FBOi\\x001e0\u00B5\u0085\u0096\\x0016/\u00DC|\u00E6\u0086\u00B1[\u00AB\u00C6\u00ED\u00EE\u0097k\\\u00B2\u00AD\u00F3\u00A1Y;\u00E9\u00F8\u008D\u00D3\u008F\u00DD8\u00ED(\u00CB<`\u00EA\\x0011\u00CAL\u00A7\\x0008[\u00FD\\x001fwN|eQ\u0087\u00F6U\\x0011\u00F5\u00A7\u00BA\u00FDo*\u00EA\u00EB\\x000ew\u00D3,I\u00DET+y\u008B\\\\\u00FD\u008D\u009ASC\u009E\u00FC\u00F4\u0084\u00F1\u00A7.M>,\\x001crl\u00E4\u00B4\u00B6\\x0001\u00D3\u00DA\u00FAO=\u00D6o\u00CA\u0091>\u00B9\u0083\u00BD\u00C7\u00D5\u00DF\u00F0\u00DA\u00CE^c\u00B7\u00CB\u00A4\\x001b\u00C6nW\u00D2k\u00F2i\u00DB\r\u00AFm\u00BBa\u00ACdR\\x000b\u0097H2U\\x0015\u00E6A\u00FD]\u00EF\u0085\\x0018~\u00EF\u00D7w*\\x000f\u00FC\u00A4\u0083\u00FD\u00DF<2`\\x001a=\u00B4J\u00FF\u00F1\u0091\u00A6\u00B7\r\u00D0\u0093\u00D6'it\u0090M\u00C7n\u009CqL\\x0019)\u00A4\u0092\u009C\u00E6\u00F6Uy\u00CA\u008C\u00FAK\u00C1\u00A7{\\x0004\u00FE\u00A2\u00E7\\x0002\u00FD'\u00AE\u00FDg\u00F4\u00A2\u008E\r\u008D\u00DD\u00FF\u00FCp\u00FF\u0090w\u008F?\u00F7\u00E5\u00C9w\u00D7vR\\x0018l\u00BF\u00C9\u0087\u00B8\u00D1\u00C9c\u00FC\u00F9\u00F3\u00DF\u00BFxp\u00F6\\x001e}t*\u00AA\u00FF\u00FF\u00AF;&\u008E\u00FE\u00BAC0\u00AE\u00FA\u00EF?\u008A\u00CAY\u00D4\u00A1\u00B6\u00A2\u00D4\u00E3g\u00D5\u00F8\u0086\u00CB\\x001e|\u00E7\u0089ON\\x0018\r\u00D1\u00A4\u00C9#\\x001f\u009E\u00E0GR\u00A7\u00CF\u00FD\u00A7\u00B6\u00F6\u009D\u00DCt\u00C3\u00EB;\u00AF\\x001b\u00B9\u00E6\u00CA\\x0011\u008B\u00AFxt\u00FE\u00E5\u00C3?\u008C&\u00FD\u00FB\u00F2\u00E1\u00F2)\u00A2:\\x0014S\u00AC|\u00E5)g1\\x0017\u008A\u00E8\u00DC\\x0010\u00EAO\u00DD\u0083:\tu\\x0015\u00EA0\u00D4m\u00A8\u00F3\u00C8\u00F4\u00B1\u0090\u00F2\\x001c\\x001b0]>\u0099dDH\\x0015(\u00B2L\u00F9\u00CAS\u00CE\"\u00AF\\x0015\u00C5\u00E9\u00A8\\x0014T\u00E5\u00CB\\x0004yVAr\u008E\u00F8\u00E8\u00C8\u00EC\u00E5Gf||\u00F4\u0082\u00E3\\x0003&7\u00D2\\x000b\u00ADy|\u00F3\u00E0\u00DFk\u00EC\u00B6\u00EB\\x001e}\u00A7\u00DF\u00F8]\u00EA0\\x0015\u00A4\\x0002\u00C6Y\u00FF\u00EBNU\u009A\\x0014W\\x0008;\u009D+\u00AA\u00A4\u00FD\u00A7j\u0082\u00A2K\u0088!\u00FD\u00AA\u009F\u00D1\\x0010\\x001f\u00D2\u00A4\u00FF\u00B4c}'5\u00F5\\x001c\u00B3\u00F5\u00CA'\\x0017\u00FDc\u00DAwK\u00D7\u00ED\u00EE\u00E8\u00EC\u00FE\u00EDb\\x001e\t\\x0004\u0084\\x0004Nvv/^\u00B3\u00E7\u00D1\u00DC\u00B7W>\u00B5\u00A8\u00E7\u00AB[UurL\\x0017\u00C5\u00F4\u00C1O\u00F2\u00A13|=T,\u00B3\u00F4\u00D0Pp\u009C\u00F8\u00A9<\u00B5\\x0014\u00F5w#\\x0000\u00FE^\u00DD\t\u00FD'u\u00FD\u0087\u00A2R\u00FE<(Wq\u00F7D\\x0012\\x0004\u00B2\u00E9\u008E\u0089\u00E4#Q\u00D3\\x0004\u00E9\u00CE\t\u00FF+\u00C2\\x0014B\u00FDI\u00AB\r\u009AGks\n\\x000f\u0082&M\u0086p\u009C\u00CC\u0086{\u00EA;\u00F9p\u00AF\u00B1;\u00FE\u00FC\u00C4\u00C27?\u00F9\u00E9\u00FCo\\x0017)\u009D\u00FB\u00ED\u00E2\u0085\u008By{\n\u00D1T\\x000b\u00CB\u00B7\\x001c\u00E4/'\u0093\u00DF3\\x000f\u00EAo\\x0010\u00F0dE\\x0019\u009C\u00F8S\u00F7`\u00E9\u00D5\u00B7WP\u00B7\u00A1\u00CEC]\u0088\\x0004\u00AE\u009AZc\u0094\u00BCz\u00BE\u00E9\u00B9@\u00FDC\u00BFw\u00E0\\x001f:R_\\x0005\u0082\u00BF/\\\u00E1e\u00FEkM\u00EB}\u00F3\u00DA\\x001e\u00FF\u00F8\u00B8\u008F\u00F4\u00C9\u00F1\u00C7\u00E3\u0096\u00C2\u00A8?q \\x001a\u00BCQ0\u00A4\t\\x0005\u0091\\x001cuI\u00FD\u00DEl\u00A9\\x001a\u00BF\u00EF\u009A\u00E7V\u00FCc\u00EA7\\x0017T]\u00C2R\u0088V\u00DCR\u0094\u008CQdy\u00A2\u00ABC1%\u00A3\u00FE\u009A~\u00BD\u00F0\u00DB\u00A9\u00CE3\u00C3\u00C6-\u00B8\u00F6\u00B9\\x0015\u00BD\u00C7\u00EF\u00EB\u00FBfK\u00BF\u00A9G\u00FBMm\u00F5\u0091|\u008F\\x0005G\u00FBO\u00F3\u0093\\{>\u00FFP\u00A85g\t\u00F5w\\x0011\u0097~\u00E0\u00D3\u009D\\x0002\u00F7\u00EE\u0084\u00FE\u00EF\u00FE8\u00A3\u00FF\u00A4\u00B1\u00FF\u00E8\u00D2\u00E4\u00DF\u00ED\u00EEo\u00B1}\u00A74\u0093O\u00FE\u00F2G>^\u00B2n\\x0017\u00F3\u0097\u00B0$o\u0080\u00913k\\x0004X\\x000f\u00E9&ir\u00E6\u00EC'K6R\u00E7Q\u00A6u\u00A64\u00FB\u00F6\u0097Lm\u00A5y\\?\u00C9\u0087\u00B5S\u00EC\u00A2\u00EF\u00A1\u00DF\u00A7\u00CB\u00C7_\u00E5\u00A9\u00A5\u00A8\u00BFO\u00C2\u00EEw\\x0010\u00FC\u00DD{\\x0014\u00FA?\u00FA\u008F\u00E9\\x0019\u0089\u00C5\u00F8cH\u00936\u0097\\x0017\u00CD~S[\u00AA&6\\\u00F3\u00AF\\x001f\\x001e\u00CF-\u00E8>\u00FF\u009B\u00A1K\n\u00D2\u00A4uk\u00FE\u00CB*\u00C7\u00F4\u00F5_\u00F3\u0087\u00D7^\u00BC\\x0008\\x001d#\u0098\u00FCJ\u00B1^1\u00FA\u00C9\u00D9s\u00E7\u00DBNt\u00DC\u00FF\u00EA|\u00EAB\u00BD'4\u00E8\u008E\u0093\u00A3\u00BD^\u00DBq\u00CD\u00F3\u00AB\u00AE~\u00E6\u00FB\u00AB\u00FE\u00B9\u00F4\u00CA\u00A7\u00978\u00A6.\u00A5\\x000c\u0094\u00AE~f\u00F95\u00FF\u00FA\u00B1\u00F2\u0095M}h\u00D5\u008F\u00E7x*o\u0090\u00FC\u00B8X8\u00C7\u0089\u00E1A\u00F1\u00FA\u00E0YUa\\x0006\u00D4_t_\u00C0\u00DF\u00BB\u00E7\u00B3\u00EE\u0084\u00FE\u0083\u00FE\u00C3\\\u00BC\u00C9\\x001c\u008C\t\u009Dv\u0097\u00AEL!\\x0002\u00F4\u00BE{\u00C5#\u009F\u00FE\u00B8\u00B1\u009Ew\u0099\u0088\u00A5\u00C9\u00D2\\x0007\u00F2?T\u00E7\u00BF\u00EC\u00C3)\u0095>\u00F9UO_l\u00DDz\u00E1\u00B7|$I\\x0014\u00EFR\u0094\u00C9\u008F\u00A8\u009EN\u00C5\u00A6\u00B4\u00FE\u00864a\u008E\u0093\u00DA\u00E5\u00BF^\u00F1\u00C8'\u0095c\u00B7\u00F6\u00A1\r\\x0003\u00A6\u00B5\u00F6z}\u00E7\u00807~\u00BDw\u00CE\u00A1\\x0007\u00DE9:\u00F4\u00FD\u00B6\u0087>hwNm\\x000f\u00BF\u00AF\u00A4\u00A1\u00EF\u00B6\\x000e\u0099{\u00F8\u0096\u00DC\u00F6\u00CA\u0091+{\u00BC\u00BC\u00D1\u00B7w\u00C1\u00F1\u00DD\u00D1\u00C78N5\u00F7\u009F|\u00BE\u0085\u00F8\u00F5\u009A\u00C8\\x001b!r\u00FC\u00A2\u00FE\u00BE\u00F1z\u00DE>\u00F4\\x001f\u00F7~\u00E5\t\u00B0\u00C8\\x000c\u00E0\u009FB\u00FER^\u0093\u00AA\u00DC\u00FEkG\u00AE\u00BA\u00CC\u00FC\u00F3\\x0017.\u009E3'Mj\\x001c\u00D5\u00BD&_\u00DF\u009Co\u00FE)r_~\u00D1\u00AD\u009A4\u00F9\u00AA/\u00FBpq\u00FD\u00F8HtI\u0089e\\x0004.'M\u0080\u00EF*g\u00BA\u00CE\u00B5\\x001d?y\u00DB\u00C8\u008F\u00A8#Qw\"UQ5q\u00AF\\x0017V\u0093\u00D4`\u00B2\u00C3o\u00AA\\x001a\u00FD\u00B3\u0093:\u00F1\u00FBb\u00ED/0\u0085\u00BD\u008A\u0085o\u00DE\ne\u00A2\u00FE\u00DEw\\x0004\u00FC\u009D\t\u00A0\u00FF\u00A0\u00FF\\x00143@\u00C5\u00A4\u00FFx\u0087\u00C1R\\x0000,\u00EDK\u00F1\u00E7\u00C7\u00BF\u00FAn\u00CDnoi\u00F2U\u00BF\u00FC/\u0093\u00F2[\u00E7\u00E4\\x0017\u00DC\u0098_0 \u00BFqB\u00BEiE~\u00E3\u00C4\u00FC\u00C2\u0081\u0090&YSf\u00BC4\u00A1y\u00C0\u0093\u00A7:?\\\u00B4\u00FE\u00CF\u008Fy\u00C3\u00EB;\u00FA\u00BDy\u00A4\u00FF\u00D4\u0096\\x001e/\u00FE|\u00C7\u00D4\u00DD\\x000f\u00BF\u00CC)U=\u00B3\u00E0\\x000fw\u008E\u00A3D\\x001f\u00EC\u00DA\u00A5\u00C7\u00F3+hA|1\\x000fa\u00A0s[\u00A8\u00E6\u00FES\u00B4j\u00C6OC\\x0002T\u009ENA\u00FD\u00C3\"\\x0000\u00FEa\u0091\\x000cV\\x000e\u00F8\\x0007\u00E3\\x0016\u00D6Y\u00B2\u00FC\u00BD\u00A5\tmG\u00D1\u00E3\u00A5\u00F5W<4\u00AF\u00EB\u00DCo\\x0016\u0097\t\u00FD\u00A9\u0099\u00DB\u00F6\u00BD\u00F9\\x001f\\x001e\u00CD/\\x0019\u00A4\u00CC\u00E3\u0090\u009B\u0084yJ\u00BE$\u00DF\u00DD\u0091\u00BF\u00F8[\u00BE\u00EBx~\u00F5\u00B3N\u00D2\u00A4~V\u00EFK\u00F4\u00BDf5\u0094\u00C7~\u00EF\u009B\u00D3\u00AB\u00D7\u009Cz\u00C3\\x001f`\u00F9S\u00DAOP\u009E\u00CA\u0097\u00B5z\u00A7N\u009F\u00D9\u00D7\u00D0\u00C87\u00BCa\u00FF\u0081\u00D3\u009Dg\u00E9\u0088\u00A5\u00B7\u009C>\u00D3\u00D5|\u00E4\u00D8\u00E5\\x000f\u00BE\u00D5\u00E3\u00A5\u00BA\u00BE\u0093\\x000f\u0091u\u00EF=no\u00D5\u00E8\u00B5.\u00D2\u0084D\u00C9\u00CA=]\u0094\u00E8\u0083]\u009A\u00DC\u00FE\u00E6n\u00EA\u0099\\x000eVS\u00F6\\x0001PE\u0086\u00AF\u00A7\u00CEW\u00C9,\u00B3\u00AF\u00F2Yf_W\u00F1U\u00BE\u00AF\u0092Q\\x0019\\\u00E0\u00EFN\u00C9\\x0017\\x001f\u00F4w\\2\\x001d\u00D2\u0092'\u0091\u00FC5i2\u00EC\u00FDVz\u0091\\x0015\u00A6\u00DE\u00E3\u00EB)\\x0002\u00F1\u00F1\u0089_\u00DA]&\\x0005ir\u00FE\\\u00BE\u00EBD\u00FE\u00D8\u0096\u00FC\u00E2;\n!&?>\u009E?&\u00F1b\u00FE\u00DC\u00E9\u00FC\u009A\u0091$M\u00CE\u00FF\u0096\u00B7\u00A4\u00BD\u00A4Kz\u00CD\u00D9\u00AB\\x001do\u00A8y\u00CA\u00F8l\u00CDi?Wx$\u00A08\\x0010I\\x0013\u00BDV\\x0001k\"YaK\u00B6\u0080\u00F5\\x0017\u00A9\u0093`\\x0015\u00F0{V}C\u00E3g\u00F3k7\u00FC\u00B2\u0089\u009D\u00B8y\u00CB\u00B6\u00F9\u00F3k\\x001b\\x000f\\x001c\u00B2K\u0093\u00B3\u00DD\u00E7iN\u00E7\u00FE\u00D1\\x001fSw\u00A2NE\u009D\u008D\u00A2Y\u00AF\u00FB\u00D7\u00F2\u00FB\u00E75?\u00F4^\u00AB0U\u00DC1n\u00C5\u00EE\u00B3\u0094\u00E8\u00830\u00C3\u00D5\u00FF\\\u00D2wr\u00B3\u00D2o\u00A7\u0088\u00D2\u00E4#\u00FD<\\x0013\u009D\u00E8\u00D0\u00F3Kz\\x001c\u00F5/\u00EF]\\x0000\u00F0/\u0086\\x0000\u00FAO1\u00F4D\u00E7r\u00D2\u0084\u00E0\u00DA\u00C6\u00F1\u00BE\u00B9\u00E6\u009E\u00AF(\\x0001\u00B0\\x001bw5\u0091\\x0010\u00E9\u00B6%f\u0090\u00C8\\x000e)\u00FF\u00BAO\u00E6\u00BF\u00BB\u00AF MhNg\u00FB\u00DB\u00F9\u008E\u00C6\u00FC\u00EE\u008F\u00F3_\u00DF,\u0094&O^\u00D2\u00BBf\u009F\u00D9\u00F6\u00AB*\u00A1\u00E6)r\u00A4\u008CX\u00AA~\u00D6$\u0082\u00F6\u00B9\u00A1\u00A6\u00D7%O.c\u00A7|\u00AF\u009DN_i~\\x0017\u00B54\u00BE\\x0004\u00CAf\u00F9V;b\u00BE.!\u0096\u0081]\u00B7p\u00EE\u0088\u00A5\u00DA\u00F1\\x0011O\u00AA\\x0017{r\u0099R\\x0013\u00F5\u0083Z\\x0019\u00FBUl:\u00CC\u00AF\u00D5OJ~\u00D2%\u00A4N\u00B6\u00ED\u00D8E\u0089}`5\u00B7\u00F4\u0096\u00AE\u00F3\u00BF\u009D8\u00D5\u00B9d\u00CD6\u00EAN\u00D4\u00A9\u00A8kQ\u00BB\u00F6\u00B9\u00D5wO\u00DF\u00F7\u00D0;\u00AD|\u00EA\u00FD\u00CF\\x0005\u00A4EX2\u00A4\t\u00FB\u00B3\u00F73\\x000bx\u008D\u00D2\u00EC\u0086\u009Ec\u00B6\\x0014\u00AB!\u008Ca\u00C5S\u00C7\u00C8g\\x0010\\x000eU\\x0011\u00C9 \u00D4\u00DF~_\u00C0_\u00DET\u00A0\u00FF\u00A0\u00FF\u00C8\u00F7\\x0016{\u00CEh\u00FA\u008F\u0087\u00D7Dy\u00AF}a\u00DD\u00D5\u00C3\u00E7*\u00BA\u00E4\u00BC \u009D\u00BF\u0090\u00A7t\u00E1LG\u00FE\u00E8/\u00F9-5\u00F9\u00857\u0099\u0096\\x0010S\u00E8\t\u00C5\u00C3.\u00E8O\\x0007[?\u00FE\u00DC\\x0005r\u00F2\u009BROR\\x0000\u0096\u0083\u00F5sz\u0092\u00BD_\u00AAd;_\u00AFJ\\x0004\u00F5\\x0012\u0085\u00CFKG\\\u00F2\u00D4\u00F7\u00CA\\x0011\u00ED\\x0003\t\u0094\\x0011K\u00F9<t\u0096Z\u0082Z7\u00DB\u00B7\u00AC(\u0092D\u00F5,\u0083^\u00B81\u00AB\u00C4>(\u00D7\u00A5s\u00B5\u009A(\u00DE\u009D\u00A7\u00BE?\u00A7\u00D4\u00AD\u00F7\u00CC\u00FA\u00FC9\u00BA\u00B4\u00F1A\u00CB9b\tk\\x0008\u00E5\u00D1\\x001bU(\u00DF\u00B8P\u00F4\\x001f\u00EC\u0090\\x0003\\x001f\u0091\u00AF\u00FF\u00B6\u00ED\u008A(\u00A1\u00B4{\u00CF>\u00E3,{\u00879}\u00A6\u00BB\u00A5\u00B5\u00FD/\\x000f\u00BDu\u00DD\u00A8u\u00F4\\x000b\u0091$Mz\u008D\u00DD\u00D9\u00FB\u00C55\\x0016ib(\\x0012\u00A6K\u00F8\u00A4\u00B8O8\\x001d3x\u00F6\u00A1k\u009E\u00F9\u00D1\u00DB5\u00E2.)d\\x001e\u00CB\u00C0oE\u00F2j&pN\u00D4?0\u00BAPN\\x0004\u00FFP0\\x0006.\\x0004\u00FC\\x0003\u00A3\\x000b\u00E5\u00C4h\u00F8{xMz\u00BF\u00BE\u00F7\u00CA\\x0011\u00DF\u008E\u009E\u00B3\u0084\u00CCL\u0097(1\u00B3w\u00BEe\u009B\\x0012\u00F7*\u00DC\u00DA\u0084\u00D4\u00C9\u00E2\u00DB\u00F2_\u00F5s\u0095&\r3\u0099\u00DF\u0083\u008C:g\u00DAy3\u00CF}V\u00D4\\x0006\u00E9\u0080%O\u00A9\u00BAA\u00952\u00DC\u00BF\\x0011K,%X\u00BE\u00B5\u00C9#\u008B\u009E(\u00FCi-\u0087+\u00D9\u00F8\u008A}\u00B0\u00D7Ax\u0095\u00F4\\x001e\u00DC\u00BA}\u00D7\u00A7\u00F3k)\u00ED\u00DD\u00D7h(!{\u0087\u00E9\u00EC:\u00DF\u00DA~\u00F2\u00A9\u00DC\u0097\u00D4\u00A9\u00A8k\u0091\u00A4\u00E83\u00F1\u00E0u\u00CF,'\u0085\u00C1\\x000b\\x000eyiBg\u00D1\u00E9THQ\u00EA$\n\u00D5\\x001f\u00CA3/Y\\x0008\u00EA/\t*\u00A2l\u00E0\\x001f\\x0011X\u00C9b\u00C1_\\x0012TD\u00D9\u00A2\u00E1\u00CFI\\x0013\u00E1l\u00CE\u00E8-\u0097\\x000f\u00FBx\u00F3\u009E\u00C3\u00B4\u00C2\u0082\\x001c\u00F2\u00F6\u00C4B\\x001d\u00CF\u00B7l)\u00E8\u0092\u00EF\u00EE\u00C9{\\x0017\\x0017q\u00F2\u00F7|\u00FB\u00CE\u00FC\u008A'H\u009A\u00D8\u00E7\u0083\u009E\u00B8\u00A4\u00D7\u00CCz}\u009E\u00A8~v\u00CF^\u00B3\u00F7\u00B0\u00FF\u00B3\u0099#\u0087\u00CF$J\u009EX\u00BA\u00FC\tE\u00A0hy\u00F6\u00F2K\u009A\u00D5\u00B3\u00B4#\u00FCg\u00DB\u00CA\u00E7B\u009C\u00A69\u009Bv]\u00CB\u00D5\u00E9r\u00C6\\x0011\u00CB\\x0007>\u00A7h\u00DA\u00CB\u00DEp\u00FE\u0088=\u00B8\u00B8\u00C8#\u00EE\u0097\\x000b\u00FD\u00DB_7o\u00FDt\u00FE\u00E7\u00BB\u00F6\u00D4\u00EF\u00DD\u00B7\u009F}`\u00F5\u00B7\u00F7\u0096\u00B3\u00E7.\u00D0\u009C\u00CE\u00F2\u009Fw\u00FCq\u00F8\u00C7\u0095\u00AFl\u00E93\u00A9\u00B9\u00EF\u0094#\u00D7\u008EZ{\u00C7\u00B4\u00BD\u00B4g\u0089\u0091\u00DC&t\u00FE\u00B9\u00C0\u00E2b\\x0019\u00F8\u00C6\u00E6\u00CA\u0097\u00E9\\x0017\u00C9%\u00C2J\u009C\u00F2\u00B0GK\u00A2\u0084\u00BE\u0093\u008F(i\u008A\u00EF$Sx\u00F0<\u00A8\u00BF\u00D7\\x001d\t\u00CEV\u00A2WhqN\\x00129\u00D1\"\u00B9\\x0011\u00E8\u00FFi\u00EC\u00FFn^\u0093>\\x0013\\x000e\\\u00F7\u00FC\u009A\u00EB\u0086\u00CF\u00ED\u00BA\u00F0\u00DB\u00D9\u00F3\u00E2\u00C4\u00EC\u00DC9C\u009A|sg\u00BE\u00A5.\u00DF\u00B1_\u00F1\u00940'\nm\\x0005\u00BB\u00F6\\x0005Z<\u00ACH\\x0013\u00DB\u0094\u00D0\\x001e\u008A\u00D7 !\u00C2\u008E\u00EFUE\t\u00FB\u00BFq\u0084\\x0004\u0081\u00FA\u00D9\u009A\u00F3\u0092Kz\u00D64\u00A8\\x0005\u0092F!\u00A5\u00C2\u00C5\u00C1\u0098\u0084\u0082\u00ED[\u00A6fxId\u00D1@\u00F4\u00A7V\\x0007\u00FD\\v\u00F5'\u0097\u00EB\u00C7\u008D\\x000c\u0082\u009C\u00C2i/\u008F\u0083\u00FE\u00D5\u008C\u0087\u00BC\\x0010M\u00BD\\x0005\u00A9\u0098D9\u00E4&!9\u00B2u\u00FBNV\u00A5\u009D{\u00EA\u00E9\u00CF\\x0003M\u0087\u00E9\u00B3\u00B0\u00CFt\u009C\u00E9:\u00DC\u00DAv\u00D5\u00D09\u00D4\u00B5\u00A8\u0083\u00D1Pu\u00C3\u00EB{z\u008DZm\\x0011\\x001c\u00ECOS\\x0018\u00AC9\\x001e\u00C5\u00C8\u00FF[\u00CDW?\u00BD\u00DC<\u00E4\\x001d\u00EEG\u00BB\u00BA\u00F9Hz\\x0008\u00AD\u0084u\u0089dl\u00B5^\u00D7W\u00E5)3\u00EA/\u00A5,\u00A5\u00EF\\x001d\u00F8\u0087\u00CB\u00D3oi\u00E0\u00EF\u0097X\u00B8\u00F9c\u00C1_\u0097&\u00EF\u00B5\u00DA\u009F[\u00B2\\x0019W>\u00F5\u00CD\u00ABs\u0097\u00D2\u00EB\u00EF\u00D9s\u00E2\u00C4\\x000c^A\u009A,\\x001c\u0098\u00DF[\u009B\u00DF\u00B7\u00C0\\x001at\u00A2\u00C6\u009A\\x0008\u00A7\u0084v\u00B1hR\u00F5\\x001f\u00A9\u008D.U\\x0016\u00EC\u00D2'\u008F\u008Co{>9\u0082;\u00DE0\u00A3W\u00AF\\x0019{\u00B59&E1\\x0014\u00D6\\x001f\u009B\u00C5\rS<\u00FC\u00B7\u00DA\u0091^3\u00F7r\u00A13\u00BC\\x001e\u00A2K\\x001bu(\u009C;\u00E2[\u00CBqVIAN\u009A\u0096*\u00D4_\u00D8d\u00CB\u00C1\u00D0E\u0083\u00CCE\u00C3\u00CAs\u00E2\u00D4\u0099}\u00FB\\x000f\u00F2M8p\u00E8p\u00C7iZ\u008EsQ\u00D8g\u00D8\u009C\u00CE\u00D3\u0093\u00BF\u00BAr\u00C477\u00BC\u00B1\u009B\\x0004D\u009F\u00DC\u0081\u00EB\u009E]voM\u00E3C\u00EF\\x001e\u00B5$\u00934\u00B1}kd\u00EE\u00F1\u00FC\\x000f\u00B4\u00C1\u0089\\x001f-b~\u00F6|)\\x0012\\x001f\u008A\u00C7\u00EF\\x0013\\x001e4?\u00EA_\u00DE\u009B\\x0002\u00FE\u00E0_\\x000c\\x0001\u00F4\\x001f\\x0011=M\u009A<\u00FC\u00DEQZ\u0084\u00C9'\u008AR\u00EC1\u00FA\u00D7\u00CB\\x001e\u00FE\u00A0\u00A1\u00F98\u00D9\u00983\\x000e\u0089Y\u00B8n~B\u0087mmb\u008B;q\u0092&Al$E\u00A1\u00FA4\u00FFA\u00AE\u00E2\\x0010^\u0083\u00A2$\t\\x0008\u00FBLg\u00F7\u0085\u00F6\u008E\u00CE\u00BA\u00AD\u00FB\u00A8kQ\\x0007\u00AB\u00CA\\x001d\u00EC3\u00B9\u00B9r\u00CC\u00D6\u00DE/\u00AFy\u00F0\u009D\\x0016K\u00BA\u00E1\u009F_i\\x000bs\u00FE\u00F9\u00D5\u00D0wZ\u009C\u00D2\u00CD\u00E37\u00F7xi\u0083\u00B5\\x0003On\u00A6\u0092e\u0092\u00E5D\u0097?eJ\u00B3\u00E7\u0091/\u00DF\u00F4\\x0000\u00CAU\u009E.'_>\u00EA\\x001f\\x0005\u00AB(\u00CA\u00E4\u00EF\u0094|\u00F9\u00E8?\u00EE\u00AC\u00D0\u00FF\u00E5\u00FB\u0092<\u00AB(\u00CAT\u008CBe\u00E5%UUU\\x000f\u00BDw\u0094\u00AFJ\u00D5\u00A4\u00A6\\x001b\u00C6\u00EF\u00BB\u00FA\u00D9\\x001f{=\u00F6\\x0016s\u0099\u00F8\u0091&\u00E2\u00DF\u00F9\u00BB\u00B0~\u00FCYz\u0093\u0096N]\u00E7.:\u00A5o\u009F\u00BC\u00E4\u0089%\u0085o\u008D2%M\u00A6g6\u00F9J\u00BA\u00E4t\u00A9\u00BF\u00E5\u00AB\u00B4\u00D6\u00DF\u00A9\u00CFt\u009C\u00E9>\u00DC\u00DA~\u00DD\u00F0Y\u00D4\u00C1z\u008F\u00DF\u00D7gRS\u00D5\u00C4\u00C6k\u009FYv\u00DB\u00E4\u009DB\u00F1\u00A1\u00E9\u0095\u00B7[\\x001etHC\u00E64_9bI\u009F\\3\\x0005\u00AF\\x0018\u00A9/\\x0005\u00B2P\u0092\u00B0\u00DC\u00F2\\x000f\u00A1\\x000f\\x001d\u00C0\u00AE\u00AE&\u00ADJT=\u00CF\u0084\u00FA{\t2\u0099\\x001b\u00AA\u00E4\\x0001\u00F4Q_B\u00FFq\\x001b\u0085\u00E24\u00FE\u0088\u00BD&\u00E42\u00E99f\u00EB\u009F\\x001e\u00AB\u009DS\u00BB\u0086tIg\u00B7c:{\u008E\u00FC\u00F6\\x0017\u00BB\u008Fpa\u00B0\u00CC_B\\x000bvh\u00FAC?\u00E4W?\u00C3\u009C(\\x0017\u00EA\u00C6\u00B3\u00CCH\\x0019!\u00E0\u00D4mN\u009D=\u00DFz\u00FC\u00D4\u00EBo/\u00B9\u00E2\u00B1Z\u00F2\u00970\u00C7I\u00AF7\u00F6\\\u00F3\u00CC\u00B2\u00BFN\u00DCv\u00F7\u008C\u0086!s\u009B\\x001fx\u00FB\\x0008\u00EFAqq\u0099\u00B0\u00AFhN\u0087\u00B6q\u00A3\u009D\u008B\u00B9d\u00B2O\u00BC\u00AD2}\u00CEI\u00C9\\x00176\u00A2\u00F9\\x00121z\u00E6\u00A6>\u00A6Z\u00F15t\u00FF\u008C\u00FA[o\r\u00F8\u009B{8\u00FAO3m\u008F$\u00AB6\u00F0\u00FC\u00FA\\x001b\u0088\u00CA<\u00FE\\x0018\u00D2\u00A4\u00C5\u00E8\u00F4}&\\x001d\u00A2Q\u00FE\u00DA\u00E7W\u00DE\u00FC\u00EC\u0087m\\x001dg\u00C9\u00C0\u009CvNg\u00CE]\u00A4\u00D4e\u0097&+\u009E\u00C8\u009F=\u00A6\u00EC\u00C3\u00D6\u00B6=\u00FF\u00ED\u00DDL\u009A\u00B0\u00CC\u009E\u00C9\u00AF\u00E5\u00F6,\u00B0\u00C4\\x0019P\\x0006\u00DC\u00A5\u00DB\\x001c?\u00DD\u00B5\u00F7@K\u009F\u00A7\u00DE\u00A7nF\u009D\u008D\u00BA\\x001cu?\u00FAp\u00FD\u008B?_\u00F3\u00AF\\x0015W\u00FE\u00E3;\u008AD\u00B9r\u00C4b%=%\u0095\u00AE\u00E1\u00E7\u00BE\u0093\u009AL\u00C9\u00DFs(\u00AF\\x0018|\u00E6\u00B4\u00D4J\u00FEO\u00D4?\\x0014\\x0002\u00F2\u00C0\u00D1B\\x0001n)\\x0004\u00FC\u00A3\u00A0*_fb\u00F9\u00EB\u00D2\u00E4\u00DD#}\u00C9<\u00A8\u0089\"\n+G\u00FFrE\u00F5\u00A7\u00A3g}s\u0086DI\u0097[:\u00D3}\u00B1\u00EC\u00A9\u00B3\u00FB\u00A2%\u0095\u00BDJ\u00BE*\u0090\u00D6\u00FA\u00BB\u00F4\u009C\u008E3\u00E7\u008F\u00B6\u009F\\x001a\u0091\u00FB\u00E2\u008AG?\u00AB\u00A4\u0088\u0093\u0089\u00FB=^\\x0007\\x0003?`R'j=\u00DFx\\x0004\\x001c?L&\t\u00C5R\u00A9\\x0004\n\u00EA\u00AF\u008FK\u00CAM\\x0001\u00A9\u00FE`\u00D6\u00E8\u00DE\u00A7\u00A0\u00FF{=\u00CE\u00DE\\x000c\u00FD2\u00E7\u00F3\u0083\u00BF\u0080\u00BF@\u009A\u00F4|e\u00F3\u0095O-\u00BA\u00F7\u0085\u008Fv4\\x001c\u00A5\\x0017\u00DFS]n\u00C9nVq\\x0004\\x0004\\x0018\\x0001\u0097\u009E\u00D3q\u00F6\u00C2\u00F1\u00D3\u00DD\u00EB\u00B6\u00EC\u00BF\u00E5\u0099\\x000f\u00FE\u00F2\u00D4\u00A2\\x001e\u00AFl\"\u00C7\u0089K\u00F2\\x0016\r\u00BC\\x0001S>\u00FB\\x001a)d\u0087\\x0006\u00F7J\u00A2\u00FE\u00DCm\\x0002A\u00A7B\u00FF\u0091~\u0090\u00D1\u00B2\u00DE\\x000ci\u00D2B[jVM\u00D8\u00C3k\u00BB*\u0086\u00BC\u00D5\u00EF\u00D1\u00E9_,\u00DB\u00A8L\u00E5\u00B8\u00EA\\x0012\u00B2=Q\u0098\u00E1\u00D3]\\x0017}\u00A5(\u00EAPL\u0099\u00BE*O\u0099\u008B\u00B9V\\x0014\u00E7\u0086UwQ\u00CB\u00D4\u00C9{_\u00AD\u00A9|\u00E8\u00CD?<\u00F86-\u00B1)_\u00DA\u00D8\u00E3%\u00BF\u00A9\u008C\u00B5\u00B5_\u00DAo\u00E5)?\u00EA\\x001f\"\\x0001\u00F0\\x000f\\x0011f\u0080\u00A2\u00C0?\\x0000\u00B4\\x0010O\t\u008D\u00AF\u00D7vT\u00D1\u00C2\u0088\u0089\\x0007H\u00C2\u00EA+t\u00DE9Lk%*_\u00D9|\u00F53\u00CB\u0087\u008F\u009C\u00BA~\u00DB>E\u0094\u009C\u00FD\u00AD\u00C3+\u009D\u00EE\u00A6\u0090\u0082r'^\u00CA\u0094\u00BD2\\x0001*\u0090\u00D2\u00FA{v\u009E\u0093g.P\u00FAq\u00C3\u00AE\\x0007G\u00CE\u00AA\u00B8.\\x0012\\x0008\u0080\\x0000\\x0008\u0080@f\t\\\u00F5\u00F4\\x0012\u00DAQ\u00A2\u00F7\u00B8zZ\u0088cH\u0093\u00E6\u009Ec\u00B7_\u00F5\u00CC\u00B2\u009F7nf!\\x00022\u00BA\u0084l\u00CF\u00A9.\u00F2\u00DB#\u0081\u0080\u0080\u0080\u00A74a\\x0019H\u009D\u00A0#\u00E1!\\x0002\\x0001\\x0010\\x0000\u0081\u008C\\x0013\u00D8\u00B8e\u00E7\u0095O/!)B\u00CB6ui\u00F2vs\u00E5\u00E8MWTv\u00BC\u00E3l\u00C6\u00E9\u00A0\u00F9 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002%&\u00D0p\u00B0\u00E5\u00F2G>\u00ED1z\\x0013'M\u00DEi\u00EE\u00F1\u00F2\u0086?\\x000c}\u0087\u00FC%\u0092/\u00BB\u00C8\\x0006\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A1\\x0010\u00D8\u00BB\u00BF\u00B9\u00E2\u00C1\u00B7\u00AFi}U\u00EE@\u00C1kr\u00FD\u008Bu\\x0015\u00F7\u00BFE\u00A1\u008B'\u00C9\u00C7\u008E\\x0004\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A5\"\u00B0\u00BB\u00A1\u0089\u00E2lH\u008AP$\u00ACM\u009A(s\u00FF\u00D6t\u00A2\u00F3\\x0002\u00A5\u00E3\u00A7\u00CF\u00B7\u009F:\\x0017\u0087D5aU\u00B2W\u0095?R|\u00B5%/t\u00FA\u00EC\\x0005\u0096::\u00CF\\x0015\u0099X9\u00A7\u00CE\u009CG\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\u0088-\u0081p\u00C7|*\u00CD\u00DD\u009Ce\u00E1\u00DB\u00DD\u00FBH\u009A\u00BC\u00A5J\u0093F\u00AB4!\u00B7\u00CC\u00893\u00A6t\u00BC\u00F3B\u00CB\u00F1\u00AE\u0086\u00A6S;\\x001aNl\u00DEs<\\x000e\u0089jB\u00F5\u00A1ZQ\u00DD,\u00B55\u00FE\\x000c\u00A5\u00DA2\\x0017:u\u00F6B\u00DBI\u00E2sr\u00EB\u009Ec\\x001b\u00B7\\x001f->\u00D5m9\u00BC\u00E6\u0097f$\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00D8\\x0012\u00A0\u0081\u00BA\u00F8\u00D1\u009EJ\u00D8\u00BA\u00A7\u00B5\u00E1\u00D0I2\"dJ\u009C\u00CCYF\u008E\u00EFr\u0091&$\u00CD\u008Ew\\x0016R\u00FB\u00E9\\x000bM\u00C7\u00CEn\u00AF?q\u00B0\u00A5\u00B3\u00FD\u00D4\u00F9\\x0012\u00EF\u00F8\u00EEt9\u00AA\t\u00D5\u0087jEu\u00A3\\x001a\u00F2\\x0015f\u009F\u00C3\u00AA\u00B6\u00E7\u0085hs\u008E\u00C3\u00C7:\u00B7\u00EC:\u00B6\u00FF\u00F0\u00A9\u00F6\u008Es\u00A1\u00F0\u00D9\u00F0\u00A4\u00B2\u00C1?\u00FE\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0095\\x0000\r\u00D4\u00A1\\x000c\u00F8d8\u00C8|\u0090\\x0011!S\u00A2\u00EC\u00F6\u00C4\u00D9\u00DF\u00AC}\u00DEi\u0097&C\u00E75]\u00FB\u00C2\u00CF\u00BF\\x001f2\u0087\u00D4Y;\u0099v5\u00B5\u009D\u00BEp\u00B8\u00BDk[\u00FD\u0089\u0096\u00F6n\u00B6\u00B9\u00A7\u00B2\u00D4\u00B3\u00B8t\u00A4\u00BD\u00BB\u00C8\\x0012\u00D8\u00E9T\u0093\u00C3mJ\u00DD\u00A8\u0086TO\u00A3\u00CE\u00A1W\u00DB\u00E5B'\u00CF^h=\u00D1\u00B5Y\u00E9R\u00F4KC\u00E1\u00F0\u00A1\u00A6A\u009A\u00C4u,B\u00BD@\\x0000\\x0004@@#\u00C0\u00A4IX\u00E6\u00AC\u00A9\u00F5\\x000c\u0099\\x00122(dVxs\u0096\u00A9\u00CF;\u00F65\u00FD~\u00F0\u00ECkG\u00AD\u00EB=\u00BEA\u009B\u00D0\\x0019:\u00EF\\x0010\u00FDMG)>\u0083,=K\u00C7N\u009D\u00DF{\u00B0\u00E3\u00C0\u0091N\u00DA\\x0016V\u009D\u00E8!wS\u00B1\u00A9\u00F5\u00E4\u00B9\u00B0\u008A\u00A2\u00CA\u00EC?\u00D2I5\u00A4z\\x001au\u008E\u00A8\u00DA\u00C2\\x000b\u00D1\u0086\\x001c\u00F5\\x0007O44\u009F\n\u0091\u008F\u00D2(xM0\u00FA\u0081\\x0000\\x0008\u0080@\u00BC\t\u00D0@M#\u00F16\u00D1(a_S\\x0007\\x0019\\x00142+\u00BC9\u00CB\u00D4\u00E7\u00ED\u00F5\u0087\u00A4\u00A4Ik\u00C7\u00B9\u00AD\u00F5\u00C7\u00DB:\u00CE\u00D1\u00F6ka\u00DD\\x0000\u0092&\u0084>\u00AC\u00D2ZNtS\r\u00A9\u009E\u00FC\u00FD\u008B\u00A2\u00DA\u00C2\\x000bQC6\u00EFnm;\u00D9\\x001d\"\\x001fH\u0093x\\x000fG\u00A8\\x001d\\x0008\u0080\\x0000\\x0008(\\x0004B\u0097&G\u008Ew\u0091A\u00C9\u00B84\u00A9\\x0018<\u00FB\u00BAQ\u00EB\u00AA\\x000c\u00AF\u00C9C\u00F3\\x000e\u00D1\u00DFt\u0094\u00A2G\u008F\u009D\u00D2\\x0012\u00D9\u00E3_w\u00B5\u0093\u00DDU\\x0003Ph\\x000e,\u0084t\u00F4D7Y\u00DFP\u008A\u00A2B(\u00A6\u0084jH\u00F54\u00EAL\\x001f\u00A2\u00A8\u00B6\u00F0B\u00B4X\u00E9\u00E7\u00CDG$\u00F94\\x001e\u00E9X\u00B2z\u00BBL\u00C3\u00F7\\x001f<\u0081G\\x001f\\x0004@\\x0000\\x0004@ \u00CE\\x0004h\u00A0\u00EE\u00EC\n\u00CD22sF\\x0006\u0085\u00CC\no\u00CE\u00EC\u009F\u00E9=\\Y\u00FF!J\u00C7i\u00BAC7\u00DF\u00EE\u0085\\x0014\u00FF\u00AD\\x001a\u00E5\u00A9.\u00DDUk^|\u0081T\u00C2\u00B6\u00BD\u0087\u00AC\u00D2\u00C4\u0098\u00D0\u00B1H\u0093\u008D;\u00DA\u0088>\u00BB|(\u0089tC\u0088\u00D2\u0084\u00AAD5<r\u00A2\u00BB\u00F5\u00D4\\x0005\u0096\u00984\u00F1\u00AC6M\u00E9\u00AD\\\u00BFw\u00CEG?L\u009A\u00FB\u00CD\u009CO~\\\u00B5\u00A1\u00FE\u00E8\te\u00BD\\x000f\u00A5\u00E6\u00B6\u00CEY\\x001f-\u00B77v\u0083\u00F9Bt-\u00EAC\u00EB6\\x001f\u00A1M\u00EA<\u00C9\\x001cn?\u00F3\u00E8\\x000bs\u00AB\\x0006\u00BD^\u00BB\u00F4W\u00CF\u00CC\r\\x0007 M\u00E2<\"\u00A1n \\x0000\\x0002 \u0090\u00A7\u0081Zf\u00F0\u00F7\\x001c\u00F0\u00F9\\x000cdP\u00DC\u00A5\t\u00E9\u0092oVn\u00BD\u00FD\u00B1\u00E9\u00FD\u00EE\u009F\u00D4\u00FF\u0081)\u0096t\u00CFSo\u00ED?L\\x0011\\x000e\u009A54\u00CCb\u0080\\x000fNR\u00E3\u00E8\u00C9\u00F3G\u008Ew7\u00B7\u009D\u0099\u00F5\u00D1\\x000f\u00F7<5\u00AB\u00DF\u00FD\u0093\u00A9\\x000e/\u00BE\u00B9@1\u009D\u00ED]\u00F4m1\\x001a\u0085\u00A4\u0089\u00E3\u0084N\u00DB\u00E9\u00F3G;\u00B4t\u00F8x\u00D7\u00FA\u00ED\u00ADD\u00BF\u009Dv4qN\\x001f-\\w\u00DB#\u00B9\u008D\u00FF\u0094\\x000c0\u00CBF\u00DB\u00818%Z\u00F1\u00CB\u00B6HqIm\\x001d\u00E7\u00D7nm\u00F9f\u00ED\u0081\u00AD\u00FBO\u00B8_\u009A\u00BE\u00A5\\x001a\u0092\\x001f\u00AC\u00B5\u00E3<%Vs\u00CFj\u0093\u00F7\u00E2\u00AE\u00C7&U\u00DE5\u00E6\u0086{\u00C7U\u00DD\u009F\u00ABz`2\u00FD\u00D0?f/[\u00BB\u00EB\u00D0\u00B1\u00CE\\x0007\u009E\u009E\u00F1\u00F8\u00E8\u00F7\u00EC\u00D5\u00DB\u00C0]\u0088]\u00AE\u00FDT\u00F7\u00BA\u00CD\u00CDJ\u00EF\\x00145\u0087\u00AF\u00F9\u00D7?n\u00AE\u00BC\u00EB\u0095[\\x001f\u009F=\u00F8_\\x001f\\x001c\u00ED8gi\u0094q:;\\x000ei\u0082a\\x000f\\x0004@\\x0000\\x0004bN@\u0093&\\x000e\u00B6\u00CC\u00D3r\\x0019\\x0019\u00F8\u00F1\u00ED\u00E6\u00E6\u00B6S\u00DD\u0086\t\u00B6 \\x0003}k\u00F5\u009B\u00FD\\x001e\u009Cvc\u00F5\u00DB\\x0003\\x001f{\u009FOo\u00B9\u00F1\u00A6G\u00DF\\x001d\u00F4\u00EC\u0087\r\u00CD'\u008F\u00A9\\x0016\u00AA\u0098\u00E4T\\x0007\u00D2\\x001fM\u00C7\u00CE\u008C\u0099\u00F6U\u009F!\u0093\u00FA?Ts\u00D3\u00A3\u00EF\u00DC\u00FC\u00D8{\\x000f\u008E\u009A\u00FF\u00DA\u00EC\u00E5\u00AD\u00A7\u00CE7\u00B5\u009Du\u00A9\u00BC\u00E7W[\u00F7\\x001c\u00B4K\u0093\u0083\u00D7\u00BE\u00B0\u00F6\u00F7Cf\u00FB\u0095&\\x001f|\u00B5\u00A6\u00E7]\u00A3\u00AB\\x001e\u00C8\u00F5x\u00C6\u00C6\u009D\u0087=\u00EF\\x0007\u00DB\u008C\u00C4=[S[\u00D7\u0082\u0095\u008D,mm8\u00EE\u009E\u0099\u00A4\ti\\x0011\u00BE\u00CD\u00EE\u00D2\u00E4\u009D\u00CFWR\u0085{\u00DD7\u00AE\u00CF\u0083\u00D3\u00FA\r\u009B}\u00D3\u00A3\u00F3\u00E8\\x001e\u00DF\u00F8\u00C8\\\u00FA\u00DC\u00FF\u00E1\u00E9\u00F7\u008C\u0098C_\u008Dxc\u00BE\u00FD\u00A2\u00F6\\x000bQ\\x001fZ\u00B3I\u0091&\u009E\u00AD~\u00E6\u008D\\x000f\u00EF\\x00191\u00FB\u00F3e\u00DB\\x0006\\x000c\u009F\u00FB\u00F3\u00B6&\u00F7\u00FC\r\\x0007\u008E\u009B\u009F\u00C9\u009D\u009F\u00BF\u00F0\u00C2\u00E7;#~N\u00E9\"3V\u00B5\\x001a\\x0017\u00B1\u00FC\\x0019\u00D1\u00C5\u00BF\\x001fqI\u00EF9\r\\x0011\\x0015\u008EbK@ \u00A2~\\x0012Q\u00B1%\\x0000\u0082Kd\u0086\\x0000\r\u00D4\u00EE\u0083\u00FFK\u0093>{\u00FA\u00B5o\u00ADo\u00F14\\x0010F\\x00062(\u00EE\u00D2\u0084\u00A6Nz\\x000f\u009A\u00D0\u00FF\u0091\u00B9\u00DF\u00ADihn?\u00DB\u00AEz\u00FA\\x0017\u00AE\u00DC=\u00F0\u00F1\u008F(He\u00E9\u00BA}\\x0003\\x001e}\u00F7>U\u009D\\x0018\u00EF\u00EA\u009E\u0082\u00C0W\\x0006\u00BA\u00E8\u00F7\u00EBvS\\x001d\u00FA\r\u009Bu\u00D3\u00DF\u00FF=\u00F0\u00C9\u00CF\u009E\u009E\u00FC\u00FD\\x0007\u008B\u00B7n\u00DC\u00D5BWl9I\u00E9\u009C\u00AF\\x0002\u00F9\u00CC$M*\u0086\u00CC\u00BE\u00EE\u0085\u00B5U\u00E3\u00F7\u00E9[\u00AE\u00CD;x\u00DD\u00A8\u00B54\u00CDC\u00AB]\u00D4\u00D2\u0095D\u00FA\u00E8\u00E7\u00ADG)\u0096\u00A2\u008D\u0096\u00C0\u0088\u00D2\u00FB_\u00FEt\u00FD\\x001d/\u00F7\\x001e\u0092\u00EB?|\u00F6\u00BF&\u00D7\u00DCv\u0096\u00CFF\u009B\u0082\u00D8\u00D3\u0091\u00F6.\u009A\\x000f\\x0013~e\\x001c$\u00C5\u00B7j\u00F3\\x0011C\u009Dl\u00A9?\u00EE\u0092\u00BFn\u00EBQZ?L~$J\u009E\u00D5^\u00B9a\u00EF\u00B5\\x001b\u00D5\u00F3\u00BE\u00F1\\x0003\u0086\u00CF\\x001a\u00FF\u00F6\u00CAu[\u009Bw\\x001e8N\u00FF\\x001f?o\u00C5\u00CD\u008F\u00BD\u00DB\u00F8\u00BC\u00BE\\x000f\u00CF\u00E93t\u00D6\u00D3\\x0013\u00BE\u00A6\u0086X.\u00CA_\u0088]\u00AE\u00AD\u00A3{\u00CD\u00AF\u00CD\u00A7\u00CF\u00FE\u00E6\u00DE\\x001cRc\u00BD\u00EFyu\u00C2\u00BCeT\u00CF\u00BEC\u00A7O\u00FBp\u0095S~Fo_\u00A3\u00A44i]5\u0083\u0097\\x0013\u0096?\u00FD\u008D\\x0010eQ&yH\\x0013w\u00C9=w\u00C3\u009C\u00DE\u00A5VzV\ta\u00FD[\u00E9\u0093\u0085\\x0005}m>n\\x0013\u00DEP&a\u00F6\\x000b\u0094\\x0015\r\\x0001\\x001a\u00A8\u00DD\\x0007\u00FF\u00BE\u00F7\u008D%\u00E38\u00F0\u0091\\x0019s?[\u00DDr\u00BC\u00DB\u00DDL\u00D0\u00B74\u00F8\u00FF\u00F4k\u00F3\u00B1\u008En\u00C3\\x0004\u00DB?\u00D0\u0084N\u00AF\u00FB&\u00F4\\x001b\u00FE6Y\\x0013\u00F6-\u0099\u00F6e\u00EB\u00F6\u00F4y\u00A8F\r\u00F88\u00FF\u00ED\u00EA\u00DD\u00FD\u0086\u00CD\u00BD\u00FB\u009F\\x001fPi\u00CCN\u0085\u009Bh*g\u00F4\u009B_\u00F6\\x001e2\u00A5\u00DF#\u00EF\u00DE\u00F4\u00F8'7=\u00F1\u00E9\u00E6=\u00AD\u00EA\u00B5\u00CEQ\u0095\u00C8/\u00D0r\u00E2\u009CK\u00FD\u00DD\u00BF\u00DA\u00B2\u00FB \u00F9G\u00C8K\u00D2{\u0082]\u009A\u0090\u00F09\u00A1\u00A5\u00E667i\u00F2~\u00ED\u00EAko{\u00B1\u00D7\u00A0\t}\\x001f\u009A\u00F5\u00AC\u00A2K\u00BA\u009C\\x0014\\x000c\u009CjO\\x0004=s\u0092\u00FE\"u\u00F2\u00D5\u00CA\u00C6\u00AFV(\u0089\u00D4\u0089\u00D3)$\u009EHBi\rVk\u00EER\u00ED\u009B\\x001ex\u00ED\u00FA\u00BB^\u00EB\u00FD\u00C0\u00F4o\u00DA\u00C7\\x0017\u00D8p\u00F8\u00D4\u00BD\u00FF\u0098\u00DB\u00E7\u00A1\u00D9\u00FD\u0086\u00CF\u00A3\u00F4\u00F4\u0084E\u00F6\u00CB\u0099.\u00A4\u00F6\t\u00EAC?\u00FD\u00DAd\u0097n\u0087Z;?\u00FBf\u00FD\u00AB\u00D3\u00BExy\u00CA\u00E7\u00A3\u00DF\u00AC}\u00E2\u0095\u00F7\u00AE\u00BB\u00E3\u0095\\x001f74P\u0099O\u008C\u00F9\u00F0\u00C6a\u00D3\u00C7\u00CC\u00FC\u00F6\u00E57\u0095oss\\x0017\u00FF\u00B2\u00B3\u0089&\u00A4\u00F8\u00CB\u00EDkl\u0097\u00F3\u009A\u0084(M\u00CA\u00A3L MB\\x001d3K/M\u00B8n\u00A3\u00B8\u00F6\u00D4\u00BC\u00EF-\u00BF\u00F3\u00F3\u00C2\u009Fj\\x000eM\u009D\u00F0\u00C7)\u0093\u00ED,s)\u00A1RBa \\x0010\\x000e\\x0001\\x001a\u00A8]\u00DE\u00DBiH\\x001fp\u00FF\u00B8\u00AA\\x0007\u00A6\u0091\u00A7\u00BC\u00CF\u00D0\u0099C\u009Fo\u00F9\u00BA\u00DD\u009E\u0086\u00EF\u00A7_\u009A\u008E\u009D\u00EC6L\u00B0\u00FD\\x0003E\u00B9\u00F6\u00B8w\\\u009Fas\u00E9\\x0003\u00FB\u0096\u0094\u00C7\u00D2\u00D5;{\r\u009E\u00FCC\u00DD>\u00B2\u00AD';/\u00CC\u00FA\u00E4\u00A7\u00AA\u0087\u00DF\"\\x0011\\x0013X\"\\x0014N\u00D4\u00C5\\x0000\u00BB\u00D6\u0091\u00E3\u00E7\u009B\u008F\u009D\u00AD~\u00F1\u00BD\u00DE\\x000f\u00CE\u00E8W\u00FD~\u00FF\u00C7>\u00A6\u00B4\u00FB\u00E0\tR$d\u00F56\u00EF9\u00F2\u00D2\u0094/H\u00A3\u00B8\u00D4\u00DF\u00FD\u00AB-\u00BB\\x0004\u00D2\u00E4\u00C0u/\u00AC\u00A9\\x00182\u008B4\u00C1\\x0011\u00AA\u0081\u009Ahbe\u00DD\u0096\u00A3\u00B4\r\ti1Kz\u00AFv\u00F55\\x001bYy\u00CF8\u00AAb\u00F5\u0098/v4\\x001e?p\u00F4\u00CC\u00FE#\u00A7(\\x0006\u0087\u00A5\u0083G;\u00EDg\u00D1\\x0011U\u00C1(\u00E2\u00CE\u0092\u008E*\u00CD>g$Uat/\u00DF\u00D0\u00CC\u00A4\tS'\u00C2\\x0002\u00A9\u0086TO\u00A3\u00CE.\u00D5^\u00F2\u00D3\u00F6\u00ABo\\x001dUy_.\u00F7\u00EEJ\u00BE(\u00AA\u00EA\u00ED\u008F\u00E6\u00AE\u00BB\u00EB\u00B5\\x001b\u00EE\u009F^\u00F5\u00D0[U\\x000f\u00CF}j\u00DCB\u00FB\u00B5\u00EC\\x0017j=\u00D9\u00BDjc\u0093\u009DOn\u00EE\u00A2\u00ABny\u00BE\u00FF\\x0003\\x0013\u00FF\u00F6\u00E8\u008C\\x001b\\x001f\u009E:\u00F0\u0091\u00E9\u00C3^\u00FA\u0090*Ie~\u00B9l\u00D3m\u009Fus\u00F5,\u0092\u00D2\u00B7=6\u00EB\u00FA\u00BB\u00DF\\x00188|\u00EA\u00C6\u009D\u00CD\u00FC\u00E5\u00EA\u00F7\u008B\u00A4\u00C9*\u00E3\u00FD\u0093\r\u00F6\u0096\u00F7\u00CE\\x00193\u00F8\u00D7S\u00C5\\x0002\u00B0i \u00C3bpo\u00A6\u00BC\u008D`\\x000f\u00A9\u009B2Q\\x000c\u009E\u00F6\u00AFw\u00EF\u00DE\u0097\u008C\u00F8^{\u00AE\u00C9\u00E3a\u00FC3\\x000e\u00D2wN\u00C7E\u00E5\\x0014\u00BC&\u0085\u00B3\u009Cgx\u00845aE\u00B0\u00D3G|o\u00B1\u00CE\u00CAa\u00AA\u009Bz\"_\u00C7\u00BCzH\u00BB\u0092\u00FD\u00D2\u00E62\u0095\u00F6\u00BAV\u008F\u00AB\u0097Z\t\\x0006\u0088]\u00BBp\u00A2\u00D7q;8\u00A7\\x0012\u0084\u0090\u00CD\u0095\u00B0\u00B4V\u00A9\u008F\u00B0\u0096\u00C2\u009B\u00A5^w\u008Eq\u00DBu\u0080\u00EA\u00DD6Q\u00B497\u00DC\\x001dw\u008E\u00DFZf,\u00E13\t\u00C7t\u00A2\u0094h\t\u00D0@-4\u008E\u00C6`\u00DEo\u00F0\u00EB\u00BD\\x001fx\u0093\u00DEu\u00FB\u0092:yhV\u00AF!\u0093GO]\u00B8\u00EB@\u00BB\u00D0\u0090\u00B1\u0083dP\u00C8\u00AC\u00F0\u00E6\u00CC\u00F2\u0099\u00AC\u00E7\u00F5w\u00BF\u00DE{\u00E8\\x001c\u00FA\u00C0\u00BE\"[\u00F9\u00ED\u00EA\\x001d=\u00EE\u00CB\u00DD\u00F0`M\u00CF!S{\u00DC3^\u00FD<\u008B\u00CF@f\u009D\u00FE\u00E4\u00932\u00F9\u00A2\\x001bz\u0097\u00CBY\u00BE:|\u00FC\\x001c\\x0005\u009A\\\u00F7kt\u00AD>\u008F\u00BC\u00DF\u00B7\u00FA\u00DF\u0094\\x001ez\u00A9\u00F6\u00FB\u00BA\u00FAi\u00EF-\u00EFu\u00DF\\x001b=\u00EE\u009D@\u00AD0*\u00E6\u00F7\u00BA\u009BI\u009A\\x000c\u009Eu\u00ED\u00A85\u00BD\u00C7\u00D7\u00EB\\x0013:s\\x000f\\7rM\u00C5`E\u009A\\x001c>\u00A1\u00A5Cm]k\u00B7\u00B4\\x0010}\no\u00E1\u00D3\u00BC\u00F9+\u00AE\u00BC\u00E5\u00B9k\u00EFz\u00AD\u00E7\u00907o\\x0018:\u00FB\u00AF\u00F7\u00AF\u009F7`\u00E8\u0094>\u0083\u00DE\u00A8\\x001a\u00F4\\x001aK\\x0003\\x001e\\x001c\u00F7\u00C1Wk-'\u00B20\\x0019\\x0002d9\u00BE\u00BD\u00F1\u00E4\u00A2\u00B5\\x0007\u00BE\u00FE\u00C9\u0094\\x0016\u00FDt\u00F0\u00EB\u00D5\\x0007\u00BE\\\u00D1h\u00A4M{i\\x000b\\x0013kh\u00CF\u00DA\u00CD-TO\u00A3\u00CE\u00F4\u00C1\u00A9\u00DA\u0093\u00E6-\u00BE\u00EAo/\u00F5\\x0018\u00F4\u00E6/\u00BB\u008F\u00F2\\x0015x\u00F7\u00F3U\u00E4\u00D8xa\u00CA\u0082\u0097f|\u00F7\u00F2\u00CC\u00A5\u0094\u00E6~\u00B1\u00DE^sBa\u00B9\\x0010\u00F5\u00A1\u0095\\x001b\\x000f\u00D9\u00F9\u00AC\u00DD\u00BC\u009F.4\u00E4_\u00EF\u00AD\u00DF~\u0098*Lj\u008C$\u0097Qs\u00DA\\\u00BF\u00E5\u00F89Jo\u00F1\u00F3u\u00F7\u00E4\u009Ex\u00EDs\u00CB\u00B5\u0084\u00D2\u00C4x\u008D\u00E4\u00C6ww\u00AF\t\\x0013%\u00BA\\x000f\u009D3\u00B5I\\x0013*\u0088\u00D7\u00E5\u00FE4\\x001bu\u00CD\u00D2k\u00A6\u00D1\u00D0\\x0010\\&%\u0087\u00E8\u00B8C9\u009A4)\u0094\u00AB[t\u00FB\u0098\u00E2V\u0093\u0082\u00C5\\x0014K\\x0013V*\u00AFy\u008C+\n/\u00AD\\x000b\\x001dN\u0084\u0099\u0085\u0085\u00B9z\r\r\r\u00C6\u0081\u00C2\u0085\u00CC\u0085x\\x001e\u00E7+\u00D20g\u0084\\x0012\u0081\u00E3V\u0082\\x0013d\\x0007ag\u00A6G)\u00EDq\u00BAY\u00EAu\u00B5\u0082\u0098\u00A0\u00E1\u00FF(\u0088\\x0013K\u00B7\u00D1\u00F4\u00B2\u00C9kb\\x0002e\u00F3\u008E\\x0018\u00BA\u00D8\u00E4$\u00B1\\x0017\\x001b\u00AD\u0085A\u00E9 \\x0010\u0088\\x0000\u0093&vK\u00A1\\x001d\u00E98\u00DF\u00FB\u00BE1=\u00EE\u009Bt\u00C3\u0083\u00B3o\\x0018:\u0087\\x000c\u00E5\r\\x000f\u00D4T\\x000e\u009E2\u00E0\u00E1\u00A9\u00B5K6\u0099\\x000c\\x0019g^\u00C9\u00A0\u0090Y\u00E1\u00CD\u0099\u00E53\u00AD\u00B9\u00F6\u00CE\u00B1=\\x001f\u00A8\u00A1\\x000f\u00C6W\u00E4\u00E4\u00F8\u00E6\u00A7]K\u00D7\u00D6\u00AF\u00DEth\u00C9\u00DA\u00BD\u0095C\u00A6\u00F7z\u00F0-#\\x0003}\u00DB{\u00D0\u00B8\u00BE\u00F7O\u00EA\u00F7\u00E0\\x0014>\u00D1q\u0097\\x000b\\x001d>N\\x000bJL\u00A9\u00B9\u00FD\\x001c\\x001di\u00A7\n\u00DC1\u00B6\u00E7\u00FD5\u00BD\\x001f~\u00AF\u00F7\u00C3\u00EF\u00AB\u00E9\u009D\u009E\u00F7\u00CF\u00EC1hJ\u008FASoy\u00FC\\x001dCB\\x0004\u00B8\u00EE\u00A6]\\x0007I\u0084\u0090\\x0014\u00A92\u00A4\u00C9\u00D0y\u008D\u00D7\u008E\u00FA\u00E9\u00F7\u0083k\u00C8;\u00D4LN\\x001b5\\x001d<\u00D6\u00B5fs\\x000bmjb\\x0011\\x0004=n\\x001bu\u00D5\u00AD\u00AF\\{\u00CF\u00A4\\x001eCfT\\x000e\u00A9\u00A9\\x001c2\u00B3\u00C7\u00E0i\u00F4\u00E7\u00B5w\u00E7\u00F8\u00D4\u00E7\u00C17\u00EDJ\u00E2\u00D0\u00B1\u00B3\u00CA\u00D2&\u00B3\u00C2\u00F8\u00FA\u00A7\u0083_\u00ACh\u00F4L\\x000bV\\x001f\u00B0\u00F7\u00835[Z\u00A8\u009EF\u009D]\u00AA\u00FD\u00D2\u0094\u00F9W\u00DE\u00FAJ\u00D5\\x00033\u00B6\u00EFo7*@\u00ED\u0095\\x000cc&\\x0014\u0096\\x000b\u00D1\\x001e-+6\\x001c\u00B2\u00F3\u00A1\\x0002\u00BF\\\u00BE\u0085\u009AO\u00DE\u00BC/\u0096o\u00B5\u00D7\u00B9\u00E1\u00C8\u00A9g\u00C7r\u00E5\u00AD/\u008Fx\u00E3\u00F3\u00DDMJ\u00BC\\x0012\u009F\u00F66\u00B4\u0099\u009F\\x0014\u00F3KeA\u0090xK\\x0013.x\u00D6\u00E5\u0085V\u00F9\u00CA\u0092S\u00FB\u0093\u00B7\u0097\u0086#\u00C0\u00E4r`5\u00D5\\x0014\u0081mFA?\u00E0P\u008E6\u00A1S\u00F0\u009D\\x0014\u00BC\r\u00D6\u00B1\u00C2\u00A9\\x0004\u00CB\u009C\u0090\u00934\u00E1\u00BD$\\C,g\u00EB\\x0017\u00B1U\u00883\u00F8\u0096\u008A\u00D8\u00C64\u00A1\u00E8) \u00B2i/'t|-\u00E5 [\u00DA\u00C8\u00D7LTi\u00C7\u009B\u00A5\u00F9{\\x0004\u00BA\u00CC|\\x0005K\u00B7Q\u00F2\u00BByMT7\u009FI\u00B7h\u008E?\u008B\u0096\\x0011\\x0014\\x001b\u00C8p\u00E0$\\x0010\u0088\u0096\\x0000\r\u00D4\u00C2\u00C1_\\x001b\u00CCO\u009D\u00EFy\u00F7+\u00D7\u00DC5\u00BE\u00C7\u00E0\u00E9d(\u00B54x\u00FA\u00F5\u00F7\u00BDIs\u00FA&\u00A3\u00C0\u008D\u00FFdP\u00C8\u00AC\u00F0\u00E6\u00CC\u00F2\u00B9\u00B5\u00E3\u00C2\u00D5\u00B7\u008D\u00E91x&}\u00E0\u00BF2d\\x0004\u0099\u00D7\u00EB\u00EF\u0099\u00DC\u00EB\u00FE9F\\x0006\u00FA\u008A\\x000e\u00F6\\x001a4\u00A5j\u00E8\u009C>\\x000f\u00CFeI\\x0011.\u00BA\u00A1\\x0017_\u008E&.\u00B8\u00D4t\u00FC\u00DC\u00A1\u00B6\u00EE\u00A3\u00A7\u00CE\u008F\u009C\u00F8\u00E95w\u00BEVy\u00CD\r\\x000f\u00BD\u00A3\u00A5\u00A1o\u00F7zp^\u00AF\u00FB\u00DF\u00EA\u00F5\u00C0\u00DC\\x0019\\x001f\u00D7\u0091\u00CB\u0084\\x0015\\x0018\u00E0\u00BA\u00BF\u00EE\u00B4{M\u00E6\\x001d\u00BC^\r\u0083%\u00A5\u00D3t\\K\\x0007\u008Eu\u00AD\u00DEt\u0084\u00E8[\\x0002n'\u00CE]\u00FC\u0097[_\u00BD\u00E6\u009E)\u00D7\u00DE7\u008D\u00D2\r\\x000f\u00CC\u00ECI\u00E8\\x0007M\u00E3\u00D3\r\u00F7\u00CF\u009C\u00F2\u00EF\u00D5\u00F6H\u00DD\u0083\u00C7\u00CE\u00D2\\x001ak\u00CB\u00F1\u008D{\u00DA\\x0017\u00AC:\u00F0\u00E5\u00CAF>}\u00B5\u00AA\u0091\\x000e\u00F2z\u00E5\u00E7\u009Dm\u00F6\\x0002\u00A9\u0086TO\u00A3\u00CE\u00F4\u00C1\u00A5\u00DA\u00FE\u00DB\u00E8k\u00EE\u009ED\u00B1\u00C4\\x0001B\u0088\u00ED\\x0017\u00A2\rT~\\O\u00BF\u00A3`\u00E5\u00C3\n\u00DF\u00B4\u00F7\u00E8\u00B0\\x0017?\u00B8\u00F2\u00B6\u00B1\u00AF\u00CF^\u00CC\u0082\u0095X\u00A2\u00E9\u009B\u009B\\x001e\\x001c\u00FB\u0097[F\u00CE\u00FAT\u00C0\u00872D#M\u00B4\t\\x001e\u00C1\u00C3\u00EA\u00ACL\u00AC\u00D6\u008B3\u00DD\u0096\\x0019\u0083\u00C2\u00DC\u0083y\u00DE\u0084\\x001dw*\u0087)\u0083\u00EF\\x000b3F\u00FA\\x000c\\x0011\\x0015\u00C2M5\u00900p,AV\u009A\u00F0V\u00B5P\u0098e\\x0016D\u009F\u00B10I\\x0013\u0087<f\u0090\u0082\u00D9\\x0012\u00AB\\x001cp\u0082\u00A7\\x001d7J(\u00C8 q\tv\u0099\u00A1\\x001f\u00B1\u0089\r\u00BD\u008E\u00C2/\u009C\u00CB1}c\u00FA\u0083/H$!\u009C\u00A5\u0089]\u0098\\x0018\\x0000\u00CD_A\u0099DkOQzh\\x0004\u00984q1%\u00D7\u00DD\u00F9\u00E2_n{\u00FD\u009A\u00BB\u00DF\u00BC\u00E6\u009E\u00A9F\u00BA\u00FF\u00F9\u008F\u00D7m?\u00ECt\\x0016\\x0019\\x00142+\u00BC9\u00B3|>\u00DAq\u00E1\u00AA[G_\u00DFt\u00FA \u00CC\u00A6f\\x0018c\u00C9@BAq\u00B7\u00DC\u00F3\u00E6\u00F5Cf_\u00BF\u00A2K\u00E8\u0088\u00CBU,_\\x001dl?GV\u0095b6\u009E\\x001b\u00FF\u00C9U\\x001b}\u00ED]\u0093\u00A8\u009C\\x001e\u00F7\u00CF\u00B3\u00A4\\x0017\u00A7\u00DFx\u00F4,\u00AE\u00DF\u00EB\u00FE\u00B2\u0093\u00BC&\u00B3I\u008A\u00F4\u00E1V\u00E8\\x001c\u00B8~\u0094\\x0012kb\u0091&\u00AB~=,\u00A4?n\u00CE\u00B7\u00B9}\u00FCUwN\u00BE\u00EA\u00AE)\\x000f\u008C\u00FC\u00F8\u00E7\u00ED\u0087\u00D9st\u00C3\u00CE\\x0016#m\u00AE?&\u00A4/\u0094&\u0094\u00F3`k\u00D7\u00FE\u00A3g\u008D\u00D4x\u00B4k\u00CB\u00D9\u00E5\\x001b\\x000f\\x001b\u00D2d\u00DD\\x000eq\u0081TC\u00BB4\\x0011V{\u00D1\u00CA\u00ADW\u00DC\u00FC\u00E2UwLxu\u00F6\\x0012a\u00DD\u00C6\u00CD\u00FAj\u00F8s\u00B3g|\u00B0L\u00F8\u00AD\u00FDB\u00D4\u0087~\u00A8;\u00E0\u00D2;\u00E9^R\\x0008\u00CB\u00A3\u00A3?\u00E2\\x000b\\\u00BF\u00A3\u00E9\u00B2~O\u008F\u009B\u00F3\u009DS\u00EF\u00DC\u00DBp,\\x0002\u00AF\u0089\u00A34qV&\u00B6\u00D7\u00F0\u00E8\u00A4\u0089\u00D7\\x0012\u00E2\u00E2\u00A5I\u00C1]\u00A1\u0094\u00A5\t(\\x0007cn\u0093&\u00EE\u00D5SU\u0094m\u00C6\u00C7\u00A741\u00BCO\u00AA<S/\\x0018ki\"\u0094\\x0010\\x000e\u00D2\u00C4E\u0097\u00A8\u00CD\u00B6LRF\u00BEP>4\u00E3\u0084\u0082\u00B2L\u0080\\x0006jwir\u00CD\u00AD\u00A3.\u00BFe\u00CC_\u00EE\u0098\u00F8\u0097;r\u0094z=0c\u00CE\u00E7u\\x0014\u00AE\u00E1\u00A2f\u00C8\u00A0xJ\u0093\u00BF\u00DC\u00F22\t\\x001d\\x0017i\"\u00CC\u00C0T\u00C2\u009Fo\\x001d\u00EFW\u0097\\x001c8\u00D6\u00BD\u00FF\u00E8\u0099\u00C6\u00A3\u00B4\\x0013\u00E9\\x000f\u00FE\u00EBKW\u00DF9\u00E1\u00DA\u00FBf^7x\u00CEuC\u00DEb\u00E9\u00911\\x000b^\u0098\u00B6l\u00C9\u00BA\u00FD\u00A4K\\x001a[Mn\\x0002\u0092)\u00BE\u00AE\u00ABH\u0093!\u00B3(\u00EC\u00B5j\u0082\\x0011k2O\\x000b\u0083%o\u00CC\u00A1v-\u00D1eV\u00FEr\u0098~\u008BX\\x0018\u00E8\u00FB\u00FA\u00ECo.\u00BF\u00F5\u00B5?\u00DD>\u0081\u00D2\u00F3\u0093\u00BF\u0096\\x000c\\x0006>\u00D0J[\u00B2HE\\x000e\u00AF\u00D9\u00DA\u00FA\u00F9\u008F\u00FBYZ\u00BB\u00E3\u0098S\u00F9TC\u00AA\u00A7Qg\u00FA\u00E0R\u00ED^\u00F7\u00BCz\u00C5m\u00AF\u00FF\u00E9\u00F6\u00F1\u00B5\u00CB\u00B6Z\n\u00FC\u00F7\u00C2\u00B5\u00BF\u00EF\u00F3\u00C4e7>\u00FF\u00C4\u0098\u008F\u0085\u00D7\u00B2_\u0088\u00FA\u00D0\u00F7?\\x001fp\u00E2C\u0085PH\u00F6e7>W\u00BB|;}\u00AE\u00DB\u00DE\u00F4N\u00ED*V\u00F2\u00ED\u008FN\u00BA\u00FB\u00A99N-\u00DA\u00B3\u00AF\u00B0\u00BD\u0088\u00FA\u00E4\u00876\u00A1#\\x001a\u00F3]\u0094\u0089\u00A34\u00B1\u00AD\u00AC\u00E1&nLV\u00DCa\u00B6\u0082\u009F\u00F4\u00D0bX\u00CD\u00CE\\x0016\u00DB\u0080\\x0017\u00864\u00D1L=\u00A7L\u009C\"[df\u0098\nU4+\\x0008\u00B7\t\\x001d\u00B5\u0091\\x0016\u00C1a\u00AA\u008Ei\u00E6\u00C6)\u00A7\u00B9v\u00DC\u00F4\u009A\u00A3\u00D7\u00C4&r\u00D4\u00EB8\u0096#\u00E35\\x0011;7D\u00D2\u00C4K\u0097h\\x001d\u00BC\\x0010\u00DC\re\u0092e{\u009F\u00A0\u00B6\u00D3@\u00ED2\u00F8\u00D3\u00F0~\u00E5_\u009F\u00FB\u00C3\u00CD/\u00FF\u00F1\u00B6\t\u0094F\u008C\u00FBjS}\u009B\u00A7\u0095$\u0083Bf\u00857g\u0096\u00CF-'/(/\u00D8wM9z\u00F2\u00820\\x001b\\x001dg\\x0019(\u00A7%CS\u00BB\"\\x0014\u00E8\u00FF.\u00E5\u008B\u00CB\u00EC\u00B8p\u00FD\u00ED/S\u00B1\u00B9m\u00DCUwO\u00BD\u00E6\u00BEY\u00D7\u00DC7{\u00D4\u00D4\u00A54\\x0001B\\x0006\u009D\u00FC\\x0008\u008D\u00AD\u00AA[\u00A1\u00A5\u008Bt\u008C\u00BD\\x0004\u00F9\u00EBn\u00DC\u00A1H\u0093\u00EB_X\u00D3\u0087\u0097&\u00D7\u00ABa\u00B0\u0087O\u009C#\u00EF\rK\u00FB[\u00CF\u00AE\u00FC\u00A5\u00F9\u00F8\u0099\\x000bGhoZQz}\u00F6\u00B7\u0097\u00DD2\u00E6\u008F\u00B7\u008E\u00FB\u00E3\u00DF\u00C6\u00FE\u00E3\u008DO\\x000fR\u00BC\u00A7CN\u00E38\u00B5\u00A1\u0085\\x0016\\x0001\u00B9f\u00A3\u00D8\u009C\u00D5[ZjW\u00ECgi\u00ED\u00F6V\u0097;J5\u00A42\\x000f\u00B5\u009Fc\u00C9\u00BD\u00DAK\u00D7\u00EE\u00BEl\u00E0K\u0097\u00DF:\u008E\u00FCl\u00CFN\u009C\u00BF\u00BCn\u00EF\u00AF{Z\u00BE\u00AF\u00DB\u00F3\u00CF\u00D7\u00DF\u00FFC\u00DFT\\x000cx\u00FE\u008F}uY]\u0083\u00B0zt!\\x0002b\u00C0\u00A1\\x000fGNt-\u00FF\u00B9\u00D1\u0089\\x000f\u00D5y\u00E4\u00C4\u008F\u00AF\u00BCeTs{\u00F7\u00E7K6\u00FDy\u00E03\u00FF\u00D9g\u00C4\u00B0\u00E7\u00E7\u00D2R\u00AB\u00B7?_u\u00D9M/\u00FC\u00B2\u00BB\u00C5\u00DE.\u00BA\u00B4/i\u00C2\\x0005\u0089\u00A86\u00A00\u00AE\u009B\\x0004\u008D\u00E9;>\\x000c\u00D6M\u0099X\u00EC(\u009Br`\\x001aB\u00B1^~\u00C2`yk\u00C7\u0095\u00A3YG\u0093\u00DB\u0081\\x0004\u0091\\x001a\\x0004j\u00F9\u00E7P\u0082\u00D5\u00C0\u00F2\u00E6\u0099\u00CD\tq\u00A2G\u009B4\u00B1\u00C6\u00C3\\x0016\u00B2\\x0014\u00E2O=\u00F3\u00A8e\u00A9\u00B9\u00F8K\u009A\u00DB\u00C6\\x0017l\u00AC\\x0011\u00B2\u00CD\u0090\u00A8\u00B9\u00F8F\\x000b\u009DSj\u00C9\u00EE\u00F0\u00B9,\n\u00BCB\r\u00B5\u00CF\\x0005\\x0012\u00DF\u008F\u00F0\n\u00835-\u00C42\u00FE0\u009A\u00EA0\u00EDb\u0093&\u00F6\u00C5`\u00BA\u00D8\u00B6\u00ECq\u00C2\u00FE\u00C4lN\u0082,s\u00E6\u00ABJ\\x0003\u00B5\u008Bq\u00A4\u00B1\u00FD\u00F2\\x001b\u009F\u00AE\u00B8\u00E9\u00C5\u0081\u00D5\u00B3\\x0017\u00FC\u00B8\u00D3S\u0094\u00B0\\x000cdP\u00C8\u00AC\u00F0V\u00C6\u00F2\u0099\u00F2\\1p\\x0014\u00F9`\\x001aZ:\u0085\u00D9\\x000e\u00B4v\u00B2\\x000c\u0094\u00D3\u00A5\\x001c\u00CF\u00AF\\x000c\u0093\u00DA|\u00FC\u00DC\\x000b\\x0013?\u00A52\u00FF\u00AC\u00EA\u0092\u00AB\u00EF\u0099~\u00F5\u00BD3\u009Fx]qF(\\x0006\u00B7\u00AD\u00FB`\u009Bf|\u0099\u00FD-&m\u00D8q\u00A0bp\u00CDu\u00A3~\u00AA\\x001a\u00BF\u00D7\u00D8r\u00AD\u0091\u00FE\u00A6\u00A3\u008A4i\u00D3\\x0012\u00E9\u00A0\\x0015\\x001b\u009Ah\u00B39\u0097\u00C5Ecg.\u00FA\u00C3\u00C0W.\u00FB\u00EBk\\x00188\u00E6\u00A7\u00CD\\x0007<\u0097!Q\u0099\u00D4$\u00F7l\r-g>\u00FF\u00B1\u0081\u00A55\u00DBZ\u00DD3S\r\u00A9L\u00A3\u00CE\u00F4\u00C1\u00BD\u00DA\u00D3\u00FE\u00FD\u00C3\\x001foy\u00F5\u00B2[^\u00AF\\x0018\u00F8\u00CA\u00F6\\x001f\u00F9\u00FB~\u00CF\u00FE\u00EF>#\u00FE\u00A3\u00CF?\u00E9\u00F3\\x001fo\\x0019;\u00F3\u00935\\x0014\u0087,\u00BC\u00A2\u00FDB\u00B4\\x001f\u00C9\u00B2u\u00FB\u009D\u00F8\u0090\u009C\u00ECq\u00C7\u00C8\u00FB\u009F\u009D;\u00B6\u00E6\u00DB\u00FF\u00E8\u00FB\u00EC\u00A0\u00A7gO\u00FD`\u00C5e\\x0003_\u00A6\\x0015V5\\x001f\u00AF\u00F8\u00C3\u008D/\u00CC\u00F8h\u00B5\u00F0B\u00BB\u00EB%\u00BD&\u00FC\nbuh\u00D7\u00E2\n\u00D9\u00C2\u009C\u00C2\u00B2au\u00BB\t\u00EE]\u0094\u00B3\\x0017\\x001e\u00CAD7p\u00DA$\u00C3\\x001c\u00B6\\x0016\u0097\u00FD\u00E3\u0082AL\u0081'\\x000e\u00C7\\x000b\u00D1\\x0018\u00BD\u00E7\\x0018\u00E5\\x0014^\u00DC\u00F9\u00B3\u00DCV\u0099\u00D8jb}\u00F7\u00E7\\x0016\u00C9\u00B2\u00A5\u00BB\u00BC?\u0086\u00B7\u00D6\u00C6\u00C8j\u00BF\u00B4\u00ADLScY\u00F5l\u0086\u00DFZ3\u00BEX^!9\\x001c\\x0017\\x0000p*\u00C1\\x0019~\\x0001\u00B2\u00BE\u00E2\u00B7\u00C0\u00D2\\x0014\\x000e\u00A3\\x001f\\x0016\u00DE,o\u00AF\u0089@B\\x0008\u00BB\u009B\u00E5`\u00A1#\u009A\u00BF\u00D0\u00FB&\u0094I\u00E6\u00CD}\u0092\\x0000\u00D0@\u00EDn\\x001c\u00E9\\x0007\u00DA^\u009F\u00FD\u00DD\u00FE\u00963\u009Ef\u00D1\u00C8@\\x0006\u0085\u00CC\no\u00CE,\u009Fi\u00C5\u00EF\\x001fo\\x001a\u00F5\u00A7;r[\u00F6\n\u00DE\u00D8iU\u00C7\u00C2\u00EF7\u00FFq\u00E0\\x000b&ir\u00E2\u00BCK9\u00F2_\u00D1\\x000c\u00D4\u009D\u009Fz\\x0005\u00CDL\u00DD\u00F5\u00E6\u0095\u00F7\u00CC\u00A0t\u00D73\u00CA\u00C4\u00C2!]'\u00C8\\x0017\u00E5\u0099s\u00C3v\u0092&\u00EA\n\u009Dq\u0085\t\\x001d\u0092&\u00ABI\u009A\u0090D:pLK\r-g\\\u00DFD\u009B\u00B7\u00DA\u00D7\\x0011\u00F1G\u00C6\u00D6,\u00BE\u00EE\u00EE\tw\u00FD\u00E3\u009D\u00DD\u0087:\u00DCs\u00D2\u00B7\u00FB\u008F(\u00F7\u00C9=\u00DB\u00C1c\u00DDK\u00EA\u009A\u00BFZy\u0080\u00FC%\u009E\\x0005R\r\u00A9\u009EF\u009D\u00E9\u0083g\u00B5?_\u00BA\u00B9\u00EF\u0083S\u00FE0p\u00EC\\x001f\\x0006\u00BE\u00FA\u0087\u009BF\u00FF\u00FE\u00C6\u0097\u00E9\u00FF\\x0003\u0086\u00CD\u00F8\u00F2\u0087].\u0097\u00B3_\u0088\u00B6\u008F[\u00BAv\u00BF\\x0013\u009F\u0086#g\u00AE\u00BD\u00F5\u00F9\u00FF\u00EC\u00F7\u00FC\u00EFo|i\u00EC\u00ACo\\x000f\\x001d\u00EB\u00A6\u00C2Wo:\u00F0\u00D7G\u00A7+\u0092\u00A8\u00FF\\x000b\u0093\u00DF\u00FBQx\u00B9\u00DD\u00F5G\u00C3x@-\u009BE\u0088\u008B\u00A4L\u00BC\u00FF\u00DC\u00F2\u00A7\u00C0s\u00E1\\x0015\\x0014\"Us\u00BB\u00E9\u0097:\u008D\u00CB\\x0014\u00B0\\x0004\u00ABT\u00F1{Y?\u00F9\u009D\u00AE%_\\x0007\u00F9\u009C~\u00EA\\x0015F^\u008F~\\x0012\u00F4\\x0012\\x0011\\x0015\\x001b\u00B4:8\\x000f\\x0004\u00DC\\x0008\u00D0@\u00EDi\\x001c=\u00ED\u0097%\\x0003\\x0019\\x00142+\u00BC9\u00B3|\u00A6\u00FC=\u00EF\\x0019\u00FB\u00A7[)\u008Eb\u00D2\u00E57\u008F\u00BE\u00EC\u00C6\u0091\\x0014\u0084\u00C0'\\x0012.W\u00DC\u00F2j\u009F\u00A1\u00B3)\u00A7K9\u00F2_\u0091\\x0004\u0099\u00FA\u00EE\u00D2+\u00FE\u00F6\u00DA_\u00EE|\u00F3/wM\u00A7\u00D5=\u008A\u00E8\u00D1E\u0082|929\u00D7o\\x0013yM\u00AEW\u00A5\t\u00AD\\x0011j<\u00A6\u00A5}-g\u00BF\u00AF;D\\x001b\u00CC\u00B9\u00ACe\u00F2\u00FB\\x0015\\x0019l\u009A\u00AF\u00F1{\u0096K~\u00AA!\u00D5\u00D3\u00A83}\u0090\u00A9\u00F6\u00CE\u0083'\u00DF_\u00B8\u00F1\u00E5\u00E9\u008B\u009F\u0099\u00F0\u00D5\u00CB\u00D3\u00BF\u00FDp\u00D1\u00A6]\u0087N\u00B9\u00D7\u00CA~!\u00DA\u0085\u0096z\u0092\\x0013\u009F\\x0003\u00AD]c\u00A6\u00F5\u00AF\t_,\\\u00B9\u008B/\u00B9\u00E1H\u00E7\u00C4y\u00CB\u009E|\u00ED\u00B3\u00A5\u00EB\\x001a\u0084W\u00DC\u00B5\u00B7d\u00D2\u00C4s\\x0013Xz\u00D5\u00B6{\u00F3\\x0003\\x000cX\u00C5\u0097S|\t\u00F6\u00E8\u008A\\x0000\r\u0091?%\u00C5\u00D2$\u00A2=\u00D1\"*V\u00FE\u0096!'\\x0008\u00F8 @\\x0003u\u00B8\u00C6\u0091\u00CC\\x0001\\x0019\\x00142+\u00BC9\u00B3|&\u00C7\u00C3\u009COW\u00F5\u00BE\u00EA\u009F\u00EF\u009C\u00F2\u00A7\u00DBs\u00BAm\u00A2=\u00D1o\u00AD\u00CC\u00FB\u00E2\\x0017\u00CA\u00E9R\u008E\u00AF\u00AFH\\x0015L}\u00FF\u00C7{\u009F\u00FE`\u00EC\u00EC\\x001f\u00C8|\\x001fPK\u00AE?b2\u00BB\u00BE\nt\u00CA\\\u00A7I\u0093\u00D5U\u00E3\u00F7\\x0014&t4i\u00A2\u0084\u0098h\u0089\u00AE\u00FD\u00FD\u00FA&\u00FAE\u009B\u00A6\u00F6sA\\x0012\u00ED\\x001cgK\u00FB\u008Et\u00D2ji\u00FB\u00F1`G\\x000e\u00B5wS\r\u00EB[\u00CE\u00EE?vNK\u00AD\n\u00B2\u00A2\u00AAm4\u0096\u00AB\u00BC\u00E0B\u00C7\u00CEQ\\x001fZ\u00B2\u00A6\u00916\u00BF\\x000bVy\u00F1Y\u00ED\u00E7v\u00EDm\u00F1\u00F1|8f\u0095\u00F2\u009Ax]\u00C84\\x000b \u00D8b\u00D4\u00EB|\u00FD\u00FB\u00E2\u00CB)\u00BE\\x0004S|\u008Cl\u00C5\u0083\u00E7K\u00B14\t\\x000e\\x0005g\u0082@j\\x0008\u00D0@M\u009B\u00C1\u00878\u00F8\u0093\u0095Y\u00F2S#\u0099\\x0015\u00C3\\x0004\\x000b?\u0090\u00C7\u0082\\x0005\u0096:%\u00FA\u0096\u00F2\\x0014lb\\x0018\u009FY@\t\u00C5\u0091\u0090\u00AA\u00A0\u0092\u00F7\\x001e\u00E1l._\u00BE.\\x001e\u00DC\u009B\u00E0\u00F4m\u00DD\u00D6\\x0003\\x0015\u0083j\u00AE\u00FE\u00A7>o\u00E8\u00B1&\\x000f\u00CFk\u00EC\u00F1\u00C2O\\x0018RC\\x0012dk7K\u00F5G\u00CE\u00AC\u00FA\u00A5\u0089V\u00C0\u00D2A#(\u00A6\u00C8\\x000f\u00F5\u0087;i\u00CE\u00A8\u00C8B\u008C\u00D3\u00F74wR\r\u00A9\u009EF\u009D#\u00AA\u00B6\u00F0B\u00E4y[\u00B9\u00F1\u00E0\u0081\u00A3\u009D!\u00F2\u00A1\u00A6\u0085$MR3\\x0002\u00A0! \\x0000\\x0002 \\x0010;\\x0002\u008A49\u00A5\u0084\u0082\u0086\u0095\u00F64\u009D&\u0083Bf\u00857g\u0099\u00FA\\\u00B7\u00B5\u0091D\\x0008I\u0091\u00BE\\x0013xi2\u00EA\u00A7?\\x000c\u00AE!\u00CA\r\u00AD\u00DD,\u00ED;\u00DAU\u00B7\u00A3uk};\t\u00C3b\u00C2n\u00F9s\u00F7\\x001e\u00EE\\x000c\u00B1\u00B4_\u00F6\u00B4S\r\u00A9\u009EF\u009D#\u00AA\u00B6\u00F0B\u0087\u008Fw\u00D3>.\u00BF\u00EE9\\x0016b\u008B\u0088\u00D5\u00CE=\u00A1xMb\u00F7$\u00A3B \\x0000\\x0002 \u0090\\x001a\\x00024P\u0093\u00CB<,\u00CBH\u00E5l\u00D8\u00D9J\\x0006\u0085\u00CC\no\u00CE2\u00F5\u00F9\u00E7\u00AD\u008D\\x0015Cj\u00AE\u00E1\u00A7>\u00864yh^\u00E3\u00F5\u00EA\n\\x001d\u00F2\u00DB\u00EC;J\u00A2DI\u00F5-]\u00DB\\x001b;Vll\u00DEq\u00A0\u0083\u00D6+\u0087\u0092\u00B6\\x001f\u00E8\u00A0\u00B0\u009AP\u008A\u00DA\u00BA\u00FF\u00E4\u008F\\x001b\u009A\u00A9\u0086\u00F5G\u00BB\u00F6\u0091\u0090b)\u0082j\\x0017.\u00D4\u00D2e\u00C0\u00A1\\x000fM\u00ED]\u00FB\u008E\u009CZ\u00B6\u00EE\u00C0\u00F6\u00FD'\u008AjQ[\u00F7\\x0001#\\x001d\u00EB\u00DE\u00B9\u00E7Hj\u009E^4\\x0004\\x0004@\\x0000\\x0004RI\u0080\\x0006j\u00DAo\u00BE\u00A8\u0091\u009FYUu\u00F0\u00DF\u00D2pb\u00E9\u00CF\\x0007\u00C8\u00A0(fE7\u00C1\u00C9\u00F8`\\x0018_\u00D5\u00FE\\x0016\u0093\u00D6\u00D9\u00BD&\u00864\u00A1\\x0008\u0097z\u00B2\u00EEz\u00DA\u00DB\u00D2\u00B5\u00A9\u00E1\u00C4\u008F\\x001b\u009Ah/\u00F9\u009D\u0087N7\\x001e\u00EB.>\u0091c\u00A6\u00C8B\u00A8&\\x001bv\u00B7\u00FD\u00B0\u00A1\u0099\u00EAF5\u00E4+\u00CC>\u0087Um\u00CF\\x000b5\\x001d\u00EF\u00DE\u00D9x|\u00D9\u00CF\\x0007\u00EAv\u00B6\u00EE<x\u00AA\u00C8v\u00B1\u00D3!MR9\u0090\u00A1Q \\x0000\\x0002i\"\u00A0H\u0093\u008E\u00F3\u00C5\u008F\u00F9d8~\u00DE\u00D1\u00BAd\u00DD\u0081\\x001d\u008D\u00C7\u00C9\u00A0\u00D8\u00CDYv\u008E\u00AC%\u00AF\u00C9\u00E0\\x001a\u00F2\u0092\u00F41\u00F651bM\\x001a\u00DB\u00CE\u00ED%\u00D3\u00CE\u00A5=-][\\x001b;\u00D6mo\u00FD~\u00C3\u00A1\u00EF\u00D6\\x001dtOK\u00D6\\x001d\\x000c+\u00B9\\\u0088jB\u00F5\u00A1ZQ\u00DD,\u00B55\u00FE\u00F4Um\u00E3Z\u0096\u00CA\u00FF\u00B0\u00E1\u00D0\u00CF\u00DB[\u00B75v\\x0008\\x0005\\x0010\u00EB1Jg:rj\u00FD\u008E\u0096\u00EF\u00D7\\x001fX\u00BCj\u009F\u0091\\x0016\u00AD\u00DA\\x001745,^}\\x0010\t\\x0004@\\x0000\\x0004@ \u00BE\\x0004V5\u00F0\\x0003\u00BE\u00E5\u00B3\u00FC\u00E0\u00BFt]\u00E3\u00CF\u00DB[\u00F66\u009F\"S\u00E2d\u00CE$\u008F\u0087(b$\u00AF\\x0018n6\u0092&\u00D6X\\x0013\u00C5k\u00F2\u00C2j\u009A\u00E6\u00A1\u00C5\u00C7\u00F5-4\u0095cJ{\u008FtQ\u00DA\u00DD|F2\u00EDj>S|r\u00BF\\x0016\u00AB\\x0012\u00AB\u00E7^=\\x0015Ym\u00E3\u008A|\u00E5\u00F7\\x001c\u00E9\u00A2d\\B\u00F8\u0081\u00B6\u00C1mj\u00EF>\u00D4\u00D6E?Ml\u00A4C\u00C7\u00BA$\u0093\u00E9\\x0014\u00B5\u00A8\u00A6\u00B6\u00A2\\x0012\u00FDDd\u00F1I\u00BE\\x000e\u00C6\u00B5\u00E4Oq\u00CFY|\u00E5\u00A9\\x0004\u00F9\u00CA\u00A0\u00FE\\x0016V\u00E0\u008F\u00FE#\u00FF\u00F8\u00D8sf\u00A4\u00FF\u00D8\u00C7\u00FC`\u00E3?\\x0019\\x000ee\u00CCo\u00B7\u009A]\u00BB!\u0096<\u00E2n\u00AD$\u00BF\u0095\u00BC\u0096\u008B\u00FD\u0095/\u00C1\u00C8\u00B9vK#\\x0005\u00BC\u00F6\\x0018\u00B5\u00BA\u00AF\u00B1xX\u00F1\u009A\u008CZMGii\u0090d\u00D5\u0091\r\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004B!\u00B0f\\x000b\u009B\u00D0Y\u00DD\u00C7$M\u00D4\u00C5\u00C3\u00B4\u00E0x\u00CF\u0091n$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010(\\x0019\u0081\u009F6\u00DB&t\u0086\u00CDk\u00AC|\u00E1\u00A7\u00CBTi\u00B2\u00FBH7\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000#@[T\\x0000E\u00D4\\x0004Von\u00BClpM\u00E5\u00A8\u009F\u00FA\u0099\u00C2`\u00D5\t\\x001dE\u009A\\x001c\u00EEF\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010`\\x0004\u00F6\\x001e\u00E9\\x0004\u008A\u00A8\t\u00AC\u00DE\u00C4\u00BC&\u00AB\u00FBN\u00D07\u00AAW\u00BD&\u00AB\u00C9k\u00B2\u00AB\u00E9\u00EC\u00EE\u00C3]H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u008C\u00C0\u00AE\u00A6\\x000e\u00A0\u0088\u009A\u00C0\u00F2\u00BA}\u00A20\u00D8\\x0017V\u0093`!i\u00B2\u008Bn\\x0003\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080J`\u00C7\u00C1\u00E30\u008BQ\\x0013p\u0090&\u00EA\u0084\\x000e\u00A4I\u00D4\u00F4Q>\\x0008\u0080\\x0000\\x0008\u0080@\u00B2\\x0008l\u00DB,Y\\x0015NbmI\u009A\u00A8\u00B1&\u00AB\u00FB\\x0019+t\u0086\u00CD\u00DB_9j\u00D5e\u0083g\u00924\u00D9\u00D9\u00DC%L_\u00F1\u00F9K\u0083\u00AE\u00E1\\x0013\\x001dq\u00CA\u008C\u00E3 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x000e\\x0002\u009B\u00F7\u00B5\u00C02F}+U\u00AF\u00C9\u00CC\\x001e\u00A3V\u00F5\\x001d\u00BF\u00BB\u00B2\u00B2\u00F2\u0092\u00AA\u00AA\u00AA\u00E1\u00F3\\x001a{\u00EA\u00B1&;\u009A\u00BB\u0084\u0089DI\u00DB\u00CEZJ]\\x0007\u00BF\u00A3\u00B4s\u00E9\\x0004:\u00E2\u0094\\x0019\u00C7A\\x0000\\x0004@\\x0000\\x0004@ \\x001d\\x0004~\u00DD\u00D3\\x000c\u00CB\\x0018\u00F5\u00ADT\u00BC&CjH\u008A\u00F4\\x0017\u0086\u00C1\u00EEh:kO_\u00D7\u00CE\u009F>\u00F2\u00FE\u008D\u009F\u008C\u00A0\u00F4\u00CB\u00A7OR\u00DA\u00F4\u00F1\u00F0\u00B7\u009E\\x001d`\u00F1\u00A3\u00D0\u009F\u0094SX\u0082\u00F7\u00C1\u00F5\u00DF\u00F5\u00B8\u00E3\u00BBe\u00A2\u00AB\\x0017\u00CE\u0095\u00C9C%Hfs\u00BF\\x0016\u00BE\\x0005\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00A6\u00B3\\x001bw\\x001d,\u008Fe\\x000cl\u00CB\u0082\u009D\\x0018\u00EC,K\\x000f\tZ\u0088:\u00A13\u0093&p\u00FA\\x0019^\\x0013~\u0085\u008E\u00F0\\x0006\u0090\u00E6\u00B8x\u00F2\u00C7\u008B'(\u00FD\u00F0\u00DBq5\u00B5\u00FFp\u00A1\u00ED{%\\x001d[~\u00BEu\u00F9\u00F9\u00A3\u00CB(un\u009BK9\u00E97\u009C,\u0085\u00984\u0087S\u00BDe\u00DA#\u0093\\x0007\u00D2\\x0004C\t\\x0008\u0080\\x0000\\x0008\u0080@x\\x0004\u00EAv\u00EC\u008F\u00C22R\u0099\u00CBf\u008C\u00FF\u00AF\u00BF\u0092\u00A5\\x001e3t\\x0001dX:I\u0093goi\u00B0\\x0013\u0083\u009D\\x0015\u00A54)\u00C4\u009Alo:kO$8~;\u00F1\u00C3\u00C5\u00F6\u00A5\\x0017\u00DB\u0097\\l\u00FB\u00F6\u00E2\u00B1\u00C5\\x0017\u008F~}\u00B1e\u00C1\u00C5#_\u00E4\u009B\u00E7\u00E7\u009B>\u00CD\\x001f\u00FC\u0088\u00D2\u00E9\u00A5#\u00984\u00B1\u0094p\u009D\u00EA\\x000e\u00D1\\x000e\u00AE\u00FF\u00CE\u00F4\u00A7\u00E7q\u00BE>N\u00E7Z\u00EA,\u0099M\u00D4Ra\u00F3q\\x0010\\x0004@\\x0000\\x0004@ \u00B3\\x0004\u00D6m\u00AD\u008F\u00C22*\u00BA\u00A4`\\x001c\\x0019\u00FA\u00FB'\u00AF\u009BqP\u00B9\u0090a\u00C2\\x0002\u00DB\u00B2`'\\x0006;+$\u00FB+\u00F0\u009A\\x000c\u009F\u00B7\u00BF\u00A7\\x001e\\x0006\u00EBx\\x0003\u00DA\u00B8x\u00EC\u009B\u008B\u00AD\u008B.\\x001e]x\u00F1\u00C8W\\x0017\\x000f\u00D7\u00E6\\x000f~\u0090o|'\u00DF\u00F0V\u00BE~V~\u00EF\\x000cJ\u00FE\u00A4\tQ\u00D0\u00D4\u00E2\u00F81\u00EB\u00F5\u009B\u00A1\u00A0y\u00E8\\x001d\u009A\u008A\\x001c\u00BA@\\x00154\u0085\u009COj7\u00D2r.\u00AF=\u00E9N\\x001b|\\x0017\u00BC\u00FF_\u00AF\\x0016\\x000e\\x0015\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002\u0081\\x0008\u00AC\u00D9\u00BC;\n\u00CB8\u00D4b\u009E4\u00CBup\u008Cn\\x0001\u00AF{\u00F6}z\u0093\\x001f\u00F3\u00AC\u0093A,\u0098N5\u00CF\u00FB\u00EF\u009A^\u00F5\rK\u00AA\\x001b\u00C1\u0082\u00DD\u00D4sZ\u008EXL\u00E7\u0082\u00829\\x001e\u00BA@\u00AB\\x00153\u00CA\u009C\u00B3\u00C7V\\x0007\u009B\u00FD-d\u00E6\u009D\\x0014\u00B6\\x001b\u00C1\u00A4\tI\u0091\u00FE\u00DC\u0084N\u00C1k\u00B2\u00AD\u00E9\u00AC=\u0091/\u0084\u00E6nT7\u00C9\u0097\u00F9\u00E6\u00CF\u00F3\\x0007\u00DE\u00CF\u00EF;\u00BFoN\u00BE\u00BE&\u00BFgz~\u00F7\u00D4\u00FC\u0096\u00D7(\\x0019\u00D2\u00C4R\u0082.A4\u00BE$/\u00966\u00FD\u00F2\u00E0\u00EF\u00DF\u0087]Km\u00C9R\u00E3\u00FF\u00EA\u00DDR\u008E+\u00C2\u0082\u00F2P\u00CE'\\x001f\\\u00C0\u00E5\\x0014\u009E\u00AB\u0097\u00F6\u00CE\u00B3\u00EF\u00BFS(J\u00BF\u0084\u00A8Q\u00C2\u0096\u00E2 \\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00F0\\x0004V\u00FD\u00B2#\\x0012\u00CB\u00A8\u0098B\u00DE\u00E0\u00EAf\u0091\u00990f\\x001c\r\u00F3G\\x0006\u00D1\u00C9t\\x001ay\u008C\u00D2\u0094\\x00135K\u00BAT\u00F5\u00CD\u00A86W\u00B3\u00A4\u00CA\u0091g\u00D9f?b1\u009DF!\u00FAK\u00BEb\u0094-u\u00A6#T\\x0014_OA!\u009A!V\u00AC\u00B3\u00B3-\\x0016\u00C5\u009A\u00CCm\u00A8\\x001c\u00B9\u00F2\u00B2\u00C13h\u00F1\u00B0\u00D3\r8t\u00B92ws\u00E8\u0093|\u00C3\u00BC\u00FC\u00BE\u00D9\u008A\u009Bd\u00F7\u00B4\u00FC\u00EE7\u00F3\u00BB\u00A6\u00E47\u008Da\u00C9Q\u009A\u00F0\u008D)\u00D4[W*\u008A\u00EF\u0084\u00D3\\x0013\u0085\u00CC\u0084r\u00FC\\x0018E\u00B8\u00E9\u00F7\u00CF\u00E9\\\\x0015\u00B1\u00AAct\\x0005\u00C3\u00FF\t]\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002A\t\u00AC\u00D8\u00B05r\u00CB\u00A8\u00D4M$M<\u00CD\u009F\u00A1c\u00F8\u00D6\u00F1\\x0007\\x0015\u00DD\u00A0[\u00D8\u0082\u0089t8b\u00B1\u00A4\u0086B\u00B2\u00D0Cd\\x0014\u00B1b\u00BD\\x001cg\u008E-\u00D6\u00D9\u009F4\u0099\u00D7P9J\u0097&\u0087\u00CEn\u00B3%\u00F2\u009A\u009C;\u00B24\u00E0Ce\u00EEFq\u0093\u00A8\u008Ad\u00E7\u00E4\u00FC\u00CEI\u0086.1I\\x0013s\t\u008A\u00B60\u008E\u00F0>\\x0012>\u009B\u00E0\u00B8*M\u00BER\u00A5\t\u00CB\u00E9t\u00AEV\u008E.P\u00D4l\u00EF0a(j\\x000e\\x000e\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080$\u0081\u0095\u00E45\u0089\u00C02*\\x0006\u008E\u00A6\\x0008,\u00C6\u00D1\u00B0t\u00FC\\x0007\\x0017\u00F3\u00C7\u00CC\u00A2\u00A5z\u00FCA^\u009A\\x0018\u0096\u00D4\\x0010+\u00B6#\\x0005\u00D3i\\x0014b\u00F9`xS\u0084\u00B5\\x0012\u00DB_\u00DD:;[d\u00D5k2\u00A3\u00E7\u00A8\u0095\u00FD\u00C7\u00EF\u00D2\u00F65yd\u00DE\u00FE^\u00A3V\u00FDQ\u00DDr\u00CD\u00E9\\x0006t7-\u00C97\u00BC\u00A3(\u0092]\u00AA\"aI\u00F7\u0097X\u00BD&\u009E\u00D2\u00E4\u0090\u00EA\\\u00FA\u00CAvWx\u00A0_\u00A9\u00BE#%\u00A7v\u00FF4\u00C7\u0094\u00E8\u00DC\\x0007g\\x001cTkN\u00F3a\\x00055\u00F3\u00CE\u00B3JT\u0091d\u00E7C6\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00B0\\x0013X\u00F5\u00EB\u00AE(,\u00A3n\u00D1\u0098\\x001dTl\u00A2f\u00B0\u0098\u0098\\x0010J\\x0013'\u00D3\u00E9,M\u00B4\u00E9\\x001b\u00EED\u00C7#\u00BA\u00FD\u00D5L\u00A7\u008B4\u00D1\u00C5\u0090\u00D6\\x0004\u008B\\x0012R\u00BF5\n1Yg^\u008A\u0099\u00EB,\u00885\\x0019>\u00AF\u0081\u00A4\n\u009B\u00D0\u00D9zH\u0090\u00C8k\u00E2K\u009AX\n!M\u00B7\u00C4(Vm\u0083\u00F2\u00A7:;\u00A5\u00AD\u009B\u00A2#\u00EC8\u00F0\u00F7\u00EF\u00BF\u00CD\u00CE\"\u008D\u00A2\u00E6d1A\u0082sU\u00E8Z\u009E\\x0019\\x0007\u0095\u0092\u00B5+j7[\u00D8(\\x001c\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001O\\x0002?m\u00DE\\x001b\u0085e\u00A42\u0097p\u008B\u0087\u00E9]\u00DD\u00B8\u00CA\u00DBj\u00E8k\u00C1\u00E41\u008B\u00E9b:-\u0086\u00DBb^\u00D9\u00B7\u0085\u0083\u00BAm\u00B5\\x001c\u00B1\u0098N\u00DE\u00E0\\x001a\u0097V?\u00B0\u00EA\\x0015jX8\u0091\u00AB\u00A7&\u00B6\u00BE3Yg\u0091\u00C0`\u00AD&i\u00F2\u00C7\u00C13z\u008DZ9@\u00E85\u00D9z\u00F0\u00AC=\u009149\u00FA\u00F5\u00DF)\u0094\u00C4=Q\\x001e\u00B6xXX\u0088\u00D4\u00C1:\u0095\u00BE\u00A8\\x000eR\u00A7\u00E3D\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0008\u0095\u00C0\u009A-\re\u00B6\u008C\u00A16'\u009E\u00C6T\u00E85),\\x001e\u00DEr\u00F0\u00AC=}\u00F5\u00F9|\u00FB\u00C6\u00AF\u00C2#\\x000b?z\u008B\u00A4\u0089\u00B0\\x0010\u00A9\u0083\u00AA4\u00F9NT\\x0007\u00A9\u00D3q\"\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0084J`\u00ED\u00B6\u00C62[\u00C6P\u009B\\x0013Oc\u00AA\u00C5\u009A\u008C\\\u00D9\u009C\\x001ek\u00C2O\u00E88U\u009A\\x0004\u0087\u00E4\u00BFx6\\x001b\u00B5\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0000\\x0004\u00D6m?\\x0004\u00CB\\x0018\u0080\u009B\u00AFS\u00B4\t\u009D\u0091+\\x0007\\x0018\u00D2\u00E4\u0091y\r4\u00C1C\u00D3<\\x0014k\u00E2\u00AB,d\\x0006\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081t\\x0013\u00A8\u00DB\u00D9\u009C\u00EE\\x0006\u00C6\u00A1u\u0082X\u0093\u00E1s\\x001bz\u00EA\u00FB\u009A\u00C4\u00A1\u008A\u00A8\\x0003\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0084\u00C0\u00FA]-1\u00A9I\u008A\u00AB!X<\\x000ci\u0092\u00E2\u00FB\u008D\u00A6\u0081\\x0000\\x0008\u0080\\x0000\\x0008\\x0014C`\u00C3\u009Ec\u00C5\u009C\u008Ese\\x0008\\x0008&tdbMd\u008AF\\x001e\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H\\x0019\u0081\u008D{\u00DBS\u00D6\u00A2\\x00186G\u00B4xxnC\u00AF\u0091\u00885A\u009C\r\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008X\t\u00FC\u00BA\u00EFd\\x000cmy\u00CA\u00AA\u00840X<x \\x0000\\x0002 \\x0000\\x0002  K`\u00D3\u00FES)\u00D3\\x00011lN\u00C0\u00C5\u00C31l\t\u00AA\\x0004\\x0002 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x0002\\x0002\\x001e\u00B1&\u008B\u00BE\u00FB\\x0001\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004JF@\u00E45\u00E1\\x0016\\x000f\u00E7\u00F35H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002 P2\\x0002\\x0002i\u00F2\\x0008\\x0017\\x0006[\u00B2z\u00E0B \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002 @\\x0004\u00E05\u0081[\\x0008\\x0004@\\x0000\\x0004@\\x0000\\x0004@ F\\x0004<\u00C2`!\u00DF@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u0094\\x0004 Mb\u00A4\\x0013Ky\u00E3q-\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088'\\x0001L\u00E8@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\u0080\u00E07t\\x0010\\x0006\\x001bO\\x0015\u0089Z\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\\x0016\\x0008`\u0085N\u008Ctb\\x0016:\\x001c\u00DA\\x0008\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00EE\\x00040\u00A1\\x0003i\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0010#\\x0002\u0090&1\u00BA\\x0019\u00D0\u00D1 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u0098\u00D0\u00814\\x0001\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001A\\x0018\u00EC\u00F0y\r=G\u00AD\u00BCl\u00F0\u008C]Mg\u00A1\u00DD@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u0094\\x0004D?\u00EF\u0087\u00DF\u00D0\u00C1/\\x0007\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0094\u0089\\x0000&tb\u00E4\u00C2*\u00A5&\u00C5\u00B5@\\x0000\\x0004@\\x0000\\x0004@ \u009E\\x0004D\\x0013:\u00F0\u009A\u0094I'\u00C6\u00B3\u008B\u00A0V \\x0000\\x0002 \\x0000\\x0002 PJ\\x0002\u00DA\u0084\u00CE\u00A8\u0095\\x0003\u00C6\u00EF\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj8\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u0099\\x0008`\u00F10&t@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004bD\\x0000a\u00B01\u00BA\\x0019\u00A5t\u0097\u00E1Z \\x0000\\x0002 \\x0000\\x0002 \\x0010O\\x0002\u00F8\u00E5aH\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\\x0010yM\u00B0\u00AFI\u0099f\u00D7\u00E2\u00A9^Q+\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010(%\u0081(y\u00F8\u0087;\u00F2H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002Y#P\u00DC\\x001b~\u0094+t\u00B2v'\u00D0^\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\"\\x0010\u00BA4ydnC\u00AF\u0091+\u00FFX\u00FCF\u00F5\u00B8= \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\\x0019$P\u00B44\u00A1_\u00CB\u00E99re\u00FFq\u00A1\u00EFkb\u00DC\u008C\u00FC\u008A<\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u00BA\t\\x0014\u00EC~QA\u00B5QnT\\x000fi\u0092\u00EE.\u0088\u00D6\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000O :i\\x0012\u00DAn\u00B0\u0090&\u00E8\u00B2 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x001d\\x0002\u0090&\u0098$\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001H\u0093\\x0018\u00DD\u008C\u00EC(b\u00B4\\x0014\\x0004@\\x0000\\x0004@\\x0000\\x0004\u009C\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\\x00144\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\u00942\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088@v\u00A4ISm\u00BF\u008A\u008A~\u00B5M\u00B6\u009F/n\\x001a]]qiE\u008E~\u00DE\\x0010\u00BFl\\x000c\\x0002 \\x0000\\x0002 \u0090L\\x0002u\u00C3*h$/$\u00CBh_[[}iE\u00F5\u00E8\u00A6\u00F0\u00C7\u00F9bJV\u00CF\u00F5\u00B4>ekZ\u00F9z\\x0002\u00A4I\\x001e\u00D2$\u00FCg\u00B5|\\x001d\\x001am\\x0001\\x0001\\x0010\u00C8\\x001e\u0081\u00BA\\x001c/J\u00B8\u00CF\\x0005\u00AB_\u008C\u0080p\\x001f\u00D0\u008A)\u00D9[\u009A\u0094\u00B5i\u00E5\\x001b\u00C9!M M\u00E0.\\x0002\\x0001\\x0010\\x0000\u0081\\x0004\\x0013`N\\x0005\u008BG\u0084\u00BDsV\\\u009A\u00AB+\u009F}\u00F5\u00D6\u0088^\u00D2$\u00C1M+\\x000e;\u00A4\t\u00A4I\u0082\u0087$\u00EF'\u00BF\u00B8\u00C7\\x0003\u00E5\u0083\\x0000\\x0008\u00C4\u009E\u0080\u00FBd}umm\u008C\u00878\\x000fi\u0092\u00E4\u00A6\\x00157\u00F6B\u009A\u0088\u00A4\u0089\u00DA]\u008C9K\u00B3\\x0018W\u00DCk\u00CA\u0091B\\x001e\u00BD\u00EBsgY\u00E7\\x000e\u00CD\\x0005z\u00CE,\u00C6~,\u0088\u00F1\u00A3^\u00DC\u00F3\\x0000\u00F2 \\x0000\\x0002I#\u00A0\u00DAoO\u00EF\u0088}\u00DA\u00A5&\u00C7\\x0007\u00A6\u00D4)^\\x0016\u00D3`N\u00E3\u00BC\u00EEz\u00A1\u00F2\u009D%\\x000e_\u00B2\u00FEY\u00EAD\\x001a\u00ACd\u00A4IL\u009A\u00C6\u0086V\\x0013Fu\u00B2iX]~\\x00057\u00EB\u00A4\u00FC\\x0019\u0082\u0081\u00804\u00B1J\\x0013\u00AEKq\\x0011U\\x0005\u00DCL\u009A\u00D4\u009A\u00A76suf\u00F1\u00C1\u00F7c\u00AF\\x0002C\u00B8\u008B\u00A1t\\x0005\\x0014\\x0002\\x0002 \\x0000\\x0002I$\u00C0\u008F\u00B1\u008E/~fi\"\\x001e\u0096\u00CD\u00D2\u00C4\\x0014T\u00AB\u00BC\u00AC:\u00A8\\x0013\u009B4\u0091=\u00D1[\u009Ah\u00E6\u0089\\x0015X\u00E6\u00A69J\u0093\u009C5\u00D0G\u00B4\u00DC\u00C4o\u00BF\u00CA\u00984q\\x0008\u0095\u00E2\u00EE\u00BA\u00A6\u00FE\u00B8N`9\u00A2\u00FDi\u00B8R\u008C.n\\x001c1\u00CD\\x000ej\u0092\u0085\u00EF\u00D3L\u00E3{Ge\u00FB\u00BD\u0097\u00C8\\x000f\\x0002 \\x0000\\x0002\u00D9$ \u0094\\x001a&[.\\x0010\\x0010\u0085aY?\u00DD\u00EA\\x0002\u00D7Kp\\x001d\u00B4E\u00D2D\u00EAD\tiBw3.Ms\u0092&dU\\x000bZ\u00C4n@\\x0003\u00BE{C\u009Ah\u00AE\\x0011\u00AD'\u00A9.>\u00EB\\x00023&/4\u00C7\u0089\u008A\u009EW\u0085\u00A6o\u00AD./\u00B5W\u00D9\u00B5\u00B6\u00E1\\x0007\\x000bx\u00DB\u00B29\u00FA\u00A0\u00D5 \\x0000\\x0002 \u00E0J\u00C0\u00B6\u009E\u00C5\\x0018\u00AB9\\x0001!\\\u0095\u00A9\u00BER\u009A\u00A5\t?7!4\rvkm7\\x0007.'\u00CAI\\x0013\u00BD\u00BD\u00E5n\u009A\u00934\\x0011-\u00D2\u00D6\u00CDep\\x0003\u00971i\u00E2\u00B5\u00AF\u0089\u0083\u0092\u00E0c\u0091l\u00AA\u00C2>\u0085\u00C9\\x001d\u00B1\u00AEGwYv\\x001f\u00C6\u00FC\\x001c\u0086-\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u0085\u0080\\x001eJ\u00A2\u00BDvZ\u0087e\u00EB\u00CA\\x001d\u00D3\u00E0\u00EF:\u00AA[\u00F1\u008AbM\ny\u00DC\u0097\\x0016{\u00AD\u00D0\\x0011\u00DF\u00CA\u00B24\u00CD-\u00D6\u0084\u0097 \u008E\u00A1\u00BB\u00BE\u00BA%\u00A4\u0089)\u00D6\\x0004\u00D2\u00C4W\u00EFAf\\x0010\\x0000\\x0001\\x0010(;\\x0001\\x001a\u00B7\u00C5q\\x0018\u00BC\\x000f#\u0099\u00D2$FM\u00834\u00C9\u00D3\u00C6\u00AC\\*\u00A8\u00A7\u00A2\u00FC\nr\u00BB\u00C1JN\u00E8\u00F0\u008E>W}\u00ED\u00A0u\u0082\u00BB\u00B9\u00CA>\n\u00A0\\x0002 \\x0000\\x0002 \\x0010#\\x0002\u00CC\u0085 \\\\x0018\u00E2 M$'tL3\u00FB.\u00CE\u008F\u00E8\u00BC&\u00F1h\u009A\u0089\u00AD\u00C9D\u00DA\u00C2\\x001b\u00F4)*L\u00E8\u00C8\u00DBx9i\u00A2/\u0082\u00F2\\x0008\u0083\u0095\u0096&\u00FA\\x001ac\u0093\u00F3P\\x000bk\ni\u0091U\u008C\u00C6\u0088\u00A2\u00B4\u00A3\u00FC\u00ADDN\\x0010\\x0000\\x0001\\x00100\\x0008\u00E8A\\x0018\u00C2\u00A0\\x0007c\u00C1\u0081\u00FF0\u00D8\u00F2K\\x0013cQn\u00B9\u009A\u00A6U\u00C0\\x001a\\x001d\u00AC\u0093\u00D1\u00C9\u009BW\u00B0\u0086\u00B2\u00C8\\x0003\\x0013:\u00B6}M\u00F8\u00C5\u00EEFh\u0088%\\x0002Y^\u009A8\u00C4W{\u00AF\u00C2\u0087\u0099\\x0007\\x0001\\x0010\\x0000\\x0001\\x0010\u0090!`\u00DD\u00BBA\u00B4+\u0095\u00FF\u00C5\u00C31\u0090&\u00DA>\"\u00B6\u00D5\u00C8\u00E6\u00DDo\u00A3k\u00DA\u008A\u00BC%\\\u00B2zX\u008E\u00FB)\"\u00E65\u00A9\u00E6\u00B7\\x0001s\u00F4`\u00C9\u00DCG.\\x000f\u00A4\u0089\u00F7\u0096k\u00E6YLa\u00B0\u009AK\u00C3\u00F2\u00E4\u00C0_\u00E2\u00B3\u009B\u00C23\\x0004\\x0002 \\x0000\\x0002\u00EE\\x0004lk\\x000e\u00CC\u0081\u00AE\u00F6\\x0019\\x0019\u0089-\u00D7\u00A4\u00A2Y\u00A3\u009B\u00D0\u00D1\u00C7\u00C9\u00B25M\u00A9\u0080\u00B6pZ[\u00BB*\u00DCr\u008D3pa\u00FD\u0080bv\u00A4\t\u00FC\u009F \\x0000\\x0002 \\x0000\\x0002  &P\u009E\u00B8\u00C0`+t|\u00BE\u00DAE\u00D6\u00B4\\x0008w\u00C1\u00C8\u008841\u00FFX\u00B6\u00F3\u00C6kB\u00BFY\u0094\\x00071L\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0004&\\x0010\u00DB\u00B1\u00DD^1Q\\x001b\u00DD\u00A4I\u0082\u009A&\u00ACj\u00E0{\u00AA\u009C\u0098\\x0011iR\\x0014#\u00F8QA\\x0000\\x0004@\\x0000\\x0004RD\u00C0\u00B6}\u0099\u00FBN\u00F0>\u00BD\\x0014>@\u0085\u00EF5)e\u00D3\u00E05\u00B9C\u00D1P>\u00EEwt=\t%\u0083\\x0000\\x0008\u0080\\x0000\\x0008$\u009E@!\u0084B\u00F5\u008B[w`+\u0091\u00B9\t_\u009A\u0098\u00A2C\"n\\x001a\u00A4\t\u00A4I\u00E2\\x0007\\x0002(K\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0090\"\u0080\t\\x001d)L%R\u00D0\u00D0\\x001f \\x0000\\x0002 \\x0000\\x0002 \u0090y\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0001\u00DF\\x000c\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A\u00A4_\u009At\u00AE\u00C8w.\u00B6\u00A5\u00F9\u00F9NJ\u00E6\u00E3x\\x001e@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u00EC\\x0004 MR%M4\u00A9\u00C1d\u00C7\u00FC|k\u00A0\u00C4\u00CE5TK\u00D9\u00FB(*\\x0000\\x0002 \\x0000\\x0002 \u0090)\\x0002\u0090&\u0089\u0097&\u008A\u0086(B\u0088\u00C8\u00C8\\x0017C\u00ACd\u00EA\u00D9@cA\\x0000\\x0004@\\x0000\\x0004\u00CAB\\x0000\u00D2$\u00A9\u00D2\u0084)\\x0012\\x0019a\\x0011n\\x001e\u00C3\u00A1R\u0096\u00FE\u008A\u008B\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u00A4\u009E\\x0000\u00A4I\u00C2\u00A4I\u00B9\\x0014\u0089P\u00DF\u00B0I\u009F\u00D4?$h \\x0008\u0080\\x0000\\x0008\u0080@)\t@\u009A$\u00C3\u00B2\u00C6J\u0091Xd\n\u00F3\u00A3\u0094\u00B2\u00D7\u00E2Z \\x0000\\x0002 \\x0000\\x0002)&\\x0000i\\x0012w\u009B\\x001a\u0096(\u00D1\u00E2E\u00F8\\x0010W=Z6\u00AC\u0089!\u00A5\u00AA\u0099\u00DF_9\u00C5\u0083\\x0005\u009A\\x0006\\x0002 \\x0000\\x0002\u00A5!\u0090$ib\u00D45#\\x001f\\x0016\r\u00C8V\\x0019$-\u00AA\u00CC\u00D3\u00B9,\u00F9ee\u009CH\u0085\\x0004\u00BE\u00BA\u00DF\u008B\"?\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00D8\t\u00E4k\u00F2E\u00A4\u00E5u\u00FB.\\x001b<\u00A3\u00E7\u00C8\u0095\u00FD\u00C7\u00ED\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj\u00F8\u00DC\\x0006\u00FA\u009B\u008E\u00EEj:[L\u00D1\u00BE\u008Dk\n\u00EEn\\x0000Q\u00C2\u00E4\u00C8\\x000f\u00FE\u00B5\u0088'.&V\u00FC\u00CA\\x0014\u00AA\u008Fg\u00C9\u00C8\\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002.\\x0004\u008A\u00D0%$< M\u00EE\\x0008\u00C7\\x0012\u00FB\\x0012\\x0001\u00D1\u00C9\\x0011\u00A7\u008E\u00A2\u00C8\\x0014?\u00DE\u0094\\x0000n\\x001b<\u00A5 \\x0000\\x0002 \\x0000\\x0002 \u00C0\\x0008\u00C4W\u009A\\x0014W\u00B3\"\\x001bV\u00BA\u00D3\u00D7\\x000f\u00CD\u00AF\u00AF\u00C8\u00D7\u00C8%\u00CA\\^,\u00C9\u00AAmyY\u00E1\u00EA \\x0000\\x0002 \\x0000\\x0002\u00E5 \\x0010\u00A5\u00D7\u00A4\\x001c\u00ED)\u00B5\u00E1'K/#JH\u00BB\u00E4\u00CB-JL\u00B7\u0083\u00E4\u0094t\u00CD\u00CB.\u00A7\u00B2\u00D0\u0091\u00D0F\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u009D\\x0000\u00A4I\u00D0P\\x001dY\u00D3\\x001e+Ebkl:Z\u0081\u00E7\\x0019\\x0004@\\x0000\\x0004@ E\\x0004 M\\x0002I\\x0013\u0099\\x0019\u009C\\x00049\\x001bd\\x0004\n59A-J\u00D1#ZjG \u00D0\u0081\\x0000\\x0008\u0080@\u00B9\t@\u009A\u00F8\u0097&\u009E\u00BA$\u00A1&\\J\u00A0\u00C4\u00DB\tT\u00EE\u00C7\t2\\x0002\\x0004@\\x0000\\x0004@\u00A0x\\x0002\u0090&~\u00A4\u0089\u00A7\u00F1VbJ\u00FC\\x0014\\x0018\u00C3\u00CC\u00DEm\u0084:I\u00F8-\u008Ea\u00AFC\u0095@\\x0000\\x0004@\u0080#\\x0000i\"mf2d\u00B3\u00BD\u00D6\\x001c\u00A5@\u0081a\\x0014\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088+\\x0001H\\x00139i\u00E2>\u0089\u0093\u00D0\\x0019\\x001c\u00F7N\u00E9.\u00C5\u0094\u00D0\\x00139tq\u00ED\u00FA\u0089\u00F7o\\x0001,\\x0008\u0080\\x0000\\x0008\u00A4\u0094\\x0000\u00A4\u0089\u0084}\u00CD\u00A0.\u00D1\u00BA\u00BB\u00A7\u00FBD\u0082^J\u009F\\x001c(\\x001b\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u0088\\x0008@\u009Ax\\x0019W\u0097mK22\u00AF\u00E1\u00E1>A\u00E8\u0089W\\x0017\u00828\\x0003\\x0001\\x0010\\x0000\\x0001\\x0010\u00F0C\\x0000\u00D2\u00C4\u00D9\u00AE\u00C0$\\x001b=\t(\u00FC<T\\x0011\u00BDF\u00A0X\\x0010\\x0000\\x0001\\x0010\u00C8\\x0008\\x0001H\\x0013\\x0007iB\u0081\\x0014n\u00FE\u0092\u00EC\u00B9\n\u00A0N\u00A0N@\\x0000\\x0004@\\x0000\\x0004JB\\x0000\u00D2D$M\u00A0K\u009C:\\x001f\u00E4ZI\\x001e\u00CB\u008C\u00BC\\x0018\u00A1\u0099 \\x0000\\x0002  $\\x0000i\"\u0094&\u00CE\u00BF\u00D5\\x0007\u00CB\u00E4\\x0012\\x0014\u008C5;\u00E8\\x001e \\x0000\\x0002 \\x0000\\x0002E\\x0013\u00804\u00B1\u00FF\u00AC\\x000ct\u0089W\\\u00A7\u009B:\u00C9\u00DETW\u00D1\\x000f!^\u009B@\\x0000\\x0004@\\x0000\\x0004x\\x0002\u0090&f3\u00ECbta\u0081x\\x0002N\u00A02\u00B2j\t\u009D\\x0001\\x0004@\\x0000\\x0004@ 2\\x0002\u0090&\u009C4q\u0089\u00F4\u008C\u00EC\\x0006$X)C\u009D\u00A0W\u0080\\x0000\\x0008\u0080\\x0000\\x0008D@\\x0000\u00D2D\u0097&\u00D0%\\x0001\u00BA\u0097\u00A3:\u00C1\u00B4\u008E\u00D7\u00A4X\\x0000\u00DA8\\x0005\\x0004@\\x0000\\x0004\u00B2A\\x0000\u00D2D5!.Kr\u00F2\u00B0\u00B2\u00AEV\u00D6i\u00CDN*7\u00EF\u00CF\u00C6\u00A0\u0090`O\\x001en\\x0010\\x0008\u0080@*\\x0008@\u009A0i\u00E2\\x0010\u00FA\n\u00FB*\u00D3\u00CB\u009D\u00D4\u0089\u00CC\u00B9\u00C8\\x0003\\x0002 \\x0000\\x0002 \\x0000\\x0002f\\x0002\u0090&\u00A4K\u0086\u008AwW\u0083.\u0091|Z\\x001c\\x0001V\u00E0\u00FD\\x001b\\x0004@\\x0000\\x0004@\\x0000\\x0004\u00FC\\x0012\u00804q\u00D8\u00F5\\x0015+M$u\t\u00CB\\x0006y\u00E7\\x000b\\x00172\u0083\\x0000\\x0008\u0080\\x0000\\x00088\\x0013\u00C8\u00BC4q\u009A\u00CAA\u00A7\u00F1K\u00C0qR\\x000c\\x0001\u00A1 \\x0000\\x0002 \\x0000\\x0002 \u00E0\u0083@\u00B6\u00A5\u0089\u00D3\u00BB>B_\u00FD\u00EA\\x0012\u0096_\\x0018t\u0082y\u00B1`0q\\x0016\\x0008\u0080\\x0000\\x0008d\u0095@\u0086\u00A5\t\u00E6 B\u00EF\u00F4@\\x001a:R\\x0014\\x0008\\x0002 \\x0000\\x0002\u00D9#\u0090ei\"Z\u0095\u0083\\x0010\u0093\"\u009F\\x0001\u00A1:\\x0001\u00D5\"\u00A9\u00E2t\\x0010\\x0000\\x0001\\x0010\u00C8\\x0012\u0081\u00ACJ\\x0013\u00C7\u00A9\\x001c\\x001f\u0093a~C\u008E\u00B3\u0092\\x001f\u00D3:Y\\x001aA\u00B2\u00D2\u00ABqOA\\x0000\\x0004JH \u00B3\u00D2D\u00E82\u00C1\u00EEja(3\u00C8\u00BE\\x0012>\u00C0P\\x0006 \\x0000\\x0002 \u0090>\\x0002\u0099\u0094&\u00B0\u009DQ\u00DBN\u00E1j\\x001d\u00C4\u00C3F\u008D\\x001d\u00E5\u0083\\x0000\\x0008\u0080@*\\x0008dS\u009A\u00C0e\\x0012\u0086w\u00C4\u00FD\\x0001\\x0010N\u00EB\u00A4\u00E2\u0099I\u00DF\\x000b\nZ\\x0004\\x0002 \\x0000\\x0002\u00B1\"\u0090=i\u00828\u00CD\u00D2\u00E8\\x00031gL\u0099E/\nKsq\\x0015\\x0010\\x0000\\x0001\\x0010\u0088\u008C@\\x0006\u00A5\u0089\u00C8e\u0082\u008DL\u00A2\u00E8ap\u009CDA\\x0015e\u0082\\x0000\\x0008\u0080@\u00DA\tdO\u009A\u00D8\u00ED%\u0096\u00B6F\u00D4\u00CB\u00E18\u0089\\x0008,\u008A\\x0005\\x0001\\x0010\\x0000\u0081T\\x0013\u00C8\u00984Axf\u0089{3\u0084`\u0089\u0081\u00E3r \\x0000\\x0002 \u0090|\\x0002\\x0019\u0093&\u00B0\u0094%\u00EE\u00B2p\u009C\u0094\\x00188.\\x0007\\x0002 \\x0000\\x0002\u00C9'\u0090%i\\x00023Y\u0086\u00FE:T\u00F0\u00C3:XE\\\u0086\\x001b\u0081\u00F0[\\x0010\\x0000\\x0001\\x0010H\\x000c\u0081LI\\x0013a\\x0000lbnU\u00ACVv\u00F9\u00A8\u008Cp\\x0012\r\u00B6\\x0019\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x001c\\x0008dI\u009A\\x0008fs\u00B0\u00965ze\\x0006g\\x0015F\\x001f\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001?\\x00042#M\u0084\\x0006\\x0012k\u0086\u00FD\u00F4\\x0015\\x001f\u009E\\x0012K\u00B1\\x0008\u00F1)\rg\\\\x0005\\x0004@\\x0000\\x0004RA ;\u00D2\u00C46\u009B\u00835\u00C3%\u00EB\u00C1\u0098\u00D3)\\x0019j\\\\x0008\\x0004@\\x0000\\x0004\u0092O 3\u00D2\\x0004\u00B39e\u00EC\u00AC\u0098\u00D3)#|\\\\x001a\\x0004@\\x0000\\x0004\u0092F \\x001b\u00D2D<\u009B\\x0013}\u0098E\u00D2zC\u00F0)\\x001b\u00CF\u0096\u0096dN\u00A7\u00A9\u00F6\u00BA\u008A\u008AK\u0085)W\u0087\u00DB\u009Db\\x0002\u00FF\u00CA\u0099\u00EF{u\u00ED\\x001b\u009E\u009D\u00B9.g\u00E9*\u00B7\u00D5yvcd\\x0000\\x0001\\x0010(\t\u0081\u008CH\\x0013\u00AC\u00CD)\u00B7Y\u00B2\u00CF\u00E9\u00848\u00A1\u00D64\u00BC\u00DAA\u0091\u00D8d\n\u00CCO\u00B9{B$\u00E3\\x001a\u00A4I*o+\\x001a\u0095]\\x0002\u00D9\u0090&\u0098\u00CD\u0089\u00C4\\x001e\u00F8yl\"s\\\u00D9\u00DE}\u00C5^\\x0013^\u00A3\u00C8\u00BCR{\u00BEs#C\u009C\\x0008@\u009A\u00F8y\\x0018\u00CB>\\x001a\u00A0\\x0002 \u00E0E\\x0000\u00D2\\x0004\u008Ft\u00A9\\x0008\u0084/\\x0010\u00AD\\x0006\u00C9i6\u00C7~\\x001c\u00EA$N\u00C2\u00A2\u00F8\\x001e\\x0008iR<C\u0094\\x0000\\x00021\"\u0090\\x0001i\\x0012\u00D9\u00FBz\u00BA\\x0006\u00F7\u00E8;e\u00C8s:\u00C1u\tS*\u0088>IQ\\x0007\u00864\u0089\u00FE\u00F9\u00F5z\u00CDMQw\\x0002\u00CC\u00F2\\x0013\u00C8\u00A44\t1\u00CA\\x0001\u008F\u00AB<\\x0001\u00BBF,\u00E2F8\u00CE\u00E3T\\x000fo\u00B2T\u00C9)\\x0012\u00C5\u009ES\u00BE-\u00C8\\x0019/\\x0002\u0090&\u00E5\u00B7%\u0090& \\x0010\"\u0081,H\\x0013\u00FB\u008E&\u00D8\\x0004\u00B6\\x001c\\x0003Y\u0088\u00EE\u00AB\u00BA\u00DB\\x0004s7\u00AERC\u00B8x\\x0007\u008E\u0093\\x0010\u0087\u0092\u00B2\\x0016\\x0005iR\u008E':^\u00F2\\x0014\\x0004RE \\x0003\u00D2$\u00FC\\x0010\u0087T\u00F5\u0080\u0092Z\u0094p\u00EE\u00C5\\x001b\u00B5\u00D5\u00B6XW\t\\x0017\u0088@\u009DH\u009CUR>\\x0018\u00EB\\x0003\\x0012\u00804\u00C1\u00A0\\x0004\\x0002\u00A9\"\u0090Ii\u0082\u00FD\u00E9\\x0003\\x001a\u0080\u00A2\u00BB~(\u00D2D\u00E02\u0091\\\\x0012l\\x000fO\u00B1\u009Dh\u0099\u00FD\u00D1\u00B4\u008BU\\x000c\\x0019\u00EE\\x0016\u00EB\u00BC\u0092X\u00EB8\\x0019N\u00BB\u00C6rk\u0088MZ9f\\x0016\u00B9\u0088\u00AE\u00ABmr\u00BD}>\\x001bnQlA\u00AE\u00A8vB9\u0080\u009E\\x001d\u00AFD\u00D2D\u00E8{\u00F3\\x000c\u00A9\u00B6\u00B4\u0091\u00CBo\u00EB\u0090\u00A2\u00FEc\u00BF\u00A8\u00BC\u00B7/\u00F0}\u0081\"\\x0007\u0081\u00F2\\x0012H\u00BB4\tq\\x0012\u00A1\\\u00E6<M\u00D7\r#\\x0012\u00D6\\x001ee\u00E2i\\x001b\u008Cg\u00CC\\x0018\u00A9\\x001d\\x0007w\u0081\u0085\\x0016\u00C7\u00DB\u00B2\\x0012\u00E4,\u00AB\u00A3\u00E1\u00F4cul:&\u00F7/\u00FB\u00D8\u00E1\u00B2\u00E9\u009CG\u00F0\u00AF\u00CF\u0086\u00DB\u0091\\x0006\u00DB\u00ECN\\x000e`\u00D9\u00A5\u0089\u00C8Qg\u00D9J\u00C7\u00D9\\x0003'\u0092&nA\u00DC\u0085\u00FE,\u009C\u00B8\u00D4\u00AE\u00EB!\u00C7\u0083\u00F7\u00844\r8hKb\tdO\u009A\\x0014\\x0011zY^\\x0015\u0099\u0086\u00AB\\x000b\"a\u00FD\u00C6\u00FD\u00D8\u008D\u0084\u0097?\u00C0\u00D7\u00C3i\u00B5\u00D0\u00B7\u00E5\u00EC\u0093Gd\\x001bt;$gY]\u00DE\u00E9m&J$8\u0094[o\\x000b\u00E6\u00B5\u00AB+\u00D9-^\u0084\u0097\u00F0\u00D9p\u00D6\\x001b\u008B\u00BAbR\u00BC&>6\u00F4\\x0013wE\u00AB4\u00C9\u00DD\u00E6\u00B9C \u00A9\\x0013OmQQ\u00E1\u00A8N\u008A\u00BF/i\\x0018m|=\u00F8\u00C8\\x001c3\\x0002\u0090&\u009E/d\u00C8\\x0010\\x001e\u0081\\x0010\\x0016\u00E9H\u00F9\u00C0\u0083\\x000f\u00ACrv\u00C8x\u00AF-Z\u009A\u00D8\u00AD\u00BB\u00D8\u00DEx\u00CE\u00E6\u00C8Z#\u00F5\u009D[\u00E0g\u00F2\u00D9p\\x001f\u00BA\u00C4\u00E9\u008AQJ\\x0013\u00F9\\x001dn\u00B8\u009C\"\u00F2rX\u00B8B\\x0004\u00EA\u00C4\u00D7\u00AD\u00F1Us\u00A1\u00BF\u00D0\u00D7\u00E5\u00E4=\u008E\u00C1\u009F\u00A9\u0098\u00D9<4$\\x0011\\x00042(M\u00FC\u00BE\u00A6\u0087g\u0098\u00F1\u0088\\x0016/M\u00EC\u00A6\"\u00DCPV)ST\u00B0a\u00C5K\u0093\u00BC\u00CDi/\u009Al\u00F2\u009A\u00CD\u00F1\u0088\u00BF\u00B1O\\x001f\u00D8,\u00A8\u00CF\u0086\u00DB\u00ABm~\u0089\u0097\u00B8b\\x0002\u00A4\u0089h\u00DA\u00C5\u00D4\u00DF\u0084\\x0013=V\u0089\u00E3\u00A0\\x0015\u00B8[\u00E0\\x0002\u009F\u00BB\u009C\u00A0\\x001c{\u00E7/\u00BE'`\u0098\\x0002\u0081\\x0018\\x0010H\u00BD4\u00C1\u00CA\u00E18I\u00AB\u00E2C\u00EC\u0083\u00B8\u00D3\\x000cH^jO6\u00AB\\x000ep0\\x0012N\u00B1)!H\\x0013{=\u00ED-\u00B2\u00D6\u00CA\",l\\x0006R \u00D7\u00BCf\u008E\u00FC5<\u008C+\u00C6^\u009A\u00D8\u00A7T\u0084>\\x0006\u00C1\u00CC\u008B\u00F9\\x000e\u008A\u00A4\u0089\u00CDC#\\x000c+\u00B1\u00F6\\x0004\u00CF\u00B8\u00E9\u00D0\u00EEK\"^\u00ACQ\u00C9\\x0014\\x0013\u00804\u0089\u0093\u00E5\u008E\u0081V\u008D\u00BC\u00AF\u00DB\\x0017\u00E9\u00F8j\u00B5}\\x0004\u008F^\u009A\u00B8,\u0088\\x0008C\u009A\u00D4xN\u00D6X3X\u0094\u0087D\\x0018\u008Ar[\u00AD\u00E8\u00CC\u00D6Q$Md\u0083\u0085\u009D\u00B6\u00D6u\u00BF\u00A2\u00AF\u00FB\u00EE\u0091YJ\u0086z\u00CD\u0095X\u00E4\u0082\u008F\u00A9C\u00F7\\x001f1\u0096\n\u00DC\\x0016\u00F0\\x0017L0\u00D9\u008A2\u008B\u00D4PzB\u0098\u00F7\\x0005\u00A3+\\x0008\\x0004$\\x0000i\\x0012\\x0010\\\u00E4&<\u00AD\\x0003D\u0091\u00D2\u00A4\\x000c^\\x0013\u00B7\u00A5\\x0010\u00A1H\\x0013\u00AF\\x0010W\u00EB\u00AB\u00B0\u00E5\u00DD\u00DDS\u00D9\u00E8}\u00D5jkM\u00CAC\u00CE4\u00B2\u00A2\u00C2\u00B9b\u0098=<\\x0002i\"5\u00D1\u00A6\u008F\\x001e\u00AE\u0099=\u00F4\u0084\u00C6AJ\t\u00D9\u00C8\u009B\u00A4I\u00FC\u00EE\\x000bFW\\x0010\\x0008H\\x0000\u00D2$ 8H\u0093\u0080\\x0004B\u0097&\u008E\u00B1&R\u00E6\u00CA{B\u00C7\u00D1+\\x0013\u00C2\u00E2a\u009D\u00A1k(\u0089\u00C7l\u008E\u00E4\\x0002f\u00AA\u00AD\u00AB\u00C4\u00F1\u00A1\u00F9B\u00BAb\u0094\u00D2D&\u00BA\u00D3\u00DD\u00D5\u00E1.\\x0002l\u009D\u00DFmc\\x0015\u00F7\\x000b9\t\u00C7\n\u00A9\u00C5\u00E1&i\"'\u0094\u00BDzB\u0098\u00F7\\x0005\u00A3+\\x0008\\x0004$\\x0000i\\x0012\\x0010\\@\u00C3\u008C\u00C7\u00BEHi\"\u0088 q\u00F2j\u0084#M\u00DC\u008D\u009C\u009C1\u00F0\u00DE\\x0010\u00CC\u00E5}\u00D7c6\u00C7&8\u00BC\u00A6-\u00B8\u008Dty\u00E3g\u0093&\u00CE\r\u0097\u00D8\u00E4\u00C3\u00B2\u00E7\u0087\u00F1\u00A7\u00AB\u00CE+\u00E2\u0099\u00F2&l/\u00DC\u00E7,\u008C\u00FB>\"n\u00E22\u00984\u0091\u008Bk\u00E1\u00A5I\\x000c\u00EF\\x000bFW\\x0010\\x0008H \u00ED\u00D2$\u0094\u00EDG\u00A1'B$P\u00AC4)n_\\x0013O/\u00BD\\x000f\\x000b\\x001d\u00A2\u00D7\u0084\u008Ar\u009Am\u00F1\u0098\u00CD\u00B1\u00FBB M\u00C4\u00AB\u00A3m}\\x0018\u00D2\u00A4\u00D0U\u00A2\u0092\u008C\\x0001\u00CDR\\x0011\"\\x0015WL\t\u0081\u00ECI\u0093\\x0010\u00AD,\u008A\n@\u00A0Xib\\x000ft\u00B8T\u00E8\u00FA\\x0016\u008Fn\u00FE\u00A5\u0089\u00FB\u00A6\u00E0R^\\x00139\u00B9c-\u008AY\\x000b\u00EB\u00B9\u00F6w\u00F7\u0090\u00DE\u0095%#(\u0095;\\x001e\u00D2\\x0015\\x0003t\\x001e\u00C7S\u00E05\u0089\u00E7}I\u0089\u0099\u0084T*=\u0081\\x000cJ\\x0013\u00ECkR\u00D6\u00F1\u00A2hib\\x000f\\x001a\u00AD\u00A8\u0090\u00DE\\x00106ji\"\u00DC\u00A0SN\u009A\u0088W\u00D0X*,z\u00BB\u0095\u0092G\u009E:\u00C0\u00874\u0091\u008F5)YO\\x000b_\u009A\u0094=\u00D6\u00C4\u00FF\u0084N\\x000c\u00EFK\u00C9:\\x0000.\u00946\\x0002i\u0097&\u0082\\x001fm\u00814)k'.^\u009A\\x0008\u00DF\u00DA%7^+\u008B4\u00B1]\u00D4!\u008CC\u00F0#\u0082\\x0016\u00D9!t\u00E1H\u00AF\u00CBp\u00BD\u00EF~\u00A4I8W\u00F4TK>2\u0084/M\u00E4\u00B6\u00C2\\x000b\u00B6BG\\x0018\u00B6\"\u00D5\u0084\u0090V\u00E8\u0094u\\x0004\u00F0q[Q\u00CF\u00EC\\x0012\u00804\u00C9\u00EE\u00BD/\u00BD\u008FN\u00B9b\\x0008\u00D2\u00C4\u00BEE\\x0007\\x000b\u00ED\u00F4\\x0019\u00A8\u00A8\u00C6fz\u00AE\u00D0\u00F17\u00A1#\u00AA\u0083\u00E4\u00CE]\u0082E\u00B9\u00B9\u00DBr\u00A6xR\u0087\\x0006z\u00EA-\\x0019c\u00E0G\u009A\u00F83\u00DB2W/6\u008F\u0094]\u00B7tx\u00AF\u00E8T\u00A9\u00D5\u00BC\u00AC\u00CC0\u00C2V\u00A4\u009A\u00E0\u00E1\u00CB\t\u00A5'\\x0014{/0\u00A2\u0082@\\x0008\\x0004 MB\u0080X\\x001e\\x001b\u009F\u00D0\\x0011$\\x0014i\u00E2\u00F2\u00C3rv\u00F7\u0089\u00EB\\x0016\u00ECEJ\\x0013\u0089\u009F\\x000e\\x0016,\\x0014r\\\u00FC\u00E2\u00BE[\u00BC\u008F\u00CD\u00E5\\x0004\"\u00C6\u00A8\u00AA\u00F8\u00EA\u00BE\u00A4\u0089\u00DC:)\u008F+\n\u008D\u00BA\u00A4\u00F7\u00CB\u00DA\u00F9\u00A5\u00EC\u00BAOi\"\u00F8\u00F1B\u00B9I\\x0016\u00EBO\\x0014yi 6\\x0004I5\u00C1k\u009A\u00C9\u00DE\u00D9\u00FC\u00F7\u0084\u0084\\x000e,\u00A8v\u00BA\\x0008@\u009A@\u009A\u0094\u0096@H\u00D2\u00A4\u00A8`L\u00CE\\x0015Q\u00A44\\x0011\u00FD\u0094\u008C\u00F7o\u00A3\\x0004[\u0097\u00EB\u00E2\u00BF\\x0011\u00FDJ\u00AD\u00FBf\\6'\u0093?i\"\nF6G\u00FC\u0088\u00AA$\u00B1\u00BDi\u009C\u00A4\u0089].(\u00CE\u00B9\\x0010~C'\u00AA\t\\x001d\u00D1nxt\u00A3}\u00F6\u0084tY8\u00BC7&\u0094\\x0000\u00A4Ii\rs\u00C6\\x001f\u00FB\u00E2C\u00C7\\x0004\u00B0\u0088\u00A5\"\u008A:\\x0011\\x0005\u00CF\u00FA\u00B4\u00D0b\u00EB\u00E5\u00B4\u00AB\u0087~\u00DCm\u00AF\\x0014\u00E1o\u00A9X-\u00A2\u00BD\u00D3\u00FAFa\u00AD\u0083\u00EF\u0086\\x0017}\u00C5\u00D8{MD\u00BB\u00FBs\u00BB\u00C2\u0088\u00EF\u00B2\u00CC/\\x000fG(M\\x0002Hv\u0099\u00ED\u00E9\\x0012j\u00DEP\u00ED\u00E4\\x0012\u00804\u00814)!\u0081\u00E2y\u00D8{w\nO\u00E3\u00A1fp\u009A\\x001c\u00F1m\u00A1\u0085\u00FE\\x0003K\\x001dn\u00CB\u00E5LG\\\u008D\u0081x\u00A78\t\u00FB!\u00B5\u00C5\u009C\u00B6\u0095\u0085\u00F7/\\x0008\u00DA\u00A2p\\x0004\u00AA\u00BA\u00B8+&B\u009AP%\u009D\u00C4\u00A2@\u009A\u0088W\u008A\u0095pBG<7\u00E4\u00B6\u00D5\rv4\u00C9\u00F8\u00EBb\\\u009B\u009FAiR\u0091\\!\u0099\u00F8\u009AG M\u0084\u00F3\u00F4.c\u00B1\u0087\u008D\u00F7/M\\x001c\u00BC\u00E8\u00BA\\x0016Q\u00FD\u00FF\\x0016\u00E3\u00E4o\u0087Y'\\x0007\u008FhL\\x0011\u00FD\u00C8\u00ADU\u00AB\u0089'\u0086\\x00025\\\\x0014\\x0001*\u0090\u0086E\u00FF>\u00A2\u00A7z\u0096\n\u00D4\u00F0\\x001bk\u00C2\u00E5\u0097p\\x00119OE\u0095\\\u009A\\x0008#s\u00FD\u00DD\u0097\u00C4\\x000f5q\u00B5\u00B8\\x0000+I \u00F5\u00D2d\u00A8uI\\x0008-'F\u00AF-\\x0017\\x0001\u00814\tu-\u00B7s\\x0018\u00A9\u0084\u00D7A\u00B5A-\u00B4\u00C8\u0091^\u00F0\u00DB\u00FB\u0092&\u0082\u008D[|F`\u0088\u00E2<\\x001c&\u00B0\u008C\u009E\\x0010\u00BC\u00E1\n\u00B7 WL\u008A\u00D7\u0084{X\u0084\u00CD\u00F4\u00ECZe\u0091&l\u0094\\x000b|_0H\u0082@y\tdO\u009AP\\x0018f\u00B9\\x000c3\u00AE\u008Bmfd\u00FA\u0080\u00E4\\x0016m2E!\\x000f\\x0008\u0080\\x0000\\x0008$\u0090@\u00DA\u00A5\t\u00DD\u0092\u00D0\u0096\u0084xz\u0095\u0091\u00C1\u008B\\x0000~\u00D2Hb\u008C\u00F0Z \u00EA\\x0005Y\u00E2\\x0012P\u00E7 \\x0000\\x0002 \\x0010g\\x0002\u0099\u0094&4\u00AD\u0080\u00E1\u00BB,\\x0004 M<\u00B1\u00DB\u00E7\u00A4|\u00CE\u00E6\u00A0o\u0083\\x0000\\x0008\u0080@\u00D2\td@\u009A`\\x0012\u00C1\u00D3\\x001c\u0096&C\u00C8+\u0087\u00D3\u00E8<\\x0010\u00C5\u00CA\u00B8oG\u009B\u00F4\\x0001\\x0008\u00F5\\x0007\\x0001\\x0010\\x0000\\x0001;\u0081,H\\x0013D\u00C2\u00C6\u00C3\u008AG\u00B5<'\\x001e\u00AD\\x000b,\u00EF\u00DC\u00D7\u00A6\u00C2e\\x0012\\x0018,N\\x0004\\x0001\\x0010H,\u0081LJ\\x0013D\u00C2\u0096\u00A5\u00BF\n\u00DCW\\x0008I\\x0016\u00AC\t\u00E2V>K\u00FF\u00A2rYn(.\n\\x0002 \\x0000\\x0002\u00D1\\x0010\u00C8\u00AC4A\u00B8I\u00C9\u009D\r\\x00084\\x0011?\u00C3\u008E\\x001b\u0097a*\\x0007\u008En\\x0010\\x0000\u0081l\\x0012\u00C8\u00804\\x0011.\u00D2A$l4R\u00D7\u00F1)B\u00A0\u0089#p?\u00BF\u00FFW\u00E2\u00BB\u0086\u00CB\u0081\\x0000\\x0008\u0080@9\\x0008dC\u009A`*\u00A1\\x001c}\u00CB$S M\u00CA~\\x000bP\\x0001\\x0010\\x0000\\x0001\\x0010H\\x0008\u0081\u008CH\\x0013[$,\u00C2MJ\u00DCA\\x0005\u00B39\\x00084)\u00F9\u009CZ\u0089o:.\\x0007\\x0002 \\x0000\\x0002\u0081\\x0008dD\u009A\u00886^\u00C3\u009CN\u00A0\\x001e\\x0013h\u00E2S$\r\u00C1\u00BFt\u00FC\u00A1\u0081@\\x0000\\x0004@ I\\x0004\u00B2!M\u00C8\\x0006`N\u00A7\u008C\u0086\\x0010\u00B39e\u0084\u008FK\u0083\\x0000\\x0008\u0080@\u00D2\\x0008dG\u009A`N\u00A7|\u0092\\x0019\u00B39I\\x001b\\x0017\\x0002\u00F9\u00C6\u00CA\u00D7\u00C1\u0080\\x0017\\x0004@ ]\\x0004\u00B2-M0\u00A7P\u0082\u00DE,t\u0099\u0080|\t\u00C8\u00E3\\x0012 \\x0000\\x0002 \u0090L\\x0002\u0099\u0091&\u00C29\\x001d\\x0004\u00C3\u0096\u00A0\u00D7\u00DA\u00A7\u00D2\u0080\u00BD\\x0004\u00D8q\t\\x0010\\x0000\\x0001\\x0010H,\u0081LI\\x0013\\x0004c\u0096\u00C3\u00E5\u008E\u00D9\u009C\u00C4\u008E\\x000e\u0098\u00D6\\x0001\\x0001\\x0010\\x0000\u0081\u00B2\\x0010\u00C8\u00924!\\x000b\\x00013Yb3\u0089\u00D9\u009C\\x0012\\x0003\u00C7\u00E5@\\x0000\\x0004@ \u00F9\\x00042&M\u00C4\u0093\\x000b\u00D8\u00B4>2o\u008A]\\x000bb6'\u00F9\u00A3FY\u00DE\u00A2pQ\\x0010\\x0000\u0081\u00EC\\x0010\u00C8\u009A4\\x0011\u00CE\u00E9`\u00EF\u00AFh\u00A4\t\\&P! \\x0000\\x0002 \\x0000\\x0002\u00FE\tdL\u009A8\\x0006\u00C3\u00C2q\\x0012\u0081:\u0081\u00CB\u00C4\u00FF\\x0003\u0099\u009D\u00B7\"\u00B4\\x0014\\x0004@\\x0000\\x0004\u009C\\x0008dP\u009A\u00C0q\\x0012\u0081\n\u00B1\u00DB`\u00B1\u00CB\\x0004\\x000e\u00AA\u0092\u00C0\u0087$\\x0002\\x0001\\x0010\\x0000\u0081$\\x0013\u00C8\u009E4\u0081\u00E3\u00A44\u00FDU\u00E82Y\\x000f\u00C3\\x000c\\x0002 \\x0000\\x0002 \\x0000\\x0002\\x001e\\x0004\u00B2)M\u00E08\u0089\u00F8\u00C1\u0080\u00CB\u00A44\u00FA\\x000fW\\x0001\\x0001\\x0010\\x0000\u00814\\x0012\u00C8\u00A44qr\u009C`\u008B\u00D2p\u00BA\u00B8H\u00F9\u0091\\x0013\\x0005x\u00C3\u00C1\\x001b\u00B1\u00ACD%A\\x0000\\x0004@\u00A0\u00DC\\x00042+M\\x001c\u00CCg\u00B9\u00EFG\\x001a\u00A2\u00A2\u0084+\u00B4\u00A1K\u00D0\u00B5@\\x0000\\x0004@\\x0000\\x0004\u00E4\\x0008dU\u009A8:N\\x0010\u00A7Y\u00DCK\u00B9p*\\x0007{\u0099\u00C8=\u008Di\\x0010\u00A6h)\\x0008\u0080\\x0000\\x0008\\x0014M \u00CB\u00D2\\x0004\u00F3\\x000e\u00C5\u00A9\\x0010a\u00E7\\x0013G\u00BFbmv\\x0004\u00A8\u008B~\u00F8\u00A1\u0084@\\x0000\\x0004@ \u009E\\x00042,M\u009C\\x001c'x\u00C5\\x000fl\u00F3\u00C4S9qrD\u00D1\\x0012!\u00F2\u00EB(\u0089b_\u00F4\u00C4\u00CB\u00A9\u00C2q\u0096\r\u00A2\n\u00A2\n\\x0004@\\x0000\\x0004JM \u00DB\u00D2\u0084l\u00B0\u00F8-?N\u00D64\u00B0P(\u00F1\u0089NS9e_0\u00AC\u00C9\u0091\n\u00F1\u00BD\\x0016v\\x0000\u00E1o-A\u00A6\u0094\u00B8G\u00E1r \\x0000\\x0002Y%\u0090yi\u00E2hP\u00F1\u00BA\u00ECG&\u00C7\\x0010\u00A3\u00E1\\x001d\u0091\\x0014\\x001f\u0092\u00D9\\x0014\u00B7\n\u00FA\u0086\u009F\u00BE\u0091\u00D5\u00B15\u009E~r\u00D4\n\\x0004\\x0012A \u00F3\u00D2\u00C4eZ\\x0007\\x0016H\u00DE\u00A8\u00C4\u00CA\u00F9\u00C4\u00E6k$\u00A5F\u00E0l\u0098\u00EE\u0091\u00EF\\x001e\u00C8\t\\x0002 \\x0000\\x0002~\\x0008@\u009A\u00A8\u00EFN\u0096\u00CC\\x000f\u00CADH\u00D1H*\u00E9d\u00DDKO\u00AF4\u00A2\u00C4\\x0012\u009BR\u00FAf\u00E2\u008A \\x0000\\x0002 \u0090j\\x0002\u0090&L\u009A8\\x0004\u009D $\u00D6\u00B3\u00F7;\u00A9\u00BA\\x0012\u00FB\u009CJ/J P<\u00FB\\x00062\u0080\\x0000\\x0008\u0080@ \\x0002\u0090&\u00FA\u00AC\u00B9c\u00B4\\x0004Bb\u009D\\x0003\\x000b\\x001cuIi\u00A19\u00DD;'w\\x000e\u008B\\x0017\u00E1\\x0013{xL\\x0007\u00D5\u00F5;\u00BE\u00A6{J\u00AC\u00C6\\x0002=\u00F0\u0091\u00B8\u00CDP\\x0013\\x0010\\x0000\\x0001\\x0010\\x0008\u0095\\x0000\u00A4\tgw\u00A1N|\u00F5\u00AD8\u00E0RV\u00DF\u00C8\t\\x0008-|\u00D5\\x0004+\u00D3+\u0092\\x001a\\x0005\u00EA\u00C4W\\x0017Bf\\x0010\\x0000\\x0001\\x0010\\x0010\\x0011\u008041\u00BB\\x0004b\u00E2\\x0006\u0088gu\u00B1\u00D6%3\u00CF2\u008A!\u00CC\\x00055\u00D2\\x001a%\u00FE\u00B7\\x000f5\\x0004\\x0001\\x0010\\x0000\u0081\\x0018\\x0013\u00804\u00B1\u00CDV\u00B8\u00CC\\x0002\u00C4\u00F8F\u0096\u00D4Q\\x001f\\x000b]\u00E2\u00E5,\tS\u0094X\u00F4\u00AB\u0084\\x0013\u00A5d\u00FA\\x000c}\\x0012\\x0004@\\x0000\\x0004RG\\x0000\u00D2D\\x0014H\\x0001u\u00E2\u00D2\u00D1\u00E3\u00AFK\u00A2\\x0013%<\\x0016O\u009F\r\u00D4I\u00EA\u0086\u00CB\u0092\u00BE\\x0000\u0080\\x001e\\x0008d\u0098\\x0000\u00A4\u0089H\u009A\u00B8[\u009D\\x000cw\\x0017\u00B7\u00C0\u008E\u0092Yb\u00F7\u00E0\u0092\u0092U\u0083u\\x0003\u00F7\u00AER\u00E2\u00CAd\u00B9g\u00A2\u00ED \\x0000\\x0002)\"\\x0000i\u00E2\u00B0\u00FC\u00C4C\u009D\u00F8\u008F\u00A6LA\u00A7q\u00D1\\x0004%\u00B3\u00C1nu(\u00ED\u00B2 \u00E3\u0086B\u009D\u00A4\u00A0o\u00A3\t \\x0000\\x0002q\"\\x0000i\u00E2\u00B22\u00D65\u00A4\u00A0d\u00C68\\x0016\u00DD%\\x001e(\u00E2\u00A0\u008D\u009CnG\u009C\u00EB\\x0016\u008B.\u0084\u00BD\u00EDA\\x0000\\x0004@@\u0096\\x0000\u00A4\u0089+)\u00BC\\x0010\u00C7g\u00CE\"\u00FE\u00B6?\\x000eQ8P! \\x0000\\x0002 \u0090|\\x0002\u0090&\\x0012\"\u00CEeO\\x000b\u00B2\u0097\u00C9\u00EF\\x0004nM\u0088I`GR\u00AC~R\u00EA\u0099\u00EEN\u008B\u00D6\u0081\\x0000\\x0008$\u009C\\x0000\u00A4\u0089\u00844Q<\\x0007\u00AEKUS9\u00B9\\x0013\u009F\\x0015(.5\u0089\u00E1\u00E3\u0097\u00AC\u00DA\u00C6\\x0010 \u00AA\\x0004\\x0002 \u0090y\\x0002\u0090&r\u00D2\u00C4[\u009D\u00A4\u00CB}\u00E2\u00ADK\u00A4\u00B9\\x0015\u00FF\u008C\u00C5\u00E7\u00E7\\x0003%\u00DB\\x0012\u0087}r%\u00AB\u008Al \\x0000\\x0002 \\x0010?\\x0002\u0090&~L\u00AC\u00B7\u00C1N\u00FE\u00CA\\x001d\u00EF6\u0096V\u0084\u00C5\u00E4\u00E7\\x0003\u00FD>\u00BA\u008E\u00EA$\u00F9=\u00C4/\n\u00E4\\x0007\\x0001\\x0010\\x0000\\x0001\u009F\\x0004 M\u00FCH\\x0013\u00C5w\u0092\u00E2\u009D@i#v\u00CF-VKkY\\x0013m\u00E0\\x001dE\u0095\u00CF.\u00E7\u00F3\u0091Ny\u00F0\\x0013h\u0080\\x0000\\x0008d\u0080\\x0000\u00A4I ;\u00E1m\u00C2\u00D5\u00DF\u00B6ML\\x0007\u0092\\x0010%4\u00ABR\u00FA\\x0016\t9\u0097\u00BE\\x001a\u0081\u00EF\u00A3p**\u00F5\u00A1\u00D3\u0081q\u00E1D\\x0010H4\u0081\u00BAO+*\\x0016\nSu\u00ED\\\u00FF\u00E6\u00E0\u00DD\u009C^Z\u00AE.\u0090\u009Dr\u00839\u00B7\u00B6zaE\u00F5\u0087Mq\\x0005\\x000ei\\x0012\u00F4\u0096K\u00B9O\u00CAa\u00CE\u00FDu5IQR\u00DAI\\x001c\u00D6\\x0004'\u00C2\u00FE\\x001a\\x0018\u00F4\u00FE\u0086s\\x0015\\x0007\\x001f[\u0082\u00D4U8\\x001c\u00CA{\\x0017pu\\x0010(\t\\x0001gi\u00A2\u00E8\u0095\u00DC\u00BB\u00BE\u00D4I]\u00CEP9\u00B5\u00B5M\u00A1\u00D7\\x001f\u00D2$\u00C5C\\x001b\\x0019\\x0018O\u00F7\t{o\u008E\u00A1)\u00F2W\u00F9rx\u0080\u00C4.\u0087r\u00D4\u00A4\u0098>,\\x0014Xp\u009C\\x0014\u0083\\x0014\u00E7\u0082@<\t\u00A8\u00D2D\u00E4\u00E1`\u00FE\\x000f_\nC\u0095\\x000e\\x0015\u009F\u00D6E\u00D5RH\u0093\u00A8\u00C8\u0086\u00AE\"\u0083\\x0016(\u00E3>\u00D1\\x0004J\\x001c4\n\u00C9)\u0089p\\x0019\u00A3\u00C2\u00E5\u00BA}b\u008B\u009E4]\u00C2\u00E8\u00A5Cc\u0095\u00AB'\u00E0\u00BA \u0090\\x0014\\x0002\u008E\u00D2\u00A4&\u00EF\u00F2\u0095\u00B8uQK\u0087\u00A8\u00CB\\x000fjOu\\x001a\u0098\u00D0)\u0096\u00A0\u00E6\u00A3\u0093t\u009F\u0094M\u00A3\u00F8Q$\u008A\u009B\u00A7\u00DC*Jh\u00CE\u00932BY\u00EA\t\u00C7IBo\\x001c\u00AA\r\\x0002\u00BE\\x0008\u00F8\u0093&\u00CC/\u00A2'~\u00BA\u00C721\u00A4|\u00A5f\u00CE\u00BD\u00DBT[\u00AB\u009Eb8`\u009C\\x000bQk\u00AE\u00E7gW\u00E1}0\u00864)D\u00B4\\x0004\n\u0088\t\u00C9\u0080\u00DA8C\u009A\u0084GV~\u008A\u00C4\u00B0\u00BB\u009A\\x0002\u0088\u00CC\\x0019\\x0010\u00BCJ\u00E1a\u00F1\u00F5l\u00BBD\u0099\u00C4pRL\u00BEiI\u008F\u00E7\u0095o)r\u0082@f\t8I\u0093\u00A6\\x000f\u00AB-\\x0013:\u00DA\\x0011K\u00CC\u00AC.\\x001d\u009C\u00A4Iu\u00ADZ\u008E\\x001e\u00BE\u00EA^H\u00BE\u0086\u008BV\u00B1\u0087\u00AD0i\u00F2i\u008E\u0097G\\x0015\\x000b\u00E3\u00A3N M\u00C2\u00B6\u00C1\\x0001\u00D4\\x0000\u00EFJQN\\x000f\u00ACT\u00D4s\u008B\u00AC@\\x001c\u0086\\x0015\u00A1!\u008FC\u00C5\\x0002\u00D7!M\u00F3S\u0081!\u00E0D\\x0010H7\\x0001\u00D70X\u00CE\u00EAk\u00AE\\x000e^\\x0007h\u00EE\u008D\u0082\u00EF\u00C42\u00E1b?\u00C5\u00B3\\x0010\u00D5\\x001d\u00C2\u00AF\u00C1Q\u00AB\u00A7_Tw\u00B7\\x0018\\x0019X\u00E5}\u00C6\u00EA\u00FA\n\u00EC\u00F5\u0095\\x0019\u00D2$lib\u00BC\u00F7\u00FB\u009A\u00E2qZe\u00CA\u00DC*nI\u009D|q\u00F9\u0095\\x001f\u0099\u00AF\u00CA>}c\\x0019\u00B0\u00ECu\\x000e.\u00D7\u00A2\u00B9\u00BF\\x0001FX\u00FBmB0l\\x0000\u008C8\\x0005\\x0004bK\u00C0Y\u009A\u0098bcUo\u0087\u00DD?\u00A1:9\u008C9\\x0017\u00A14\u00E1fd\u00BC\\x000b1fj\u0084\u00B1\u00B4L\u009A\u00F0\u0091\u00B96)SV\u00CE\u0090&Q\u009A.&)d\u00C4A\u00B9\u00F2\u00C4M\u0094\u00D0\u00C3 $\u0096\\x000f\u00ECI\u008A\u00F2\u00FE\u00FAzt\u00E18\u00F1\u0085\\x000b\u0099A q\\x0004\u00AC\\x0013:\\x0002\u00C7\u0086\u00E29ps\u00AE\u0098\u0083H\n>\\x000f[\u00D4\u00AAD!\u00E6@\\x0013uN\u00C7\u00D1+C\u00E3d\u00BC\\x0002c!MJb\u00BA\\x0002O\u00B2D$Yb\u00A8H\u008Ca(\u00C5\u00DE\u0085Tz\u0083\\x0012g?Pa\\x0010\u0088\u0088\u0080 \u00D6D\u00A4N$T\u0085M(\\x0004\u0091&\u00EA\\x0004\u008A9N\u00B60\u00C5c\\x0017\"\u0090&\\x0011u\u008BD\\x0014[^\u008D\\x0012gEb\u00DC\u00BE\\x0014\u00DB\u00EF\\x0014\u00AB\u00AED<}\u00A8$\\x0008DJ@\\x001c\\x0006k\u00DB\u00D4\u00C4a.\u00C6\\x001c\u008A!\u009A\u00D0\u00E1\\x0003G\u00A4\n\u00B1\u00BCx\u00F35\u00814\u0089\u00B4+$\u00B7\u00F0b\u00E2U}\u00B9R\u008Ch\u0095D\u00B0\\x0012\u00CF\u00E6\u0094\u00C4\u00B3U\\x0002>\u00E9n]\t\\x0000\u00E2\\x0012 \\x0010g\\x0002N+t\u0098\u009B\u00C42;c\u00D9\u009CM[n\u00E3\\x001akb\u00DAW^s\u0087\u00D8\u00A3X\u00B4\u0080\\x0015V\u00A0\u00E0\\x00146g\\x0004i\\x0012\u00E7\u009E\\x0014\u009F\u00BA1o\nK\u00BE\u0094\u0087\u00C0\u00C7\u00A0\u00EFJ\u0092\u00C4\u00D0\u00D1\u00D4\u00FB\\x0015R\u00EC\\x0013\u008A\u00CF\u00D3\u0084\u009A\u0080@Y\\x00088\u00EFk\u00C2\u00D6\u00F1\\x0016B_\u00C5\u00EB~\u00F9\u009Dd\u00BD\u00BC&\u00D4@\u00AFBD\u008B\u0087\u008Dp\\x0013H\u0093\u00B2t\u0091\u00A4_\u00B4\u00B0$G\u00D7+\u0086p\\x0011|\u00D0\u0097\u00F0$\u00BD\u00D5T\u00814I~\\x0000,_ MR\u00D0K\u00D1\\x0004\\x0010\\x0010\\x0012p\u00DB\u00F2\u00D5\u00BEW\u00BD%\n\u00C4\u00B2\u008EFB\u009A\\x0008BI\u00AC\u008Bq,\u0091\u00B0\u009C\u008B\\x0005\u00D2\\x0004\u009D\\x0018\\x0004\u00E4\t\u00A4\u00DEr\u00A7^{\u00C9\u00DFk\u00E4\\x0004\\x0001\\x0010\\x0000\\x0001\\x0007\\x0002X\u00A1\u0093\u00968\u0086ttq\u00BB4I\u00C1\u00B2a\u00FE\u00D6\u00D8\u00C3M\u00B0\u00BBI:\u00BA.Z\u0091m\\x0002\u0085-\u00E7\u008D\u00BD\u00E7\\x0013\u00FB\u00C1\u00D7\u00DEh\\x0011e\u00864\u00814\u0089\r\u0081,D\u0089B\u009Ad\u00DB\u0080E4\u008E\u00A3X\\x0010H\\x0019\\x0001H\u0093\u00D8\\x0018f\\x000c\u00D9Y\u0090&\u00E4\\x0004\\x0012x\u0086\u00D0\tA\\x0000\\x0004@\\x0000\\x0004\n\\x0004 M\u00D0\\x001bbC #\\x001e\\x0005H\\x0013\u00A8p\\x0010\\x0000\\x0001\\x0010p%\\x0000i\\x0012\\x001b\u00C3\u008C\u009E\ni\u0082>\\x0000\\x0002 \\x0000\\x0002 \u0090\u00AF\u00814\u00814\u0089\r\u0081\u00D4oj\u00C2F\\x001cxM0\u00F2\u0082\\x0000\\x0008\u0080@\u00D9\u00BC&?\u00DC\u0091G\\x0002\\x0001y\\x0002\u008B*\u00F3\u009F\u0099\u00D3\u00A2\\x0001)\u00ECB\u00966\u00D2\u009F\u00F2\u0088\u0090\\x0013\\x0004@\\x0000\\x0004\\x0012A\u00A08\u00ED\\x0015\u00A5\u00D7$\\x0011\u00F8P\u00C9\u00F8\\x0010\\x0010H\u00934\u009AmH\u0093\u00F8t9\u00D4\\x0004\\x0004@ \"\\x0002\u0090&x\u00E9L\t\\x0001\u00F2\u0091X\u00BD&\u0090&p=\u0082\\x0000\\x0008\u0080@\\x0002\t$@\u009A\u00E4W\u00E4\u0091@\u00C0\u0093@\u00E7\u00E2|\u00EB|S\u00EA\u009C\u009F\u00C2\u009Eci#\u00FD\u00E9I\\x0006\\x0019@\\x0000\\x0004@ \\x0011\\x0004\\x000c\\x001f\\x000c\u00A4\tF\u00F6\u0094\\x0010\u00B0K\u0093\u00F4\u0099\u00ED,\u00B41\\x0011\\x0003(*\t\\x0002 \\x0010\\x0005\\x0001H\u0093\u0094\u00D8\u00E3(:Gr\u00CBL\u00BDG!#\u009E\u00A1\u00E4\u00F6@\u00D4\\x001c\\x0004@\u00A0\\x0018\\x0002\u0090&\u0090&)$`\u0097&d\u00CB\u008ByN\u00E2v.\u00A4I\u00DC\u00EE\\x0008\u00EA\\x0003\\x0002 \\x0010\"\\x0001H\u0093TY\u00AC\\x0010{F\u00A2\u008B\u00A2\u00E0\\x0012k\u00B8I\u00CA\u00A4I\u00DA\\x001b\u0098\u00E8\u00EE\u0087\u00CA\u0083\\x0000\\x0008\\x0014I\\x0000\u00D2\\x0004\u00D2$\u0085\\x0004\\x0004\u00D2$]Q\u00A2\u00A9w\\x000b\\x00159\u00AE\u00E1t\\x0010\\x0000\u0081D\\x0013\u00804I\u00A1aNt\u008F\\x000c\u00A5\u00F2)\u008F\\x0012\u00B5-A\"\u00A5\u0092\u00B2\\x0019\u00ABP\u00BA\\x0001\n\\x0001\\x0001\\x0010H(\\x0001H\\x0013H\u0093\\x0014\\x0012\\x0010K\u0093\u00B4\u00CC\u00E9\u00A4\\xa\u008F\\x0000\\x0010\\x0000\u0081\u00CC\\x0013\u00804I\u00A1aN\u00A8L\\x000e\u00B7\u00DA)\u009E\u00F2\\x00104-]\u00D3U\u00E1\u00F6\\x0004\u0094\\x0006\\x0002 \u00908\\x0002\u0090&\u0090&\u00E9$`\\x000f7I\u00C9\u00EE&\u0098\u00CD\u00C9\u00FC\\x000be\u00E2\u00CC\\x000c*\\x000c\\x0002~\t@\u009A\u00A4\u00D30\u00FB\u00ED\\x0007\u00E9\u00CB/\u009C\u00F5HA@\\x0006fs\u00D2\u00D7W\u00D1\"\\x0010\\x0000\\x0001\\x000b\\x0001H\\x0013H\u0093\u00D4\\x0012H\u00E5\u00C4G*\\x001b\u0085q\\x0019\\x0004@\\x0000\\x0004x\\x0002\u0090&\u00A95\u00CC\u00E8\u00E8\u00E29\u009D$\\x0007\u00C3\u00A6\u00D5\\x0015\u0084\u00BE\n\\x0002 \\x0000\\x0002\u0090&\u0090#\u0099  6\u00E4I\u008E\\x0018\u00B5\u00BBLR\\x0012@\u0083\u00F0\\x0011\\x0010\\x0000\\x0001\\x0010\u00E0\\x0008\u00C0k\u0092\t#\u009DY=\u009E&\u00C7\t\\&\u0099\u00ED\u00C6h8\\x0008d\u008D\\x0000\u00A4\t\u00A4I\u009A\t\u00A4\u00C9q\\x0002\u0097I\u00D6Fg\u00B4\\x0017\\x00042K\\x0000\u00D2$\u00CD\u00869\u00B3\u00DD\u009Ao\u00B8\u00D0q\u0092\u00B8\u00A5:\u00E2V$yr\n\u009D\\x0013\\x0004@\\x0000\\x0004\u009C\\x0008@\u009A@\u009A\u00A4\u009C\u0080\u00D0q\u0092\u00AC\\x0010\u008D\\x00144\\x0001C0\\x0008\u0080\\x0000\\x0008\u00C8\\x0013\u00804I\u00B9a\u0096\u00EF\n\u00A9\u00CD\u00B98\u009Fl\u0097\u0083h\u008F5\u00FChNj\u00BB+b!A\\x0000\\x0004V\u00E4!M M2A@\\x0018\u00A8A\u0092%\u00FE\\x0016.\u00B95\u008F?[\u00D4\\x0010\\x0004@ \u009E\\x0004 M\\x0012`\u009C\u00E2\u00D9u\u0092U+\u00A79\u0091\u0098\\x0007\u009D\\x0008\u00FD=p\u0099$\u00AB\u00EF\u00A1\u00B6 \\x0000\\x0002~\t@\u009A@\u009Ad\u0085@\u00E2\u00CC|\u00E2*\u00ECw\u00F4A~\\x0010\\x0000\\x0001\\x0010\\x0010\\x0012\u00804\u00C9\u008Aa\u00C6\\x0003@\\x0004\u0084\u0093#\u00F1tB8\u00EA\u0092$LB\u00A1\u00B3\u0081\\x0000\\x0008\u0080@1\\x0004 M M2D\u00C0iZ'n\u00EA\u00C4I\u0097$kaQ1\\x0003\\x0013\u00CE\\x0005\\x0001\\x0010\u00C82\\x0001H\u0093\\x000c\\x0019\u00E6,wt\u00A3\u00ED\u00F1W'\u00D0%\u00E8\u00A8 \\x0000\\x0002\\x0019'\\x0000i\\x0002i\u00929\\x0002n\u00EA\u00A4\u00AC\u00D3%.\\x0015\u008B\u009B_'\u00E3\u00E3&\u009A\\x000f\\x0002 \\x0010)\\x0001H\u0093\u00CC\\x0019\u00E6H\u00FBSR\n\u008F\u00A1\\x0008\u0088a\u0095\u0092r7QO\\x0010\\x0000\u0081\u0094\\x0011\u00804\u00814\u00C9(\\x0001\\x000f)PB\u00F7\u0089{M\u00E0/I\u00D9\u0098\u008B\u00E6\u0080\\x0000\\x0008x\\x0012\u00804\u00C9\u00A8a\u00F6\u00EC\\x0019Y\u00C8P~M\u00E0\u00B0S-\u00BF\u0092(\u00E6;\u00AFd\u00A1\u009F\u00A0\u008D \\x0000\\x0002%&\\x0000i\\x0002i\u0092i\\x0002\u009E\u00EADsZ,\\x000e\u0099\\x0012]\u00D7%\u00DC\u0095I\u0093DlV[\u00E2\\x0001\\x000b\u0097\\x0003\\x0001\\x0010\u00C8\\x0002\\x0001H\u0093\u0090MN\\x0016:M\u00CA\u00DA\u00D8\u00B9\u00C2[%0\u00A1\\x0010\u0082\\x0003\u0083\\x0014\u0089\u00C3o\u00E2X\u00F6\\\u0081.IY7Cs@\\x0000\\x0004\u00E4\td\\\u009A4\u00D5\u00F6\u00AB\u00A8\u00B8TO\u00C3\u00EAL\u00E0jr\u0085\u00AF.\u00CD\u00D5\u0085\u00FF\u0093Ku9\u00CB\\x0015\u00C3\u00BFD\u00A4\u00C2+\u00E2\u00FA\u00D7\u00D6V\u00AB\u00B7\u00A6zt\u0093|\u0087\\x000e\u009C\u00D3\u00E6\u00C3\u00A8{\u00EE\u0096:\u00A7\u00DF\u00AFQ|\\x001e~\u00FC(,\u00BF\u00D3\u0086o\u00F6\u00E3\u00BE\n\\x000f\u00DCd\u009C\\x0008\\x0002 \\x0000\\x0002\u00F1$\\x0000i\u00C2I\u0093~\u00B5M\u009C8\u00A8\\x001b\u00C6}\\x0015\u00BA4a\u00BA'\u00B9\u00D2\u00A4\\x0004\u00F5/\u00AD4\u00A1\u00E7\u00B30\u00C9\u00F2J\u00EE\u00D2\u00FFRq\u00A9\u00834\u00B1\u00BB7\u0098\u00F2\u00B0&\u00D5\u00D1\"/G\u00B4I\\x001c*'a\n5R\u00F9\u008B\u00C2A\\x0000\\x0004\u00B2H\\x0000\u00D2D\u00D3\\x001f\u00D5\u00FD\u00AA+.\u00AD\u00AE\u00AD5:\u0081\u00EAP\u00E9W\u00CD^\u00DC+B\u0096&u9VlR\u00A5I\u00D2\u00EB\u00EF\u00F6\u00A8w.\u00AE{\u008Et\u0089\u00B44\u00F1+>\\x001c7\u00CB\\x000fe\u00C2\\x0008\u00B2\\x0006\\x0004@\\x0000\\x0004\u0092O\\x0000\u00D2D\u0093&\u00B9a\u008A\\x001b#Wc\\x0018-\u00D5\u00FA\\x000e\u00CBi\\x001a\u00C2&M\u00BC|*\u00E6\u00A9\"\u00D3\u00AC\u0084n\u00D7\u009D&\u0092\u0094^\u00A5\u009F\u00DE\u00AF\u00B6n4i&\u00B5\u0092\\x0005\u00A7\u008E\u00A9\\x0004\u00AE\u00CE\u00E6\u00CA\\x001b\u00E5\u009B\u00BDA\u00AA\u00FB\u00CE\u00A5\\x0004Nv\u00E8~\\x000b\u00B38\u0093\u00A9?\u00D7\\x0004\u00BD\\x001a\u00E6y\\x0019\u00CF\u00AB\u00E4\u00F3V\u00AF\tw\n?\u00D7f\u0092w2y\\x0018%'\\x0002\u00DA\u00F1\u00DF\u00FD7U\u009D\\x0014\\x0004J\u00D3\u00EC\u00CB\u00F5#\u00EA\u00F1\u00DB\\x001fk2\u0089\u008CY\u00B5\u00B7\\x000b\u008FK8N\u00C2\u0089bI\u00FE`\\x0014O\u00C72j\\x0005\\x0002 Pz\\x0002\u0090&\u00BA4\\x0019\u00ADF6\\x0018vN5~\u00D5\u00A3kE\u00D2\u00C4f\u009B\u00AD!\\x0011V]\u00A2i\\x000b\u00ADp\\x0019\u00D3.(A3\u00ED\u00A6\\x0008\\x0018Q\u0094\u008CIO\\x0018sR\\\u00AC\u008CG\t\u00E2\u00D6q\u00DA(`\u00FD\u00CD^\"\u00CF\u00AB8K\\x0013Cr\t\u00B4\u0097D\u00B1d\u00C2\u00DD\\x0008\u0098J \u0081\u00F2;eZ\u00C7\u00AAK\u00CC\u00AAE\u009D\u00B5\t$M JJ?\u00E4\u00E1\u008A \\x0000\\x0002\u00F1'\\x0000i\u00C2\u008C7M\u00E5\u00A86Iw04)\u00BE\n:hH\\x0004\u00C3\u00B4\\x0017D\u0083\u00EE\u00AE0\u008E\u00E8\u00F3A\u00BA\u00E53\u00FC\\x0019\u00BA\u008B\u00C5\u00980\u00F2\u009C\\x0010\u00E1\u00A4\u0089\u0093W\u0080\u00BD%[\u00AFe\u00AD\u00B0\u00DA\\x0010>\u0098\u00D4vik\t\\x0005\u00DB\u00AC\u00FB9l\r4\\\\x000eN\\x0013R\u00F2\\x0004\n\u00FE$\u00DBU\u009C\u00BC&\u009C\u00824|W:jNX\u00E8us\u00CCc\u0096\u00A1\u009C\u00CF\u00CC\u008A\u00A8\u00B3&\u00A7h\u0094\u00FFR\u00F1\u00DC+Z\u00EC\u00C8\u00E2[\u0098\\x0007\u00A5z\u00F6,=\u009A\u00C4\u008F4\u0081\"\u0089\u00FF\u00C8\u0088\\x001a\u0082\\x0000\\x0008\u0094\u0091\\x0000\u00A4\u0089!M\u00F2\u00AA\rc\\x0012\u0084\u0099I\u00FAl\u0093&\u00E2\u00D8L\u009313\u00D4\u0080s(\u0089\u00BC4\u00E1\u00C3_\\x000c!b\u008B\u00891\u00AC\u00B5M\\x0013\u00B0\u0099\u008B\u00C2\u00A4\u008F\u0096\u00C1\u00B9\\x0004Cv\u00F0\u00D3@N\u00F2\u00C5A\u009A\u00F8 \u00E0r\\x0015Gi\u00C2\u00AF\u0096\u00B2\u00904\u00A4\u0089s\\x001ey\\x0002z\u00EB\u008C\u00E6\u00FC\u00EE\u00DE:\\x0016*\\x001b$\u00BEU\r%\u00C1\u00D2\u009B2\\x000ev\u00B84\\x0008\u0080@R\\x0008@\u009A\\x0014\u00A4\t\u00B3@\u00AA\\x00157<(NN\\x0008\u00B3b\u00E0BC\u00945>\u0082)\\x0015K~yibZ\u00B4\\0\u00F9\\x000e\u0093\\x001az\\x0006\u00CB\u00E5\nQ\u009F\u009E%\\x0014\u00820x\u00D9\u00E1S\u009A\\x0004$`\u00B9\u008AK\u00ACI!\u00AE\u00A2\\x0010\u0094\u00A3\u00AE\u00AE\\x0012\u00825\u00E5\tB\u00C0\u00E1\u0086\\x0016\u0096\u00E4\u00E8\u00B2\u0083\u00A9\\x0016-\u00E9kv\u00922\\x0016\u00A0\u009E \\x0000\\x0002 \\x0010\\x0013\\x0002\u0090&\\x0005i\u00C2&G\u0094Y\\x000cf\u008A\\x0014\u00DB,)M\u0098\u00C7\u0085[\u00C8#\u008Cf(\u00C4\u00D2JK\\x0013\u00B7\u00F5\u00CC\u00FC\u00DAfm*\u00CAS\u009A\u0098\u00A3w\\x0005%\u0084#M\u009C\u00E29\u00DC\t\\x0004\u0091&\\x0016\u00F2b\u00B0\u00FC\u00DD)\u0092\\x0000\u00B7\u00D5M\u00E8\u00EB\u00B6\u00B2\u00B8D0&\u00E3 \u00AA\\x0001\\x0002 \\x0010+\\x0002\u0090&\u009C\u00A4`\u008AD_\\x0014\u00C3\"-,\u009A\u00C3\u00C1\u00F6[\u00DE\u00DD\u00CD+\u00909\\x000f\u0087\\x001e\u00BD\\x0011P\u009A\u00E8Ww\u00DC\u00FF\u00CDS\u009Ax\u0096\\x0010\u009A4\u00D1\\x001c\\x001bN+\u0095D\\x0004\u0082H\u0093\u00C0^\\x0013\u0097=\u00F4\\\u00EE\u008E\u00CB\u00C2+\\x0008\\x000b\\x0010\\x0000\\x0001\\x0010\\x0000\u0081p\\x0008@\u009A\u00F0\u00DE\\x000ef\u0093r9\u00D5\\x0005\u00C2\u00E23\u00AC\u00EE\\x0010\u0089X\\x0013E{R6\u0093\u00C3\u00C3!$\u00C2q_\\x0013\\x0007\u00AD#\\x0008%1\u00F7\\x0003A\\x0006\u00B5(\u00C7\u0090O{7\u0092\\x0010\r\u009Ea\u00B0\u00C1\\x0008HJ\\x0013\u00D3B\u00EE\u00C0\u00B1&\u00FCBq\\x000b\\x0004\\x0011\\x0001\u008F\\x001b\\x001a\u00CE\u00D3\\x0018\u00AB\u00B7\\x0016T\\x0006\\x0004@\\x0000\\x0004\u00CAE\\x0000\u00D2\u0084\u0097&\u00FC;\u00B1\u00F6Vm\u0095&\u0085)\\x001e\u00C3\u00B6Y\u0097\u0096\u00D8\\x0016\u00C5\u00D8\u00D7\u00C1:yYl\u00EE\\x0016\u00EB\u0096$\u00B60O\u00DD\u009C\u00DBV\u00D3\u00E8^\\x0001cj\u00C9\u00BAt\u00D9\u009A\u00C1\u00CD\u00A3\u00E3\u00B4\\x000eH\u00B0c\u008A\u00D2\\x0004\t\\x0002\\x0012\\x0002(\u00EA\\x0015:\u0086\u00C4qbhZ\u00AEe\u00DE2\u00DF\u00AEPK\u00BEwm\u00B9\u0086\\x000c\\\\x0017\\x0004@\\x0000\\x0004\u00A2&\\x0000ib\u008A\\x0011)\u00C4H\u00EAf\u00C9&M\u0084Q\u00AE\\x0005/\u008Bz\u00C3\\x001c\u00F65\u00E1\\x000c\u00B9)\u00E2A\u00E0;q\u00D6.\u00C2(\\x0016^\"\u0088\u00F75\u00E1\\x0002c=J\u0090\\x0010\r\\x0005g\u0092\u00D3\u009E\u00B6\u009E\\x0004$\u00AE\u00E2\"M,Q\u00C0\\x0005\u0080\u00CE\u00FB\u009A\u0088\u00A2zM\u0081#nw\u00C7\u00B39v\u00F5\t?\n\\x0008\u0080\\x0000\\x0008\u0080@@\\x0002\u0090&\u00E6\u008DV\u00AD>\\x0006\u00C3\\x0001`\rM\u00F0\u00DA\r\u00B6\u00E090\u00EF\u00B7&\u00DA\u00B0U\u00E0{pu\u00ABX\u00C4\u0087@\u00D9\u0098-\u00B4\u00BD|\u00B7\\x0012$D\u0083e7U/\u00DF\u0089\u0088\u0080\u00C4U\\V\u00E8p\u00F5\u0097\u00D9dV\u00F0\\x0003\u0081\\x001e\\x000c9\u00806\u00DF\u0089\u00F8\u0086\u00C2k\u0082\u00EDhA\\x0000\\x0004@ $\\x0002\\x0019\u0097&\\x0001\\x0005]\u00D4\u00BE,\u0094/\"\u00E0\\x0019;\u00EC\u00B4x\\x0018w\\x0019\\x0004@\\x0000\\x0004@ I\\x0004 M\u0092t\u00B7\u00B2-Y M\u00D0WA\\x0000\\x0004@ \\x0013\\x0004 M2q\u009BS\u00A1i M\u00D0WA\\x0000\\x0004@ \\x0013\\x0004 M2q\u009B!MRA\\x0000}\\x0015\\x0004@\\x0000\\x00042A\\x0000\u00D2$\\x0013\u00B7\\x0019\u0086\\x0019\\x0004@\\x0000\\x0004@\\x0000\\x0004\u0092B\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004@\\x0000\\x0004@\\x0000\\x0004@ F\\x0004 Mbt3\u0092\u00A2gQO\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\u008E\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8fD\u00A7@Q2\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008$\u0085\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f$E\u00CF\u00A2\u009E \\x0000\\x0002 \\x0000\\x0002 \\x0010\\x001d\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\u00804\u0089\u00D1\u00CD\u0088N\u0081\u00A2d\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H\n\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\u00804\u0089\u00D1\u00CDH\u008A\u009EE=A\\x0000\\x0004@\\x0000\\x0004@ :\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0011\u009D\\x0002E\u00C9 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x0014\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\u0091\\x0014=\u008Bz\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080@t\\x0004 M M@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004bD\\x0000\u00D2$F7#:\\x0005\u008A\u0092A\\x0000\\x0004@\\x0000\\x0004@ )\\x0004 M|H\u0093\u00BA\u00FA\u008A\u008AV.\u00D5\u00D7\u0099os]\u008E}k=\u00EE\u00E3\\x0012\u00E2~\u00F3k\u008E]7\u00F7\u00ABsQ2yV\\x0014]\\x0013{\t5\u00B9\u008AK+\u00F8\u0094\u00AB\u0089\u00E0*Q\u00D4\\Xfmm\u00F5\u00A5\\x0015\u00D5\u00A3\u009B\u008A}\u0080\u00C3*G\u00A6\u00E1\u00A5\u00BC\u0096\u00BD>\u00E5\u00BD\u00BA\\x000c\\x001f\u00C9<|C\"jTD\u00C5J60p\u00B6\u0098V\u00BB.G#\u00CF0\u00CB \u009C\u00E4\u00C1'\u00F0\rJ\u00E3\u0089\u0090&r]Y7\u00FC&i\u00A2\u00C8\u0085\u00EA\u00DAuF\tY\u0093&\u00EA\u00D0 L\u00FDj\u009B\\x0012\u00FA\u00B4\\x0004\\x001f\u0085\u009Bj\u00FBq\\x0003e\u00F0r\u00E4:$\u008F\u00B7\u0094\u00D7\u008AV\u009A\u0098\\x0019\u0096\u00B8\\x000bE\"M\u00CA\u00D7+\u008A\u00A2\u0097\u0088jC\u009A\u00F8\\x001f+\u008A\u00EA\\x0015%\u00BD\\x001c\u00A4\u0089\\x0004\u00EEu\u00B5\u00D5\u00BC\u00B3\u00C4\u00FA9W\u00A7\u00DD\u00EFLI\\x0013u\u00F0Rt\u0089\u00D1|FR\u00D7+\u0099{\u009B1\\x000f\u0094\u00A5\u0094\\x000b\u00A5\u00BCV\u00B4C[Y\u008DM$\\x0018\u00CB\u00DA\u00A2\u00E07\u00AB|\u009D\u00D9G\u009D\\x0013\u00CAV\u00C2\u00E2\u00F8\u0080\u0090\u00DA\u00D2 M<omS\u00ED!}\\x0012\u00E7\\x0010\u00E7\\x000c\u00E0\u00F4J\u00F5\\x000e\u00E6\u00FF\u00E7\u00A4\t\u00AFf\u00F8\u00B3,\"\u00C6i\u009A\u0086?\u009D\u00A6\u0087\u0084\u00935\\x0012y\u009AvT\u009B\u00DC<\u00A6\u009A\u00E8\u00ED:T[gd\\x0013TU\u00CC\u00A7it\u00B5\u00A2K\u00C4\u00FA\u0083\u00A9\\x0016\u008Bd\u00F1\u00E4\u009C\u00F4\\x000c\u00E5\\x001b\u00CD#\u00B1\u00A9e\u00B9\\x001de56\u0091`,k\u008B\u0082[\u00B8\u00F2uf\\x001fuN(\u00DB\u00B2<Y\u00C9\u00BB(\u00A4\u0089\u00D7=3\\x0014\u0080=\u0082D\u00FD\u008A\u008B\u00FF\u00D0\u00A5\u0089\u00DD\u00C5\u00C2\u009B|\u00E1\u00DC\\x0010_\u00B8\u00E3\u00E4\\x0011w-\u0089<\u00D6\u00C8\\x0018V\u00ABBM8\u00C9\u00A5WX\u00D7X^LVx\u0089\\x000f\n@1T\u008B:\u00E2\u00E7jt/\\x000b\u00CD\u00F5\u00D8m@\u00E1\u0088\u009A\u00CD2\\x001f\u00A4\u0095\u00A0\u00D7J\u00FD\u00D3\u0098H2\u0085\u00B6\u00D8\u00AF\u00C5F:\u0097S,C\u00A1\u00B5n\u0086sH\u00BD\u00A2\u0093+\u00C8^\u00BEQN!\\x0016\u00A7\u00BA\u00B6\u00D6\\x000cV\u00BEV\u00AC\u0092|X\\x000f_\u0093P\u00AE\u00E5Q\\x0019g\\x000e\\x000ewS|\u0083\u0094\u00868\\x0014%G\u00A3n\\x0018?\u0087\u00C8#5\\x000c\\x00157\u00CFh\u00BA_^\\x0019\u00DC't\u009C\u00E0\u00AB\u00B7F\\+\u0097^a\u00F4:s\\x001eS\u0090\u0093^\\x001f\u00ED5@\u00E9\u00F3\u00B6.$\u00EA\u00BD\\x0006\u00F9\u0080\u00A5E\u00DA\u0099m\u00BDEE\u00C7\u00B5\u00CB\u0092\u00C1\u00ADWx\u00DDP\\x001f*\u00C7s\u00C4C\u0086R\\x0013\u00804\u00F1\"\u00EE#\u00BC\u00B4 M\\x000c\\x001b\u00AF\u00EB\\x0003#$\u00C56\u00E9c-\u00DF(D?\u0085\u00F3\u008E\u00E82H\"\u008F~\u0096\u00A1\u009Ct\\x000f\u008AQ\\x0013N\u009A\u00F8\u008D\u00DBe\u00E3\u0085\u00E4\u0094\r\\x001bk\u00FA\u00A9^\\x0016\\x0016a\u00EA&M\u00F2\u00EA@l\\x001a\u0082\u00D5\u00C1K\u00F3\u00C1p\u00C34g\u00A2\u00CC2\u00C8t\u00AD\\x0015\u00AC@[L\u008C\u00AB\u00C8\u00D0\u00C7tQ0\u008D0\u008C\u00C6i4\\x001f\u0096\u00E3U\\x0014\u00DF.\u00B5\\x0012\u00B6\u00C2\u00D2\u00EA\"\u00AE\u00E5U\\x0019W\\x000e\u00E6\u00BB\\x0019\u00BC(oib\u00D64\u00DA=5\u00BA\n3T9k\u00FCS\u00E1~yep\u0096&\u0082F\\x0015\u00FA\u008Fs\u00AD\u00BC\u00A4\u0089Lg\u00B6u]Gu\\x0012Zi\u00D1vf\u00CB\u00BB\u0087\u00D6\u00B5\\x000c\\x0015\u00C5?\u00FER}\u00C9\u00ED\u008E{\u008D\u00ED\u00D0.1&\\x0000i\u00E2\u00D1}m\\x0016\u00DD%\u00BF\u00A1\\x0018\u00B8\u00B9\\x000c\u008B\u00F2\u00D0\u00FE\u00E4\u0083gu\u0089\u00C0\u00F4\u0081H\t\\x0019\u00F32\u009A\u00CE\u0090\u00C9c\u00EAs\u00BC\u0083\u00C4.M\u00F8\u00CA\u00C8=\u00CCvm\u00E1\u00D2\u00C5\u00B5\u0091\u00CE\u00F9\u00C5H\u00F7jh\u00C3\u0093\u00B5p\u00CEmk/J\\x0005\u00D7|'\\x000e\u00D72k\\x001d\u00CD\u0096\u0088W\\x0012\u00F1WW_\u0094\u00F9WO\u00EB\\x001b\u009E\u00A9\u00D5\\x0002\\x001f8:{\u00B1v\u00AC\u00A7\u00A5!\u00E2\u00B7a\u0083\u00A1\u00D9k\u00A5\u00DB\\x0012\u00A3\u00AA\u00FE\u00AE\u00E5I\u00D5\u009D\u0083\u00CD\u00A2\u00BB\u00D1\u00F6@\u00EA\u00EA\u00A2g~\\x000b^S\u009AJ\u00D3\u00F5\u0093E\u008B\\x0018\u00CC\u008D((\u00A7\\x000cN\u00D2\u00C4\u00CA\u00C7\\x000c_\u00A6V\\x0016\\x0011\u00A9\u00AD\u00FF\u00D2*\u00CC\u00F5C\u00F3\\x0011\u00FD\u00B6\u00EA\\x0019\\\u00FB\u00AD\u00DE\u00BA0K3W;\u00AC\u00CE\u00AC\n\\x000e}\u00844d\u0090v-N\u00B8xvKAX\u009B;\"\u00B9\u00C1-\u00C6\u00D6\u00BA\u00D8e\u0083\u0089j\\x001a\u00A4I\\x0004\u00D2D4;\u00C3T\u00855\u00F8\u0083\u009F\u00FAQ\u00A7Z\u00C4J\u00C8\u00ACEd\u00F2(\u009DX\\x001c\u00BDk\u0097&\u00FE\u0083B\u0084\u00D2\u00C4\u00B6\u008A\u0098\u0097\\x001a&\u008B\u00E2\u00EA5\u00D1\\x001c\u00FE\u0086\u00FDP\u008Be\\x0003\u00AE\u00DD\u00A1R\\x0008\u00BCeC\u009B\u00CD\u009D\u00E3}\u008A\u00CB\u0084\u008E\u00D1\")\u00FF\u0090H\u009A\u00F0.\\x0016\u00CE\u008E\u00FA\u00AE\\x0015\\x0007A0<\u00B1V\\x0007\u00BD\u0096we\u00DC9pw\u00B3\u00D8\u00A2\u0098\u00B1\u0091\u00A1\u00CD\u00BD\u00D9\u009B\\\\\u00A2\u00A9@\u00BD@\u00B5p\u0097\\x000cN\u00D2\u00C4\\x001d>\u00DF\u009Cj%\u0094&6\u0095f\u00ED\u00C0v\u00DF\u00A4\u00F0\\x0014n\u00B2\u00CF\u00BA\u00E8\u009D/\u00C1Wi\u0096\\x001bQ\\\\x0007\u00B3\u00F6X\u00CB\\x0013\u00DD\u00AF\u00B6\u008E\u00C4\u008Av_\u0094{\u00C4Z\u00E1\u00DD\u0097X%\u00DD\u00EE8\u00B4H\u0082\t@\u009Ax\u00DD\u00BC\\x0000\\x0013:\u00CE\u00D2D\\x001c\u00FF\u00C1E\u0081\u0088e\u0087yvF&\u008FY\u0097(\u00E2\u00C3qBG:\u00F4\u00B50\u00C4\u00D8\u00879K$\u00841wc\u00F1\u0088p\u0091\\x001f\u00C2\u0089p\u00ED\\x0012\u00CA\u00E0\u00A5y\\x0008\u00F8\u00D9\\x001c\u00F3\u008C\u00BEy\u008E\u0086\u008DP6\u00D1\u00E3}\u008A[\u00AC\u0089\u00C0W\u00EF\u00BCk\u008BW\u00E4 W7\u00BF\u00B5r\\x0018\u00A6M\u00C17N<=\u00AF\u00E5\u0099\u00C1\\x001a\\x001d\u00A2\u00DE\u00DC\\x0002\\x0007\u00EDrG\u00EA!M\u0084\\x001e~\u00934\u00B1\u00CA\\x001a~\u00FA@X\u00B8\u00F55\u00DD\u00EE\u00BA\u00F3\u0080\u00EF0c(\u00AE\u0095\u00B7\u008Cs\u00A8\u008F\u00D3\u0083\u00A3\u00F7^\u0087J\\x0006,M[g'v\u00F6\\x0014\u0082\u00B7X\\x001b%\u00FA\u008Fe\u008C-\u00E8\\x000f\u00E5\\\u00BA\u008A\u00F1\u00BCs\u00AAE\u00A2X\u00AF\\x001b\u009A('A\u00A6<\"\u009D\u008B\u00F3\u009D\u00F3M\u00A9u~\u00DEH\u00EC\u00ABE\u0095j\\x001a\u0090_?\u0094\u00C2\u00EC\\x0002\u00A7\u00E5u\u00FB.\\x001b<\u00A3\u00E7\u00C8\u0095\u00FD\u00C7\u00ED\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj\u00F8\u00DC\\x0006\u00FA\u009B\u008E\u00EEj:\\x001b\u00B8\\\u00E5\u00C4\u0082z*KW\\x000b\\x0010\\x0006\u00EB\u00ED5qtT\u00C8xD\u0082\u00E5\tS\u009Ax\u0086\u00C1:\u00BD\u0080JJ\\x0013\u00F5}H\\x001d\u00F8L\u00A3\u008F\u00F7h\\x0015\u00B24\\x0011\u0084\u00D0Z\u00A6x\u00B8\\x0001%\u00C5\u00D2\u00C4\u0095\u0083?i\u00E2\u008ETbB\u0087\u008F\\x0006\u00B5O\u00E8\u0094^\u009A\u00D8\u00C3\u009C]j\\x0005ibD\r+\u00EF\\x0012\u00CA\u00EDV4\u00AE\u008A\u0085>\u00F0s=\u00DE\\x000f\u00BB\u00D8\u00C7&\u008A\u00A3/\u008B\u00E1\u00C0E9\\x0002\u008A\\x0016Q\u00E5\\x0008/A\u00DC?V\u0099g\u00A9\u00A6BI\u00EBY\u00F2-SR,M\u00C8\\x000c\\x0007X<l\u00DC\\x0015q\u00AC\u0089\u00F3\u00BE\u00AE2q$\\x0012yt\u00F7LA\\x0003\u00D9\\x0002r\\x000b\u008B\u0087\\x0003l\u008F\u00E6\u00BAx\u00D8\u00EC\u00BDp\u0098\u00BEq\\x000e\\x001a\u00D0\u0097<\u00D0\u00E0\u00C5\u00B9O\u009C}\u00BC\u00DC;\u0099\u00EDZ\u009E\u00AF\u00BC\u00D6\u0097\\x0015\u00E1\\\u0095q7\u0099\\x001d\\x0012o(\u00E7C\u009A\u00F8\u00AE\u0095\u00C4\u0084\u008E\u0093\u00D7\u00C4\u00F3Z\u009E\\x0019\\x0004\u00EFs<\\x0007os\u00EB\u00EA\u00984!u\u0093&\u00BC\u00FF\u008C\u00F3\u00AE\\x0019\u00C1@\u009E\u00EE}\u00AF\\x000c\u0081&t\u00A4jU\u00C4\u0084\u008E\u009Bs\u00917~r\u00D3C\u00B2\u00A5\u0089&t\\x0002w0\u0087\u00FE\u0093\u00ABS\u00803\u00E7(\u00DB\u00E1\u00AD\u0096\u00DF\u00B4P\u00A2[z\u00DDP\u0088\u0083\\x0018\\x0010\u00F0\u00ABH\\x000c\u00BDb\u0091&L\u00A0\\x0014d\u008A\u00ACFI\u00B34q\n\u00DA0v\u00ACw\u00DDr\u00CDq\\x0001\u008E~\u0096\u009E\u00C1\u00BA9\u008A\u00B1\u00CFl\u00A0\\x0015:FP\u008BVla\u00B1\u00B1-\u00D6$\u00C0\u0084\u008E\u00D2\u00E3\r\u00CF\u00BCu\u00C9\u0080\u00E1uw\\x0008k\u00A5sY\u00B8\u009F~\u00A2>Co\\x001a\u00FBTQ\u0092\\x001bfLB\u00F3o\u00DB&\u009F\u0093I$9\u00C9 \u00F3&+n\u00BA\u00CAjh\u00CD\u009B\u00D6\u00DB'\u00DD\\x000b\\x000f\u00BFy\u00A0t\u008F\u00A7\u00D1\u009A\u00EC\u00DC\\x0010q\\x0018l!?k\\x0002\\x001fT\u00EBhu<\u00AF\u00E5\u0095\u0081]\u00CB^\u00BE&\u00D1l\\x0016\u00DD\u00B2\u00A5\rO\u00DB\u00A3(a\u00F4\u0080\u008E\u00C2\\x0014\u00DB\u00CBM Z\u0097S\\x0015\\x001c'\u00968S=N\u00D6)\u0083\u00934\u00B1\u00F1\u00E1\u00E1K\u00D5\u00CA\u00D0\u00B2\u00A6^!\\x0015\\x0006\u00EBOL\u00F0\\x0013m\u0096\u00C0X\u00F7\\x000ei\u00B5aQvfc\u00E2\u0095V\u00ED\u00E9d\\x0014\u008C\u00FD\u00AA\u0099\u00EFD\u00932^\u00DDR\u00B4\u00BB\u00A3\\x001d\u00A9\u00D7|}\\x000c\u008Cw*\u00A7r\\x0002+\\x0012\\x0019iR\u00D0(\u00DE\\x0002%\u00DD\u00D2\u0084\u00BA\u00AF\u00C4>\"\u00A6-\u00D7\u009C\u00BC&NEyn|b\u00D9\u009C\u00CD\u00B3>\u00CE;\u00D8\u00EA\u00CB\u0089\u008B\u00F2\u009A\u00A8\u008F\u0093p\u00D9\u00A4\\x001e\\x0002\u00E22Qm\u009B\u009F\u00AEV\\x0017\u00BE\u009A\u0083\u00F8\u00B4Q\u00C6\\x0012\u00D9'^Oh\\x000e\u00F8\u00F7w\u008A[\u00AC\u0089n\u00CC\u00A4~$\u00A8@\u00C3\u00F0Q\u00BB\u00D8\\x0015\u008F\u0086\u00D8FLA~\u00B1\u00C1\u00B3\u0086\\x0002\u00E8\u00DE&\u00FBO\nX\u0085\u008Em\u009D*\u00A7\u00B9E?G \\x0014F^\u00EDrGjfh\u0081`\u008B\u00B3\u00D6*\u00AC\u00F54fM\\x0015\u00F3fj\u0088E\u0088\u00B8dp\u009E\u0085t\u0083\u00EFQ+\u00D7^!<W\u00FA\u00B6\n\u00C3K\u00AD71`i\u00D1v\u00E6\u00C2\u00D0a\u00DC\\x001d\r\u0085\u00E9=G\u00AA/\u00D9\\x0017\\x000f[\u00D6u'\u00F7G3\u0092)\u009B:W(s7\u009E\\x00137J@\t\u009B\u00E5QS\u009E\u0092\u00DA^\u00E3\\x0008E\u0099(I\u009F\u00D0\u00E1\u00BD&\u0096\u00CF\u00AE\u00B3<\u00A9\u0097&l\u008A4\u00C0\u00CF\u00FByn\u00E4*\u00FC9@\u0089\u009D^M\u0081\u00AE\u00C2\\x001dc\u00AD;\u00D2\u009AW)\\x001b\\x0013U\\x0001\u00BD&\u0096\u0097\\x001b\u00D1.#n\u00B1{\u0085\u00B1O\u00BC\u00D3\u0089c\u0088\u00BEu\u00FF4\u008F\u00B5?\\\\x001d\n\u00A3\u00B6\u00CB\\x001a\\x0010\u00EB\u00CB\u00A5E~\u00B9\u00AEf\u00D2-\u008D\u00E7\u00DE-\u00E6\u00F7B\u009B\u0098s\\x001a\u0092xK&\u00DCr\u00CD8\u00D1\u00D1{\u00E4|-\u00DDwe\u00B6\u00F7\u00C6K\u00A73\\x0007\u00DF\u00D7rE\u00CA3\u00B4s0\u00D9r\u00BA\\x0017\u00FC\u00CB\u00BD>\\x0019\u00C45D v\u0089\u009BS\\x0006\u00F7\\x0000)'\u00F8\u009C\u00FFF\u00FF\u00DD\\x0006\u00B3\u00CBA\u00A2W\u00B8\u00EC\\x001f(\u00ED5\\x0011\\x0004\u00F1\u00D8w#\u00F4Q\u009AD\u00B5\\x0005\u008E4C\\x0017z-\u00B32\u00B9\u00FDt?\u008A`\u00AA\u00D4\u00AD[z\u00DEq\u00C4\u009D\u0094\u00DAi\u00E4\\x001eM\u00C2\u00E4\u0088\u00A4\u0097\u0088_\u00A1C\u00E2CI\u00DC\u009C\u008E]\u00A98\\x0008\u0094lH\\x0013I\u00A6\u00C8\\x0016\\x0006\\x0001\\x000c+\u00B2\u00CFp\\x0018\u00B4Sp-\u008F\u00D5=\u00D6U'\u00C9|%\u00C5\u00BD\\x0006\u0081x\\x0012p\u00F1\u0094\u00F8R$F\u00EB\u009C\\x0016\\x000f\u0093\\x0004q\u00F2\u00A0\u0090v\u00B1\u00AD\u00E5\u00814\u00C1H\\x0017.\\x0001\u0097-\\x001c\u00C2\u00BD\\x0010JK\t\\x0001H\u0093\\x0014\u00E8K4!\u0091\\x0004\u009C\u009C%t\u00DC\u0098\u00A9\u00F1\u00AB\u00A8\u00DC\u00F75qq\u00A2\u0098\u00DD'\u0090&)\\x0019\u00DFc\u00F0`\\x0014<\u00E7\u00FE\u00F7\u0082\u00C3]\u00C8.\\x0001H\u0093\\x0018<\u00BC\u00D9\u00ED~\\x0019\u0085O\u0091%\u00C2\u00B0\\x0012E\u0094\\x0014\u00D7\\x0019d\u00B6\\s\\x0012(\u009C\u00FB\\x0004\u00D2\u00A4\u00B8\u00DBP\u00E4]L\u00D5\u00E9\u00DA\u00EC\u00B2\u00D7/\u0099\\x00018\\x0008\u0098\\x0008@\u009A\\x0014k\\x000cR5\u008C\u00E0\u00E9\u0088\u009E\u0080p\\x0012\u00A7\\x0018O\t\u00DF\\x0003e\u00A4\t\u009B\u00BE\\x0011N\u00F1\u00E8\u00EA\\x0004\u00D2$\u00FA~\u0080\u0081\\x0003\\x0004@\\x0000\\x0004@\\x0000\\x0004\u00E2@@\u00ACK\u00A4\u00A3\\=\u009B /M4\u0081\"\n\u0092]?\\x0014\u00D2\\x0004\u00D2\\x0004\\x0004@\\x0000\\x0004@\\x0000\\x00042@ j]B\u00C2\u00C5\u00AF4qp\u009F@\u009Ad\u00A0;z\u00EA\\d\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H7\\x0001\u00BB.)>\u00B2\u00C4N,\u00804\\x0011\u00A9\\x0013H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H5\u0081\u00D2\u00E8\u0092`^\\x0013c\u00E50\u00B7\u00BA\\x0018\u00D2$\u00D5\u00DD1\u00DD/\\x0001h\\x001d\\x0008\u0080\\x0000\\x0008\u0080\u0080'\u0081\u0092\u00E9\u0092\"\u00A5\ti\\x0014]\u009D\u00A4Y\u009Ap?\u00EFg\u00DF\u00B9\u00D5\u00B4a|&\\x0017\u00BB~_[\u00BD\u00B0\u00A2b1\u00FD\u008E\u00A8m\u0081\u0080\u00FAU\u00F5\\x0012\u00E5\u0097\u00D3\u00F3\u00FC\u00E7\\x0010e\\D\u00C5\u0086XC\u00C7\u00A2\u009Aj\\x0017\u008B\u00B95-\u00A9\u00AEXX\u0091[\u008E\\x0005\\x0017 \\x0000\\x0002 \\x0010\\x0017\\x0002\u00F6u\u00C2Q\u00CC\u00E3\\x0018\u00F2(\u00D8\u0084\\x000e\u00BF\u00E5\u009A\u00AAN\u00B2#M\u00CC\u00DB\u00BA\u009B\u00B7\u00AE\u00CF\u00A24av\u00B4bau\u00ED\u00F7Y\u0090&\u00AA\u009E\u00F8\u00A6\u00CE\u00F3\u00F5B\"\\x0003\u00A4I\\\u00C6\\\u0089\u009B\u0085\u00AA\u0082@\u00D6\tX\u00F6U\u008BT\u0097\\x0014\u00EF5a\\x001a%+\u00D2\u00A4\u00FAPu\u0085\u00F1\u0083\u00C0\u00CA\u00DB\u00B0\u00EAP9T]\u00AD\u00FE\u00F6^Ek\\x0006\u00A5I]\u008Et\u00C979\u00F5\u00FF6\u0083]\\x0002\u00AFI)\u00DC\\x001b\u00FC\u0090\u00C4\u00DA\\x000bi\u0092\u00F5a\\x001aj\\x0006\\x00042E\u00C0>\u0095\\x0013u\u00F3\u008B\u00F7\u009A\u00A8Q\u00B1\u00D9\u00F0\u009A\u00E4\u00EAs$A\u00F4_\u00EE\u00A5\u00D1\u00B9.\u00A7L\u00F1\u00E4\u0094\u00FF\u00DB\u00A4I\u00D3\\x000e\u00D21\u00EC\u00B8\u009A\\x0004\u00BF\u00A2\u00A7\u009E\u00EE\u0096!\u00F6\\x0006`y\u008EM=\u00D4}#r\u009C@\u009A\u00B8)'xMb\u00DF\u00BDK-|\\x0001\\x0004\\x0004bJ\u00C0\u00B2\u00E5k\u00D4\u00BA$,\u00AFI\u00BE&#\u00D2dG\u00AD\u00E2 \u00A1\u009F\u00F9ec\u0096\\x001ahR\u00BD\u00A3\u00D6.M\u00AC\u00BFQlW'\u00FC\u00CF\\x0002\\x0017\\x0004J\u00B2\u00FC.\u00AAq]\u00A8\u00D6Y\u00D5(ZX\u00891\u00A0\u00FB\u0090&\u00AC(=\u00F1n\t\u00BD\\x0010}\u00E6\u00C8\u00AC\u0081L\u00B1&\u0086KC\u00FD\u00C0\u0092\u00C9\u00C3\u00E1\u0099A\u00BD\u00AD,zFO\u0085\u0098\\x000f\u00F1q\u00E7\u009A{\\x00186?\u00D2\u00C4|i3g\u00A5Q\u00CA\u0091B\\x001e}r\u008D;\u00CB\\x001a\u00B9\u00E2\u00D4F\u00A5\u00CER\u0094T1j$\u00DBt\u009E\u00DA\\x001f\u00B4\u00B4\u00B8\u00B6N\u0099\u00F53\u00E7q\u00AB@LG\u00E7\\x0012\\x000c\u00C7\u00B8\\x0004\\x0008\u00C4\u0090\u0080u*'\u00BC}\u00D5\\\\x001a\\x001b\u008A\u00D7$#\u00D2\u00A4\u00BAv\u009D\u00EA\u00E7\u00D0\u00FD\\x001f\u00AA_\u0084\\x000e\\x001aq\u00B2\u00BA\u00B0\u00D0e\u0087\u00E1_\u00D1=(\u0094\u0099\r\u00BB\u00D6S\\x000c\\x0017K\u00F5\\x000e5h4\\x0011\u0089Y\\x0017\u00CD\u00F635`\u0096V\u00B2\u00D2\u0084S\\x0012\u009C=\u00D3\u00E2j\u00CD6L7x&\u00EB\u00AB\u009Bjnv\u0089\u00D3\\x0016\\\u0088\u00AEg\u0086<'\u0080lRI`M]k\\x001e\u00924q\u00AB\u0092\u00AE$\u00AA\u0097\u00D4\\x0016\u00D4\\x0018\u00BB\\x0011Vn\\x0005e S\u00A06I'\u00C6hVcZ\\x001e\u00AF\u00F29i\u00E2U\u0081\u0084\u00F4\u00FFD<\u00A4\u00A8$\\x0008\\x0014G\u00C02\u0095\\x0013u\u0088I\u0088a\u00B0j\u00B8I&\u00BC&\u008A\u00B0P\u00DD!\u00CC\\x00003yA\u009Fm\u00D2\u00C4\u00D4\\x0015\u00F8\\x0005>\u00BA4\u00D1\u00D7\u00F5X\u00E6\u0086\u00B8?\\x00130:[&q\\x0004\u00EBJ$\u00A5\u0089\u00CD\u00E3b*Y7\u00B1\u00FA{\u00BFf\\x0017\u00B5?\u00ED^\\x0013\u00D3r!M:\u00E8\u00E7\u00EAJ\u00A2\u00B0\u009E\u00C8\u009CA\u00BB\\x0016\u00FF~o\u00BE\\\u00C1\u00A3\u00A0\u00DE \u00F7\u009A\u00CBH\\x0013\u00DE\u00F6\u009B?[\u00EA\u00CC\u00B9=\u00C4\u008D2\\)\u0086\u00E17\u008E0\\x000f\\x0007\u00BFT\u00CA\u00EC\u00C3\\x0010\u00B5\u00D1\\x0005#\u00F3\u0088\u00F0\u00EE(\u009E\u0083\u008D\u00A15P\u00DA\\x001br\\x0002:2^\\x001e\u008A\u00B3Ih#\\x0008\\x0010\\x0001\u008B\u00CB\u00A4dL\u00E05\u00F1\\x001c\\x0007\rm\u00A1\\x0008\\x000b\u00E6\u00DEP5\u0084\u00E1A\\x0011I\\x0013\u00F1|\u008D&MlN\\x0014\u00CF:\u00C40\u0083j \u00F95\u00C3\u00F6U\u00C4~\u00A4\u0089m\u00F2Eo\u00B2\u00C97c\\x0013\\x0004vibY\u00C6lw\u00ED8gP\u008D\u00A8}\u00A9\\x0011\\x001f\u00FAj\\x000e\u00835\u00A6-\u0082\\x0004\u00C6\n}\\x000f\u00B6\u0089$\u00E7\u00992\u0093\u00BF\u00CA~#D\u0093b4\u00AC\u00C8\u00B6\u00D1\r#\u00D7\\x001b9\u00DF\\x000c\u0093>\u00C2\u0095\u00CF\u00BC\u00D6\u0094\u00A8@\\x000c{;\u00AA\\x0004\\x0002Y$`u\u0099\u0094d*\u0087\u00A9\\x001fH\\x0013\u00CF\\x000eg\u0092&z|IS\u009E\u0089\\x000f%\u00EE\u00C4qB\u00C7\u0088\u008D\u00B5h\u00914H\\x0013>\u0098\u00C0\u00F4\u00BA\u00CF\u0099vIiB\\x0000\u00F9@\\x0013\u00B54K\u0084\u0087)\u00BA\u00C2\u00B1X\u00E1\u00F2\\x0019>\u00A4\u00C3#\u00839~\u0082\u008F\u00A50D\u0098\u00A5\\x0004\u00D7\u009A\u00CBxMD\u00FB\u00C1\u00F0\u00D6\u00DD\u00C1\u0090\u00BB6\u00CA\u00BE\u00D7\\x000bw\u00C4\\x001b\u00F5)Hn\\x0017\\x0016\u00E1\u008C\\x000c\u00BBGj\u00F9\u00D6\u0090)\u00BE\\x0015\\x0012\\x0015\u00F0|$\u0091\\x0001\\x0004@\u00A0\\x0014\\x0004x\u0097I\u00C9\u00A6r M$o\u00ADYy0Er\u00A8\u00B6Nu\u009F\u00B0\u00D0\\x0010=\u00E8U\\x001b\u0091\u00ED\u00CA#u\u00D2\u00C4\u00F5\u008D\u00DFx_\u0097\u0095&\u0082\u00E0S\u00CB\\x0004D\\\u00A5\u0089k\u00CD\u00D3*M\n\u00AAT\u0097\u00A1\u009Ck\\x0007\u00D2\u00A4d\\x001eo\\\\x0008\\x0004\"%PF\u0097\t\u00BC&2\u00EA\u00C4\u00E2\\x0014a+~s9%\u00E8D[Hl\u0091&\u0096?9\u00ED\u00E2\\x0012k\u00A2^\u00C5X\u00FB\\x0013\u00F3Ib\u00FB$\u008BVas0\u00AC/i\u00C27\u0099\\x0019?\u00E6Qp\u00F5\\x0001\u0098\u00BF\u00B5\u00CD1\\x0019\u00CBm\u00F8X]\u00DF\\x0013:|'\u00F1\u00DA\u00D7\u0084\u00AFy\\x0018\u00D2\u00C4e\u00E9\u0093iB\u00C7a\u00FAF\\x001b\u00B98\u0086\\x000en\\x0018[\\x001b\u009D)\t\u00C4\\x0007'M\u0082N\u00E8\u00C8<\u0089\u00C8\\x0003\\x0002 P:\\x0002\u00E5\u008A2\u0081\u00D7D\u00F2\\x001e[\u00A4\t\\x001f\u00D6\u00AA\u00B9I\\x001c\u00BC&\u009AO\u0085\u00CD\\x0001\u00A9\u00C9q\u0085N!O\\x0012\u00D4\t\u00F3\u00C9\\x000bwRg\u0096I\u00B09\u00BD]a\u00E8\u0096\u00DBt\n;\u00C8\u0087\u00AD\u00F8\u0095&\u00A6\\x0008M\u00870\u00D8\u0082!\\x0017\u0086\u00C1\u009A\u00E6#\u00B4\u00C9\\x000b\u0091\u00B8\u00F1\u00A8y(\u00D2\u0084\\x0005\u00DE\u009Ah\u008B\\x001a%-M\u00F45\u00C6^mt\u00C6h\u00BD\u00FB\u00BA\\x0013\u00C5)\u00CC\u00D6!\\x000c\u00D6\u00A5\\x0002\u0092\\x000f&\u00B2\u0081\\x0000\\x0008DE\u00C0\u00B2-=yP\"\u00F5\u00D0\u00D8\\x000bG\u00AC\u0089'q\u00C7\u0085\u00BE\u00C6*b\u00AB\u009BD\\x001c\\x0003[\u00F0\u00B2(\u00B7\u00C15N\u00B6\u00C4\u009D\u00C0\u00E7\u00E5D\u00CE\u0089\u0082\\x0019\u00E6\\x001c'\u00B2^\\x0013\u00D1\\x0012\\\u00C3\\x0018\u00FB\u0095&\u008B\u00AB\u00F9]I\u00CC\u00D1\u00B5\u00AC\u00E6.\\x0019\\x001c\\x0016\\x000f\\x0017\u0082'\n3Y\u00AA2s\u00ADy8\u00D2D[\\x0007\u00C4m\"\u00A2\\x0006\u00C1X\\x0016\\x0019\u00C9K\\x0013=R\u00D5Z`\u00A1\u008D^\u0094\u009C\u00C2\u008C\u00F4:\u0088\u00D7\\x0006{.\\x001e\u00B6E\u00A8\u00F8\u00EC\u0096\u009E\\x000f22\u0080\\x0000\\x0008\u00C8\\x0012\u00B0\u00CC\u00E6\u0094\u00FEa\u00844\u00F1\u00BCU\u00BA41\u00B6s5\u00BC \u00BA\u0087C\\x000f%\u00E1^\\x0004y\u00E5\u00A1\u009C\u00A8\\x0017br\u008A$s7X}\\x0007X\u00A7\u00CEZx\u00AB\u0096\u0095&t\\x000b,\u00C1+\\x001cI\u00BF\u00D2\u0084\\x000c\u00A4m\u00D9\u0088^U}:\u00C61\u0083(v\u00C4\u00B2\u00FA\u00C6\u00E2$p\u00A9yX\u00D2\u00C4p#\u00D9w\u0081\u00D3\u00F751-\u00E5u'\u00C6\u00FB\u00A5\u00DC7\u00A6s\u00A1dR't\u00B3lj\u00D5\u00E7\u0096k!\u00ED\u00FD\u00EF\u00F9,#\\x0003\\x0008\u0080\u0080\\x0014\u00812\\x0006\u00C0bBG\u00EA\\x000e\u0095^-\u00E2\u008AA\tx\\x0005\u0082Xv%\u0089y@O\u00D9\u00AA\u00E7\u0089\u00D1\u00F7\u0083#\\x0011\u00E0\u00E2\u00BB\u00CC\u00A0\u009D\\x0004\\x0017\\x0002\\x0001\\x0010\u00F0&\u00C0\u00EFL_\u00FA\u00D9\\x001c\u0084\u00C1z\u00DF!\u008C\u00806\\x0002\u00E6U\u00B5\u00CE\u009B\u0086\u00D9\u00A6\\x000c2u\u00A2{\u00D7\u00CA\\x0014\n_\u008D\u00C5#\t\\x0002 Pf\\x0002e\u009F\u00CD\u00814)s\\x000f\u0080\u00EE\t\u0095\u0080\u00E7\u00EB\u00BEg\\x0006\u00F4\\x0007=\u0080&\u00C8&r\u008C^1\u00F17\u00E0\\x000f\\x0002 P~\\x0002e\u009F\u00CD\u00814)'\\x0008\u00D56g\u00BC9\u009E\u00CA\u00C33C\u00C6\\x0001r\u00DA\"\u00B84\u00A1B\u009C#\u0087\u00CA6K\u0085;\\x000b\\x0002  K\u00C0$MJ\u00BE6\\x0007\u00B1&\u00B2\u00F7\t\u00EA\\x0001\\x0004@\\x0000\\x0004@\\x0000\\x00042B\u00A0\u00EC\u0081&\u00F0\u009A@\u009D\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0014\\x0008\u00F0\u00D2\u00A4\\j\\x000c\u008B\u0087\u00D1#A\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x0014\\x0002q\u0088\u0081\u0085\u00D7\\x0004}\\x0011\\x0004@\\x0000\\x0004@\\x0000\\x0004@@#\u00C0K\u0093\\x0012\u00FF\u00A4\\x001f\u00EF\u00A1\u0081\u00D7\\x0004=\\x0012\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00C0\u00EA5\u00814\u00C9\u00E7k\\x001cSA=!\u00BC\\x001f\\x0004@\\x0000\\x0004@\\x0000\\x0004@ 2\\x0002\u00F0\u009A\u00B8\u00C9\\x0011^\u00A9@\u009A\u0094+\\x0010\t\u00D7\\x0005\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0014\u00818\u00AC\\x001cF\u00AC\t<x \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002z\u00AC\u00C9\u00FC\u00BC\u00B1B\u00A7,[\u00D4c_\\x0013\u00F4E\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0002\u00818l\\x0005\\x000b\u00AF\tz$\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000V\u00E88G\u00BC\n\u0083a\\x0011k\u0092\u00A9\u0099N4\\x0016\\x0004@\\x0000\\x0004@\u00A0\\\\x0004\\x0010\\x0006\u008B0X\u00E8t\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001l\u00B9\\x0006i\\x0012\u00A3\u00EEX.\u0085\u008E\u00EB\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u008A\\x00006\u00AA\u0097R'\u0098\u00D0\u0089U\u00AFEe@\\x0000\\x0004@\\x0000\\x0004RL\u00C0$M\u00F0\u00CB\u00C3N\u00BB\u00AEA\u009A\u00A4\u00F8\\x0019@\u00D3@\\x0000\\x0004@\\x0000\\x0004bE \\x000e[\u009B`\u00A3z\u00CC\u00AA\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0088\u00B66\u0099_\\x001e,\u0090&\u00E5\u00E1\\x001e+\u008D\u008C\u00CA\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000#\\x0010\u0087HXH\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u00C1\u00D6&\\x0014wR\\x0016\u00C5\\x0006iR\\x001e\u00EEe\u00B9\u00D9\u00B8(\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008x\\x0012\u00E0#a\u00CB\u00B2]=\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u0081@\u00D9\u00B7\u00AB\u00874Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00E0\u00A4\u00C9\u00E2\u00C2\u008F\u00FC)s:%_B\\x000ci\u0082\u00EE\\x0008\\x0002 \\x0000\\x0002 \\x0000\\x0002 `\"P\u00DE9\\x001dH\\x0013tG\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0013\u0081\u00F2\u00AE\u00D3\u00814Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010p\u0093&%\\x000e\u0086\u00854Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00B0\\x0012\u00E0\u0083aK\u00BC\u008A\\x0018\u00D2\\x0004\u00DD\\x0011\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00C0&M\u00CC\u00C1\u00B0\u00A5t\u009C@\u009A\u00A0;\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0008\\x0008X\\x001c'%S'\u0090&\u00E8\u008E \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\"ibq\u009C\u0094jsXH\\x0013tG\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x00011\u0081\u00B28N M\u00D0\\x001dA\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x001c\t\u00F0{\u009C\u00D0\u00E7\\x0012L\u00EB@\u009A\u00A0;\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x00088\\x0012\u00B0\u00ECqR\u0082\u00FDaC\u0091&\u00EB\u0087.\u00AF\u00DBw\u00D9\u00E0\\x0019=G\u00AE\u00EC?nWee\u00E5%UUU\u00C3\u00E76\u00D0\u00DFttW\u00D3\u00D9|\u00BE&x*TQ\u00FD\u00BDf$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081R\\x0012\\x0010\u00A8\u0093(\u00CDq\u00F1\u00D2d\u00FD\u00D0|M\\x0005\u00A4I\u00947\u00A9\u0094\u00FD\\x000f\u00D7\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001;\\x0001K\u00D0I\u00A4;\u009D\\x0014)MT]\\x0002i\\x0002]\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A9&\u00D0\u00B9\u00C2\u00F4\u009B,\\x0000%\"\rW\u008C4\u00D1u\t\u00A4I\u00AA\u00BBcD=\\x000f\u00C5\u0082\\x0000\\x0008\u0080\\x0000\\x0008$\u008B@\u00C9\u00D4I`i\u00C2\u00E9\\x0012H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0006\\x0001\u00CB\u0082\u009D(\u00D6\u00EC\\x0004\u0093&f]\\x0002i\u0092\u008D\u00EE\u0098,u\u008F\u00DA\u0082\\x0000\\x0008\u0080\\x0000\\x0008DD ju\\x0012@\u009A\u00ACW\u0082KLi=\u00C2`#\u00BA\u00FD(\\x0016\\x0004@\\x0000\\x0004@\\x0000\\x0004bH@\u00A0N(\u00F4dq8\u00D1'\u00BE\u00A4\u0089\u00CDY\u00A2\\x0008\\x0014R*y,\\x001e\u008Ea\u00BFA\u0095@\\x0000\\x0004@\\x0000\\x0004@ \"\\x0002\\x0014wb_\u00B3\\x0013\u00D6\u00E4\u008E\u00AC4\\x0019\u00AAH\\x0010\u008B\u00B3D\u00D1%C\u00D9~%X<\u008C9\\x001d\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0018\\x0001\u00FB~'\u00CC\u009BR\u00E4\u008E\u00B12\u00D2D\u00E8,\u00E1tI\u00DA\u00A5Im\u00BF|\u00C5\u00A5\u00E2T=Z\u00C2yU\u009B\u00AFVO\u0097\u00CA\u009C\u0090n]7\u00AC\u00A2\u00E2R{\u00CA\u00D5\u00B9\u00D7\u00BF\u00B6\u00B6\u00FA\u00D2\u008A\u00EA\u00D1MAT|1\u00E7\u00F2\u00B5\n\u00AB\u009C\u0084\u00DC\u00A9 \u00A8kr\u00FA\u00CD\u008D\u00F2\u0086\u00FA\\x0005\u0098\u00F4\\x001bW\u00A3\u008E!\u00C3\u00B8\\x0011C\u00E6\u0088_J\u00C8\\x000f\\x0002%'\u00E0\u00A4N\u008A\\x0011(n\u00D2\u00C4\u00C1S\u00C2&q\u00D6\u009B\u00F6wM\u00B5\u00D7\u00C4E\u009AX\u00C7\\x001aa\u009F\u00C8\u00904!\u00B1R][\u00EB,\u00D7\u008A\u00B1.\u00C1\u00CFm\u00AA\u00EDWQ1\u00ACN3\u00D2\u00C1\u00CB\u0091\u0090\u00A1%\\x001f\\x0014\u0082(\\x000f\u008FJ\u00D6\u00E5\\x000c\u00D1\u00D9\u00AF\u00B6\u00C9\u009A\u00B9|0\u0093~\u00E3d\u0084\u0088=O\\x001azTF\\x001e\u009C\u00AC7S8\u00B9\u00A3yP\u00FC;Q\u0084\u00D2\u0084\u00DC$\u00C2\u00E9\\x001b6\u00A1\u00A3O\u00E2\u00F0[\u00CFgY\u009A\\\u009Aw3\u00C6)\\x001dYT\u00AF\u0089\u00ED\u0095\u009A\u00BDm\\x000b\u00ECYy\\x001fZ\u00D5\u00D6B\u009AHvEU\\x0001\\x0014pY\u00CF*\\x001fLH\\x0013\u00C9;\u0088l P&\\x0002\u00E4>q\\x0011(\u008A\\x0013E\u00D5(2s=\u00864Q\u00E4\u0088\u00AB\"\u00D1\"^\u00C5?\u0086\u0093\\x0005i\u00C2{b\u00D5\\x001b\u00DF4Z\u009B\u00E5\u00C9\\x0011\\x0014\u00F5\u0088\u00E6_\u00E9\u0097\u00AF\u00D3\u00BF\u00AA\u00E8\u0097or\u00F0\u009A\u00E4\u00B8I\"\u00A3\u0084\\x0008^\u0082#\u0091\\x0005bi\u00B2B}\u00A5\u00B6K\u00962=':\u00CC\u00F2Y\u00D327<\u00D0\u00AD\u00F7P\\x0000\u00E5\u0083\ti\u0092\u00C4\u00EE\u0084:g\u008F\u0080\u00A7@1\u0096\u00F6\\x0018J\u0085\u00E9\u0095B\u009A\u009F_T\u0099\u00FFLM\u00F6\\x0010W\u00FE\u00882\u0083\u00A3E\u00BC\n\u00A7/\u00DB\u00D2\u00C4\u00F0\u009A\u00D8\u00A7~\u0094\u00F8\\x0012\u00BB4an[K\u00B2I\u009F8\u00CB\\x0014\\x0007i\u00927\\x001dWmI\u00AE\u0086\u00E9\\x0015\u00D5\u009Bb\u00B7.\u00EC\\x001d]On\\x0012\u00CDz\u00AE^,;\u00D7p\u008AX\\x0006\\x0002{\u00F9F9\u0085\u0088\n\u00DB$\u0094|\u00AD4\u0091Z\u00AD7A)\u00AAi4\u00FD\u00A9\u0097\u00E9\u00D0dS\u00C0\u008D\u00E7\u00E5\u00B8\\x000c\u00BF\u00FBo\\x0015c&\u00EA\u00CF0\u00BD\u0082\u00CC\u00AA\\x001d\u00F2_*n\u00ACi\u00D3c\u00D5\u0097\u00FE\u0097\n5U0K};\u00E1\u00DEQL\u00AF)\u00E6\u00CB\u00F15\u00B1\u0084\\x0010YoGI`\u00E6\\x000b\u00F7\u00C5|[C\u00B9q\\x001e\u00A8\u00BD:U1\u00A7cB'{F:\u00CEcx\u00D4u\u0093\\x0017(\u00F6E\u00C8t\u0084\u00E9\\x0012\\x0017i\u00A2\u00B8R\u00BC68\\x000b\u00D2D\"\\x0012\u00B6 Mx\u009Da\u0093&\u009A\u00BF\u00C4\u00C8\u00A3+\u0095\\x0004\u00F9N\u00DC&t,S'\u00FD4\u00B3\u00AD\u0098@\u00B3\u009DVM\u00B8-\u0096\u00D6Ud\u00E8v\u0094\u008B\u0087p\\x000b\u008C ]h\u0093>\u00AC\\x000e\u00C3r\u00BC$\u00E2Cd\u00FC\u00D5j\\x0005Sc|\u00AA\u00CE\r\u00F3!M</G\\x0019H\u008E(IS\\x001e\u00AA\u00FE\u00B8\u00A5N{\u009Eg\u00D5\u00DE\u00CE\\x001f\u00D7\u00D5\u00C9\u00ECY\u0082_\u00BB\u00A0S\u00F6<\u00A6\u0094f\u00C5\u00AE3\\x000f(M\u00C2\u0083)\u00A0a\u00E9NE\\\u00CB\\x000b\u00B5G\u00A7*\u00F2t\u00F6\u008Ab\u008A\u0085\u00979\\x0002s\\x000e\\x0002I&\u00A0,0\u00F6\u009A\u00E5\u00F1%M\u00BC\u00DC$\\x0016\u00DFI\u0086\u00A5\t\u00BF&\u00C5\u0090&\u00A6\u00E8\\x0013\u008B4\u00D1\u0085\\x0008\u009FG;19\u008E\\x0013\u0087\\x0015:\u00E6@\\x0013M\\x0016p>\t^\u009A\u00D8\u00BF\u00D5\u00E6\u0083\u00C8\u00D1\"\u009A\u0089\u00E0\u00CFU_\u00ACm\u00AF\u00FBN\\x0011\u00B8\u00829\\x0008\u00FEt\u00D6\\x0016\u00ED\u00A2\u0081j\u00C5+\\x001b\u009D\u008C\u009C\u00D7\u00C4\u00F5r\u00CA#\u00AD)\u008FjNj4\u00CD\u00BE\\Q'\u00CF\u00BD\u00A2\u008A\\x000f]\u009Ah\u00CE7\u00AB\u00AE\u00E2\u00E3R\u00DDs\u00AAva\u0099U\u00F7\u00A9f\u008F\\x000b\u00CC\u00FDO\u00E8D\\x0006\u00D3<?\u00A8\u00ABL\u00E3\u00BE\u00FB\u00BBq\u009Ew\u00D6\u00BDS\\x0015y:Y\\x0017\\x0019!b\u00CF\u0093d\u00B3\\x0014\u00F5{9\u00CAO\\x0016\\x0001\u00A6Q\u00DC\u0083Q\u008C\u00C1\u008A\u00F7\u009A(r\u00C4c\u00E2F8\u009B\u0093\u00E1\u00C5\u00C3lR\u00C6>\u00A1cZCk\u0096&F\u0084\u008A`N\u0087\\x0002S\\x00122\\x00129J\\x0013~\u0085\u008E=\u00A0\u00923{\u00A6Y\u008FB\u00AB\u00CD2\u0082\u00A7a\u0093&n\u00F38&\u008C\"i\u00C2\u00C7\u00EAr6\u00C9o\u00AD\u00D8\u009B\u00B4EK\u00A9p\u00A4\u00A4\u0089\u00F0r$\\x0017\u00C6\u00E8~\\x0011u\u009A\u0086\u00D7%Lg\u00A8\n\u00839N\u009841\u009C(t\u00E4\u0095\\x001c\u0089\\x000f\u009A\u00E2\\x0011\u00BC\u008B\u0088\u00BER\u00A6\u0084\u00C8\u008F\"\\x001b&\\x001c!L6\u0095\u00E3\u00E8;d\u00DD)\u00E8\u008D\u00F3\u00BE\u00B3\u00C6D\u0092\u00C8oW\u00E4\u00E9\u00CC\u0084\u0090\u00BB\u00D4\u00B2\u0083\u0080\u00CC\u0091d\u0099\\x001f\u00D4\\x0016\\x0004d\\x0008\u00F0a%\u0085\u00D9gc\\x001a\u009AbM\\x0006(\u0089\u0082a\u00D5\u009D\u00D3\\x0002\u00A7,xM\u00EC.\r#dD\u00FF\u00CA\\x0008\u00835)\\x000c\u00B34\u00A9\\x001b\u00E6\u00B8K\u008A\\x00123\u009B$ib\u00DF\u00F4\u0082\u00BD\u0082KYegq\u00E3\u00B0\u00C6\u00C7\u00F46o\u008E\tP\u00E7S\u009C\u00A7\u00C3\u00BC\"7\u00B9\u0092\u00FD\u00D6J8\u00B1%\\x001fkb\u00B9\u009Ci\u00D6\u00E6\u00F2\u00DAM\u00F3\u00F3\u008Boa\u00E1#\u00A2\u00A4f`\u00D2\u00C4$D\u00ECGt\u00C7\u0089\u0083\u00D0Q\\x001d-\u0097\u00D7\u00EEa\\x000b\u00FC\u00FC{M\u00ECq3\u00EC\u0088_\u0098\\x000e\u00E6_w\u00A1\u00B9F\u00EDx^\u00CB3C^w\u00DA\u00F1\u00B3]F\u00A7*\u00F2tC\u009AXz)I\\x0013\u00CF#2\\x0003=\u00F2\u0080@\u00CA\\x0008\u00C8l\u00B9&!Y\u00B2)M\u00B8%9LR\u00C8H\\x0013\u00C3k\u00E2\u00B1;Y\u00BC5\u008AS\\x0018\u00AC\u00C9\u00B0\\x0015gK\u00ACO\u009ACi\u00BC!q\u00D8\u00CC-\\x0001\u00D2\u00C4\\x001aJBZ\u00A4\u00E4\u00D2D\\x0011:,\u00AE\u00D6m[\u00BC\\x0008a\u0096[\u009A\u00A8\\x001a\u00C8\\x001c\u009Cd\u00CCUIH\\x0013\u00B7\u00D3!MRf8\u00D1\u009C\u00A8\t@\u009Ax/\u00B0t\\x000c\\x0004\u00D1\u00DD!\u0086\u00B7CF\u009A\u0090\u00D0cS9\t\nz\u00B5\u00F7\u00C2\u00E2\u00A5\u0089\u0087\\x001d\u00B2+3\u00F7\u00B7y\u00B7-U|XS\u00BF\u00B5\u0092\u009C\u00D01- 2\u00CF\\x001f\u00FD\u00EE\u00BF)\\x000bj\u0084\u0081`t\u00D0\u00C1\u00CF\u00C1\u00E5\u00F7\u00E35\\x0011\u00CF\u00F5X\u00A6\u0084\u00D4?\u0087<\u00E6\u00B4co\u00840e&t\u009C<4\u009E7\u00CE3\u0083`\u00A8\u00E5:U\u0091\u00A7\\x001b\u009B\\x000bX\u009Ez\\x001a1<\u008FDm\\x0003P>\\x0008\u00C4\u0090\\x0000\u00A4\u0089\u00B44qX\u00A1\u00C3\u00EF@/%M\u00D4)g\u00A6N4\u00C7\u0089.V\\x0012\u00B4\u0093\u00BD\u008341\u00C7T\u00BAzM\u00F4\u00D7S\u00D3\u00AC\u0090\u00B6\\x0008B\u00B8H\u00C7\\x001a\u00A7b\u00DE\u00F0\u00DE\\x001e\u0088`\u0089_1b\\x0014\"\u00A8\u0095h\u0081\u008F\\x0011\u0093+\u0098\u00E4b\u00EF\u00E2\u00CAl\u00EB\u00FBl}Mn1\\x0017\u00AC\u00AA-\\x0003\u00E6CI\u00BC2HN\u00E8hA*F\\x0008\u00AD\\x0011\u00B6\u00C2\\x001f\u00E1\u00B4\u008Ehg$\u00B59\u00D1\u00C2,t\t\u0093\u00F2+\u00F2\u00C6i\u00EE\\x0010\u00C7\u00FE\u00C6\u00AE%X\u00D4\u00CD\\x001a[\u00E4\u00E9\u00F1v\u0082\u00C6\u00D02\u00A1J\\x0019'\\x0000iR\u00B44\u00E1\\x0002D$\u00A5\u0089\u00E181E\u00C2&'\u00D0\u00C4#\u008C\u00C0%\u00A0Rf\u00F1\u00B0\u00D3\u008Em\u00A6sE\u00EB<\\x001d\u00C3M\n\u0081)\u00CA\\x001b\u00AA\u00BB\u0085Sv\u00D2\\x0013-iv\u00DEG\u00CE\u009E\u00BFZY/]X.d\u0099\\x000b`\u00EB\u0096\u0087<\u00A3\u0085\u00A9r\u00FB\u0091\u00F0\\x0001%\\x0005\u00B1\u00E2\u0091\u00C1\u0097\u00D7D\\x000f\u0092\u00B5\\x0006\u00AF\u00B0\u00B0\\x0015\u0096\u00CC\\x0005\u00B2=\u0091\u00B8Q\u00B2\u00D40ee\u0090\u00C4\u008D\u00F3\u00BA\u00B3\\x001e\u009D\u00AA\u00C8\u00D3\u00B5\u00A7\\x001e\u00BF\u00A1\\x0003\u0095\\x0006\\x0002\\x0012\\x0004 M\u008A\u0093&\u00E6\u00D8XYi\u00A2\u00AF$,H\u0093\u00E4,\\x001bfV\u00CAi\u00EA\u00DD\u00C9\u00DF\u00AE\u00D96\u00CFx\\x0011\u00A7MM\u00F4\u00D7V\u00AE|K$\u00AC\u00EB\\x000f\u00D1\u00E9\u008B/\u00EC{\u00AB\\x0018\u00E1\\x0005.{\u00A09\u00EF\u00DAn\u008A\u00D0dQ/\u00A4~l\u00CE\u00FFBUY\\x0005\u00D8&i\u0085I\\x001c\u00CB\u00DE$\u00FCr\\x001bN.\\x0014\u00F4\u00C4-u\u0085\u00ED\u00D4\u00DEW\u00D6\u00D7\u0090\u00D0)\u00A8\\x0007\u00FD\u0088\\x0016\\x0003o]?\\Xo\u00CC\n\u00D4W\\x001d\u008B\u00A5\u0089\u00E0GD\u00A3\u0086\u00E9\u00B9\u00E5\u009A1\u00AE\\x0005\u00E8N\u0096P\\x0012k\u00F3\u00EAT\u00C5\u009C\u008E-\u00D7$\\x000cR\u00C6]\\x0005h\u00BEA\\x0000\u00D2\u00C4[\u009A\u00A0\u00BB\u0080\u0080/\\x0002.q\t\u00B4\\x0001\u0091SX\u0089\u00E7q\u00F9\u009F\u009F\\x0010\u00D6\u0096)\\x0015\u00CF\u00AB8e\u00A0\u00AB\u00FB\u0082\u0080\u00CC \\x0000\\x0002 \\x0010\u0098\\x0000\u00A4\u0089\u00C7\u0080+\u00D8}\u00C49\u00E8$\u0094\u00CC\u0081\u00EF%N\u008C\t\\x0001'i\\x0012L\\x0019\u00D8\u00A6T\u008A\u0096\\x0008A5\n\u00D4IL:\\x0018\u00AA\\x0001\\x0002\u00A9'\\x0000iR\u00F4@\\x000f/%\\x0008\u0098\t8l\u00A4\u00E6\u00DBc\u00A1\\x0004y\u0098\u00E2<B\u00EE\u00AB\u00C16\u0090\u0096\u00F9\u00D5\u00D0\u00D4\u008F\u009Bh \\x0008\u0080@\u00A4\\x0004 MB\\x001e\u00EE#\u00BD[(<\\x0011\\x0004\u00EC\u00D2\u00C4\u00AF\u00BF\u00A4\u00A4\u00E6\u00DF\u00FF/\\\u0094\u00B4z\\x0010\u00BE \\x0000\\x0002\u00D9#\\x0000i\\x0002i\\x0002\\x0002\u00D1\\x0012\u00F0\u00A5K\u00CAf\u00F5}\n\u0094\u00B2\u00D53{ct\"\u00E48*\t\\x0002\u00E1\\x0012\u00804\u0089\u00D6,\u0085{\u00B7PZ\u00E2\\x0008\u00C8\u00EB\\x0012%\u0092#\u00CA\u00E9\\x001b\\x0019t\u00F2\u00B5e\u00BF\\x000e(S&\u00F2\u0080\\x0000\\x0008\u0080\u0080_\\x0002\u0090&\\x0018^A *\\x0002\u00F2\u0096>Vf^\u00F2\u00A7A\u00A1N\u00FC\u008E\u00B6\u00C8\\x000f\\x0002  I\\x0000\u00D2$*\u00B3$y\\x0003\u0090-\u00AD\\x0004\\x0012\u00AAK\u00D8\u00ED\u0090\u00AF|Zo\\x001f\u00DA\\x0005\\x0002 PF\\x0002\u0090&\u0090& \\x0010>\\x0001I\u00D3\\x001e\u00E7\u00E5\u00B8\u0092M \u00DFI\\x0019\u00C7/\\\\x001a\\x0004@ \u0095\\x0004 M0\u00B0\\x0016G\u00E0\u00FB\u00DA\u00EA\u0085\\x0015\\x0015\u008B\u00D5\u00DF\\x0019\u00B1$\u00F5\u00AB\u00EA%\u00EAF\u00A5\u00FC\u00E7\\x0010#\\x0019#*\u00B6\u00E8\\x001aJ\u00ECl\u00D6\u00F4\u00C1\u00BBbnMK\u00AA+\\x0016V\u00E4\u0096\\x0017w_\u008An\\x0002\u00BB\u009B\\x0012\r\u00C9\u00C7Y`\u00A5r\u00D4F\u00A3@ \u00F5\\x0004 Mba\\x0000\u0092\u00DB\u00CF\u0098\\x001d\u00ADXX]\u00FB}\\x0016\u00A4IS\u00ED\u00E2\u008A\u008Ao\u00EA\u00DC\u00EF\u0097L\u00ACF\u00E7b\u00B5(\u0091\u00A4\u008B\u00954\u0091U'\\x0008\u0089\rI\\x000b&w(@\u00CDA D\\x0002\u0090&\u0090&\u00C5\\x0010\u00A8\u00CB\u0091.\u00F9&\u00A7\u00FE\u00DFf\u00B0K\u00E05)\u00B5=`\u00EDu\u0093&2\u00F3 j\u00D0kb\u00A4\t\u00D4I\u0088\\x0003.\u008A\\x0002\\x0001\\x0010\u0090!\\x0000iR\u008Ca\u00CE\u00FC\u00B9\u00CBsl\u00EA\u00A1\u00EE\\x001b\u0091\u00E3${\u00D2DZ\u0097$L\u009A\u00C8\u00A8\\x0013L\u00EB\u00C8\\x000c\u00B8\u00C8\\x0003\\x0002  C\\x0000\u00D2$\u00F3\u00F2\"\u00B8\u00E3A}\u00EF_\u00A8\u00FE\u00E4\u00AF\u00AAQ\u00B4\u00B0\\x0012\u00A3@\\x001f\u00D2\u0084\\x0015\u00A5'\u00DE-\u00A1\\x0017\u00A2\u00CF\\x001c\u00995\u0090)\u00D6\u00C4pi\u00A8\\x001fX2y8<3\u00A8\u009D\u0081E\u00CF\u00E8\u00A9\\x0010\u00F3!>n\u00AA\u00F9\u00EF\u00DE\u00ABs\\x000f\u00CE\u00E0\u00EC\u00B7\\x001f\u00AF\u0089\u00F9\u00D2f\u00CEJ\u00A3\u0094#\u0085<\u00FA\u00E4\\x001aw\u00965r\u00C5\u00A9\u008D\u00CA\u00BDs\u00A4\u00C47m\u00F1{\\x0015\u0097\u00CE3R\u00F5\u00ECO\u0094\u00A8\u0094\u00C2\\x0012h\u00B5?hiqm\u009D2\u00EBg\u009E\u00F2s\u00AB\\x0000\\x001eI\\x0010\\x0000\u0081\u00AC\\x0013\u00804\u00C9z\\x000f\u0090\\x0011\u00B0\u00E2<\u00CC\u00BAh\u00B6\u009F\u00A9\\x0001U\u00A6\u00F8\u0096&\u009C\u0092\u00E0\u00EC\u0099\\x0016Wk\u00B6a\u00BA\u00C13Y_\u00DDTs\u00B3K\u009C\u00B6\u00E0\u00E29<3\u00E49\\x0001d\u0093J\\x0002kj\u00AA\u00F9\u00EF>VM\u00F5\u00BB\u00B5\u009B\u00E6;F\u008Fr$e\u00A5\u0089[\u0095t%Q\u00BD\u00A4\u00B6\u00A0\u00C6\u00D8\u008D\u00B0r+(\\x0003\u0099\\x0002\u00B5I:3\u00C6=\u00DA\\x000f\\x00177\u00CD~\u0097\u00D7%\u00EC\u00B3\u00A6N\u00A8\u0081\u00E2\u00F29i\u00E2U\\x0001<\u0092 \\x0000\\x0002Y'\\x0000i\u0092\u00F5\\x001e\\x0010X\u009AX&q\\x0004\u00C1\u009B\u0092^\\x0013\u009B\u00C7\u00C5T\u00B2nb\u00F5\u00F7~\u00CDK\u00A1\u00FDi\u00F7\u009A\u0098\u0096\\x000bi\u00D2A?WW\\x0012\u0085\u00E0Ss\\x0006\u00EDZ\u00FC\u00FB\u00BD\u00F9r\\x0005\u008F\u0082\u00DAm\u00CC5'\u00B7\u0081\u00EAK\u00D0\u008C\u00B4\u00DD}bFmv\\x0014\u00F1\"@\u00FDl\u00A93\u00E7\u00F6\\x00107\u00CAp\u00A5\\x0018\u0086\u00DF8\u00A2\u00F24-\u00952\u00FB0Dmt\u00C0\u00A8\u00CCX}\u009CS\u00B4\\x0008\u00EF\\x001fR\u008F\u00DC\u00FE\u00EF&\u00C5q\u00F2\t\u00F39\u00D9\u0095\u0090\u00C5\u0097\u00E3\\x0002\\x0019\u008F$\\x0008\u0080@\u00D6\t@\u009Ad\u00BD\\x0007\\x0004\u0095&\u00AA\u0081\u00E4\\x0017\u0098\u00D8W\\x0011\u00FB\u0091&\u00B6\u00C9\\x0017\u00FD\u00BE\u0098|36A`\u0097&\u00965/v\u00D7\u008Es\\x0006\u00D5\u00A8\u00DB\u0097\\x001a\u00F1\u00A1\u00AF\u00E60Xc\u00DA\u00E2\u009B:\u00CFU9\u00B6\u00FD^\u00E5\u00A4\u0089\u00F3L\u0099\u00C9_e\u00BF\\x0011\u00A2I1\u00DD\u00A5!\u00D1FgJ\u00A6\u0096~R{\u00BB>\u00AD\u00C3\u00A4\u00C9\u00A6W\u0093\u00F7\u00C82\u00C4kM\t\u00C8x$A\\x0000\\x0004\u00B2N\\x0000\u00D2$\u00EB= \u00A04\u00E1\u0083\tLo\u00FC\u009C\u00D9\u0093\u0094&l\u00AD\u008A\u00D9m`\u0089\u00F00EW8\\x0016+\\>\u00C3\u00CF\u009Bxd`\u00DE\\x0005q\u00D2L\u00B5\u00A5\u0084B\u00CD\u008D\u00C0\u008B\u00E7>\\x0016\u00CC\u00E6\u0088BD\u00A5&t\\x001c\\x000c\u00B9k\u00A3\u00EC{\u00BDpG\u00FC\u00B7\u0091= \u00A6\u00DA\u0092\u00FE\u00E0\\x0002M\u00B4\u00C9\\x001d&M\u00C8o\u00F4\u00BBy\u00E6y=m\u008AG\u00EB\\x0018\\x0012\\x0015\u00C0#\t\\x0002 \u0090u\\x0002\u0090&Y\u00EF\\x0001\u0081\u00A4\u0089\u00EB\\x001b\u00BF\u00F1\u00BE.+M\u00D4[`\u008B)q\u00DC\u00AB-F\u00D2D\u00AB\u00F9\u0090B@\u00A8b\u00A7\u0099\u0091\u00E6\u0093\\x0008rb\u00A5\u00C9\u00F2\u009C\\x0016UcL]q\\x0013:\u00EA\u0094V\u00EEG\u00F36'\u00BC\u00C0\u00824\t\u00F4\u00C4a\u0098\\x0002\u0081l\\x0011\u00804\u00C9\u00D6\u00FD\\x000egX\u00B4O\u00B2h\u00A1\u00AF\u00E6`X_\u00D2\u0084\u008F\u009Fe.\\x0019\u00E6\u00A8p\u00F5\\x0001\u0098\u00BF\u00B5\u00CD1\\x0019\u008A\u0087\u008F\u00D5\u00F5=\u00A1\u00C3\u00F7\\x0010\u00F1\u00BE&\\x0005\\x0015\u00C2\u00E20\u00CC\u0091\u00B0\\x000e?\u00DD'%M\\\u0096>\u0099&t\\x001c\u00A6o\u00B4\u00DB\u00CD1tp\u00C3\u00D8\u00DA\u00E8LI\u00D5\\x0016\u00B9\\x001fy\u00ED\u00C5I\\x0013\u00E6P\\x0019\u00F3\u00B1\u00E9\u00B1\u0092\u0098\u00D0\u00C1c\\x0008\\x0002 \\x0000\\x0002\\x0005\\x0002\u0090&\u00E8\r\u00BE\t\u00B0\\x0017_\u00E1N\u00EA,\\x0006S\u00E0\u00F0\u00B0+\\x000c]\u008B\u0098Na\\x0007\u00F9\u00B0\\x0015\u00BF\u00D2\u00C4\u00B4`\u00D8!\\x000c\u00B6`\u00C8\u0085a\u00B0\u00A6\u00F9\\x0008-\u00AAT$n\u00D8WC\u00BE\u00E0|$,\u00F6\u0082\u0093&\u00CE\u00BB}\u00C8I\\x0013\\x0016xk\u00A2-j\u0094\u00B44\u00D1\u00BDS^mt\u00C6h\u00DC}M\u009015f\u00F8\u008A\u00B4\u00E8\u0093\u00EA\\x000f\u00F4\u00DD\u0081\u00AD\u00FB\\x0005k\u00EE1\u0097\n\u00F8\u00EE\u0090\u00E1\\x0008\u00EE\u00E0\u00AB\u00E8Qa\\x0010\\x0000\u0081\u0090\t@\u009A\u0084\\x000c4\\x0003\u00A3\u00A4\u00C89Q\\x0018\u00D69\u00C7\u0089\u00AC\u00D7D\u00B4x\u00D80\u00C6~\u00A5\u00C9\u00E2j~W\\x0012st-\u00AB\u00B9K\\x0006\u00A7\u0085\u00AF\u0086\\x001d-\u00CCd\u00A9\u00CAL)\u00D0\\x001eu\u00C1\u0087\u009B8\u00B8L\u00AC\u00D1\\x001b|\u00B7\u00B1\u00AEu\\x0012\u0086\u00F5X\\x0016\\x0019\u00C9K\\x0013\u00C7\u00C5\u00BDF\\x001b\u00BD(\u00E9\u00F5\u00D1\u00A7ut\\x0002\u00FA\u009A\\x001d\u00E68\u00F9\u00DD<K\u00D4\u008E\u00D7\u00EAe\u00CB\u00CAs\\x0008\\x0005\\x0010\\x0000\u0081\\x000c\\x0013\u00804\u00814\u00F1I@\u00DF\\x0001\u00D6I\u0084\\x0015|*\u00B2\u00D2D\u00B7\u00D3\u0085\\x0010T\u00EE\u0095\u00DA\u00AF4!#\u00CD\u0085\u00AD\u00D8w'S\u00E6A\\x001c3\u0088\u00A2^,\u00DB\u00D2\u00EB\u0086\u0099\u0095L?\u0085c\u00DE\u00E4#\u00B7\u0098\u009B\u00E9p\u00DD U\u00D2k\"\u00A8\u0092\u00D9_e\u009Bcr'\u00C6\u00FB\u00A5\u00DC7\u00A6s\u00A1\u00A4CPe\\x00195\u00B9\u00EE9\u00CB4\u0096\u00EAJ\u0091\u00DFr\u00CD\u00F3g\u00892\u00A0\u00F8}>\u0086\\x00196Z\u00E8\\x000cY \\x0000i\u0082\\x0011!5\\x0004\u00C4\u0081 \u00DCc\u00EC\u0099\u00C17\n\u00F75\u00C3\u00CE.\\x0013\u00DF\\x0017*\u00E1`\u00E4\u0083\u0092d\u00F3%\\x0002\\\u00E2\\x000c\\x0004u\\x0003\\x0001\\x0010(5\\x0001H\u0093R\\x0013/\u00A1\u008D\u0089\u00A8i\u00CE+l\u009DV\u00DE\u00A6\u00F7\u00B8}6G?\u00A2\u00AC\u00D0q\u00BE\u00D7ia\u00C86\u00C0uH\u00B69\\x001d\u0099VG\u00D4iQ,\\x0008\u0080@\u0092\\x0008@\u009A$\u00E9n%_\u00D6DJ\u00DB\u00F3u\u00DF3\u0083\u00BF\u00EA\u00B9\u00FF\u0098_2]&Z\\x0000\u008D\u00FC\\x000c\u008B\u00CDq\u00A2N\u00EE\u00E8I\u00F0SD\u0098\u0089\\x0000\\x0001\\x0010\\x0000\\x0001/\\x0002\u0090&\u00FE\u00AC\\x0011\u00C4A\u008C\tx*\\x000f\u00CF\\x000c\u00FE:\u0083\u00FBtF\u008CA\u00B97\u00D3\\x001f%\u0091>+\u00C4\u00DFP\u00A8\u00AC\u00F5\u0097\u0095\u00BC\u0086\u00A4\u00C4r\u00F3\u00D7y\u00D0L\\x0010\\x0000\\x0001\\x0017\\x0002\u0090&\\x0018P@  \\x0001\\x0017i\u00E2\\x001a\\x0000\\x001b\u00F0r\u00B1\\x001d\u00C8\\~l9S\\x001cb{\u0083P1\\x0010H\\x001c\\x0001H\u0093\u00B4\u00D9\u0089\u00C4u\u00C1\u00E4V\u00D8\u00CD$\u009B\u00B7CMn\\x001bej\\x000e\u0089&C\ty@\\x0000\\x0004\u00E4\t@\u009A@\u009A\u0080@\\x0010\\x0002\u00EE\u0081&\u00F2O`\nr\\x0002E\nn\"\u009A\\x0000\\x0002\u00B1\"\\x0000i\\x0012\u00C4,\u00C5\u00EA\\x0016\u00A22e!\\x0000{\\\u00C0\u00BEX\u00F0\u008B\u0086\u0086K)\u00B1\u00E1\u00C0\\x0018\\x0019@\\x0000\\x0004\u00CAF\\x0000\u00D2\u00A4l\u00E8\u00CBbPq\u00D1\u00B0\\x0008`\\x0016\u0083'\u0089\u00B9\u00AD\u00B0\u00FA\\x0015\u00CA\\x0001\\x0001\\x0010 \\x0002\u0090&\u0090& \\x0010\u0084\u0080\u009B4\u00C9R\u00A0\t\\x001bF!\u00D4`N@\\x0000\\x0004B$\\x0000i\\x0012\u00C4,\u0085x\\x0003PTB\t\u00C0O\u00C0\u00DF8\u0097\u00E9-,\u00D2Ih\\x000fG\u00B5A\u00A0\u008C\\x0004 M M@\u00C07\\x0001\\x0004\u009AX\u00C6,H\u00932\\x000e\u00E2\u00B84\\x0008\u00A4\u008F\\x0000\u00A4\u0089o\u00B3\u0094\u00BEN\u0080\\x0016\u00F9%\\x0000i\"/M\\7\u00EC\u00C7\u00D3\\x0007\\x0002 \\x0000\\x0002\\x0002\\x0002\u0090&\u00E8\\x0016 \u00E0\u009B\\x0000\u009C\\x0004v1\u00E72\u00C3\u00E5W\u00F9!?\\x0008\u0080@\u00C6\t@\u009A\u00F86K\\x0019\u00EF1h\u00BE\\x0012\u00F5\u00E9\u00BC\\6\u00B3\u00A1\\x0015\u0090&x4@\\x0000\\x0004\u00C2\"\\x0000i\\x0002i\\x0002\\x0002\u00BE\t@\u009A\u00C0k\\x0012\u00D6\\x0010\u008Cr@\\x0000\\x0004\u00EC\\x0004 M|\u009B%t#\\x0010\u00C0\u00CAaH\\x0013<\\x0005 \\x0000\\x0002\u00D1\\x0011\u00804\u00814\\x0001\\x0001\u00DF\\x0004\u00DC\u00BC&\u00D9\u00DB\u00D4\u0084\rO\u0098\u00D0\u0089n\u0098F\u00C9 \u00905\\x0002\u0090&\u00BE\u00CDR\u00D6\u00BA\\x0008\u00DAk'\u0080\t\\x001dxM\u00F0\\\u0080\\x0000\\x0008DG\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004|\\x0013\u00804\u00814\u0089nPF\u00C9 \\x0000\\x0002\u0090&\u00BE\u00CD\\x0012:\r\\x0008@\u009A@\u009A\u00E0)\\x0000\\x0001\\x0010\u0088\u008E\\x0000\u00A4\t\u00A4\t\\x0008\u00F8&\\x0000ib\\x001d\u0092\\|8\u00BA\u00F1\\x000b%\u0083\\x0000\\x0008\u00A4\u0092\\x0000\u00A4\u0089o\u00B3\u0094\u00CA~\u0080F\u00F9\"\u0080\u00DD`-\u00B8\\x0000\u00C4W\u00FFAf\\x0010\\x0000\\x0001w\\x0002\u0090&\u0090& \\x0010\u0084\\x0000\\x0016\u00A4\u00F0#\\x000b\u00DCH\u00B04 \\x0000\\x0002!\\x0012\u00804\tb\u0096B\u00BC\\x0001(*\u00A1\\x0004\u00F0\u00CB\u00C3&i2\u00DFq\u00F1pf\u00B7\u00C7Mh\u00C7F\u00B5A \\x000e\\x0004 M M@ \\x0008\\x0001\u00EC\u00BA\\x0006i\\x0012\u0087\\x0011\\x001cu\\x0000\u0081T\\x0012\u00804\tb\u0096R\u00D9\\x0015\u00D0(_\\x0004\u00DC\u00A4\u00C9\u00FC\u00CCu*\u00F8\u0090|u\\x001ed\\x0006\\x0001\\x0010@\u00ACI\u00E6\u00EC\\x0004:}\t\\x0008 \u00F0\u00D3\u0080\\x000c\\x0014%\u00E8o\u00B8\\x0004\\x0008d\u008A\\x0000\u00BC&\\x0010. \\x0010\u0084\u0080\u00BB=\u00A6o\u00B33\u008E@\u009Ad\u00E7^\u00A3\u00A5 P\\x001a\\x0002\u0090&\\x00192!\u00A5\u00E9R\u00D9\u00B9\nf1\u00D8\u00BDv\u00E3\u0090\u00BD\u00B9\u00AD\u00EC\u00F4\u00B4\\x0014\\x0004\u00A2#\\x0000i\\x0002i\\x0002\\x0002\\x0001\t\u00B8\u0084\u009B\u0090\u00B5\u008E\u00EE\u00A1\u008DW\u00C9\u00AE\u009B\u00ADe\u00CA{\\x0014\u00AF\u00FB\u00A2\u00AAF$\\x0010H(\\x0001H\\x0013<\u00BD \\x0010\u0090\u0080\u00C7DF6\u00E6t0\u00B1\u0095\u00D0\u00A1\\x001f\u00D5\\x0006\u00818\\x0013\u00804\th\u0096\u00E2|SQ\u00B7\u00D2\\x0010\u00F0\u00B0\u00CA\u00D9p\u009C\u00B8\u00CC\u00E6d\u00C8u\\x0004\u00FF\\x0004\\x0008\u0080@\u00A8\\x0004 M M@ 8\u0081\u008C\\x001bf\u0088\u00B3\u00D2\u0088`\\\\x0005\\x0004\u00B2F\\x0000\u00D2$\u00B8Y\u00CAZ_A{\u00ED\\x0004\u00DC\u00C3MR\\x001fi\u0091\u00F1\u00E6\u00E3\u0089\\x0000\\x0001\\x0010\u0088\u0088\\x0000\u00A4\t\u00A4\t\\x0008\\x0004'\u00E0\u00EE6H\u00F9\u008C\u0086{\\x0000l6\u00E6\u00B3\"\\x001a\u0097Q,\\x0008d\u009C\\x0000\u00A4Ip\u00B3\u0094\u00F1\u00AE\u0083\u00E63\\x0002\u0099\u00F5\\x001cd\u00B6\u00E1\u00E8\u00F9 \\x0000\\x0002Q\\x0013\u00804\u00814\\x0001\u0081\u00A2\\x0008d\u00D3q\u0092\u00CDVG=\\x001c\u00A3|\\x0010\\x0000\\x0001F\\x0000\u00D2\u00A4(\u00B3\u0084n\\x0004\\x0002\u00D9t\u009C\u00B8\u00C7\u00FF\u00E2\u00D7\u0086\u00F1\\\u0080\\x0000\\x0008\\x0014C\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004\u008A%\u00E0\u00E9BHY<\u00ACg{\u008B\\x0019\u0092p.\\x0008\u0080\\x0000\\x0008@\u009A\\x0014k\u0096\u00D0\u0087@\u00C0\u00D3q\u0092\u00AAxX\u00D7\u00E8Wj)\\&x\"@\\x0000\\x0004\u008A$\\x0000i\\x0002i\\x0002\\x0002!\\x0010\u00F0t$\u00A4\u00C6q\u00E2>\u0095\u0093*\\x0011\\x0016\u00EA\\x0016RE\u008E\u00D48\\x001d\\x00042E\\x0000\u00D2$\\x0004\u00B3\u0094\u00A9\\x001e\u0083\u00C6:\\x0011p_\u00B1\u00A2\u00B8\\x0013\u0092\u00BFu}\\x0016\u00DA\u0088\\x001e\\x000e\\x0002 Pv\\x0002\u0090&\u0090& \\x0010\\x000e\\x0001O\u00C7\u0089\u00E2QH\u00B2:\u0091j <\r \\x0000\\x0002 P4\\x0001H\u0093p\u00CCR\u00D95&*\\x0010\\x0007\\x0002\u009EN\u0085\u00E4\u00CEw\u00C8\u00E8\u0092\\x0014\u00B8\u0085\u00E2\u00D0\u008BP\\x0007\\x0010\\x0000\\x0001H\\x0013H\\x0013\\x0010\\x0008\u0093\u0080g(F\\x0012\u00D5\u0089\u0094.\u00C1\u00F6\u00AFE\u00BF)\u00C2 \u0081\\x0000\\x00080\\x0002\u0090&a\u009A%\u00F4*\\x0010\u0090\u00B1\u00E2\u00C9R'\u00E9k\\x0011z)\\x0008\u0080@\u00CC\t@\u009A@\u009A\u0080@\u00C8\\x0004\u00D2d\u00CB%\u00DB\u0082\u00A9\u009C\u0098\\x000f\u00F4\u00A8\\x001e\\x0008$\u008B\\x0000\u00A4I\u00C8f)Y\u00B7\\x001f\u00B5\u008D\u0088\u0080L\u00D0I\u00FC\u00A3b\u00A1K\"\u00EA\\x001e(\\x0016\\x0004@\u00C0\u009D\\x0000\u00A4\t\u00A4\t\\x0008DB@&\u00E8$\u00CE+\u008Aeu\tBL\\x0010b\\x0002\\x0002 \\x00106\\x0001H\u0093H\u00CC\\x0012\\x00141\\x0008\\x0010\u0081\u00E4\u00AA\\x0013I\u00AF\\x000f6~E?\\x0007\\x0001\\x0010\u0088\u0082\\x0000\u00A4\t\u00A4\t\\x0008DE@\u00D2\u00F1\u00A0m\u00EE\\x001e\u008F-O\u00E4\u00EB\u009C\u00AC`\u00DE(FO\u0094\t\\x0002 \\x0010\\x0011\\x0001H\u0093\u00A8\u00CCRD7\\x000c\u00C5&\u008B\u0080/K_\u00F6`RIg\t\u00F3\\x0006u\u0086\u00ED\u00C2M\u00D6\u009DEmA\\x0000\\x0004\u00A2#\\x0000i\\x0002i\\x0002\\x0002\u00D1\\x0012\u00F0\u00A5N\u00CA\\x0015}\u00E2\u00BB\u0092\u00D0% \\x0000\\x0002 \\x0010\\x0019\\x0001H\u0093h\u00CDRt\u00A2\\x0012%'\u0088\u0080o\u00C3_\u00C2\\x001f\u00DC\tR\u00B7\u00C8\u00C6\u00A3\\x0004\u00DDST\\x0015\\x0004@ :\\x0002I\u0092&F]\u00F1\\x0001\\x0004\u0092H\u00E0\u00B3\u00CA\u00BC\u00DF\u00B4h@aW\u00C4\u0090\u009B< \u00BF(@}*#\u00AB\u00CF\\x001d(\\x0019\\x0004@\\x0000\\x0004\u00AC\\x0004\u00F25\u00F9\"\u00D2\u00F2\u00BA}\u0097\r\u009E\u00D1s\u00E4\u00CA\u00FE\u00E3vUVV^RUU5|n\\x0003\u00FDMGw5\u009D-\u00A6h\u00DC*\\x0010H\\x000f\u0081\\x0000j\u0080\u00D4\\x000c\u009D\\x0015\u009AF!E2\u00C0\u00B7Bb\u008A*\u00B4:@\u0085\u0080\\x0000\\x0008\u0080\u0080\\x001c\u0081\"t\t\t\\x000fH\\x00139\u00CA!\u00BF\u00F8\u00E2\u00A2\t$\\x0010X\\x0019\\x0018\\x001a\u00C5\u00AFD\u00A0\u00FCJ\u00F2\u00EF#\u00E1}<~/\u008A\u00AE\\x000e\\x0002 \\x0000\\x0002\u00C5\\x0013\u0088\u00AF4)\u00AEfE9lpi\\x0010\u0088\u0082\u00C0\u00FA\u00A1\u00F9\u009A\u008A\\x0010\u00D2\u00FA\u008A\u00BC\u0092\u0086\u008A\u0092\u00FAUhW)\u00CA\u00A7\u008Ag\\x0010\\x0004@\\x0000\\x0004\u00CAB J\u00AFI\\x0014\u00B6\\x0001e\u0082@\u00D9\t\u0084%\\x001dB\u00D1\\x001fN\u0085\u0090\u00EE);(T\\x0000\\x0004@\\x0000\\x0004\\x0002\\x0011\u00804\u00C1k%\\x0008\u00F8'\u00A08<B\u00F2m\u0084.P\u00A8b\u0081\u00C6\\x0002\u009C\\x0005\\x0002 \\x0000\\x00021!\\x0000i\u00E2\u00DF,a\u00DC\\x0007\\x0001F \u00AC\u00F9\u009D\u00B0\u00D4\t\u009B$\u00C2\u00DD\\x0001\\x0001\\x0010\\x0000\u0081\u0084\\x0013\u00804\u00814\\x0001\u0081\u00E2\\x0008\u00C4A\u00A0@\u0094$| \u0086\u00A0\\x0004\\x0001\\x0010\u00E0\t@\u009A\\x0014g\u00960 \u0082\u0080\u00E1A)\u00CB\\x0014\\x000fD\tz \\x0008\u0080@\u00EA\\x0008@\u009A@\u009A\u0080@x\\x0004J\\x0019\u0083\u00C2\\x0016\u00F8\u00A4nHB\u008B@\\x0000\\x0004@\\x0000\u00D2$<\u00B3\\x0004#\\x0001\\x0002\\x0006\u0081\u00884\u008A\u00B1\u00EA\\x0018\u00A8A\\x0000\\x0004@ \u00BD\\x0004 M M@ J\\x0002\u00DA\u00E6%E\u00ECV\\x00029\u0092\u00DE\u00F1\\x0017/\u00C7 \\x0000\\x0002B\\x0002\u0090&Q\u009A%\\x000c\u00A9 `'\u00C0\u008B\\x0015Mv\u00B0\\x001d\u00D8\u008C\u00A4o\u00C5\\x0006z \\x0000\\x0002 \u0090I\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0001\u00CF\\x001e\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\u00942\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0094\u008F\u0080\u00B6\t\u00A1\u00BE\u00D3 \u00FB\u0091\\x0007\u00F6\u00BB\u0095F\u00CA\u00E4\u00B6cY\\x0016(\u0090&\u00E5{ \u00F1\u00B0\u0081\\x0000\\x0008\u0080@\u00A6\\x0008\u0084\u00F8\u00BB\r\u00F8m\u00CBT\u00F7\\x001cH\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00C8\\x0008\\x0018^\u0090\u009A\u008A|\u00E8\t\u00BF0\u0095R\u0081\\x0002i\\x0012\u00D9\\x0003\u0099\u00D2\\x001e\u0093e\\x001f#\u00DA\\x000e\\x0002  K \u00A2\\x001f\u00DFv\\x00117l\\x000e\\x0008\\x0003o*\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0084D\u00A0\u00F4\u008A\u00C4.V\u00A0Q\u0092\u00AFN MBz \u0093\u00DF\\x0015\u00F0\u00B6\\x0001\\x0002 \\x0000\\x0002\\x0001\t\u00AC\u00AFQ<\\x0016\u00A1\u00CF\u00D7\\x0014Y 4Jb\r\\x0013\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080@P\\x0002\u00F1\\x0014%\u00BC\u00A6\u0081@I\u00A0@\u00814\t\u00FA@&\u00F0f\\x0007|\\x001fBKA\\x0000\\x0004@@H\u0080\u00AC~\u0091\u008E\rv\u00BA\\x0016\u00CDj^0l\\x001c\\x000c\u00ED\\x0012\u0088DI\u008C\u00BD\u00834I\u00CC\u00AD\u0082\u00B0\\x0000\\x0001\\x0010\\x0000\u0081\u00B8\\x0010(F\u0094\\x0018{\u0096\u00E4}j\\x0005c\u00EDq`\u00B1B\u0097\u0086\u00CAL\\x0002\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001i\\x0002\u00C1bJ\u00A2\u0098UaJ%\u0080L\u0081@\u0089\u00BD:\u00814\u0091~ c/\u00F16\\x0000\\x0002 \\x0000\\x0002\\x0011\\x0012\\x0008\u00B0\u00FAFY\u00CD\u00EB\u00D35\\x0012d\u00A4\r\u00A4Q\u00B0\u00D28\\x0008\u00EA\\x0012YLH\u0093\\x0012\u0081\u008Ep\u00BC\u0088q\u00F7B\u00ABA\\x0000\\x0004RB\u00C0\u0097\"\n\\x001f\u0089\u00D4@\u00A7nr/\u00EFG\u0081:\u0091\u00A2Z\\x0006+\tiR\\x0006\u00E8)\\x0019\u00AA\u00E2\u00DA\u00A7\u0081\\x0017\\x0004@ L\\x0002\u00CA\\x001a\\x001ci{\\x001f\\x0013c//\u00A4\u00CA\u00A6\u00A2`z\u00DC\\x0008@\u009A\u00A0\u0080\\x0000\\x0008\u0080\\x0000\\x00088\\x0010\u00F0a\u00E3K0q\u00E3\u00F36\u00C9\u00CF@\u00C5DQ\u00E1}O'\\x0000i\u00E2\u00B3\u00AF\u00A3\u00EB\u0080\\x0000\\x0008\u0080@F\\x0008H\u00EA\u0092\u0098\u00DBu\u00D9V`\u00F1N\u008C\u00AC!\u00A4I\u008CnF\u0098>\u00D8\u008C\\x000c\u009Dh&\\x0008\u0080@D\\x0004d&q\\x0012\u00B4\u00D4EF\u00A0$\u00A89\\x0011\u00DD\u00F4\u00D8\\x0014\\x000bi\\x0002i\\x0002\\x0002 \\x0000\\x0002 `& \u00A5K\u00E27\u0083\u00E3aY\u00E5\u0082dcc\u009E\u00B3\u00FC\u00B2\ni\u0082!\t\\x0004@\\x0000\\x0004@@' \\x0013\u00F4\u009Ah\u00EF\u0082\u008C\u00FB\\x0004\u00EA\u00A4\u00DC\\x0004 M0$\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u00A8\\x0004H\u0097x\u00AE\u00BC\u008Dyd\u0089\u008CM\u0095Q')h\u00A6\\x000c\u008A\u00B8\u00E6\u00814\u00C1\u0090\\x0004\\x0002 \\x0000\\x0002  \u00F7\u00D3\u00C1q\u00B5dA\u00E6><'\u00AD\u00A0N\u00CAw\u00BB!M0$\u0081\\x0000\\x0008\u0080\\x0000\\x0008xm^\u0092\u00E8I\\x001c'\\x0013\u00EB\u00E9>)\u009Fm\\x000e\"\u00B6RT[H\\x0013\\x000cI \\x0000\\x0002 \u0090y\\x0002\u00EE.\u0084\\x0014\u00FB\\x000f<\u00D5I\u008A\u00DB\\x001ec)#\u0096&7\u00BC\u00F4\u00F3U\u009F\u00BFa\u00EFI\u00FA\\x001a\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004JF`\u00E9\u00CF\u00F5$BH\u008A\u00F4\\x001f\u00B7\u00AB\u00B2\u00B2\u00F2\u0092\u00AA\u00AA\u00AA\u00E1s\\x001b\u00FA\u00BC\u00BA\u00B9\u00E7\u00C8\u0095\u00F4\u00C5e\u0083g \u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u00C9\\x0008\u0090\u00FC \\x0011BR\u00C4$M\u00FA\u00BD\u00BE\u009D\\x000e\u0091`\u00A1\u00EF\u0090@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0d\\x0004H~\u0090\\x0008!)\u00A2I\\x0013\u00F2\u009C\u00DC_SO \u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@y\t(\\x0013:\u00F4\\x001f\u00FE\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@L\\x0008\u00FC\u00FF\u00EDM\u00B9\u00AD\u00E4\u0098U\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        }
                    ],
                    "count": "25",
                    "solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>",
                    "otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>",
                    "reference": "<p>https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)</p><p>https://owasp.org/www-community/Security_Headers</p>",
                    "cweid": "693",
                    "wascid": "15",
                    "sourceid": "1",
                    "tags":[ 
                        {
                            "tag": "CWE-693",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/693.html"
                        },
                        {
                            "tag": "OWASP_2021_A05",
                            "link": "https:\/\/owasp.org\/Top10\/A05_2021-Security_Misconfiguration\/"
                        },
                        {
                            "tag": "OWASP_2017_A06",
                            "link": "https:\/\/owasp.org\/www-project-top-ten\/2017\/A6_2017-Security_Misconfiguration.html"
                        }
                    ]
                },
                {
                    "pluginid": "90011",
                    "alertRef": "90011",
                    "alert": "Charset Mismatch (Header Versus Meta Content-Type Charset)",
                    "name": "Charset Mismatch (Header Versus Meta Content-Type Charset)",
                    "riskcode": "0",
                    "confidence": "1",
                    "riskdesc": "Informational (Low)",
                    "desc": "<p>This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.</p><p></p><p>An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.</p>",
                    "instances":[ 
                        {
                            "id": "28",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "90",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "99",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "110",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "132",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "129",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "107",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "",
                            "otherinfo": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        }
                    ],
                    "count": "7",
                    "solution": "<p>Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.</p>",
                    "otherinfo": "<p>There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [utf-8] and [ISO-8859-1] do not match.</p>",
                    "reference": "<p>https://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection</p>",
                    "cweid": "436",
                    "wascid": "15",
                    "sourceid": "1",
                    "tags":[ 
                        {
                            "tag": "CWE-436",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/436.html"
                        }
                    ]
                },
                {
                    "pluginid": "10109",
                    "alertRef": "10109",
                    "alert": "Modern Web Application",
                    "name": "Modern Web Application",
                    "riskcode": "0",
                    "confidence": "2",
                    "riskdesc": "Informational (Medium)",
                    "desc": "<p>The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.</p>",
                    "instances":[ 
                        {
                            "id": "51",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"0__hackers\"></A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "101",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"0__hackers\"></A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "104",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"1__setup\"> </A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "121",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"2__cross_site_scripting\"> </A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "137",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"3__client_state_manipulation\"> </A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "133",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"4__path_traversal\"> </A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "120",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "<A name=\"5__configuration_vulnerabilities\"> </A>",
                            "otherinfo": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        }
                    ],
                    "count": "7",
                    "solution": "<p>This is an informational alert and so no changes are required.</p>",
                    "otherinfo": "<p>Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.</p>",
                    "reference": "",
                    "cweid": "-1",
                    "wascid": "-1",
                    "sourceid": "1",
                    "tags":[ 
                    ]
                },
                {
                    "pluginid": "10015",
                    "alertRef": "10015",
                    "alert": "Re-examine Cache-control Directives",
                    "name": "Re-examine Cache-control Directives",
                    "riskcode": "0",
                    "confidence": "1",
                    "riskdesc": "Informational (Low)",
                    "desc": "<p>The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.</p>",
                    "instances":[ 
                        {
                            "id": "24",
                            "uri": "https://google-gruyere.appspot.com",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: c7e453f0b33f14b8b7729d00f55d6549\r\nDate: Fri, 28 Feb 2025 11:56:55 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "84",
                            "uri": "https://google-gruyere.appspot.com/",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/ HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 7c8a148306fa87670782dc52b8f2cbcc\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 11506\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses <!--PART#--></FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<STYLE>.column1 {display:none}</STYLE>\n<BR><P>\n<H2><A name=\"0__hackers\"></A>Want to beat the hackers at their own game?</H2>\n<UL>\n<LI>Learn how hackers find security vulnerabilities!\n<LI>Learn how hackers exploit web applications!\n<LI>Learn how to stop them!\n</UL>\n</P>\n<!--MARK-0-->\n<P>\nThis codelab shows how web application vulnerabilities can be\nexploited and how to defend against these attacks. The best way to\nlearn things is by doing, so you'll get a chance to do some real\npenetration testing, actually exploiting a real\napplication. Specifically, you'll learn the following:\n</P>\n<P></P>\n<UL>\n<LI> How an application can be attacked using common web security\nvulnerabilities, like cross-site scripting vulnerabilities (XSS) and\ncross-site request forgery (XSRF).\n</LI>\n<LI> How to find, fix, and avoid these common vulnerabilities and\nother bugs that have a security impact, such as denial-of-service,\ninformation disclosure, or remote code execution.\n</LI>\n</UL>\n<P>\nTo get the most out of this lab, you should have some familiarity with\nhow a web application works (e.g., general knowledge of HTML,\ntemplates, cookies, AJAX, etc.).\n</P>\n<!--MARK-1-->\n<BR>\n<BR>\n<H2><A name=\"1__gruyere\"> </A> Gruyere </H2>\n<P>\n<A href=\"/static/gruyere.png\">\n<IMG src=\"/static/gruyere.png\" height=\"285\" border=\"0\"\n    style=\"float:left; vertical-align:middle; margin-right: 10; margin-bottom: 10\">\n</A>\nThis codelab is built around <B>Gruyere</B>\n /&#609;ru&#720;&#712;j&#603;&#601;r/ <!--groo-yair--> - a\nsmall, cheesy web application that allows its users to publish\nsnippets of text and store assorted files. \"Unfortunately,\" Gruyere\nhas multiple security bugs ranging from cross-site scripting and\ncross-site request forgery, to information disclosure, denial of\nservice, and remote code execution. The goal of this codelab is to\nguide you through discovering some of these bugs and learning ways to\nfix them both in Gruyere and in general.\n</P>\n<P> The codelab is organized by types of vulnerabilities. In each\nsection, you'll find a brief description of a vulnerability and a task\nto find an instance of that vulnerability in Gruyere. Your job is to\nplay the role of a malicious hacker and find and exploit the security\nbugs. In this codelab, you'll use both black-box hacking and white-box\nhacking. In <B>black box hacking,</B> you try to find security bugs by\nexperimenting with the application and manipulating input fields and\nURL parameters, trying to cause application errors, and looking at the\nHTTP requests and responses to guess server behavior. You do not have\naccess to the source code, although understanding how to view source\nand being able to view http headers (as you can in Chrome or\nLiveHTTPHeaders for Firefox) is valuable. Using a web proxy\nlike <A href=\"https://portswigger.net/burp/\" target=\"_top\">Burp</A>\nor <A href=\"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\"\ntarget=\"_top\">ZAP</A> may be helpful in creating or modifying\nrequests. In <B>white-box hacking,</B> you have access to the source\ncode and can use automated or manual analysis to identify bugs. You\ncan treat Gruyere as if it's open source: you can read through the\nsource code to try to find bugs. Gruyere is written in Python, so\nsome familiarity with Python can be helpful. However, the security\nvulnerabilities covered are not Python-specific and you can do most of\nthe lab without even looking at the code. You can run a local instance\nof Gruyere to assist in your hacking: for example, you can create an\nadministrator account on your local instance to learn how\nadministrative features work and then apply that knowledge to the\ninstance you want to hack. Security researchers use both hacking\ntechniques, often in combination, in real life.\n</P>\n<BR clear=\"left\">\nWe'll tag each challenge to indicate which techniques are\nrequired to solve them:\n<BR><BR>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that can be solved just by using\nblack box techniques.<BR><BR>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require that you look at the\nGruyere source code.<BR><BR>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> Challenges that require some specific knowledge\nof Gruyere that will be given in the first hint.\n<BR>\n<P style=\"color:red\">\n<B>WARNING:</B> Accessing or attacking a computer system without\nauthorization is illegal in many jurisdictions. While doing this\ncodelab, you are specifically granted authorization to attack the\nGruyere application as directed. You may not attack Gruyere in\nways other than described in this codelab, nor may you attack App\nEngine directly or any other Google service. You should use what you\nlearn from the codelab to make your own applications more secure. You\nshould not use it to attack any applications other than your own, and\nonly do that with permission from the appropriate authorities (e.g.,\nyour company's security team).\n</P>\n<P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part1\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "8",
                            "uri": "https://google-gruyere.appspot.com/0",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/0 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: a9f0ac717d65264e0a123b06e2bc74bf\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "7",
                            "uri": "https://google-gruyere.appspot.com/1",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 73e1a5b9c1417e1d6b0ae95cd2637949\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "16",
                            "uri": "https://google-gruyere.appspot.com/2",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: daec9d0ea756ad5b852dda0f1c3f35e0\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "6",
                            "uri": "https://google-gruyere.appspot.com/3",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ae5bf9d4631ee9b68a8f0dc194d790c\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "87",
                            "uri": "https://google-gruyere.appspot.com/4",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: d526efc028ff43bac2d548501f7ec6ce\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "31",
                            "uri": "https://google-gruyere.appspot.com/5",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6e4e4f9574397074b8c5de69b04233ee\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "70",
                            "uri": "https://google-gruyere.appspot.com/6",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/6 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 6b64469b26d2e767d2aa4b32bcb07104\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "92",
                            "uri": "https://google-gruyere.appspot.com/7",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/7 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: b79e83e770fdf4f2e8c5079ae5fb3622\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "27",
                            "uri": "https://google-gruyere.appspot.com/8",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/8 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 1efa39b9dda98d4c2c7fa8bde0f71130\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "37",
                            "uri": "https://google-gruyere.appspot.com/9",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/9 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 2ac5f78b2f3cc5f49983bb060c2740d1\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 359\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Gruyere Error</TITLE>\n    <BODY>\n    <H1>Gruyere Error</H1>\n    That instance does not exist.\n    <H2><A href=\"/\">Home</A></H2>\n    <H2><A href=\"/start\">Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "97",
                            "uri": "https://google-gruyere.appspot.com/part1",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part1 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 82f758ba4b72d278b7729d00f55d641a\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 13650\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 1)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"1__setup\"> </A> Setup </H2>\n<P>\nTo access Gruyere, go to\n<CODE><A href=\"/start\">https://google-gruyere.appspot.com/start</A></CODE>.\nAppEngine will start a new instance of Gruyere for you, assign it a\nunique id and redirect you to\n<CODE>https://google-gruyere.appspot.com/<!--do not replace-->123/</CODE>\n(where <CODE>123</CODE> is your unique id). Each instance of Gruyere\nis \"sandboxed\" from the other instances so your instance won't be\naffected by anyone else using Gruyere. You'll need to use your\nunique id instead of <CODE>123</CODE> in all the examples. If you want\nto share your instance of Gruyere with someone else (e.g., to show\nthem a successful attack), just share the full URL with them including\nyour unique id.\n</P>\n<P>The Gruyere source code is available online so that you can use\nit for white-box hacking. You can browse the source code\nat <A href=\"/code/\">https://google-gruyere.appspot.com/code/</A> or download\nall the files\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>.\nIf want to debug it or actually try fixing the bugs, you can download\nit and run it locally. You do not need to run Gruyere locally in\norder to do the lab.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'running_locally');\"><IMG src=\"/static/closed.gif\"> Running locally </H4>\n<DIV id=\"running_locally\" style=\"display:none\">\n<P>\n<FONT color=\"#ff0000\">\n<B>WARNING:</B> Because Gruyere is very vulnerable, it\nincludes some protection against being exploited by an external\nattacker when run locally. You'll see these parts of the code marked\nDO NOT CHANGE. Gruyere only accepts requests from localhost and uses\na random unique id in the URL. However, it's difficult to fully\nprotect against an external attack. And if you make changes to\nGruyere you could make it more vulnerable to a real\nattack. Therefore, you should close other web pages while running\nGruyere locally and you should make sure that no other user is\nlogged in to the machine you are using.\n</FONT>\n</P>\n<P> To run Gruyere locally, you'll first need to install Python 2.7,\nif you don't already have it. Gruyere was developed and tested with\nversion 2.7 and may not work with other versions of Python. You can\ndownload it from <A href=\"https://www.python.org/downloads/\"\ntarget=\"_top\">python.org</A>. Download Gruyere itself\nfrom <A href=\"/gruyere-code.zip\">https://google-gruyere.appspot.com/gruyere-code.zip</A>\nand unpack it to your local disk. Then to run the application, simply\ntype:\n</P>\n<P></P>\n<PRE>\n$ cd &lt;gruyere-directory&gt;\n$ ./gruyere.py</PRE>\n<P>\nYou'll need to replace <CODE>google-gruyere.appspot.com</CODE> in all the\nexamples with <CODE>localhost:8008</CODE> in addition to\nreplacing <CODE>123</CODE> with your unique id. Note that the unique\nid appears in a different location. There are a few other small\ndifferences between running Gruyere locally vs. accessing the\ninstance on App&nbsp;Engine. The most obvious is that the\nApp&nbsp;Engine version runs in a limited sandbox. So if you do\nsomething that puts Gruyere into an infinite loop, the monitor will\ndetect it and kill it. That might not happen when you run it locally,\ndepending on what the loop is doing.\n</P>\n</DIV>\n</DIV>\n<BR>\n<H3><A name=\"1__reset_button\"> </A> Reset Button </H3>\nAs noted above, each instance is sandboxed so it can't consume\ninfinite resources and it can't interfere with anyone else's\ninstance. Notwithstanding that, it is possible to put your Gruyere\ninstance into a state where it is completely unusable. If that\nhappens, you can push a magic \"reset button\" to wipe out all the data\nin your instance and start from scratch. To do this, visit this\nURL with your instance id:\n<PRE>\nhttps://google-gruyere.appspot.com/resetbutton/123\n</PRE>\n<BR>\n<H3><A name=\"1__about_the_code\"> </A> About the Code </H3>\n<P>\nGruyere is small and compact. Here is a quick rundown of the\napplication code:\n</P><UL>\n<LI> <CODE><A href=\"/code/?gruyere.py\">gruyere.py</A></CODE>\nis the main Gruyere web server\n</LI>\n<LI> <CODE><A href=\"/code/?data.py\">data.py</A></CODE>\nstores the default data in the database. There is an administrator\naccount and two default users.\n</LI>\n<LI> <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\nis the Gruyere template language\n</LI>\n<LI> <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nis the Gruyere module used for sanitizing HTML to protect the\napplication from security holes.\n</LI>\n<LI> <CODE><A href=\"/code/\">resources/...</A></CODE>\nholds all template files, images, CSS, etc.\n</LI>\n</UL>\n<P></P>\n<BR>\n<H3><A name=\"1__features_and_technologies\"> </A> Features and Technologies </H3>\n<P>\nGruyere includes a number of special features and technologies which\nadd attack surface. We'll highlight them here so you'll be aware of\nthem as you try to attack it. Each of these introduces new\nvulnerabilities.\n</P>\n<P></P>\n<UL>\n<LI> HTML in Snippets: Users can include a limited subset of HTML in\ntheir snippets.\n</LI>\n<LI> File upload: Users can upload files to the server, e.g., to\ninclude pictures in their snippets.\n</LI>\n<LI> Web administration: System administrators can manage the system\nusing a web interface.\n</LI>\n<LI> New accounts: Users can create their own accounts.\n</LI>\n<LI> Template language: Gruyere Template Language(GTL) is a new\nlanguage that makes writing web pages easy as the templates connect\ndirectly to the database. Documentation for GTL can be found\nin <CODE><A href=\"/code/?gtl.py\">gruyere/gtl.py</A></CODE>.\n</LI>\n<LI> AJAX: Gruyere uses AJAX to implement refresh on the home and\nsnippets page. You should ignore the AJAX parts of Gruyere except\nfor the challenges that specifically tell you to focus on AJAX.\n<UL>\n<LI> In a real application, refresh would probably happen\nautomatically, but in Gruyere we've made it manual so that you can\nbe in complete control while you are working with it.  When you click\nthe refresh link, Gruyere\nfetches <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE>\nwhich contains refresh data for the current page and then client-side\nscript uses the browser DOM API (Document Object Model) to insert the\nnew snippets into the page. Since AJAX runs code on the client side,\nthis script is visible to attackers who do not have access to your\nsource code.\n</LI>\n</UL>\n</LI>\n</UL>\n<P></P>\n<BR>\n<H2><A name=\"1__using_gruyere\"> </A> Using Gruyere </H2>\n<P>\nTo familiarize yourself with the features of Gruyere, complete the\nfollowing tasks:\n</P>\n<P></P>\n<UL>\n<LI> View another user's snippets by following the \"All snippets\" link\non the main page. Also check out what they have their Homepage set to.\n</LI>\n<LI> Sign up for an account for yourself to use when\nhacking. <B>Do not use the same password for your Gruyere\naccount as you use for any real service.</B>\n</LI>\n<LI> Fill in your account's profile, including a private snippet and\nan icon that will be displayed by your name.\n</LI>\n<LI> Create a snippet (via \"New Snippet\") containing your favorite\njoke.\n</LI>\n<LI> Upload a file (via \"Upload\") to your account.\n</LI>\n</UL>\n<P></P>\n<P> This covers the basic features provided by Gruyere. Now\nlet's break them!\n</P>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part2\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "108",
                            "uri": "https://google-gruyere.appspot.com/part2",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part2 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 578888820e85b1384a4bcc1a5a73a790\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 37096\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 2)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"2__cross_site_scripting\"> </A> Cross-Site Scripting\n(XSS) </H2>\n<P>\nCross-site scripting (XSS) is a vulnerability that permits an attacker\nto inject code (typically HTML or JavaScript) into contents of a\nwebsite not under the attacker's control. When a victim views such a\npage, the injected code executes in the victim's browser. Thus, the\nattacker has bypassed the\nbrowser's <A href=\"https://www.google.com/search?q=same+origin+policy\">same\norigin policy</A> and can steal victim's private information\nassociated with the website in question.\n</P>\n<P>\nIn a <b>reflected XSS</b> attack, the attack is in the request itself\n(frequently the URL) and the vulnerability occurs when the server\ninserts the attack in the response verbatim or incorrectly escaped or\nsanitized. The victim triggers the attack by browsing to a malicious\nURL created by the attacker. In a <b>stored XSS</b> attack, the attacker\nstores the attack in the application (e.g., in a snippet) and the\nvictim triggers the attack by browsing to a page on the server that\nrenders the attack, by not properly escaping or sanitizing the stored\ndata.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xss_desc\" style=\"display:none\">\n<P></P>\n<P> To understand how this could happen: suppose the\nURL <CODE>https://www.google.com/search?q=flowers</CODE> returns a page\ncontaining the HTML fragment\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nthat is, the value of the query parameter <CODE>q</CODE> is inserted\nverbatim into the page returned by\nGoogle. If <CODE>www.google.com</CODE> did not do any validation or\nescaping of <CODE>q</CODE> (it does), an attacker could craft a link\nthat looks like this:<BR>\n<PRE>\nhttps://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E\n</PRE>\nand trick a victim into clicking on this link. When a victim loads\nthis link, the following page gets rendered in the victim's browser:\n</P>\n<P></P>\n<PRE>\n&lt;p&gt;Your search for 'flowers&lt;script&gt;evil_script()&lt;/script&gt;'\nreturned the following results:&lt;/p&gt;\n</PRE>\n<P>\nAnd the browser executes <CODE>evil_script()</CODE>. And since\nthe page comes\nfrom <CODE>www.google.com</CODE>, <CODE>evil_script()</CODE> is\nexecuted in the context of <CODE>www.google.com</CODE> and has access\nto all the victim's browser state and cookies for that domain.\n</P>\n<P> Note that the victim does not even need to explicitly click on the\nmalicious link. Suppose the attacker\nowns <CODE>www.evil.example.com</CODE>, and creates a page with an\n<CODE>&lt;iframe&gt;</CODE> pointing to the malicious link; if the\nvictim visits <CODE>www.evil.example.com</CODE>, the attack will\nsilently be activated.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__xss_challenge\"> </A> XSS Challenges </H3>\n<P>\nTypically, if you can get JavaScript to execute on a page when it's\nviewed by another user, you have an XSS vulnerability. A simple\nJavaScript function to use when hacking is the <CODE>alert()</CODE>\nfunction, which creates a pop-up box with whatever string you pass as\nan argument.\n</P>\n<P>You might think that inserting an alert message isn't terribly\ndangerous, but if you can inject that, you can inject other scripts\nthat are more malicious. It is not necessary to be able to inject any\nparticular special character in order to attack. If you can\ninject <CODE>alert(1)</CODE> then you can inject arbitrary script\nusing <CODE>eval(String.fromCharCode(...))</CODE>.\n</P>\n<P> Your challenge is to find XSS vulnerabilities in Gruyere. You\nshould look for vulnerabilities both in URLs and in stored data. Since\nXSS vulnerabilities usually involve applications not properly handling\nuntrusted user data, a common method of attack is to enter random text\nin input fields and look at how it gets rendered in the response\npage's HTML source. But before we do that, let's try something simpler.\n</P>\n<P></P>\n<H3><A name=\"2__file_upload_xss\"> </A> File Upload XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Can you upload a file that allows you to execute arbitrary script\non the <CODE>google-gruyere.appspot.com</CODE> domain?</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"upload_xss_hint1\" style=\"display:none\">\n<P>\nYou can upload HTML files and HTML files can contain script.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'upload_xss_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"upload_xss_sol\" style=\"display:none\">\n<P><B>To exploit,</B> upload a <CODE>.html</CODE> file containing a script like this:\n<PRE>\n&lt;script&gt;\nalert(document.cookie);\n&lt;/script&gt;\n</PRE>\n</P><P>\n<B>To fix,</B> host the content on a separate domain so the script\nwon't have access to any content from your domain. That is, instead of\nhosting user content on <CODE>example.com/<I>username</I></CODE> we\nwould host it at <CODE><I>username</I>.usercontent.example.com</CODE>\nor <CODE><I>username</I>.example-usercontent.com</CODE>. (Including\nsomething like \"<CODE>usercontent</CODE>\" in the domain name avoids\nattackers registering usernames that look innocent\nlike <CODE>wwww</CODE> and using them for phishing attacks.)\n<P>\n</DIV>\n</DIV>\n<H3><A name=\"2__reflected_xss\"> </A> Reflected XSS </H3>\n<P>\nThere's an interesting problem here. Some browsers have built-in\nprotection against reflected XSS attacks. There are also browser\nextensions like NoScript that provide some protection.  If you're\nusing one of those browsers or extensions, you may need to use a\ndifferent browser or temporarily disable the extension to execute\nthese attacks.\n</P>\n<P>At the time this codelab was written, the two browsers which had\nthis protection were IE and Chrome. To work around this, Gruyere\nautomatically includes a <TT>X-XSS-Protection: 0</TT> HTTP header in\nevery response which is recognized by IE and will be recognized by\nfuture versions of Chrome. (It's available in the developer channel\nnow.) If you're using Chrome, you can try starting it with\nthe <TT>--disable-xss-auditor</TT> flag by entering one of these\ncommands:\n<UL><LI>Windows: <TT>\"C:\\Documents and Settings\\USERNAME\\Local\nSettings\\Application\nData\\Google\\Chrome\\Application\\chrome.exe\" --disable-xss-auditor</TT>\n<LI>Mac: <TT>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\n--disable-xss-auditor</TT>\n<LI>GNU/Linux: <TT>/opt/google/chrome/google-chrome --disable-xss-auditor</TT>\n</UL>\nIf you're using Firefox with the NoScript extension,\nadd <TT>google-gruyere.appspot.com</TT> to the allow list. If you still\ncan't get the XSS attacks to work, try a different browser.\n</P>\n<P>You may think that you don't need to worry about XSS if the browser\nprotects against it. The truth is that the browser protection can't be\nperfect because it doesn't really know your application and therefore\nthere may be ways for a clever hacker to circumvent that\nprotection. The real protection is to not have an XSS vulnerability in\nyour application in the first place.\n</P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a reflected XSS attack. What we want is a URL\nthat when clicked on will execute a script.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_url_hint1\" style=\"display:none\">\n<P>\nWhat does this URL do?\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/invalid\n</PRE>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_url_hint2\" style=\"display:none\">\n<P>\nThe most dangerous characters in a URL are <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE>. If you can get an application to directly\ninsert what you want in a page and can get those characters through,\nthen you can probably get a script through. Try these:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/%3e%3c\nhttps://google-gruyere.appspot.com/123/%253e%253c\nhttps://google-gruyere.appspot.com/123/%c0%be%c0%bc\nhttps://google-gruyere.appspot.com/123/%26gt;%26lt;\nhttps://google-gruyere.appspot.com/123/%26amp;gt;%26amp;lt;\nhttps://google-gruyere.appspot.com/123/\\074\\x3c\\u003c\\x3C\\u003C\\X3C\\U003C\nhttps://google-gruyere.appspot.com/123/+ADw-+AD4-\n</PRE>\n<P>\nThis tries <CODE>&gt;</CODE> and <CODE>&lt;</CODE> in many different\nways that might be able to make it through the URL and get rendered\nincorrectly using: verbatim (URL %-encoding), double %-encoding, bad\nUTF-8 encoding, HTML &amp;-encoding, double &amp;-encoding, and\nseveral different variations on C-style encoding. View the resulting\nsource and see if any of those work. (Note: literally\ntyping <CODE>&gt;&lt;</CODE> in the URL is identical\nto <CODE>%3e%3c</CODE> because the browser automatically %-encodes\nthose character. If you are trying to want a literal <CODE>&gt;</CODE>\nor <CODE>&lt;</CODE> then you will need to use a tool like curl to\nsend those characters in URL.)\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_url_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_url_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a\nvictim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\n<B>To fix,</B> you need to escape user input that is displayed in\nerror messages. Error messages are displayed\nusing <CODE><A href=\"/code/?resources/error.gtl\">error.gtl</A></CODE>,\nbut are not escaped in the template. The part of the template that\nrenders the message is <CODE>{{message}}</CODE> and it's missing the\nmodifier that tells it to escape user input. Add\nthe <CODE>:text</CODE> modifier to escape the user input:\n</P><PRE>\n&lt;div class=\"message\"&gt;{{_message:text}}&lt;/div&gt;\n</PRE>\n<P>\nThis flaw would have been best mitigated by a design that escapes all\noutput by default and only displays raw HTML when explicitly tagged to\ndo so. There are\nalso <A href=\"https://www.google.com/search?q=XSS+auto+escaping\"\ntarget=\"_top\">autoescaping</A> features available in many template\nsystems.\n</P>\n<!--MARK-2-->\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss\"> </A> Stored XSS </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Now find a stored XSS. What we want\nto do is put a script in a place where Gruyere will serve it back to\nanother user.</B>\n</P>\nThe most obvious place that Gruyere serves back\nuser-provided data is in a snippet (ignoring uploaded files which we've already discussed.)<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_stored_hint1\" style=\"display:none\">\n<P>\nPut this in a snippet and see what you get:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;alert(1)&lt;/script&gt;\n</PRE>\n<P>\nThere are many different ways that script can be embedded in a\ndocument.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_stored_hint2\" style=\"display:none\">\n<P>\nHackers don't limit themselves to valid HTML syntax. Try some invalid\nHTML and see what you get. You may need to experiment a bit in order\nto find something that will work. There are multiple ways to do this.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> enter any of these as your snippet (there\nare certainly more methods):\n</P>\n<P></P>\n<PRE>\n(1) &lt;a onmouseover=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n\n(2) &lt;p &lt;script&gt;alert(1)&lt;/script&gt;hello\n\n(3) &lt;/td &lt;script&gt;alert(1)&lt;/script&gt;hello\n</PRE>\n<P>\nNotice that there are multiple failures in sanitizing the\nHTML. Snippet 1 worked because <CODE>onmouseover</CODE> was\ninadvertently omitted from the list of disallowed attributes\nin <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>. Snippets\n2 and 3 work because browsers tend to be forgiving with HTML syntax\nand the handling of both start and end tags is buggy.\n</P>\n<P>\n<B>To fix,</B> we need to investigate and fix the sanitizing performed\non the snippets. Snippets are sanitized in <CODE>_SanitizeTag</CODE>\nin the <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>\nfile. Let's block snippet 1 by adding <CODE>\"onmouseover\"</CODE> to\nthe list of <CODE>disallowed_attributes</CODE>.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Looking at\nthe code that was just fixed, can you find a way to bypass the fix?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xss_stored_not_fixed_hint\" style=\"display:none\">\n<P>\nTake a close look at the code in <CODE>_SanitizeTag</CODE> that\ndetermines whether or not an HTML attribute is allowed or not.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_stored_not_fixed');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xss_stored_not_fixed\" style=\"display:none\">\n<P>\nThe fix was insufficient because the code that checks for disallowed\nattributes is case sensitive and HTML is not. So this still works:\n</P>\n<P></P>\n<PRE>\n(1') &lt;a ONMOUSEOVER=\"alert(1)\" href=\"#\"&gt;read this!&lt;/a&gt;\n</PRE>\n<P>\nCorrectly sanitizing HTML is a tricky\nproblem. The <CODE>_SanitizeTag</CODE> function has a number of\ncritical design flaws:\n</P>\n<P></P>\n<UL>\n<LI> It does not validate the well-formedness of the input HTML. As we\nsee, badly formed HTML passes through the sanitizer unchanged. Since\nbrowsers typically apply very lenient parsing, it is very hard to\npredict the browser's interpretation of the given HTML unless we\nexercise strict control on its format.\n</LI>\n<LI> It uses blacklisting of attributes, which is a bad technique. One\nof our exploits got past the blacklist simply by using an uppercase\nversion of the attribute. There could be other\nattributes <A href=\"https://www.w3.org/TR/html40/index/attributes.html\"\ntarget=\"_top\">missing from this list</A> that are dangerous. It is\nalways better to whitelist known good values.\n</LI>\n<LI> The sanitizer does not do any further sanitization of attribute\nvalues. This is dangerous since URI attributes like <CODE>href</CODE>\nand <CODE>src</CODE> and the <CODE>style</CODE> attribute can all be\nused to inject JavaScript.\n</LI>\n</UL>\n<P>\nThe right approach to HTML sanitization is to:\n</P><UL>\n<LI> Parse the input into an intermediate DOM structure, then rebuild\nthe body as well-formed output.\n</LI>\n<LI> Use strict whitelists for allowed tags and attributes.\n</LI>\n<LI> Apply strict sanitization of URL and CSS attributes if they are\npermitted.\n</LI>\n</UL>\n<P>Whenever possible it is preferable to use an already available known\nand proven <A href=\"https://www.google.com/search?q=sanitize+html\"\ntarget=\"_top\">HTML sanitizer</A>.\n</P>\n<!--MARK-3-->\n<P></P>\n</DIV>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_html_attribute\"> </A> Stored XSS via\nHTML Attribute </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>You can also do XSS by injecting a value into an\nHTML attribute. Inject a script by setting the color value in a\nprofile.</B>\n</P><DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_color_hint\" style=\"display:none\">\n<P>\nThe color is rendered as <CODE>style='color:<I>color</I>'</CODE>.\nTry including a single quote character in your color name.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_color_hint2\" style=\"display:none\">\n<P>\nYou can insert an HTML attribute that executes a script.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_color_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_color_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> use the following for your color\npreference:\n</P>\n<P></P>\n<PRE>\nred' onload='alert(1)' onmouseover='alert(2)\n</PRE>\n<P>\nYou may need to move the mouse over the snippet to trigger the\nattack. This attack works because the first quote ends\nthe <CODE>style</CODE> attribute and the second quote starts the\nonload attribute.\n</P>\n<P> But this attack shouldn't work at all. Take a look\nat <CODE><A href=\"/code/?resources/home.gtl\">home.gtl</A></CODE> where\nit renders the color. It says <CODE>style='{{color:text}}'</CODE> and\nas we saw earlier, the <CODE>:text</CODE> part tells it to escape\ntext. So why doesn't this get escaped?\nIn <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>, it\ncalls <CODE>cgi.escape(str(value))</CODE> which takes an optional\nsecond parameter that indicates that the value is being used in an\nHTML attribute. So you can replace this\nwith <CODE>cgi.escape(str(value),True)</CODE>. Except that doesn't fix\nit! The problem is that <CODE>cgi.escape</CODE> assumes your HTML\nattributes are enclosed in double quotes and this file is using single\nquotes. (This should teach you to always carefully read the\ndocumentation for libraries you use and to always test that they do\nwhat you want.)\n</P>\n<P> You'll note that this attack uses both <CODE>onload</CODE>\nand <CODE>onmouseover</CODE>. That's because even though W3C specifies\nthat onload events is only supported on <CODE>body</CODE>\nand <CODE>frameset</CODE> elements, some browsers support them on\nother elements. So if the victim is using one of those browsers, the\nattack always succeeds. Otherwise, it succeeds when the user moves the\nmouse. It's not uncommon for attackers to use multiple attack vectors\nat the same time.\n</P>\n<P>\n<B>To fix,</B> we need to use a correct text escaper, that escapes\nsingle and double quotes too. Add the following function\nto <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE> and call it instead\nof <CODE>cgi.escape</CODE> for the <CODE>text</CODE> escaper.\n</P>\n<P></P>\n<PRE>\ndef _EscapeTextToHtml(var):\n  \"\"\"Escape HTML metacharacters.\n\n  This function escapes characters that are dangerous to insert into\n  HTML. It prevents XSS via quotes or script injected in attribute values.\n\n  It is safer than cgi.escape, which escapes only &lt;, &gt;, &amp; by default.\n  cgi.escape can be told to escape double quotes, but it will never\n  escape single quotes.\n  \"\"\"\n  meta_chars = {\n      '&quot;': '&amp;quot;',\n      '\\&#39;': '&amp;#39;',  # Not &amp;apos;\n      '&amp;': '&amp;amp;',\n      '&lt;': '&amp;lt;',\n      '&gt;': '&amp;gt;',\n      }\n  escaped_var = \"\"\n  for i in var:\n    if i in meta_chars:\n      escaped_var = escaped_var + meta_chars[i]\n    else:\n      escaped_var = escaped_var + i\n  return escaped_var\n</PRE>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem.  Even with the\nabove fix in place, the color value is still vulnerable.\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"another_style_xss_hint1\" style=\"display:none\">\n<P>\nSome browsers allow you to include script in stylesheets.\n</P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"another_style_xss_hint2\" style=\"display:none\">\n<P>\nThe easiest browser to exploit in this way is Internet Explorer which\nsupports dynamic CSS properties.\n</P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_style_xss_sol');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"another_style_xss_sol\" style=\"display:none\">\n<P>\nInternet Explorer's dynamic CSS properites (aka CSS expressions) make\nthis attack particularly easy.\n</P>\n<B>To exploit,</B> use the following for your color\npreference:\n<PRE>\nexpression(alert(1))\n</PRE>\n<P>\nWhile other browsers don't support CSS expressions, there are other\ndangerous CSS properties, such as Mozilla's <CODE>-moz-binding</CODE>.\n</P>\n<P>\n<B>To fix,</B> we need to sanitize the color as a color.\nThe best thing to do would be to add a new output sanitizing form to\ngtl, i.e., we would write <CODE>{{foo:color}}</CODE> which makes\nsure <CODE>foo</CODE> is safe to use as a color. This function can be\nused to sanitize:\n</P>\n<PRE>\nSAFE_COLOR_RE = re.compile(r\"^#?[a-zA-Z0-9]*$\")\n\ndef _SanitizeColor(color):\n  \"\"\"Sanitizes a color, returning 'invalid' if it's invalid.\n\n  A valid value is either the name of a color or # followed by the\n  hex code for a color (like #FEFFFF). Returning an invalid value\n  value allows a style sheet to specify a default value by writing\n  'color:default; color:{{foo:color}}'.\n  \"\"\"\n\n  if SAFE_COLOR_RE.match(color):\n    return color\n  return 'invalid'\n</PRE>\n<P>\nColors aren't the only values we might want to allow users to\nprovide. You should do similar sanitizing for user-provided fonts,\nsizes, urls, etc.  It's helpful to do input validation, so that when a\nuser enters an invalid value, you'll reject it at that time. But only\ndoing input validation would be a mistake: if you find an error in\nyour validation code or a new browser exposes a new attack vector,\nyou'd have to go back and scrub all previously entered values. Or, you\ncould add the output validation which you should have been doing in\nthe first place.\n</DIV>\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__stored_xss_via_ajax\"> </A> Stored XSS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an XSS attack that uses a bug in\nGruyere's AJAX code.</B> The attack should be triggered when you click\nthe refresh link on the page.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax_hint\" style=\"display:none\">\n<P>\nRun <CODE>curl</CODE>\non <CODE>https://google-gruyere.appspot.com/123/feed.gtl</CODE> and look at\nthe result. (Or browse to it in your browser and view source.)  You'll\nsee that it includes each user's first snippet into the response. This\nentire response is then evaluated on the client side which then\ninserts the snippets into the document. Can you put something in your\nsnippet that will be parsed differently than expected?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax_hint2\" style=\"display:none\">\n<P>\nTry putting some quotes (<CODE>&quot;</CODE>) in your snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Put this in your snippet:\n</P>\n<P></P>\n<PRE>\nall &lt;span style=display:none&gt;\"\n+ (alert(1),\"\")\n+ \"&lt;/span&gt;your base\n</PRE>\n<P>\nThe JSON should look like\n<PRE>_feed(({..., \"Mallory\": \"snippet\", ...}))</PRE>\nbut instead looks like this:\n<PRE>_feed({..., \"Mallory\": <U>\"all &lt;span style=display:none&gt;\"</U>\n+ <U>(alert(1),\"\")</U>\n+ <U>\"&lt;/span&gt;your base\"</U>, ...})</PRE>\nEach underlined part is\na separate expression. Note that this exploit is written to be\ninvisible both in the original page rendering (because of\nthe <CODE>&lt;span style=display:none&gt;</CODE>) and after refresh (because it inserts only an empty string). All that will appear on the screen\nis <A href=\"https://www.google.com/search?q=all+your+base+are+belong+to+us\"\ntarget=\"_top\">all your base</A>. There are bugs on both the server\nand client sides which enable this attack.\n</P>\n<P>\n<B>To fix,</B> first, on the server side, the text is incorrectly\nescaped when it is rendered in the JSON response. The template\nsays <CODE>{{snippet.0:html}}</CODE> but that's not enough. This text\nis going to be inserted into the innerHTML of a DOM node so the HTML\ndoes have to be sanitized. However, that sanitized text is then going\nto be inserted into JavaScript and single and double quotes have to be\nescaped. That is, adding support for <CODE>{{...:js}}</CODE> to GTL\nwould not be sufficient; we would also need to support something\nlike <CODE>{{...:html:js}}</CODE>.\n</P><P>To escape quotes, use <CODE>\\x27</CODE> and <CODE>\\x22</CODE>\nfor single and double quote respectively. Replacing them\nwith <CODE>&amp;#27;</CODE> and <CODE>&amp;quot;</CODE> is incorrect\nas those are not recognized in JavaScript strings and will break\nquotes around HTML attribute.\n</P>\n<P> Second, in the browser, Gruyere converts the JSON by using\nJavaScript's <CODE>eval</CODE>. In general, <CODE>eval</CODE> is very\ndangerous and should rarely be used. If it used, it must be used very\ncarefully, which is hardly the case here. We should be using the JSON\nparser which ensures that the string does not include any unsafe\ncontent. The JSON parser is available\nat <A href=\"http://www.json.org/\" target=\"_top\">json.org</A>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"2__reflected_xss_via_ajax\"> </A> Reflected XSS via\nAJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"><B>Find a URL that when clicked on will execute a\nscript using one of Gruyere's AJAX features.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"xss_ajax2_hint\" style=\"display:none\">\n<P>\nWhen Gruyere refreshes a user snippets page, it\nuses\n<PRE>https://google-gruyere.appspot.com/123/feed.gtl?uid=value</PRE>\nand the result is the script\n<PRE>_feed(([\"user\", \"snippet1\", ... ]))</PRE>\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xss_ajax2_hint2\" style=\"display:none\">\n<P>\nThis uses a different vulnerability, but the exploit is very similar\nto the previous reflected XSS exploit.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xss_ajax2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"xss_ajax2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a URL like the following and get a victim to click on it:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=&lt;script&gt;alert(1)&lt;/script&gt;\nhttps://google-gruyere.appspot.com/123/feed.gtl?uid=%3Cscript%3Ealert(1)%3C/script%3E\n</PRE>\n<P>\nThis renders as\n<PRE>_feed(([\"&lt;script&gt;alert(1)&lt;/script&gt;\"]))</PRE>\nwhich surprisingly <I>does</I> execute the script. The bug is that\nGruyere returns all gtl files as content type <CODE>text/html</CODE>\nand browsers are very tolerant of what HTML files they accept.\n</P>\n<P>\n<B>To fix,</B> you need to make sure that your JSON content can never\nbe interpreted as HTML. Even though literal <CODE>&lt;</CODE>\nand <CODE>&gt;</CODE> are allowed in JavaScript strings, you need to\nmake sure they don't appear literally where a browser can misinterpret\nthem. Thus, you'd need to modify <CODE>{{...:js}}</CODE> to replace\nthem with the JavaScript escapes <CODE>\\x3c</CODE>\nand <CODE>\\x3e</CODE>.  It is always safe to\nwrite <CODE>'\\x3c\\x3e'</CODE> in Javscript strings instead\nof <CODE>'&lt;&gt;'</CODE>.  (And, as noted above, using the HTML\nescapes <CODE>&amp;lt;</CODE> and <CODE>&amp;gt;</CODE> is incorrect.)\n</P>\n<P> You should also always set the content type of your responses,\nin this case serving JSON results\nas <CODE>application/javascript.</CODE> This alone doesn't solve the\nproblem because browsers don't always respect the content type:\nbrowsers sometimes do \"sniffing\" to try to \"fix\" results from servers\nthat don't provide the correct content type.\n</P>\n<P><B>But wait, there's more!</B> Gruyere doesn't set the content\nencoding either. And some browsers try to guess what the encoding type\nof a document is or an attacker may be able to embed content in a\ndocument that defines the content type. So, for example, if an\nattacker can trick the browser into thinking a document\nis <CODE><A href=\"https://www.google.com/search?q=utf-7\">UTF-7</A></CODE>\nthen it could embed a script tag as <CODE>+ADw-script+AD4-</CODE>\nsince <CODE>+ADw-</CODE> and <CODE>+AD4-</CODE> are alternate\nencodings for <CODE>&lt;</CODE> and <CODE>&gt;</CODE>.  So always set\nboth the content type <I>and</I> the content encoding of your\nresponses, e.g., for HTML:</P>\n<PRE>\nContent-Type: text/html; charset=utf-8\n</PRE>\n</DIV>\n</DIV>\n<H3><A name=\"2__more_about_xss\"> </A> More about XSS </H3>\n<P>\nIn addition to the XSS attacks described above, there are quite a few\nmore ways to attack Gruyere with XSS. Collect them all!\n</P>\n<P>\nXSS is a difficult beast. On one hand, a fix to an XSS vulnerability\nis usually trivial and involves applying the correct sanitizing\nfunction to user input when it's displayed in a certain context. On\nthe other hand, if history is any indication, this is extremely\ndifficult to get right. <A href=\"https://www.kb.cert.org/vuls/\"\ntarget=\"_top\">US-CERT</A> reports dozens of publicly disclosed XSS\nvulnerabilities involving multiple companies.\n</P>\n<P> Though there is no magic defense to getting rid of XSS\nvulnerabilities, here are some steps you should take to prevent these\ntypes of bugs from popping up in your products:\n</P>\n<P></P>\n<OL>\n<LI> First, make sure\nyou <A href=\"https://www.google.com/search?q=understanding+cross-site+scripting\"\ntarget=\"_top\">understand the problem</A>.\n</LI>\n<LI> Wherever possible, do sanitizing via templates features instead\nof calling escaping functions in source code. This way, all of your\nescaping is done in one place and your product can benefit from\nsecurity technologies designed for template systems that verify their\ncorrectness or actually do the escaping for you. Also, familiarize\nyourself with the other security features of your template system.\n</LI>\n<LI> Employ good testing practices with respect to XSS.\n</LI>\n<LI> Don't write your own template library :)\n</LI>\n</OL>\n<!--MARK-6-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part3\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "131",
                            "uri": "https://google-gruyere.appspot.com/part3",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part3 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: 61c96690737695d5f238352b9ef36dc9\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 29037\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 3)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"3__client_state_manipulation\"> </A> Client-State Manipulation </H2>\n<P>\nWhen a user interacts with a web application, they do it indirectly\nthrough a browser. When the user clicks a button or submits a form,\nthe browser sends a request back to the web server. Because the\nbrowser runs on a machine that can be controlled by an attacker, the\napplication must not trust any data sent by the browser.\n</P><P> It might seem that not trusting any user data would make it\nimpossible to write a web application but that's not the case. If the\nuser submits a form that says they wish to purchase an item, it's OK\nto trust that data. But if the submitted form also includes the price\nof the item, that's something that cannot be trusted.\n\n</P>\n<P></P>\n<H3><A name=\"3__elevation_of_privilege\"> </A> Elevation of Privilege </H3>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Convert your account to an administrator account.</B>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"elevation_hint\" style=\"display:none\">\n<P>\nTake a look at\nthe <CODE><A href=\"/code/?resources/editprofile.gtl\">editprofile.gtl</A></CODE>\npage that users and administrators use to edit profile settings. If you're not\nan administrator, the page looks a bit different. Can you figure out\nhow to fool Gruyere into letting you use this page to update your account?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'elevation_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"elevation_hint2\" style=\"display:none\">\n<P>\nCan you figure out how to fool Gruyere into <i>thinking</i> you used this\npage to update your account?\n</P>\n<P></P>\n</DIV>\n\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'clientstate');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"clientstate\" style=\"display:none\">\n<P>\nYou can convert your account to being an administrator by issuing\neither of the following requests:\n</P><UL>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True</CODE>\n</LI>\n<LI> <CODE>https://google-gruyere.appspot.com/123/saveprofile?action=update&amp;is_admin=True&amp;uid=username</CODE>\n(which will make any <CODE>username</CODE> into an an admin)\n</LI>\n</UL>\n<P>After visiting this URL, your account is now marked as an\nadministrator but your cookie still says you're not. So sign out and\nback in to get a new cookie. After logging in, notice the\n'Manage this server' link on the top right.</P>\n<P>The bug here is that there is no validation on the server side that\nthe request is authorized. The only part of the code that restricts\nthe changes that a user is allowed to make are in the template, hiding\nparts of the UI that they shouldn't have access to. The correct thing\nto do is to check for authorization on the server, at the time that\nthe request is received.\n</P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__cookie_manipulation\"> </A> Cookie Manipulation </H3>\nBecause the HTTP protocol is stateless, there's no way a web server\ncan automatically know that two requests are from the same user. For\nthis\nreason, <A href=\"https://www.google.com/search?q=http+cookies\">cookies</a>\nwere invented. When a web site includes a cookie (an arbitrary string)\nin a HTTP response, the browser automatically sends the cookie back to\nthe browser on the next request. Web sites can use the cookie to save\nsession state. Gruyere uses cookies to remember the identity of the\nlogged in user. Since the cookie is stored on the client side, it's\nvulnerable to manipulation. Gruyere protects the cookies from\nmanipulation by adding a hash to it. Notwithstanding the fact that\nthis hash isn't very good protection, you don't need to break the hash\nto execute an attack.\n</P><P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Get Gruyere to issue you a cookie for someone else's account.</B>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"cookie_hint\" style=\"display:none\">\n<P>\nYou don't need to look at the Gruyere cookie parsing code. You just need to know what the cookies look like. Gruyere's cookies use the format:\n<PRE>\n<i>hash</i>|<i>username</i>|admin|author\n</PRE>\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"cookie_hint2\" style=\"display:none\">\n<P>\nGruyere issues a cookie when you log in. Can you trick it into\nissuing you a cookie that looks like another user's cookie?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookieparsing');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"cookieparsing\" style=\"display:none\">\n<P>\nYou can get Gruyere to issue you a cookie for someone else's account\nby creating a new account with\nusername <CODE>\"foo|admin|author\"</CODE>. When you log into this\naccount, it will issue you the\ncookie <CODE>\"hash|foo|admin|author||author\"</CODE> which actually\nlogs you into <CODE>foo</CODE> as an administrator. (So this is also\nan elevation of privilege attack.)\n</P>\n<P>Having no restrictions on the characters allowed in usernames\nmeans that we have to be careful when we handle them. In this case,\nthe cookie parsing code is tolerant of malformed cookies and it\nshouldn't be. It should escape the username when it constructs the\ncookie and it should reject a cookie if it doesn't match the exact\npattern it is expecting.\n</P>\n<P>Even if we fix this, Python's hash function is not\ncryptographically secure. If you look at\nPython's <CODE>string_hash</CODE> function\nin <CODE><a href=\"https://svn.python.org/projects/python/trunk/Objects/stringobject.c\">python/Objects/stringobject.cc</A></CODE>\nyou'll see that it hashes the string strictly from left to right. That\nmeans that we don't need to know the cookie secret to generate our own\nhashes; all we need is another string that hashes to the same value,\nwhich we can find in a relatively short time on a typical PC. In\ncontrast, with a cryptographic hash function, changing any bit of the\nstring will change many bits of the hash value in an unpredictable\nway. At a minimum, you should use a secure hash function to protect\nyour cookies. You should also consider encrypting the entire cookie as\nplain text cookies can expose information you might not want exposed.\n</P>\n<P>And these cookies are also vulnerable to a replay attack. Once a\nuser is issued a cookie, it's good forever and there's no way to\nrevoke it. So if a user is an administrator at one time, they can save\nthe cookie and continue to act as an administrator even if their\nadministrative rights are taken away. While it's convenient to not\nhave to make a database query in order to check whether or not a user\nis an administrator, that might be too dangerous a detail to store in\nthe cookie. If avoiding additional database access is important, the\nserver could cache a list of recent admin users. Including a timestamp\nin a cookie and expiring it after some period of time also mitigates\nagainst a replay attack.</P>\n\n<P><B>Another challenge:</B> Since account names are limited to 16 characters, it seems that\nthis trick would not work to log in to the\nactual <CODE>administrator</CODE> account\nsince <CODE>\"administrator|admin\"</CODE> is 19 characters. Can you\nfigure out how to bypass that restriction?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'cookie2');\"><IMG src=\"/static/closed.gif\"> Additional Exploit and Fix </H4>\n<DIV id=\"cookie2\" style=\"display:none\">\nThe 16 character limit is implemented on the client side. Just issue\nyour own request:\n<PRE>\nhttps://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret\n</PRE>\n<P>Again, this restriction should be implemented on the server side,\nnot just the client side.</P>\n</DIV>\n</DIV>\n</DIV>\n<BR><BR>\n<H2><A name=\"3__cross_site_request_forgery\"> </A> Cross-Site Request Forgery (XSRF) </H2>\n<P>\nThe previous section said \"If the user submits a form that says they\nwish to purchase an item, it's OK to trust that data.\" That's true as\nlong as it really was the user that submitted the form. If your site\nis vulnerable to XSS, then the attacker can fake any request as if it\ncame from the user. But even if you've protected against XSS, there's\nanother attack that you need to protect against: cross-site request\nforgery.\n</P><P>\nWhen a browser makes requests to a site, it always sends along any\ncookies it has for that site, regardless of where the request comes\nfrom. Additionally, web servers generally cannot distinguish between a\nrequest initiated by a deliberate user action (e.g., user clicking on\n\"Submit\" button) versus a request made by the browser without user\naction (e.g., request for an embedded image in a page). Therefore, if\na site receives a request to perform some action (like deleting a\nmail, changing contact address), it cannot know whether this action\nwas knowingly initiated by the user &mdash; even if the request contains\nauthentication cookies. An attacker can use this fact to fool the\nserver into performing actions the user did not intend to perform.\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_desc');\"><IMG src=\"/static/closed.gif\"> More details </H4>\n<DIV id=\"xsrf_desc\" style=\"display:none\">\n<P>\nFor example, suppose Blogger is vulnerable to XSRF attacks (it\nisn't). And let us say Blogger has a Delete Blog button on the\ndashboard that points to this URL:\n<PRE>\nhttps://www.blogger.com/deleteblog.do?blogId=BLOGID\n</PRE>\nBob, the attacker, embeds the following HTML on his web page\non <CODE>https://www.evil.example.com</CODE>:\n</P>\n<PRE>\n&lt;img src=\"https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id\"\n    style=\"display:none\"&gt;\n</PRE>\n<P>\nIf the victim, Alice, is logged in to <CODE>www.blogger.com</CODE> when\nshe views the above page, here is what happens:\n</P>\n<P></P>\n<UL>\n<LI> Her browser loads the page\nfrom <CODE>https://www.evil.example.com</CODE>. The browser then tries to\nload all embedded objects in the page, including the <CODE>img</CODE>\nshown above.\n</LI>\n<LI> The browser makes a request\nto <CODE>https://www.blogger.com/deleteblog.do?blogId=alice's-blog-id</CODE>\nto load the image. Since Alice is logged into Blogger &mdash; that is,\nshe has a Blogger cookie &mdash; the browser also sends that cookie in\nthe request.\n</LI>\n<LI> Blogger verifies the cookie is a valid session cookie for\nAlice. It verifies that the blog referenced\nby <CODE>alice's-blog-id</CODE> is owned by Alice. It deletes Alice's\nblog.\n</LI>\n<LI> Alice has no idea what hit her.\n</LI>\n</UL>\n<P>\nIn this sample attack, since each user has their own blog id, the\nattack has to be specifically targeted to a single person. In many\ncases, though, requests like these don't contain any user-specific\ndata.\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"3__xsrf_challenge\"> </A> XSRF Challenge </H3>\n<P>\nThe goal here is to find a way to perform an account changing action\non behalf of a logged in Gruyere user without their\nknowledge. Assume you can get them to visit a web page under your\ncontrol.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B> Find a way to get someone to delete one\nof their Gruyere snippets.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"xsrf_hint\" style=\"display:none\">\n<P>\nWhat is the URL used to delete a snippet? Look at the URL associated\nwith the \"X\" next to a snippet.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xsrf_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> lure a user to visit a page that makes\nthe following request:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/deletesnippet?index=0\n</PRE>\n<P>\nTo be especially sneaky, you could set your Gruyere icon to this URL\nand the victim would be exploited when they visited the main page.\n</P>\n<P>\n<B>To fix,</B> we should first change <CODE>/deletesnippet</CODE> to\nwork via a <CODE>POST</CODE> request since this is a state changing\naction. In the HTML form, change <CODE>method='get'</CODE>\nto <CODE>method='post'</CODE>. On the server side, <CODE>GET</CODE>\nand <CODE>POST</CODE> requests look the same except that they usually\ncall different handlers. For example, Gruyere uses Python's\nBaseHTTPServer which calls <CODE>do_GET</CODE> for <CODE>GET</CODE>\nrequests and <CODE>do_POST</CODE> for <CODE>POST</CODE> requests.\n</P><P>\n<B>However</B>, note that changing to <CODE>POST</CODE> is not enough\nof a fix in itself! (Gruyere uses <CODE>GET</CODE> requests\nexclusively because it makes hacking it a bit\neasier. <CODE>POST</CODE> is not more secure than <CODE>GET</CODE> but\nit is more correct: browsers may re-issue <CODE>GET</CODE> requests\nwhich can result in an action getting executed more than once;\nbrowsers won't reissue <CODE>POST</CODE> requests without user\nconsent.) Then we need to pass a unique, unpredictable authorization\ntoken to the user and require that it get sent back before performing\nthe action. For this authorization token, <CODE>action_token</CODE>,\nwe can use a hash of the value of the user's cookie appended to a\ncurrent timestamp and include this token in all state-changing HTTP\nrequests as an additional HTTP parameter. The reason we\nuse <CODE>POST</CODE> over <CODE>GET</CODE> requests is that if we\npass <CODE>action_token</CODE> as a URL parameter, it might leak via\nHTTP Referer headers. The reason we include the timestamp in our hash\nis so that we can expire old tokens, which mitigates the risk if it\nleaks.\n</P>\n<P> When a request is processed, Gruyere should regenerate the token\nand compare it with the value supplied with the request. If the values\nare equal, then it should perform the action. Otherwise, it should\nreject it. The functions that generate and verify the tokens look like\nthis:\n</P>\n<P></P>\n<PRE>\ndef _GenerateXsrfToken(self, cookie):\n  \"\"\"Generates a timestamp and XSRF token for all state changing actions.\"\"\"\n\n  timestamp = time.time()\n  return timestamp + \"|\" + (str(hash(cookie_secret + cookie + timestamp)))\n\ndef _VerifyXsrfToken(self, cookie, action_token):\n  \"\"\"Verifies an XSRF token included in a request.\"\"\"\n\n  # First, make sure that the token isn't more than a day old.\n  (action_time, action_hash) = action_token.split(\"|\", 1)\n  now = time.time()\n  if now - 86400 &gt; float(action_time):\n    return False\n\n  # Second, regenerate it and check that it matches the user supplied value\n  hash_to_verify = str(hash(cookie_secret + cookie + action_time)\n  return action_hash == hash_to_verify\n</PRE>\n<P>\n<B>Oops!</B> There's several things wrong with these functions.\n</P><H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xsrf_whats_wrong');\"><IMG src=\"/static/closed.gif\"> What's missing? </H4>\n<DIV id=\"xsrf_whats_wrong\" style=\"display:none\">\n<P>\nBy including the time in the token, we prevent it from being used\nforever, but if an attacker were to gain access to a copy of the\ntoken, they could reuse it as many times as they wanted within that 24\nhour period. The expiration time of a token should be set to a small\nvalue that represents the reasonable length of time it will take the\nuser to make a request.  This token also doesn't protect against an\nattack where a token for one request is intercepted and then used for\na different request. As suggested by the\nname <CODE>action_token</CODE>, the token should be tied to the\nspecific state changing action being performed, such as the URL of the\npage. A better signature for <CODE>_GenerateXsrfToken</CODE> would\nbe <CODE>(self, cookie, action)</CODE>. For very long actions, like\nediting snippets, a script on the page could query the server to\nupdate the token when the user hits submit. (But read the next section\nabout XSSI to make sure that an attacker won't be able to read that\nnew token.)</P>\n<P>\nXSRF vulnerabilities exist because an attacker can easily script a\nseries of requests to an application and than force a user to execute\nthem by visiting some page. To prevent this type of attack, you need\nto introduce some value that can't be predicted or scripted by an\nattacker for <B>every account changing</B> request. Some application\nframeworks have XSRF protection built in: they automatically include a\nunique token in every response and verify it on every POST request.\nOther frameworks provide functions that you can use to do that. If\nneither of these cases apply, then you'll have\nto <A href=\"https://www.google.com/search?q=preventing+(XSRF+OR+CSRF)\"\ntarget=\"_top\">build your own</A>. Be careful of things that don't\nwork: using <CODE>POST</CODE> instead of <CODE>GET</CODE> is advisable\nbut not sufficient by itself, checking Referer headers is\ninsufficient, and copying cookies into hidden form fields can make\nyour cookies less secure.\n</P>\n<!--MARK-7-->\n</DIV>\n</DIV>\n<BR><P></P>\n</DIV>\n<H2><A name=\"3__cross_site_script_inclusion\"> </A> Cross Site Script Inclusion (XSSI) </H2>\n<P>\nBrowsers prevent pages of one domain from reading pages in other\ndomains. But they do not prevent pages of a domain from referencing\nresources in other domains. In particular, they allow images to be\nrendered from other domains and scripts to be executed from other\ndomains. An included script doesn't have its own security context. It\nruns in the security context of the page that included it. For\nexample, if <CODE>www.evil.example.com</CODE> includes a script hosted\non <CODE>www.google.com</CODE> then that script runs in\nthe <CODE>evil</CODE> context not in the <CODE>google</CODE>\ncontext. So any user data in that script will \"leak.\"\n</P>\n<!--MARK-8-->\n<P></P>\n<H3><A name=\"3__xssi_challenge\"> </A> XSSI Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Find a way to read someone else's private snippet using XSSI.</B>\n</P>\n<P> That is, create a page on another web site and put something in\nthat page that can read your private snippet. (You don't need to post\nit to a web site: you can just create a <CODE>.html</CODE> in your\nhome directory and double click on it to open in a browser.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<P></P>\n<DIV id=\"xssi_hint1\" style=\"display:none\">\n<P>\nYou can run a script from another domain by\nadding\n<PRE>\n&lt;SCRIPT src=\"https://google-gruyere.appspot.com/123/...\"&gt;&lt;/SCRIPT&gt;\n</PRE>\nto your HTML file. What scripts does Gruyere have?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"xssi_hint2\" style=\"display:none\">\n<P>\n<CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is a\nscript. Given that, how can you get the private snippet out of the\nscript?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'xssi_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"xssi_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> put this in an html file:\n</P>\n<P></P>\n<PRE>\n&lt;script&gt;\nfunction _feed(s) {\n  alert(\"Your private snippet is: \" + s['private_snippet']);\n}\n&lt;/script&gt;\n&lt;script src=\"https://google-gruyere.appspot.com/123/feed.gtl\"&gt;&lt;/script&gt;\n</PRE>\n<P>\nWhen the script\nin <CODE><A href=\"/code/?resources/feed.gtl\">feed.gtl</A></CODE> is\nexecuted, it runs in the context of the attacker's web page and uses\nthe <CODE>_feed</CODE> function which can do whatever it wants with\nthe data, including sending it off to another web site.\n</P>\n<P>\nYou might think that you can fix this by eliminating the function\ncall and just having the bare expression. That way, when the script is\nexecuted by inclusion, the response will be evaluated and then\ndiscarded. That won't work because JavaScript allows you to do things\nlike redefine default constructors. So when the object is evaluated,\nthe hosting page's constructors are invoked, which can do whatever\nthey want with the values.\n</P>\n<!--MARK-9-->\n<P>\n<B>To fix,</B> there are several changes you can make. Any\none of these changes will prevent currently possible attacks, but if\nyou add several layers of protection\n(\"<a href=\"https://www.google.com/search?q=%22defense+in+depth%22+security\">defense\nin depth</a>\") you protect against the possibility that you get one of\nthe protections wrong and also against future browser\nvulnerabilities. First, use an XSRF token as discussed earlier to make\nsure that JSON results containing confidential data are only returned\nto your own pages. Second, your JSON response pages should only\nsupport <CODE>POST</CODE> requests, which prevents the script from\nbeing loaded via a script tag. Third, you should make sure that the\nscript is not executable. The standard way of doing this is to append\nsome non-executable prefix to it,\nlike <CODE>])}while(1);&lt;/x&gt;</CODE>. A script running in the same\ndomain can read the contents of the response and strip out the prefix,\nbut scripts running in other domains can't.\n</P>\n<P> NOTE: Making the script not executable is more subtle than it\nseems. It's possible that what makes a script executable may change in\nthe future if new scripting features or languages are introduced. Some\npeople suggest that you can protect the script by making it a comment\nby surrounding it with <CODE>/*</CODE> and <CODE>*/</CODE>, but that's\nnot as simple as it might seem. (Hint: what if someone\nincluded <CODE>*/</CODE> in one of their snippets?)\n</P>\n<P>\nThere's <A href=\"https://www.google.com/search?q=%22cross+site+script+inclusion%22\"\ntarget=\"_top\">much more to XSSI</A> than this. There's a variation of\nJSON called JSONP which you should avoid using because it allows\nscript injection <I>by design</I>. And\nthere's <A href=\"https://www.google.com/search?q=E4X+markup+security\"\ntarget=\"_top\">E4X</A> (Ecmascript for XML) which can result in your\nHTML file being parsed as a script. Surprisingly, one way to protect\nagainst E4X attacks is to put some invalid XML in your files, like\nthe <CODE>&lt;/x&gt;</CODE> above.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part4\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "128",
                            "uri": "https://google-gruyere.appspot.com/part4",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part4 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bbdd0ba38f9558e7b9f92f65923ae645\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 24005\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 4)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"4__path_traversal\"> </A> Path Traversal </H2>\n<P>\nMost web applications serve static resources like images and CSS\nfiles. Frequently, applications simply serve all the files in a\nfolder. If the application isn't careful, the user can use a path\ntraversal attack to read files from other folders that they shouldn't\nhave access to. For example, in both Windows and\nLinux, <CODE>..</CODE> represents the parent directory, so if you can\ninject <CODE>../</CODE> in a path you can \"escape\" to the parent\ndirectory.\n</P>\n<P> If an attacker knows the structure of your file system, then they\ncan craft a URL that will traverse out of the installation directory\nto <CODE>/etc</CODE>. For example, if Picasa was vulnerable to path\ntraversal (it isn't) and the Picasa servers use a Unix-like system,\nthen the following would retrieve the password file:\n</P>\n<P></P>\n<PRE>\nhttps://www.picasa.com/../../../../../../../etc/passwd\n</PRE>\n<P></P>\n<P></P>\n<H3><A name=\"4__information_disclosure_path_traversal\"> </A> Information\ndisclosure via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to read <CODE>secret.txt</CODE> from\na running Gruyere server.</B>\n</P>\n<P> Amazingly, this attack is not even necessary in many cases:\npeople often install applications and never change the defaults. So\nthe first thing an attacker would try is the default value.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"read_secret_txt_hint\" style=\"display:none\">\n<P>\nThis isn't a black box attack because you need to know that\nthe <CODE>secret.txt</CODE> file exists, where it's stored, and where\nGruyere stores its resource files. You don't need to look at any\nsource code.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"read_secret_txt_hint2\" style=\"display:none\">\n<P>\nHow does the server know which URLs represent resource files? You can\nuse curl or a web proxy to craft request URLs that some browsers may\nnot allow.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'read_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"read_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can steal <CODE>secret.txt</CODE> via\nthis URL:\n</P>\n<P></P>\n<PRE>\nhttps://google-gruyere.appspot.com/123/../secret.txt\n</PRE>\n<P>\nSome browsers, like Firefox and Chrome, optimize out <CODE>../</CODE>\nin URLs. This doesn't provide any security protection because an\nattacker will use <CODE>%2f</CODE> to represent <CODE>/</CODE> in the URL;\nor a tool like curl, a web proxy or a browser that\ndoesn't do that optimization. But if you test your application with\none of these browsers to see if you're vulnerable, you might think you\nwere protected when you're not.\n</P>\n<P>\n<B>To fix,</B> we need to prevent access to files outside\nthe resources directory.  Validating file paths is a bit tricky as\nthere are various ways to hide path elements like \"../\" or \"~\" that\nallow escaping out of the resources folder. The best protection is to\nonly serve specific resource files. You can either hardcode a list or\nwhen your application starts, you can crawl the resource directory and\nbuild a list of files. Then only accept requests for those files. You\ncan even do some optimization here like caching small files in memory\nwhich will make your application faster. If you are going to try to\nfile path validation, you need to do it on the final path, not on the\nURL, as there are numerous ways to represent the same characters in\nURLs. <I>Note: Changing file permissions will NOT work. Gruyere has\nto be able to read this file.</I>\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__data_tampering_path_traversal\"> </A> Data\ntampering via path traversal </H3>\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to replace <CODE>secret.txt</CODE> on\na running Gruyere server.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"write_secret_txt_hint\" style=\"display:none\">\n<P>\nAgain, this isn't a black box attack because you need to know about\nthe directory structure that Gruyere uses, specifically where\nuploaded files are stored.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"write_secret_txt_hint2\" style=\"display:none\">\n<P>\nIf I log in as user <CODE>brie</CODE> and upload a file, where does\nthe server store it? Can you trick the server into uploading a file\nto <CODE>../../secret.txt</CODE>?\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a new user named <CODE>..</CODE>\nand upload your new <CODE>secret.txt</CODE>. You could also create a\nuser named <CODE>brie/../..</CODE>.\n</P>\n<P>\n<B>To fix,</B> you should escape dangerous characters in the username\n(replacing them with safe characters) before using it. It was earlier\nsuggested that we should restrict the characters allowed in a username,\nbut it probably didn't occur to you that <CODE>\".\"</CODE> was a\ndangerous character.  It's worth noting that there's a vulnerability\nunique to Windows servers with this implementation. On Windows,\nfilenames are not case sensitive but Gruyere usernames are. So one\nuser can attack another user's files by creating a similar username\nthat differs only in case, e.g., <CODE>BRIE</CODE> instead\nof <CODE>brie</CODE>. So we need to not just escape unsafe characters\nbut convert the username to a canonical form that is different for\ndifferent usernames. Or we could avoid all these issues by assigning\neach user a unique identifier instead.\n</P>\n<P>\n<B>Oops!</B> This doesn't completely solve the problem. Even with the\nabove fix in place, there is another way to perform this attack. Can\nyou find it?\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'another_write_secret_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"another_write_secret_hint\" style=\"display:none\">\n<P>\nAre there any limits on the filename when you do an upload?  You may\nneed to use a special tool like <CODE>curl</CODE> or a web proxy to\nperform this attack.\n</P>\n<P></P>\n</DIV>\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'write_secret_txt_sol2');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"write_secret_txt_sol2\" style=\"display:none\">\n<P> Surprisingly, you can upload a file\nnamed <CODE>../secret.txt</CODE>. Gruyere provides no protection\nagainst this attack. Most browsers won't let you upload that file but,\nagain, you can do it with curl or other tools. You need the same kind\nof protection when writing files as you do on read.\n</P>\n<P> As a general rule, you should never store user data in the\nsame place as your application files but that alone won't protect\nagainst these attacks since if the user can inject <CODE>../</CODE>\ninto the file path, they can traverse all the way to the root of the\nfile system and then back down to the normal install location of your\napplication (or even the Python interpreter itself).\n</P></DIV></DIV>\n</DIV>\n<BR><P></P>\n<H2><A name=\"4__denial_of_service\"> </A> Denial of Service </H2>\n<P>\nA denial of service (DoS) attack is an attempt to make a server unable\nto service ordinary requests. A common form of DoS attack is sending\nmore requests to a server than it can handle. The server spends all\nits time servicing the attacker's requests that it has very little\ntime to service legitimate requests. Protecting an application against\nthese kinds of DoS attacks is outside the scope of this codelab. And\nattacking Gruyere in this way would be interpreted as an attack on\nApp&nbsp;Engine.\n</P><P> Hackers can also prevent a server from servicing requests by\ntaking advantage of server bugs, such as sending requests that crash a\nserver, make it run out of memory, or otherwise cause it fail serving\nlegitimate requests in some way. In the next few challenges, you'll\ntake advantage of bugs in Gruyere to perform DoS attacks.\n</P>\n<H3><A name=\"4__dos_quit_server\"> </A> DoS - Quit the Server </H3>\nThe simplest form of denial of service is shutting down a service.\n<P>\n<IMG src=\"/static/cheese_bw.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to make the server quit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_quit_hint\" style=\"display:none\">\n<P>\nHow does an administrator make the server quit? The server management\npage is <CODE><A href=\"/code/?resources/manage.gtl\">manage.gtl</A></CODE>.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_quit_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_quit_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a request\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. You\nshould need to be logged in as an administrator to do this, but you\ndon't.\n</P><P>\nThis is another example of a common bug. The server protects\nagainst non-administrators accessing certain URLs but the list\nincludes <CODE>/quit</CODE> instead of the actual\nURL <CODE>/quitserver</CODE>.\n</P>\n<P>\n<B>To fix,</B> add <CODE>/quitserver</CODE> to the URLS only\naccessible to administrators:\n</P><PRE>\n_PROTECTED_URLS = [\n    \"/quitserver\",\n    \"/reset\"\n]\n</PRE>\n<P>\n<!--MARK-A-->\n<B>Oops!</B> This doesn't completely solve the problem.\nThe <CODE>reset</CODE> URL is in the protected list. Can you figure\nout how to access it?\n</P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"dos_bonus_hint\" style=\"display:none\">\n<P>\nLook carefully at the code that handles URLs and checks for protected ones.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_bonus_soln');\"><IMG src=\"/static/closed.gif\"> Another Exploit and Fix </H4>\n<DIV id=\"dos_bonus_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B>\nuse <CODE>https://google-gruyere.appspot.com/123/RESET</CODE>. The check for\nprotected urls is case sensitive. After doing that check, it\ncapitalizes the string to look up the implementation. This is a\nclassic check/use bug where the condition being checked does not match\nthe actual use. This vulnerability is worse than the previous one\nbecause it exposes all the protected urls.\n</P><P>\n<B>To fix,</B> put the security check inside the dangerous\nfunctions rather than outside them. That ensures that no matter how we\nget there, the security check can't be skipped.\n</P></DIV>\n</DIV>\n</DIV>\n<P>\n<H3><A name=\"4__dos_overload_server\"></A> DoS - Overloading the Server </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to overload the server when it processes a request.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dos_overload_hint1\" style=\"display:none\">\n<P>\nYou can upload a template that does this.\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dos_overload_hint2\" style=\"display:none\">\n<P>\nEvery page includes\nthe <CODE><A href=\"/code/?resources/menubar.gtl\">menubar.gtl</A></CODE>\ntemplate. Can you figure out how to make that template overload the\nserver?\n</P></DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dos_overload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dos_overload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a file named <CODE>menubar.gtl</CODE>\ncontaining:\n<PRE>\n[[include:menubar.gtl]]DoS[[/include:menubar.gtl]]\n</PRE>\nand upload it to the <CODE>resources</CODE> directory using a path traversal attack, e.g., creating a user named <CODE>../resources</CODE>.\n</P>\n<P>\n<B>To fix,</B> implement the protections against path traversal and uploading templates discussed earlier.\n\n</P>\n</DIV>\n\n<B>NOTE:</B> After performing the previous exploit, you'll need to\npush the <A href=\"/part1#1__reset_button\">reset button</A>.\n\n</P>\n</DIV>\n<H3><A name=\"4__more_dos\"> </A> More on Denial of\nService </H3>\n<P>\nUnlike a well defined vulnerability like XSS or XSRF, denial of\nservice describes a wide class of attacks. This might mean bringing\nyour service down or flooding your inbox so you can't receive\nlegitimate mail. Some things to consider:\n</P>\n<P></P>\n<UL>\n<LI><P> If you were evil and greedy, how quickly could you take down your\napplication or starve all of its resources? For example, is it\npossible for a user to upload their hard drive to your application?\nEntering the attacker's mindset can help identify DoS points in your\napplication. Additionally, think about where the computationally and\nmemory intensive tasks are in your application and put safeguards in\nplace. Do sanity checks on input values.\n</P>\n<LI><P>Put monitoring in place so you can detect when you are under\nattack and enforce per user quotas and rate limiting to ensure that a\nsmall subset of users cannot starve the rest. Abusive patterns could\ninclude increased memory usage, higher latency, or more requests or\nconnections than usual.\n</P>\n</UL>\n<!--MARK-B-->\n<BR><P></P>\n\n<H2><A name=\"4__code_execution\"> </A> Code Execution </H2>\n<P>\nIf an attacker can execute arbitrary code remotely on your server,\nit's usually game over. They may be able to take control over the\nrunning program or potentially break out the process to open a new\nshell on the computer. From here, it's usually not hard to compromise\nthe entire machine the server is running on.\n</P>\n<P> Similar to information disclosure and denial of service, there\nis no recipe or specific defense to prevent remote code execution. The\nprogram must perform validation of all user input before handling it\nand where possible, implement functions with least privilege\nrights. This topic can't be done justice in just a short paragraph,\nbut know that this is likely the scariest results a security bug can\nhave and trumps any of the above attacks.\n</P>\n<P></P>\n<H3><A name=\"4__code_execution_challenge\"> </A> Code Execution Challenge </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a code execution exploit.</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"code_upload_hint\" style=\"display:none\">\n<P>\nYou need to use two previous exploits.\n</P></DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'code_upload_soln');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"code_upload_soln\" style=\"display:none\">\n<P>\n<B>To exploit,</B> make a copy\nof <CODE><A href=\"/code/?gtl.py\">gtl.py</A></CODE>\n(or <CODE><A href=\"/code/?sanitize.py\">sanitize.py</A></CODE>) and\nadd some exploit code. Now you can either upload a file\nnamed <CODE>../gtl.py</CODE> or create a user named <CODE>..</CODE>\nand upload <CODE>gtl.py</CODE>. Then, make the server quit by browsing\nto <CODE>https://google-gruyere.appspot.com/123/quitserver</CODE>. When the\nserver restarts, your code will run.\n</P>\n<P> This attack was possible because Gruyere has permission to both\nread and write files in the Gruyere directory. Applications should\nrun with the minimal privileges possible.\n</P>\n<P> Why would you attack <CODE>gtl.py</CODE>\nor <CODE>sanitize.py</CODE> rather than <CODE>gruyere.py</CODE>?\nWhen an attacker has a choice, they would usually choose to attack the\ninfrastructure rather than the application itself. The infrastructure\nis less likely to be updated and less likely to be noticed. When was\nthe last time you checked that no one had\nreplaced <CODE>python.exe</CODE> with a trojan?\n</P>\n<P>\n<B>To fix,</B> fix the two previous exploits.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"4__more_code_execution\"> </A> More on Remote\nCode Execution </H3>\n<P>\nEven though there is no single or simple defense to remote code\nexecution, here is a short list of some preventative measures:\n</P>\n<UL>\n<LI><P><B>Least Privilege:</B> Always run your application with\nthe <A href=\"https://www.google.com/search?q=least+privileges\"\ntarget=\"_top\">least privileges</A> it needs.\n</P>\n<LI><P><B>Application Level Checks:</B> Avoid passing user input\ndirectly into commands that evaluate arbitrary code,\nlike <CODE>eval()</CODE> or <CODE>system()</CODE>. Instead, use the\nuser input as a switch to choose from a set of developer controlled\ncommands.\n</P>\n<LI><P><B>Bounds Checks:</B> Implement proper bounds checks for\nnon-safe languages like\nC++. Avoid <A href=\"https://www.google.com/search?q=unsafe+string+functions\"\ntarget=\"_top\">unsafe string functions</A>. Keep in mind that even safe\nlanguages like Python and Java use native libraries.\n</P>\n</UL>\n<!--MARK-C-->\n<BR><P></P>\n\n\n             <FONT SIZE=\"+2\">\n             <A href=\"/part5\">Continue &gt;&gt;</A>\n             </FONT><BR>\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "102",
                            "uri": "https://google-gruyere.appspot.com/part5",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/part5 HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nX-Cloud-Trace-Context: bb0364b3e4ca556b7c970bea1ccd3fda\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 25267\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "<HTML><HEAD><META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Web Application Exploits and Defenses</TITLE>\n<LINK type=\"text/css\" rel=\"stylesheet\" href=\"../static/codelab.css\">\n<!--MARK-Z-->\n<SCRIPT>\nfunction toggleBlock(heading, whichID) {\n  var image = heading.childNodes[0];\n  var block = document.getElementById(whichID);\n  if (block) {\n    if (getDisplay(block) == 'block') {\n      block.style.display = 'none';\n      image.src = 'static/closed.gif';\n    } else {    // \"none\" or \"\"\n      block.style.display = 'block';\n      image.src = 'static/open.gif';\n    }\n  }\n}\n\nfunction getDisplay(block) {\n  var value = block.style.display;\n  if (!value) {\n    if (document.defaultView) {\n      var computedStyle = document.defaultView.getComputedStyle(block, \"\");\n      value = computedStyle.getPropertyValue('display');\n    } else if (block.currentStyle) {\n      value = block.currentStyle.display;\n    }\n  }\n  return value;\n}\n</SCRIPT>\n</HEAD>\n<BODY bgcolor=\"#ffffff\">\n\n<DIV class=\"banner\"></DIV>\n<H1><FONT size=\"+2\"><IMG src=\"/static/gruyere-78.png\" style=\"vertical-align:middle\">\nWeb Application Exploits and Defenses  (Part 5)</FONT> </H1>\n<P>\nA Codelab by Bruce Leban, Mugdha Bendre, and Parisa Tabriz\n</P>\n<DIV class=\"printable\">\n<DIV class=\"column1\">\nTable of Contents\n<UL>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__hackers\">Beat the hackers</A></LI>\n<LI class=\"L1\" style=\"padding-top:0pt\"> <A href=\"/#0__gruyere\">Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__setup\">Set-up</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part1#1__reset_button\">Reset Button</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__about_the_code\">About the Code</A></LI>\n  <LI class=\"L2\"> <A href=\"/part1#1__features_and_technologies\">Features and Technologies</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part1#1__using_gruyere\">Using Gruyere</A></LI>\n<LI class=\"L1\"> <A href=\"/part2#2__cross_site_scripting\">Cross-Site Scripting (XSS)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part2#2__xss_challenge\">XSS Challenges</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__file_upload_xss\">File Upload XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss\">Reflected XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss\">Stored XSS</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_html_attribute\">Stored XSS via HTML Attribute</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__stored_xss_via_ajax\">Stored XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__reflected_xss_via_ajax\">Reflected XSS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part2#2__more_about_xss\">More about XSS</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__client_state_manipulation\">Client-State Manipulation</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__elevation_of_privilege\"> Elevation of Privilege </A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__cookie_manipulation\"> Cookie Manipulation </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_request_forgery\">Cross-Site Request Forgery (XSRF)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xsrf_challenge\">XSRF Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part3#3__more_about_preventing_xsrf\">More about preventing XSRF</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part3#3__cross_site_script_inclusion\">Cross Site Script Inclusion (XSSI)</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part3#3__xssi_challenge\">XSSI Challenge</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__path_traversal\">Path Traversal</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__information_disclosure_path_traversal\">Information disclosure via path traversal </A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__data_tampering_path_traversal\">Data tampering via path traversal </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__denial_of_service\">Denial of Service</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_quit_server\">DoS - Quit the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__dos_overload_server\">DoS - Overloading the Server</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_dos\">More on Denial of Service</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part4#4__code_execution\">Code Execution</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part4#4__code_execution_challenge\">Code Execution Challenge</A></LI>\n  <LI class=\"L2\"> <A href=\"/part4#4__more_code_execution\">More on Remote Code Execution</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__configuration_vulnerabilities\">Configuration Vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_1\">Information disclosure #1</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_config_2\">Information disclosure #2</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__information_disclosure_bug_3\">Information disclosure #3 </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__ajax_vulnerabilities\">AJAX vulnerabilities</A>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__dos_via_ajax\">DoS via AJAX</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__phishing_via_ajax\">Phishing via AJAX</A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__other_vulnerabilities\"> Other Vulnerabilities </A> </H2>\n  <UL>\n  <LI class=\"L2\"> <A href=\"/part5#5__buffer_and_integer_overflow\">Buffer Overflow and Integer Overflow</A></LI>\n  <LI class=\"L2\"> <A href=\"/part5#5__sql_injection\"> SQL Injection </A></LI>\n  </UL></LI>\n<LI class=\"L1\"> <A href=\"/part5#5__after_the_codelab\">After the Codelab</A></LI>\n</UL>\n</DIV>\n<DIV class=\"column2\">\n<P></P>\n<P></P>\n<P>\n<NOAUTOLINK>\n</NOAUTOLINK></P>\n\n<H2><A name=\"5__configuration_vulnerabilities\"> </A> Configuration\nVulnerabilities </H2>\n<P>\nApplications are often installed with default settings that attackers\ncan use to attack them. This is particularly an issue with third party\nsoftware where an attacker has easy access to a copy of the same\napplication or framework you are running. Hackers know the default\naccount names and passwords. For example, looking at the contents\nof <CODE><A href=\"/code/?data.py\">data.py</A></CODE> you know that\nthere's a default administrator account named 'admin' with the\npassword\n'secret'.\n</P>\n<P> Configuration vulnerabilities also include features that\nincrease attack surface. A common example is a feature that is on by\ndefault but you are not using, so you didn't configure it and the\ndefault configuration is vulnerable. It also includes debug features\nlike status pages or dumping stack traces on failures.\n</P>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_1\"> </A> Information disclosure #1 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Read the contents of the database off of a\nrunning server by exploiting a configuration vulnerability.</B>\n</P>\n<P>You should look through the Gruyere code looking for default\nconfigurations or debug features that don't belong there.</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_1_hint\" style=\"display:none\">\n<P>\nLook at all the files installed with Gruyere. Are there any files\nthat shouldn't be there?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_1_hint2\" style=\"display:none\">\n<P>\nLook for a <CODE>.gtl</CODE> file that isn't referenced anywhere.\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_1_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_1_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> you can use the debug dump\npage <CODE><A href=\"/code/?resoources/dump.gtl\">dump.gtl</A></CODE>\nto display the contents of the database via the following URL:\n</P><PRE>\nhttps://google-gruyere.appspot.com/123/dump.gtl\n</PRE>\n<P>\n<B>To fix,</B> always make sure debug features are not\ninstalled. In this case, delete <CODE>dump.gtl</CODE>. This is an\nexample of the kind of debug feature that might be left in an\napplication by mistake. If a debug feature like this is necessary,\nthen it needs to be carefully locked down: only admin users should\nhave access and only requests from debug IP addresses should be\naccepted.\n</P><P> This exploit exposes the users' passwords. Passwords should\nnever be stored in cleartext. Instead, you should\nuse <A href=\"https://www.google.com/search?q=password+hashing\">password\nhashing</A>. The idea is that to authenticate a user, you don't need\nto know their password, only be convinced that the user knows it. When\nthe user sets their password, you store only a cryptographic hash of\nthe password and a salt value. When the user re-enters their password\nlater, you recompute the hash and if it matches you conclude the\npassword is correct. If an attacker obtains the hash value, it's very\ndifficult for them to reverse that to find the original\npassword. (Which is a good thing, since\ndespite <A href=\"https://www.google.com/search?q=choosing+a+good+password\">lots\nof advice</A> to the contrary, users frequently use the same weak\npasswords for multiple sites.)\n</P></DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__information_disclosure_config_2\"> </A> Information disclosure #2 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fix described above, an attacker can\nundo it and execute the attack! How can that be?</B>\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_hint');\"><IMG src=\"/static/closed.gif\"> Hint </H4>\n<DIV id=\"disclosure_2_hint\" style=\"display:none\">\n<P>\nYou can upload a file of any type.\n</P>\n<P></P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_2_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_2_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> Gruyere allows the user to upload files of any\ntype, including <CODE>.gtl</CODE> files. So the attacker can simply\nupload their own copy\nof <CODE><A href=\"/code/?resources/dump.gtl\">dump.gtl</A></CODE> or a\nsimilar file and than access it. In fact, as noted earlier, hosting\narbitrary content on the server is a major security risk whether it's\nHTML, JavaScript, Flash or something else. Allowing a file with an\nunknown file type may lead to a security hole in the future.\n</P>\n<P>\n<B>To fix,</B> we should do several things:\n</P><OL>\n<LI> Only files that are part of Gruyere should be treated as templates.\n</LI>\n<LI> Don't store user uploaded files in the same place as application files.\n</LI>\n<LI> Consider limiting the types of files that can be uploaded (via a\nwhitelist).\n</LI>\n</OL>\n</DIV>\n</DIV>\n<H3><A name=\"5__information_disclosure_bug_3\"> </A> Information disclosure #3 </H3>\n<P>\n<IMG src=\"/static/cheese_w.png\" style=\"vertical-align:middle; padding-right: 5px;\">\n<B>Even after implementing the fixes described above, a similar attack\nis still possible through a different attack vector. Can you find it?</B>\n</P>\n<P>\nThis attack isn't a a configuration vulnerability, just bad code.\n</P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint1');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"disclosure_3_hint1\" style=\"display:none\">\n<P>You can insert something in your private snippet which will display the contents of the database.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"disclosure_3_hint2\" style=\"display:none\">\n<P>This attack is closely related to the previous ones. There is a bug\nin the code that expands templates that you can exploit.</P>\n</DIV>\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'disclosure_3_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fixes </H4>\n<DIV id=\"disclosure_3_sol\" style=\"display:none\">\n<P>\nThere is a defect in Gruyere's template expansion code that reparses\nexpanded variables. Specifically, when expanding a block it expands\nvariables in the block. Then it parses the block as a template and\nexpands variables again,\n</P>\n<B>To exploit,</B> add this to your private snippet:\n<PRE>\n{{_db:pprint}}\n</PRE>\n</P>\n<P>\n<B>To fix,</B> modify the template code so it never reparses inserted\nvariable values. The defect in the code is due to the fact\nthat <CODE>ExpandTemplate</CODE> calls <CODE>_ExpandBlocks</CODE>\nfollowed by <CODE>_ExpandVariables</CODE>,\nbut <CODE>_ExpandBlocks</CODE> calls <CODE>ExpandTemplate</CODE> on\nnested blocks. So if a variable is expanded inside a nested block and\ncontains something that looks like a variable template, it will get\nexpanded a second time. That sounds complicated because it is\ncomplicated. Parsing blocks and variables separately is a fundamental\nflaw in the design of the expander, so the fix is non-trivial.\n</P>\n<P>\nThis exploit is possible because the template language allows\narbitrary database access. It would be safer if the templates were\nonly allowed to access data specifically provided to them. For\nexample, a template could have an associated database query and only\nthe data matched by that query would be passed to the template. This\nwould limit the scope of a bug like this to data that the user was\nalready allowed to access.\n</P>\n</DIV>\n</DIV>\n<BR><BR>\n</P><H2><A name=\"5__ajax_vulnerabilities\"> </A> AJAX\nvulnerabilities </H2> Bad AJAX code allows attackers to modify parts\nof your application in ways that you might not expect. In traditional\nclient development, there is a clear separation between the\napplication and the data it displays. That's not true in web\napplications as the next two attacks will make clear.\n<P></P>\n<H3><A name=\"5__dos_via_ajax\"> </A> DoS via AJAX </H3>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find an attack that prevents users from seeing\ntheir private snippets on the home page.</B> (The attack should be\ntriggered after clicking the refresh link and without using XSS.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<P></P>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"dom_hint\" style=\"display:none\">\n<P>\nCan you figure out how to change the value of the private snippet in\nthe AJAX response?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"dom_hint2\" style=\"display:none\">\n<P>\nWhat happens if a JSON object has a duplicate key value?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'dom_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"dom_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>private_snippet</CODE> and create at least one\nsnippet. The JSON response will then be <CODE>{'private_snippet' :\n&lt;user's private snippet&gt;, ..., 'private_snippet' :\n&lt;attacker's snippet&gt;}</CODE> and the attacker's snippet replaces\nthe user's.\n</P>\n<P>\n<B>To fix,</B> the AJAX code needs to make sure that the\ndata only goes where it's supposed to go. The flaw here is that the\nJSON structure is not robust. A better structure would\nbe <CODE>[&lt;private_snippet&gt;, {&lt;user&gt; :\n&lt;snippet&gt;,...}]</CODE>.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<P></P>\n<H3><A name=\"5__phishing_via_ajax\"> </A> Phishing via AJAX </H3>\n<P>\nWhile the previous attack may seem like a minor inconvenience,\ncareless DOM manipulation can lead to much more serious problems.\n</P>\n<P>\n<IMG src=\"/static/cheese_b.png\" style=\"vertical-align:middle;\npadding-right: 5px;\"> <B>Find a way to change the sign in link in the\nupper right corner to point to <CODE>https://evil.example.com</CODE>.</B>\n</P>\n<P> (The attack should be triggered after clicking the refresh\nlink and without using XSS or a script.)\n</P>\n<P></P>\n<DIV style=\"margin-left:18pt\">\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint');\"><IMG src=\"/static/closed.gif\"> Hint 1 </H4>\n<DIV id=\"phishing_hint\" style=\"display:none\">\n<P>\nLook at what the script does to replace the snippets on the page. Can\nyou get it to replace the sign in link?\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_hint2');\"><IMG src=\"/static/closed.gif\"> Hint 2 </H4>\n<DIV id=\"phishing_hint2\" style=\"display:none\">\n<P>\nLook at the AJAX code to see how it replaces each snippet, and then\nlook at the structure of the home page and see if you can see what\nelse you might be able to replace. (You can't just replace the sign in\nlink. You'll have to replace a bit more.)\n</P>\n<P></P>\n</DIV>\n<H4 style=\"cursor: pointer\" onclick=\"toggleBlock(this, 'phishing_sol');\"><IMG src=\"/static/closed.gif\"> Exploit and Fix </H4>\n<DIV id=\"phishing_sol\" style=\"display:none\">\n<P>\n<B>To exploit,</B> create a user\nnamed <CODE>menu-right</CODE> and publish a snippet that looks exactly\nlike the right side of the menu bar.\n</P>\n<P></P>\n<PRE>\n&lt;a href='https://evil.example.com/login'&gt;Sign in&lt;/a&gt;\n| &lt;a href='https://evil.example.com/newaccount.gtl'&gt;Sign up&lt;/a&gt;\n</PRE>\n<P>\nIf the user is already logged in, the menu bar will look wrong. But\nthat's ok, since there's a good chance the user will just think they\nsomehow accidentally got logged out of the web site and log in again.\n</P>\n<P>\n<B>To fix,</B> the process of modifying the DOM needs to be\nmade more robust. When user values are used in as DOM element\nidentifiers, you should ensure that there can't be a conflict as there\nis here, for example, applying a prefix to user values\nlike <CODE>id=\"user_<USER>\"</USER></CODE>. Even better, use your own\nidentifiers rather than user values.\n</P>\n<P> This spoofing attack is easily detected when the user clicks\nSign in and ends up at <CODE>evil.example.com</CODE>. A clever attacker could\ndo something harder to detect, like replacing the Sign in link with a\nscript that renders the sign in form on the current page with the form\nsubmission going to their server.\n</P>\n<P></P>\n</DIV>\n</DIV>\n<BR><P></P>\n<P></P>\n<H2><A name=\"5__other_vulnerabilities\"> </A> Other Vulnerabilities </H2>\n<H3><A name=\"5__buffer_and_integer_overflow\"> </A> Buffer Overflow and Integer Overflow </H3>\n<DIV><P>A <A href=\"https://www.google.com/search?q=buffer+overflow\"\ntarget=\"_top\">buffer overflow</A> vulnerability exists when an\napplication does not properly guard its buffers and allow user data to\nwrite past the end of a buffer. This excess data can modify other\nvariables, including pointers and function return addresses, leading\nto arbitrary code execution. Historically, buffer overflow\nvulnerabilities have been responsible for some of the most widespread\ninternet attacks\nincluding <a href=\"https://www.google.com/search?q=sql+slammer\">SQL\nSlammer<a>, <a href=\"https://www.google.com/search?q=blaster+worm\">Blaster</a>\nand <a href=\"https://www.google.com/search?q=code+red+worm\">Code\nRed</a> computer worms. The PS2, Xbox and Wii have all been hacked\nusing buffer overflow exploits.\n</P>\n<P>While not as well\nknown, <A href=\"https://www.google.com/search?q=integer+overflow+vulnerability\"\ntarget=\"_top\">integer overflow</A> vulnerabilities can be just as\ndangerous.  Any time an integer computation silently returns an\nincorrect result, the application will operate incorrectly. In the\nbest case, the application fails. In the worst case, there is a\nsecurity bug. For example, if an application checks\nthat <CODE>length&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;limit</CODE> then this\nwill succeed if <CODE>length</CODE> is the largest positive integer\nvalue, which can then expose a buffer overflow vulnerability.\n</P>\n<P>This codelab doesn't cover overflow vulnerabilities because\nGruyere is written in Python, and therefore not vulnerable to\ntypical buffer and integer overflow problems. Python won't allow you\nto read or write outside the bounds of an array and integers can't\noverflow. While C and C++ programs are most commonly known to expose\nthese vulnerabilities, other languages are not immune. For example,\nwhile Java was designed to prevent buffer overflows, it silently\nignores integer overflow.\n</P>\n<P>\nLike all applications, Gruyere is vulnerable to platform vulnerabilities. That\nis, if there are security bugs in the platforms that Gruyere is built on top\nof, then those bugs would also apply to Gruyere. Gruyere's platform\nincludes: the Python runtime system and libraries, AppEngine, the operating\nsystem that Gruyere runs on and the client side software (including the web\nbrowser) that users use to run Gruyere. While platform vulnerabilities are\nimportant, they are outside the scope of this codelab as you generally can't fix\nplatform vulnerabilities by making changes to your application. Fixing platform\nvulnerabilities yourself is also not practical for many people, but you can\nmitigate your risks by making sure that you are diligent in applying security\nupdates as they are released by platform vendors.\n</P>\n</DIV>\n<!--MARK-D-->\n<H3><A name=\"5__sql_injection\"> </A> SQL Injection </H3>\n<DIV><P>Just as XSS vulnerabilities allow attackers to inject script into\nweb pages, <a href=\"https://www.google.com/search?q=sql+injection\">SQL\ninjection</a> vulnerabilities allow attackers to inject arbitrary\nscripts into SQL queries. When a SQL query is executed it can either\nread or write data, so an attacker can use SQL injection to read your\nentire database as well as overwrite it, as described in the classic\n<a href=\"https://xkcd.com/327/\">Bobby Tables</a> XKCD comic. If you use\nSQL, the most important advice is to avoid building queries by string\nconcatenation: use API calls instead. This codelab doesn't cover SQL\ninjection because Gruyere doesn't use SQL.\n</P>\n</DIV>\n<BR><BR>\n<H2><A name=\"5__after_the_codelab\"> </A> After the Codelab </H2>\n<P>\nWe hope that you found this codelab instructive. If you want more\npractice, there are many more security bugs in Gruyere than the ones\ndescribed above.  You should attack your own application using what\nyou've learned and write unit tests to verify that these bugs are not\npresent and won't get introduced in the future. You should also\nconsider using <A href=\"https://www.google.com/search?q=fuzz+testing\"\ntarget=\"_top\">fuzz testing</A> tools. For more information about\nsecurity at Google, please visit\nour <A href=\"https://security.googleblog.com/\"\ntarget=\"_top\">blog</A> or\nour <A href=\"https://www.google.com/about/appsecurity/\"\ntarget=\"_top\">corporate security page</A>.\n</P>\n<P>\nIf you'd like to share this codelab with others, please consider\ntweeting or buzzing about it or posting one of these badges on your\nblog or personal page:\n<!--MARK-E-->\n</P>\n<div>\n<table style=\"border-collapse:collapse;border:solid 1 black\" cellpadding=\"5\">\n<tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-badge.png\"\nstyle=\"padding:4pt\" border=\"0\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\" style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n\n</td></tr><tr><td style=\"border:solid 1 black;text-align:center;vertical-align:middle\">\n\n<a href=\"https://google-gruyere.appspot.com/\">\n<img src=\"../static/gruyere-40.png\" \nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\"></a>\n\n</td><td style=\"border:solid 1 black;vertical-align:middle\">\n\n<pre style=\"margin:0\">\n&lt;a href=\"https://google-gruyere.appspot.com/\"&gt;\n&lt;img src=\"//google-gruyere.appspot.com/static/gruyere-40.png\"\nstyle=\"padding:4pt\" border=\"0\" title=\"Learn how to make web apps more\nsecure. Do the Gruyere codelab.\" alt=\"Learn how to make web apps more \nsecure. Do the Gruyere codelab.\"&gt;&lt;/a&gt;\n</pre>\n<div align=\"center\"  style=\"margin:0\">(Line breaks above should be copied verbatim.)</div>\n</td></tr></table></div>\n<!--MARK-F-->\n\n<!--NEXTLINK-->\n<BR>\n<P style=\"font-size:x-small\">\n&copy; Google 2017 <A href=\"https://www.google.com/intl/en/policies/terms/\">Terms of Service</A>\n<BR>The code portions of this codelab are licensed under the\nCreative Commons Attribution-No Derivative Works 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by-nd/3.0/us/\">https://creativecommons.org/licenses/by-nd/3.0/us</A>&gt;.\nBrief excerpts of the code may be used for educational or\ninstructional purposes provided this notice is kept intact.\nExcept as otherwise noted the remainder of this codelab is licensed under the\nCreative Commons Attribution 3.0 United States license\n&lt;<A href=\"https://creativecommons.org/licenses/by/3.0/us/\">https://creativecommons.org/licenses/by/3.0/us</A>&gt;.\n</P>\n</BODY></HTML>\n"
                        },
                        {
                            "id": "25",
                            "uri": "https://google-gruyere.appspot.com/robots.txt",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "public, max-age=600",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/robots.txt HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 621003ecdd3a754888cc08e69df4b24a\r\nServer: Google Frontend\r\nContent-Length: 184\r\nDate: Fri, 28 Feb 2025 11:48:50 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:50 GMT\r\nCache-Control: public, max-age=600\r\nAge: 486\r\nETag: \"3m8CBg\"\r\nContent-Type: text/plain\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "User-agent: *\nDisallow: /0\nDisallow: /1\nDisallow: /2\nDisallow: /3\nDisallow: /4\nDisallow: /5\nDisallow: /6\nDisallow: /7\nDisallow: /8\nDisallow: /9\nDisallow: /start\nDisallow: /resetbutton\n"
                        },
                        {
                            "id": "74",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "cache-control",
                            "attack": "",
                            "evidence": "no-cache",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "19",
                    "solution": "<p>For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".</p>",
                    "otherinfo": "",
                    "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching</p><p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</p><p>https://grayduck.mn/2021/09/13/cache-control-recommendations/</p>",
                    "cweid": "525",
                    "wascid": "13",
                    "sourceid": "1",
                    "tags":[ 
                        {
                            "tag": "WSTG-v42-ATHN-06",
                            "link": "https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/04-Authentication_Testing\/06-Testing_for_Browser_Cache_Weaknesses"
                        },
                        {
                            "tag": "CWE-525",
                            "link": "https:\/\/cwe.mitre.org\/data\/definitions\/525.html"
                        }
                    ]
                },
                {
                    "pluginid": "10050",
                    "alertRef": "10050-2",
                    "alert": "Retrieved from Cache",
                    "name": "Retrieved from Cache",
                    "riskcode": "0",
                    "confidence": "2",
                    "riskdesc": "Informational (Medium)",
                    "desc": "<p>The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
                    "instances":[ 
                        {
                            "id": "47",
                            "uri": "https://google-gruyere.appspot.com/robots.txt",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 486",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/robots.txt HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 621003ecdd3a754888cc08e69df4b24a\r\nServer: Google Frontend\r\nContent-Length: 184\r\nDate: Fri, 28 Feb 2025 11:48:50 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:50 GMT\r\nCache-Control: public, max-age=600\r\nAge: 486\r\nETag: \"3m8CBg\"\r\nContent-Type: text/plain\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "User-agent: *\nDisallow: /0\nDisallow: /1\nDisallow: /2\nDisallow: /3\nDisallow: /4\nDisallow: /5\nDisallow: /6\nDisallow: /7\nDisallow: /8\nDisallow: /9\nDisallow: /start\nDisallow: /resetbutton\n"
                        },
                        {
                            "id": "15",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_b.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 485",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_b.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: eaad6a378c8e3be9968480d7d8b527a8\r\nServer: Google Frontend\r\nContent-Length: 682\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001b\\x0008\\x0002\\x0000\\x0000\\x0000\u00F3\u00BD8\u008F\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x000b\\x0013\\x0000\\x0000\\x000b\\x0013\\x0001\\x0000\u009A\u009C\\x0018\\x0000\\x0000\\x0002 IDAT8\u00CB\u009D\u0094\u00BD\u008F1Q\\x0014\u00C6\u00AD\u00AF\\x0017\\x0011\\x001f\u0089\u00AC\u00C2GA\u0081\n\u0080DE\"\\x0012\t\u00A5F\u00A2 \u00A1\u00D4Q(D\u00A3\u00A3\u00C4\u009F\u00A0PPHD\u00A1UH$\\x0012\\x0015\u0089DE\\x0010D\"\\x0012\u00EF3\u00EE\u00EE\u00EC\u00CC\u009DY\u00FB\u00EE\u00FBT3\u00E7\u00DE\u00DF\u00B9\u00E7>\u00E7\u00CCH\u00DE\u00F92\u009B\u00CDz\u00BD\u00FE\u00CFSZ\u00AD\u00F6] \u00AC6\\x001a\u008D\u00C7S\u0092\u00FFP&\u0093\u00F9\u0080\u00DF\u00F8\u00C2\u009A\u00D7\u00EB\u008DD\"d\u00DF\u009B\u0098\u008CFc\u00ADV[\u00AF\u00D7\\x0012\u008A\u00F4\u00F9|\u00FB\u00FD\\x001eY+\u0095\u008AT*\u00A5VI:\u00F2`\u00B1Xh8\u0097\u00CB\u0091\u0092n\u00B7\u009B\u00CDf\u00E3\u00EE\u00A6$\u0097\u00CBi8\\x001c\\x000e\u00DF\u00EFw\u00C0\u00FD~_\u00A5R\u00B1[\u00A3\u00D1h\u00BB\u00DD\u00AEV\u00ABV\u00AB\u0095D\u00D4j5/\\x0019x\u0099L\\x0016\\x000c\\x0006\u00E3\u00F1\u00B8\u00C1` A\u00D8\u00DB\u00EDv\\x001f\u009F\u00DAl6\u00C9d\u00F2\\x0003Fz\u0093\u00C9\u0084\u00C6\\x0008+$\u00AF\u00A1P\u00E8\u00C1\u00D7x<\u0086\\x001dJ\u00A5R2\u009B\u00CDv\u00BB\u00DDt:M\u00A7\u00D3B{\\x0011I\u00A5R\\x0014<\u009F\u00CFq\\x0018\\x0003\u00B3\u00A1\u00E5r\u00A9\u00D1h(\\x001e\u00AF\u00B1X\u008C\u0082'\u0093\tn\u00C7\\x0014\u00CB\u0086\u00AE\u00D7\u00AB\u00D3\u00E9\\x0014\u00C2\u00B8|\u00AF\u00D7\u00E3n\u00FB\u00BA3\\x001b\u00DDn\u00B7\u00E8\u00BEh\u00E5\u00D8W.\u0097\\x0017\u008B\u00C5h4\u0082\u009D_n\\x001f\u008FGB\u00A2\u00C3\u00DF\u008D\\x0014\u00D9\u008DK\u00C1'\u00D6N\\x0006\u00F6x<h\u008C\u00B0`Q\u009E+\u0091>\u00BF\u00E6\u00D1W\u0087\u00C3\u00C1\u00CC\\x0016\u0081_\u009C@\u00C5\u00E1p\u00AB\u00D5\u00BA\\.\u00B8?ID\u00C3\u00F8\u009E\\x000b\u0085B\u00B1Xt\u00B9\\\\\\x001e\u00CF:\u009D\\x000e\u00E3\\x0005\u0083\\x0006\u0083\u0081\\x0008\u008CP\u00A9Tb'\\x0001\u0083I\u009D\u009FH$:\u009DN \\x0010\\x0010)\\x001b\u00A1z\u00BDN\u00E0\u00F3\u00F9l\u00B7\u00DB\u0085\u00C5\u00F3\\x000c\u00A3\u00D6\u0090\u00F5p8`\\x0012\u00B2\u00D9\u00ACh\u00CF\u00D9\u0099\\x00177\u00CC\u00EDv\u00FB\u00FD\u00FE\u00D7\u00FE\u00FF\u00CE\u00ED\u0082_\u008C\u00C7\u00AFa\u0082a\u00FE\u00F0\u00D3\u00E5\u00A6\u00F8\\x0019\u00C6\\x000e\\x0018N\\x0006c\u00B5Z\u00C1B\u00F4\u0096\\x0007\u00BF\u0090B\u00A1\\x0018\\x000e\u0087\u00DC/9\u009F\u00CF\u00B3\u00AB\u00CC\u0090\u00A8\u00BF\\x0011\u00BEu\\x001c{:\u009D\u00B8p\u00B3\u00D9\u00C4\\x000fD\u00F5\\x0014\u00BE\u00DF\u00BF\u008E\u00DD3\u00CC\\\u00C7\u00AF:\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "19",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_bw.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 485",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_bw.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 1de77feb127c6999ace87f981c06e3a7\r\nServer: Google Frontend\r\nContent-Length: 740\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001b\\x0008\\x0002\\x0000\\x0000\\x0000\u00F3\u00BD8\u008F\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x0013\u00D6\\x0000\\x0000\\x0013\u00D6\\x0001\u00B16\\x0010u\\x0000\\x0000\\x0002ZIDAT8\u008D\u0095\u0094\u00CF\u008Bqa\\x0014\u00C7\u00BD,xmPSVV\\x0016X\u00F1\\x000fLY\u008DI\u008A,,f%\u0096\u00B6h\u008A\u0086\\x0019J\u0094\u008D\u0085\u0092\u009D,D)C(\\x001b\u00A5X\u00D8(\u00A5d\nY`\\x001a\rS\u0092_\u00CD\u00FB\u00ED\u00BD\u00DE\u00EB\u00BAw\u0098w\u00CE\u00E2v\u00EF}\u00CE\u00E79\u00E7|\u00CFy\\x001e\\x0016\u00EB\u0087f2\u0099\u00F2\u00F9\u00FC\u00E7_c\u00FD:5,+\u0095J\u00ADVK\u00B8\u00D2V\\x0001\u00F4z\u00BD\u0087\u0087\u0087\u00EDvK\u0087\u00E1\u00ADR\u00A9\u00DE\u00DF\u00DF\u00B1\u00E0\u00F7\u00FB\u00D9l6m\u0095\\x0008\u0098\u00CDf\u00C1g2\\x0019:l\u00B3\u00D9\\x0008\u008F\u00CDf#\u0091H\u0088\u00E0D\\x0016\u009F\\x0014{{{\u00B3X,tX\u00A3\u00D1\u00ECv;,\\x0017\u008BE\\x001e\u008FG\u0096\u00AA\u00D3\u00E9*\u0095J\u00A7\u00D3\u00D9\u00EF\u00F7\\x0004\u00EF\u00F5zO\u00C4\\x0000\u00CF\u00E1p\u00D4j\u00B5\u00D1h\\x0014\n\u0085\u00C4O\u0081@\u0090\u00CB\u00E5<\\x001eO2\u0099|zz\n\u0087\u00C3\u00EB\u00F5\u00FA\\x0000c\u00FB\u00AB\u00AB+.\u0097K\u00CD\u0090\u00DC\\x000b\u00CF\u009B\u009B\\x001bj\u00C2\u00E9t:\\x001e\u008F\\x001f\u00E0v\u00BB=\u009B\u00CDZ\u00AD\u0096\u00D5je\u00CA\u008B?f\u00B3\u0099\n\u00AFV+`x\u00F1\u00F9|G\\x0019\u00FA\u00FD>\u009F\u00CF\u00A7\u00F1\u00F8\u00D4\u00EB\u00F5\\x0000H7\u00D4\\x000c\\x000cr\u009E\u00C0\u00F0\u0090J\u00A5L\\x0018\u00C5\u00D7j5\u00D2\u00AD\u00D9l\u0086B!\u00BC<>>\\x001ea\u00A8/\\x0012\u0089\u0098\u0099\u008F\u00C7c\u00A7\u00D3\u00F9\u00FC\u00FC\u008C\u00F1(\u0095J\\x000e\u0087c0\\x0018\\x001cj^,\\x0016\\x0004\u0089\\x000e3Ib\u00AA \nF\"\\x0012\u0089\u00A4R\u00A9\u00D7\u00D7\u00D7c\u00AB\\x0014\n\\x0005\\x001a\u00C3L\u0098$\u00CF\u00D9\\x0017}\u00BE\\x000c#\u00E1\u0097\u0097\u0097#\u00CC\u00EC\ru/*\u00D9h40*\u00D0\t\u0095\r\u008B\u00C5b\u00BB\u00DD\u00EEr\u00B9d2\\x0019-,f\\x000b\u00E39\u0099Lpf\\x000ej\u00D3\u00C2\u00BA\u00DDn\u00C2\\x0015~\u00DDn\u0097\n\u00D7\u00EBu\\x001c&0\u00E5r\u00F9\u008B\u00C8\u0080!)\u00E1\\x001a\u008DF\u00AB\u00D5*-\u00F8p8<[3\u00E0\u00EB\u00EB\u00EB\u00F9|\u008E\u0081A\u0090\u00E5r\u00F9\u008D\u00DAL\u00C1\u00E4ry\u00A1P\u00C0\\x0016\\x0017\u00C8Kj_\u00C6\u00CE\u00C2\u00DF\u00CE\u00C670\u00D5\u00E3\u00E3\u00E3\\x0003w@0\\x0018\u0084~\u00A3\u00D1\u00E8\\x00070\u00AEH\u00B4\\x0014\u00D7\u00DDt:\u00C5\u0084\u00DC\u00DF\u00DF\u00A3\u00C9'0\u00CD\u00A8{\\x0003\u0088\u00C5b\u00E4'\u00EE\u00B0D\"q\\x0002\u00FF>5\u00EF?C\u00CC\u00BB\u00BB;\u009CD\u00D2\\x001bG\u00D2`0\u00E0?V\\x0003\u0081\u00C0\u00ED\u00ED\u00ED\t{\u00CE\u00FE\\x0000M\u0095@\u00B1\u00AF\u00BB\u0092\u00C3\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "14",
                            "uri": "https://google-gruyere.appspot.com/static/cheese_w.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 485",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/cheese_w.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: e61a2c7e71b4950a548fb0d1ea66b04c\r\nServer: Google Frontend\r\nContent-Length: 727\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000\\x0014\\x0000\\x0000\\x0000\\x001a\\x0008\\x0002\\x0000\\x0000\\x00008\u00E1\u00EB*\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008E|\u00FBQ\u0093\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z%\\x0000\\x0000\u0080\u0083\\x0000\\x0000\u00F9\u00FF\\x0000\\x0000\u0080\u00E9\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017o\u0092_\u00C5F\\x0000\\x0000\\x0000\tpHYs\\x0000\\x0000\\x000b\\x0013\\x0000\\x0000\\x000b\\x0013\\x0001\\x0000\u009A\u009C\\x0018\\x0000\\x0000\\x0002MIDAT8\u00CB\u00B5\u0094Io\u00A9a\\x0014\u00C7}3\u0089\u0085XZYX\u00FA\\x00006\\A\u00CCC\\x000c!\u00A2\u0092\nb\u00A3\\x0012\u0082\u0088)TXH\\x0008\\x000b\u00ADech\u0082\u0090\\x0018B\u00A2\u0086\u00D6\u0090\\x000e\u00F7\u0095\u00B7\u00EE\u008B{kq\u00CF\u00EAq^\u00BF\u00E7\u009C\u00E7\\x0006\\x001a\u009DN\u0097H$\u00BF\u00CE\u0099@ \u00A0x\u00C4b1\u0087\u00C3I&\u0093\u009F\u00BF\u008D\\x0006\u00D7\u00E75\u00D6j\u00B5\\x0014\n\u00C5n\u00B7;\\x0003\u00CFf3\u00B7\u00DBm2\u0099j\u00B5\u00DA%>\\x001a\u008D\u0082\\x000f\u0087\u00C3T\u00D8n\u00B7\u00A7\u00D3\u00E9n\u00B7\u008B\\x000c\u00DB\u00ED\u00F6%~2\u0099\u00F0x\u00BC?\u00E0\u00CDfc4\\x001a\\x0011\\x001cg\u00A7\u00D3Y(\\x0014\\x0008\u00FF\u00C7\u00C7G\u00BD^\u00CF\u00E5rOOO\u00EF\u00EF\u00EF\u0084S\u00A5RQ#\\x0007\\x0002\\x0001\u009B\u00CD\\x0016\u008F\u00C7\u00A5R\u00E9|>\u0087\\x0007\u00CF\u00BB\u00B9\u00B9Q*\u0095~\u00BF_\u00A3\u00D1X\u00ADV\u00C48\u00C0B\u00A1\u0090\u00B8\u009B\u0080qq\u00A9T\u008A\u00C5bH\u008C\u00F0\u00DC\u00DD\u00DD\u00F9|>\u00F2\u00F6P(\u00E4\u00F1x\\x000e0\u0093\u00C9\u00C4\u00C5\u00C8\u00F6\u00ACB\u00AF\u00AF\u00AF\u0088F\u00A4@\u00D8\u00DB\u00DB\\x001b0\\x001c\u00B4Z-\u00ED\u00F9\u00F9\\x0019\u00FF\u0080B\u00C8\u00B3\u00D9lR\u00E0\u0097\u0097\\x0017\u009DN\\x0007\u0080\u00F4 5`\u00DB\u00EDv\\x000f\u0093\u00DEb\u00B1\\x0008\u00A9O\u0083C\\x0002|\"V\u00ABU\u00B3\u00D9\u008C\u0083Z\u00AD\u00FE\u0086\\x001f\\x001e\\x001e,\\x0016\u00CB)<\\x0018\\x000cD\"Q\"\u0091@{d2\\x0019\\x0008\u00DC\u00E9t\\x000eo^,\\x0016\u00C4\u00DBp\\x0013n=[\u00D5\u00E9t\u008A\u0096\u00804\u00C1`p<\\x001e\u0097\u008A\u00CDf;\\x001c\\x000e\u0090\u00F7\u00F7\u00F7W\u00F5\u00E9\\x001e\u00E6\u00F3\u00F9Pe\u00B9\\\u00FE\\x0004@\u00C2\\x0010\u00F8b\u0093\u00C0\u00D6\u00EB5^qJV*\\x0015\u00B4\nr\u00C4\u00CB\u00CF\u00C3\u008F\u008F\u008Fr\u00B9\\&\u0093e\u00B3Y\n\u008C\u00DEB{\\x000e\u0087C\\x0014\u00EF\u00A0\u00F61\\x000c\u00F1@\u00F6z\u00BD\u00D5j\u0085\u00C1h4\\x001a\u00C7p\u00B9\\\u00C60\u0091\u00EAP#\u00F7\u00FB}\u00B4\\x001aq\u00BE\u00BD\u00BD%\\x0007\u00834\u00F4\u00D2\u00DF\u00DE\\x000c\u00E5\u00BD^o$\\x0012A\\x0010\u00C4\u00FF\u0087\u00DA\\x0014\\x0018j\u00E5\u00F3\u00F9T*E\\x000c\u00E6u\u00F0uu\u00FE\u008F0\u0086\\x0011;\\x0000+\r\u00FA\u00A1\nW\u00C0\u00D8!()\u00D6\u00DDh4B\u0087\u00A0x(\u00F2Oa\\x0000.\u0097\u008B\u00FC\u0089\\x001dv\u00BCR\u00F60\u0083\u00C1\u00D0\u00EB\u00F5\u00AA\\x0013CL.\u0097\u008BI<\u00DE\u00D8\u0098\"\u00F8\u00F1\u00D5`0\u00B0X\u00AC/\u0094\\x0013 \u00D8\\x0008\\x0007\u00B9!\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "18",
                            "uri": "https://google-gruyere.appspot.com/static/codelab.css",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 485",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/codelab.css HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: 2dd89b22c206b11ab8877b68cd66e5d6\r\nContent-Encoding: gzip\r\nServer: Google Frontend\r\nContent-Length: 740\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: text/css\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "body { padding: 0px }\nbody, th, td, form {\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 12px;\n}\nh1, h2, h3, h4, h5 { color: #660066; font-weight: 600; text-align: left; }\nh1 { font-size: 18px; }\nh2 { font-size: 16px; border-top: 1px solid #e5ecf9; padding-top: 6px; margin-top: 1px}\nh3 { font-size: 14px; }\nh4 { font-size: 12px; }\nh5 { font-size: 11px; }\n\n.banner { border-bottom: 1px solid #e5ecf9; }\nhr { border: 1px solid #e5ecf9; }\nimg { border: none; }\n\ncode {\n  color: #660000;\n  font-size: 110%;\n}\n\npre {\n  margin-left: 14px;\n  font-family: Courier New, Courier, mono;\n  font-size: 110%;\n  color: #660000;\n  background-color: #e5ecf9;\n  border: 1px solid #e5ecf9;\n  border-radius: 1em;\n  -moz-border-radius: 1em;\n  padding-left: 1em;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n  overflow: auto;\n}\npre p {margin: 0em}\n\n@media print {\n  code, pre {color: black; }\n  pre {\n    background-color: white;\n    border: 1px solid black;\n  }\n}\n\ntable     { border: 0;border-collapse: collapse; }\nth        { padding-right: 4px; padding-left: 4px; }\ntd        { padding-right: 4px; padding-left: 4px; vertical-align: top; text-align: left; }\ntd.right  { text-align: right; }\ntd.center { text-align: center; }\ntd.centered { vertical-align: middle; text-align: center; }\n\na { color: #2244ff; text-decoration: none}\na:visited { color: #cc33cc; }\na:focus, a:hover { color: #0000ff; text-decoration: underline; }\na:active { color: #cc33cc; }\n\ndiv.column2 {\n  margin-bottom: 0px;\n  background-color: white;\n}\n\ndiv.column1 {\n  width: 250px;\n  float: right;\n  background-color: #E5ECF9;\n  padding: 5px;\n  padding-left: 4px;\n  margin: 0;\n  margin-right: 5px;\n  margin-left: 15px;\n}\n\nli.L1 { margin-left: -20px; padding-top: 6px; }\nli.L2 { margin-left: -24px; }\n"
                        },
                        {
                            "id": "12",
                            "uri": "https://google-gruyere.appspot.com/static/gruyere-78.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 485",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/gruyere-78.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: fb56c7df3c23aa76f1e5de09d8f0ecaa\r\nServer: Google Frontend\r\nContent-Length: 2527\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0000N\\x0000\\x0000\\x0000N\\x0008\\x0002\\x0000\\x0000\\x0000\\x0001\u00C8\u00B7J\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008F\\x000b\u00FCa\\x0005\\x0000\\x0000\\x0000\\x0001sRGB\\x0000\u00AE\u00CE\\x001c\u00E9\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z&\\x0000\\x0000\u0080\u0084\\x0000\\x0000\u00FA\\x0000\\x0000\\x0000\u0080\u00E8\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017p\u009C\u00BAQ<\\x0000\\x0000\t]IDATx\u00DA\u00E5\u009Bm\u0088UE\\x0018\u00C7\\x000fY\u00BA\u00AB\u009B\u00BBn\u0096e\\x0011\u00FA!\u00E8CDPD}\u00E9\u0085\u00C8@\u00E8S}(\u0082\u0088 !B\\x0010\\x0014$\u0084\n\u0084\u00EC\u008BE\t\u0085\\x0015\\x0018E\u0089\\x0011\u00BD\\x0018$\u0082\u00A0\\x0010\\x0016\u00B6\u00EE\u00BD{WM7\u00B5\u00AD\u00F5\u00B5\u00DA\u00DA\u0092\u00960\u008C\u00E97w\u00CE\u0099{\u00EE\u00CC\u009Cs\u00E6\u009C{\u00EE\u00BDk\r\u00C3\u00B2{\u00EFy\u0099\u00FF<\u00CF\u00FC\u009F\u00FF\u00F3\u00CCl \u00FE7-h\u00EB\u00D3G\u00CF\\x001e\u00DF;qp\u00F3\u00FE\u00ED/~\u00F9\u00FE\u008A\u00CF7\u00DA\u009D\u00CF\u00F9\u0096k\u00B8\u00F2\u00E2\u0083\u00BA\u00FF\u00D4\\x0018\u00A3\\x0007\u00C6\u00AD\u009BW\u00E4\u00ED\u00DC\u00C5\u00BDm\u0082\\x001d\u0094h@L\u00B4\u00EC\u00BD5\\x0005\\x0010\u00DA\u009D\u00E7\u00F0\u00B4\u00B1\u00C9\u0089\u0099\\x0005u\u00FB\u0091\u00BD\\x000f~\u00F0l)\\x0008\u00ED\u00FE\u00D0\u00B6\u00E7x~\u00F7\u00A1\u00B6\\x0015d\u00BC\u00F3\u0096\u00F7Gw\u009D\u00BF\u00F0w\\x0017\u00A0\u00E2\u00AEO|\u00FAR\\x0007@\\x001a\\x0016\u0086\\x0008:\\x0007\u00F5\u00DC\u00F9\u00E9\u008D_m\u00EB0\u00C8xa\u00CF;\u008C\u00A1\u00EDP\u00E1\t\u00A6\u00B6\u008B8\u00B5y\\x000b0V\\x000e\u00A8\\x001f\\x001d\u00DAs\u00E7\u00DB\u00CFt\\x001d\u00A7\u00EA\u008Cd\u00E7\u00F1o\u00DA\\x0002\u00B5\u00BBN\u009B\u00D47\u00ED\u00FB\u00B8L\u00A8\u00F0\\x001e\u00CBc\\x0006\u00E2T\u00FD\u00D9]oy2s\u0090\u0089s\u00E5\\x0017\u00AF\u00CEX\u009C\u00AA3B\\x001f\u00B4\\x0019P\u0099\u00B3\\x0019\u008ES\u00A3m\t\u00EAL\u00F6[g\\x0010*\\x0008\\x0015u\u00D2\u00BEa\u00DD\u00B3eU;\\x001e\u00CB\u0098sCE\\x000c\\x0015\u008E+\u00DCH\u0082\\x0002c\u0093\u00A3 n\u00E8v\u00C4gi\u00B5\u0083\u00D2yuJV\\x00148\u00F5P^e\u00FB\u00E8G\u00EB\\x0019\u00FA\u00CEc\u00DF\u009C:7\u00E9\u00CF\u00FE\u00BB\u00C7\u00AB\u00A5\u009B\u0097\u0091'i)\\x0007T\u00B2'\u00CF\u00E7\u00AE\u00DE\u00F9:\u008Ar\u00FA\\x000f\u00C7\u0083\u00A7\u00AB\u00E2\u00D7\u00AD\u00E2\u00D4\u00F3\u00E2\u00C4\\x001a\u00F1\u00ED-a\\x001f\u00BET\u00EC\\x000f\u00E4\u00CF\u00B3/\u00AB\u00AB\u00C6\u00A7\u00CE0M\u00E5\u00A2e\u00FC^Pq\\x0000\u009F\u0099C9\u0099\\x0008\u00FF>#\u00B1M<-\\x000e\u00DE(\u00F1T\u00FBEu\u00BE\u00FC\u00C5\u00D9\u00AB\\x0003\u00E2\u00E8\\x0003\u00E2\u00C2\u0094rf\u00FF\u00C9\u00F5\u00ECN7\\x000e\u008C%\u0094>\u00C7|\u008B\u00D75=\u00E0\u00AF\u00C3\u00E2\u00E4:Q[,*s%\u00B6\u00A1 \\x0011\u009E\u00D1\u0087/\\x0013\u00A3K\u00A5\u00F1\u00EB\r\u00E7/Qu2N;\u00D2\\x0006\u009E\u00AC\u00BB\u00EC\u00BD5X\u00B2q)\\x00069\u00BD^\"\\x0004\u009Er\u00CB\\x0002\u00BD2[\\x000c\u00F7\u0088\u00A9\u00CF\u00B43\u0097\u0098K\u00D8l\\x001c\u00C4M\u009AT.i\u00CA\u009Bp\u00D4\\x001f\u009F\\x0012\u0095yr\u0094n\\x0000|5G\u00BA1\u00AB\u0094\u00B5\u00AA\u00FB\u00D1\u00E5\u00A2\u00D2+\\x001d{\u00A8~\u008D4\u00EC%\u00A2\u00DA'F\\x0006\u00C4\\x000fO\u008A\u00FE*W\u0084\u0082\u00C50l\\x0010\u00E7Cw\\x0002q,J \\x0018\u00CD\u00C4J\u00E9\u00A8)fd\\x0011\u009E\\\u00AB\\x0016\u00A1\u00BBM}\"oWP\\x001b\u00CE\u00DC+\\x000e\u00DD$\u00CE\u008F\u00EB\u00E2F)\u00CEl\u00AC\u00B5\\x0006T{\u0095\\x0012\t\\x001ai\u00E1\u009F_\u008B\u00DA\u00D5\u00A2\u00D2\u0093\u00E5\u0093\u00BD\u00D9A\u00E6\u00FB\u0087\u00DD\u00F7\u00D6\u00AE\\x0014\u00BF\u00EF(11\\x0006\u0091\\x0003\u00AAM\u00BCM8O\u00BF(\u00CD\u00E5\u00B5\u00FC\u00E6J\\x000fOoG\u00EEHd/\u009C\\x0019\u00C7\u0089\u00C2{\u00EB\n<N\u00C5AR,\u00DD;q02\u00C2#bd\u00BE7\u00AF\u00CE\u0096\u00C6\u0087\u00B1`f\u00A3\u00E1\u00D5\u0093[dtM\u009F5\\x001c\u0087u\\x001e\u00CDW\u008B\u00F5\u0080x\u008C\r\\x0014\\x0019\\x0018\u00AA\u00A5!\u009DyS\u008C\u00F4\u00E7\u00A6V\\x0018K1\u00B3\\x0016\\x000f\u00F2\u00CF9\u0092\u0084<\u009F\u00C0|\u009D\u00DB\u00AD=\u00AEp]\\x0012\\\u009A\u009C\\x0002\u009B\u0090\u0098\u00C5P\\x001e\u00B0>G\\x0016f\\x000fk$f%\u00C0T\u00E6\\x0014\u008C=6\u00C3\u009DX\u00AD\u009D\\x0019e\u00D6\"9\\x0005v1\u0085\\x0015\\x0012\u009A\u00F4\u00C0\u00D2\\x000cI\u0080c\u008F\u00DD\u00A7\u00B9\u00A4\\x001e\u00B2\u00C6\u00C5\u00D9W\u00A4M\u00FC\u00F1`|ip\u0097WW\u00FA\u00A4GD|N\u00A8,\u00E0\u00CC\u00A0k@5\u00B87\u008C.\\x0000\u00C8`\u00A0\\x001e\t\u00C9\u00D9~~#\u009B\u00ABG\u00AE\\x0010\u00E3\u008FK/%\u0086\\x0001\u0086_\u00F8\u00B36\u00E8\u00BA\u00F2J\u00E9_\u00913\u00E7\u00DD+\u00D1<\\x001c\u00E0\\x001bn\u00D6B\u00CDf\u00AA\u00BC\u00EA\u00E5*\u00F4\u009B\u00ED\u00C4\u00DA\u00E4e\\x001c\u00C5dB\u008E?9csDH\u00E4\u00CCyk@J\u00FF\\x0004v\u0098\t\\x00131<'|M\u00B8\u00FC\u0086\\:\u00B6\u00B6Pj`l\u00A2:\u00F6\\x001c\u00BBWT\\x0007\u00B3]\\x0017\u00F1\u0094+\\x000e\u00A1:\u00F86r\u00E6-\u00D5\\x001dyCN\u00804I\u0083\u008A\u00F3\u00A0oX~L*oR\\x001fb\\x0019\u00A6\u00B9\\x001a13\u00FA\\x000ew\u0095\u009F\\x000c\u00C8\u00B8\u00EA\u00CB\u00B1\u0083R`2;,o\"\\x0013\u00BF\\x0000>=\\x000e1\\x000b\u00A3\u00D7jg&\u00E9\u00F7tf\u00B5$\u0083M\u00FB>N\u0083\u008A\u00A0\u00B7%\\x0001N\u00CB\u00C8\u0098\\x0002\u00F0\u00B3\u00C0\u00B8\u00B2V'j\"\u008AD\u009B\u00E0\\x0002Ng\u0096\\x0013\u00D4\\x0017\u00DE\u00E89G\\x0004\\x0005$M\u00BD\\x0011)|6rq\\x0001\t\u00D5&\u00F1&\u00A8XI\\x0019\n6\u00E6\\x0013\u00A5\u00E0\u00C1\\x0019M\u00AD\u0099\u00D0\u00F1U\u00BA\\x000b\u0094\u00D2%\u00F3\u00DF\u00A5\u009Dy\u00F3\u00FE\u00ED>B\"\u00B0g\u00C5\\\u00ABN\u0092PF@\u00F1r\\x0019\u008E\\x00076\u0094\u0090\u00F2F_\\x0017\u00E8\u00CB\u00E7\u00F0\u00A9\u00E9.\u00CE\u009CR\u00BB\u00C1\u009C\\x0012\u00AA\u00AD\u00F2\u00B3\u00A1\u00BA\u00F1\u00F7\u0085\u00DE\u00A8\u00DC\u009E\u00DB\u00E1p\u00E0\\x0011\u00B4\"\u00DD\u00D3\\J\\x001b\\x000fi\u008Ck`2]\u008E\u00E1!J\u0093\u00F8,\\x0001\"VT\u00BB\u00C1\u0099\u0093\u00F6A1\u00A7\u0084jk\u00AEl\u00A8\u009E\u00A5\u0086\u00A1HK)\\x0017P:\\x0011T`\\x0003\u00A1\u00D3\\x0005d0\u00D9-g\u0087k\u0098)\u00E9\\x0002\u008B3\\@\u00D5n\u00A2\u0098gS\u008F\\x000e\u00AD\u00F9\u00A12\u0091\u00CA\\\\x000czd\u00B0h\u00FDan\u0099.@\\x0008\u00A8]\u00A3'\u00CE.D\u00821?\u00D4C77\\x0011\u00F2\u00D4g\u00A2\u00B6\u00A8\\x001c\u00A6\u00C9t\\x0001;U2\\`\u00F2]\u00FD1\\x0010\u00E2\u00CE\u009C\\x001f*!\u00C1~\\x001f\u00AF1J\n\u00A5\u00F7\u00D0\\x0005\u00EA\u0089$\u0094\u00C6\u00C0\u00A07\u00DE\\x000b\u00D5)]\u0099\u00D044\u00B2\u00FC\u009C\u00B4\u00C4'v\u00C3\u00C8\u0085Y\u00B4\u00D5\u00D4\u00A7?\u00CC\\x0016\u00D4\u00D8\\x0008o\u00E0'\u00D4E\u00B4\u00AC\u0083KHK\\x0019q5\u00DE#\\x0015j6U\u00F8u\u00D8a\u00A0x1\u00B1\u00F0\\x0012@\u00C0\u00F0\u00D2\u00FA*\u00D3PU\u00FA\\x001d\u00D8{'n\u00A8\u00DCf\u0083\\x001bj\u00FCJ\u009C\\x0019\\x001fS\u00AB\u008B~b\u0095\u00A4\u00AE\u00E1\u00DE\u00CEZ\u00BBOQ\u0094\u0086\u00AA6\u00D7\\x0003\u00BB\u00F6\u009BhU\u00A4\u0092\u00B3!\u00A4\u00B4\u00AC\u00B5-\u00CFZ\u00FA\u00E1\u00C9\\x001c\u00BA\u00AF\rPUM8@g$B\\x001d\u00CA\u00B3V\u0091/\u00C4\u00B7\u00A4\u00C6W\\\u00D0%\u00A8\u00AAN\u00E6\u00C8WC\u00A8\u0088L\u00FB)\u00D3U\\x0013\u00C3\u00F8c!\\x0006\u00E2mJ\u00AD\u0090\u00AF\u00AA\u00F3K\u00A6e8\\x0002\u0087\u00B2\u00EBU\\x0016\u00D40_\u00B5\u00AB\\x0010\u00A6U\u0087b\u00C1f\u00F4\u00BA\u00A6\\x0010O\u0086\u00A1\u00F38g\u00AA\u00DDd\u00D8\u00E5\u0089D\u00AAh\u00CC\u0093\u00C3\u00B8\u0098x\u00AB\u00A7\\x0015T\u0087o\u0093\u0095\u00CA\\x0004\u00A8*\u00D2\u00B8kK\\x0019j\u008911\u009D\u00AA\\x0008\u00A8\u008B\u00A6\u00E4\u00AB\u00C8\u00FD\u00F4F\\x00180*l\u00B8\\x0003\u008F\"<2nR%8\u00CCG\u0090\\x001c\u00B8\u00C1\u008C\u00A5\u00FC\\x0019\u00D7m\u00CDP\u009BjK\u00B8r\u00ABr\\x001f\u00CB\u00D8\u00BEmoa\\x0018\u00A9\\x001cy\u00BF\u00B1\u00E5A\u00B2\u009En\u00DB\u00E1\\x001eYd\u00B6\\x001b\u00A2\"\\x0001\u00AA>\u0096\u00E8\u00A8\\x0003\\x0017\u0082:\u00E0\u00CE`\r\\x0011\\x0017\u00E7a\u00D6\\x0005j.\u00AF \\x0001\u0086\u00D3}d\u00E1n\u00AE\r\u00D5\u00AC\\x0003\\x001b\u0087Y\u008A@E\u00BB\u00C6K\u00A4\u00CE\u00C6\\x0010\u00E3\\x0014\u0092\\x0014\u00A83\\x0016\u00EA\\x001c\u00B9\\x0010\\x001c\u0085\u00BB5N\u00AB\u00C6\u008F\u00BD\\x0004:\u00B5m\tj\u008A\u00C0\u00D0\u00CD.A\u00DAL\u0086\u00E5\u0087g\u00D5S\u00B6\u0084\\x000e)\u008C\u00DD\u00ED\u008A\u00EDK\u00EA;\u009A\u00F5kbj)~\u00A86\u00B0\u00C5q\u00C1\u00D4\\x001c\u00DEOoZi\u00C4\u00F3Ac\u0085\u00A3c\u00873\\x0019\u00B8O.\u00FBx\u0093\u00BBg\u00F3\\x001a\u00D3\\x0011A\u00D5\u0084dB\u00D5Im\u00D1*D\u00BF9\u0082&\u00EF}W\u008C,p\u00EF\u00CD`m\u0095\u008B\u00F2F\u00CF\u00CCA\u00A6\u00E3\u00CB\u00C3\\x001dj8\u00DC(\u0094G\\x000el\u009C\u00D6p\u00EC\u009A\\x0017\u0084\u00EAdT\\x001d\u00FAT1!I\u00A6\u00B7RdJVKig!TM\u00B88T\u0085\u00F6\u00D7\u00ADM\\x0011\u00EF\u00A7\u00D7\u00E4\\x001eq7\u00E4~\u00C6a\\x001e\u0094SKP\u0095\u00A8R\u0095DY\\x0016\u00E9\u0091\u009B\\x001d\u009D\u00CEc\u00FD\u00A06\u00B6\u0099\u00BB\u0092mw\\x0012\u00AAo|+R\u00B9\u00ED\\x0015\u00A3\u00D7G\u00A5\u00E0E\u00F9n$\r\u00D6[\u00D2\u0099\u00D5s|\u00CA\u0095xt\n\u00AAL\u00F1\u00967\u00B4\u00EBo\\x001fzma\u00A9\u00CD>\u0092\u00A78\u00DB\u00C1\u00F3)\u00FB\u00B7\u0095z\\x0019 \u00DFy\u00E0\u0092\u009D\u00CA*\u00C1yr\u00813IN\n]t\\x001c\u00A7\u00CBP\u00ED\u00D7\\x001f8;YO\u0091\u00D6\u00B6 \u0091\u00FC\u00BF\u00C8\u00FD\u00AE\\x000c\u00A8zU\\x000c\u00B5\u0087*\\x0010F\u00EAs\u0094\u00A0z\\x000b\u00BEW\u00E9kz#\u00BA'\u00A9\u009D\\g\u00E6@\u00F1\u00F5\u009F\\x000f*\u00FE\u00A6\u00F6\u0094\\x0018Sx>e\u00A0\u00A5\u00B5\u00CA\u0092\u008B\\x001f\u00A1u\u009Ev\u0091\\x001f\u00C6\\x0000|w\u00E2\u00F0\u00C8.\u00E2\u00C7MjW\u00A5yP\u00BE)R\u00C7\\x0015\u00D4Q\u00C1p\\x001fe \u00DFa\\x0016\u0095\u00D3\u00AB\u00FD8\u009Fs!\u0095Y\u00F2L\u0089OJh\u00EF\u00A7\u0094\u00FC\u009F\u008Ej+\u0095q\\x0003\u00A0E\u009B\u00E7\u00E2$#\u00D1\u00AF.\u00C8\u00E6\u00852\u00FFU\u00B7u\u009B\u00E7=\u00B1H\u0092`\u00AC\u00CF\\x000eAM\u00B7y\u00E6\u00A1\u00EF\u00BC\u00D9\\x0012\u00F1\u0099\u00A7\u00A5\u00AC\u0082\u00CE\u00FF[\u00BDy\u0094_\u009D\u00E3W9\u00B4\u00E7~1q\u00D2\u00DE\u0080\"\u00E3;|{\u008E\u00C0\u00D6Q\u00A8vZ\u00A76\\x000b\u00A1\u00F7\u00DA\u00C2p\u00A9;\\x000bh\u00C3\u00B3\u00E5Q\u00E1x\\x0006\u008F\u009D\u00D3q\u00CE,\u00A8\u00CE\u00A5~f\u0083\\\u00EAJ\\x001b\u00A8\\x000cv(\u00E6\u00C9\u00CC\u00C8\u00E8\\x0012\t2\\x0013\u00E7\u008C\u0086ZzT\u00BF\u0098\u00A0\u00B6\u00C8\u00F0\\x0017\\x001f\u00D4\u00E4\\x001d\u00F1\u008C\u00A8~\\x0011[5\u00AF\u00CD\u00FF\u00B3P\u00FD\u00DA\u00BF\u0089U\u00AC\u00AA\u00CA-\u00A4\\x0017\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        },
                        {
                            "id": "81",
                            "uri": "https://google-gruyere.appspot.com/static/gruyere.png",
                            "method": "GET",
                            "param": "",
                            "attack": "",
                            "evidence": "Age: 485",
                            "otherinfo": "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.",
                            "request-header": "GET https://google-gruyere.appspot.com/static/gruyere.png HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nX-Cloud-Trace-Context: e61a2c7e71b4950a548fb0d1ea66b04c\r\nServer: Google Frontend\r\nContent-Length: 40079\r\nDate: Fri, 28 Feb 2025 11:48:51 GMT\r\nExpires: Fri, 28 Feb 2025 11:58:51 GMT\r\nCache-Control: public, max-age=600\r\nAge: 485\r\nETag: \"3m8CBg\"\r\nContent-Type: image/png\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\u0089PNG\r\n\\x001a\n\\x0000\\x0000\\x0000\rIHDR\\x0000\\x0000\\x0002\u00DE\\x0000\\x0000\\x0002Z\\x0008\\x0002\\x0000\\x0000\\x0000\u0097\u00D7\u00D7\u00C6\\x0000\\x0000\\x0000\\x0001sRGB\\x0000\u00AE\u00CE\\x001c\u00E9\\x0000\\x0000\\x0000\\x0004gAMA\\x0000\\x0000\u00B1\u008F\\x000b\u00FCa\\x0005\\x0000\\x0000\\x0000 cHRM\\x0000\\x0000z&\\x0000\\x0000\u0080\u0084\\x0000\\x0000\u00FA\\x0000\\x0000\\x0000\u0080\u00E8\\x0000\\x0000u0\\x0000\\x0000\u00EA`\\x0000\\x0000:\u0098\\x0000\\x0000\\x0017p\u009C\u00BAQ<\\x0000\\x0000\u009C\rIDATx^\u00ED\u00BDi\u0094\\x0015E\u00DA\u00EF\u00EB\u00FDz>\u009Eu\u00BE\u00DD\u00B5\u00AE\u00F7\u00DCs\u00CF]\u00AB\u00BF\u009C\u00F3\u00BE]mkw;S \u00C5\u00A4\u00D8\u00B6\u00F3\\x0000\u00A8(X\u00DA\\x000e\u00B4\u00AD\u00AD\u00E0\u0080\u0088\u00CA\u00B0\\x0001\u0099\n\\x0010\\x001c\u00DB\\x0011K\\x0005AeP\\x0019\\x0004,@\u0099\u00C7\u00A2(\u00A0\n\u008A\u00A2\n((\u00A8\\x0002d\u00DF'32sGfFfF\u00E6\u00CE\u00DC;\u0087?+t\u00ED\u00CA\\x001d\\x0019\\x0019\u00F1\u00CB\u00C8x\u00FE\u00F9\u00C4\\x0013\u00B1\u00FF\u008F\\x001eO\u00CC\u00BFD\u00FD\u00F7\u00B6}y\u00FE\u00FCy\u00F6\\x0019\u00FF@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0d\\x0004\u00CE\u009D;w\u00E2\u00FF\u00BAS\u00BB\\x001cI\u0093{\u00EF\u00BD\u00F7\u0085\tsg\u00FEx\u00EA\u008D\u00EFN\u00BF\u00FA\r\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@$\\x0004nzl\u00CA\u00A4\u00E5\u009D\u00A1\u00A4x\\x0016\\x0015\u00A0i\u0083\u009Ey\u00F3\u009D\u00B5g\u00E6\u00AC<5\u00FC\u00B9\\ee\u00A5\u00E21\u00A1\u00FF\u009E{c\u00CE\u00C4e\u009D\u00FF\u00F8\u00BC\u00E3\u00FE\u00F7N\\x000e~\\x0017\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@ \\x0012\\x0002\\x001e<\u0089\u008Cw(\u00A66\u009EE\\x0005h\\x001a5\u00E4\u00C5\u0085\u00A7H\u0081<\u00F0\u00DE\u00C9\u00BF>:^\u0091&\\x0003\\x0007\\x000e\u009C\u00B4\u00AC\u0083tI\u0080\u00E2p\n\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080<\u0081x\u00EA\u0089\\x0010k%\u008F\u00C2\u00C8\u00C9\u00A4\t\u00FD9\u00E4\u00BD\u0093\u0083\u00DEn'\u00C7\u00C9%UUU#\u00BFR\\x000e\u00DD\u00F7N\\x0004\u00E9\u00ED\\x0013\u00F7\\x0005KQT&@\u0099\u00C1*Og\\x0005\u00B8V\\x0014\u00A7\u00A0\u00FEQP\u0095/\\x0013\u00FC\u00E5YE\u0091\\x0013\u00FC\u00A3\u00A0*_f\u008C\u00F9\u00D3\\x000b\u00FA\u00E8E\u00A7'/\u00EF\u009C\u00F2}'Y\u00C0AB\\x000b(W\u00FFgj;>\u00F8\u00F9\u00EC\u00B4\\x001f:\\x0007\\x0019\u00F9]\\x0011\u00FDi\u00D0\u00A4\u00DC\u00B2\u00CEPl\u0084\u00B0\u00A8\u009B^\u00DF\u00F0\u00FF];\u00C8%\u00DD\u00F4\u00DAz\u00BB]V\u008AZzZ;.w\u008B\u008DK\\x0018m\u00B1\\x001f\u0091l&]\u00FD\u0085\\x0005\u00A7\u008C\u00CC\u009A4y\u00E6\u00F3\u008E{\u00E7\u009D\u00F0No\u009F\u00B87@\u0092)\u00D9\u009EG\u00FEB\u00F2\u00E5\u00CB\u0097\u00C9\u00E7\u0094/\u009F\u00CF)-\u00F9\u00F2\u00E5\u00CBD\u00FD\u00E5Y\u0081\u00BF;+y>\u00E8\u00FF\u00EE\u00AC\u00E4\u00FB$\u009E_yV\u00F2\u00FD\u0093+\u00F3\u009F\u00B5\\x001d\u008B\u00B7v\u00CD^uf\u00CC\u00C2cS\u0096\u00B4\u00FD\u00B0\u00EB\u00EC\u00D2\\x001dg\u0087\u00FF[d\u00E0$\u00CA\u00F4\u00A3\u0093\u00BF\\x001e<?mI\u00EBmS\u00F7kf\u00D4\u00B5\u00FEW\\x000c\u009A4q\u00E9i\u00CD\u0098J\u0094\u00EFR\u00A6\u00A9(\u00FD\u00A2\u00FF\u00F3\u00DAA\u00CBwukig\u00F7r[\u00FA\u009F\u00D7\\x000c\u00B2\u009B\u00FB+\u00EESk\u00C5\u00EA#\u00C1_\u00BB\u008AZ8+\u0090\u00FEo\\Kp\t/&\u00A3\\x0016\u009C2\u00AE\u00ABI\u0093\u00A7?\u00EF\u00B8{\u00DE\u0089\u00A8\u00D2\u00DC\u00E3wG\u009A\u00A2\u00AB9+9\u00D2\u00CAS\u00E1\u00A8\u00BF;\\x0001\u00F0w'\u0080\u00FE\u0083\u00FES\u00CC3\u0092\u00BD\u00FE\u00F3\u00F7ON\u00AEo<\u00F7\u00CF\u00CF\u00DA\\x0006N\u00D8\u00F6\u00B77\u00F7\u00DD6\u00FD\u00E0#\u00EF\\x001e\u009A\u00BE\u00E4\u00C8\u00DFr\u00DB\u00EE\u009Cs\u00CC: \u00CB\u00B1]\u00B7\u00AF\u00FB\u00A5O\u00F6\u00FDmJ\u00BD\u008C\u00BD\u00B8\u00FC\u00BE\u00DC\u0084%\u00A7\u00B5\u009C\u00C5\u00F1\u00BF\u00FC\u00BEI\\x0013\u0096\u009E\u00B6\u00D4\u0099\u0097\\x0008v]\u00C2\u0094\u0084\u00BD\u009E\u00A6Z\u00C9\u00B5\u00DA\u00A2Ex]\u00E2\u00D7\u00AEQC\u009E\u00FF\u00EA\u0094q\u0096&M\u00FE1\u00FF\u00E4\u009Do\\x001dG\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081t\\x0013\u00F8\u00E2\u00D7\u00B3\u009F\u00AE\u00EF\u00EC?v\u00E3\u00AD3\u009A\u008D\u0096\u00DE6\u00F3\u00C8\u00CD\u0093\u00F6\u00DE1\u00A7\u00FD\u00D9\u00DA\u008EY+;\u00DF_w\u00E6\u00D5\u00C5\u00A7\u00D8\u00B7\u00F7\u00CE;\u009E[vz\u00EE\u00EA\u00CE\u00B7\u00D7\u009Cy\u00F8\u0083\\x0013\u00EC e\u00A3\\x0019\u009C\u009A\\x0015\u009D\u0093\u0097\u009D~\u00FC\u0093\u0093k\u00F7\u009D\\x001b\u00F9\u00F1\u00BE\u00BFMm|\u00EA\u00B3\u0093sVu~\u00B0\u00EE\u00CC\u0088\u00CF\\x001c\u00AD\u00EA\\x001f\u00EF\u00CD\u008D\u00FB\u00EEt(\u0090\u0085E\u00FD\u00BF\u00D7\\x000cZ\u00B6\u00B3\u009B\\x0012}\u00B0$\u00E3\u00B8\u00FD\u00EA\u00C1je\\\u008B\u0095\u00CC.\\x001a\u00A0it\u00F5\u00E7\u00BE\u00E80N\u00D4\u00A4\u00C9\u0088\u00CF;\u00EE\u0098{\u00C2Gz\u00EB\u00C4\\x001d\u00F1I\u00BEj\u00CE2\u00C7\u00A7\u00F2T\\x0013\u00D4\u00BF\u00BC\u00B7\\x0003\u00FC\u00C1\u00BF\\x0018\\x0002\u00E8?\u00C5\u00D0+\u00FE\\\u00FF\u00FC9p~\u00C2\u00D7\u0087o\u009A\u00B0\u00D3n\\x0008h\u00FB\u008C\\x0005\u009B\u00BB\\x001e\u0098w\u00E4\u00D1w\\x000fn>tn\u00F2\u0092\u00E3w\u00CD=AG^\u00FF\u00F6\u00D4=5\\x0007\u00DE^u\u00BCn\u00F7\u00E0\u00B7\u008FM\u00FF\u00B1s\u00EE\u00EA3\u00FF\u00F8\u00F4\u00D8\u00E6C\u00E7\u00DFYu\u00FC\u00D6\u00A9\u00FB\u00D7\u00EF?\u00F7\u00CF\\x000f\u00F6=\u00FE\u00EF\u0096\u0085[\u00BA\\x0006\u00CF=:e\t}u\u00EE\u00D6\u0099G\u0084\u00B6\u00E6\u00B2{'\u00914\u00D1\u00BE\u00F2_\u00BELSQ:\u00CC\u00FFq\u00CD\u00A0\u00A5;\u00BB)\u00D1\\x0007>\u00B3\u00D3q\u0096GX\u0094\u00B7\u00AD\u009C{\u00C2(V\u00BB\u00A2g\u008BD7\u009D\u00AE\u00FE\u00AF/N\\x0019\u0097\u00D3\u00A4\u00C9\u0093\u009F\u009E\u00BCm\u00F6q$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H7\\x0001\u008A\\x000b\u0099\u00FE]\u00F3\u00C0I\r\u0096f\u00DE1\u00E7\u00F8\u00BA\u0086s\u00A3\u00BFl\u00ED\u00FF\u00C6\u00D6\u00BF\u00CDl\u009D\u00F1\u00C3\u00C9u\u00FB\u00CE\u00BE\u00BA\u00A0\u00E5\u00A7\u00FAstd\u00E0\u00E4\u00FDw\u00CD9\u00F6\u00CB\u0081s3\u0096\\x001c\u00A6#O|\u00D0t\u00E3\u00C4=\u00D3\u0096\u009FX\u00BE\u00FD\u00F4\u00CD\u00B9\u00DD4C\u00F4\u00E4;{>X{\u00EA\u009D\u009FN\u008D\u00F9\u00A2\u0089\\,O\u00D4\u00DC\u00E7\u0095\u00F5B\u0092\u00B8'\u00F7\u00FA\u00B7\u00A7\u00ED_\u00FD\u008F\u00AB\\x0007\u00B9$\u00F9\u00A2\u00A8\u0090\u00A5;\u00BA)\u00D1\\x0007\u00FE,\u00A7\u00E3,\u008FS\u00AD<;\u0083Q\u00AC\u00FD\u008A\u009E\u00E7\\x001a\\x0019\u00E8\u00EA\\x0014Ml\u00FC\u00A9I\u0093'>=y\u00EB\u00EC\u00E3H \\x0000\\x0002 \\x0000\\x0002 \u0090n\\x0002\u00DFl\u00EBZ\u00B1\u00AB\u0093\u0084\\x0005k\u00E6\u00F3_v\u00BC\u00B7\u00EE\\x000cy;(\\x0008t\u00E3\u0081\u00F3o|up\u00E0\u0094Fv\u009C|$\u00D3\u00BEm\u00DE\u00D0xn\u00E0\u00B8M,3Y\u00DF\u00B9?\u00B4|\u00BB\u00B5\u00F3\u00DF?\u00B5\u00DD<\u00B5\u0089&t\u00DEZ\u00D1\u00DE\u00F7\u00B5M$M\u009Ezw\u00CF\u00C7u\u00A7\\x0016m>}\u00DF\u00CC\u00FA\u009B&\u00EF\\x001f0a\u00F7\u00CDS\\x000f\tIV\u00A8\u00D2\u00C4\u00F2\u00D5\u00FFs\u00F5\u00A0%;\u00BA]\\x0012e\u00B0\u0097\u00E6^\\x0014\u009DbI\u00AC|\u00F9\u00A2<{\u0082\u00BD\u00DA\u00C2\u00C2=\u00CB\u00A1\u0086Pl\u00B2\u0091M\u0093&\u008F|\u00F2\u0096\u009A\u00E3r\u00A9\u00FD\u0096\u009A\\x0000I\u00B2\u00F0\\x0012d\\x000bPy:\u00A5\\x0004\\x0015\u0093\u00BC\\x0004\u00EA/\t*\u00A2l\u00E0\\x001f\\x0011X\u00C9b\u00C1_\\x0012TD\u00D9\u00D2\u00C0\u00FF__tlm:?\u00E5\u009Bff\u00CBn\u009F\u00DD>\u00F8\u00ADf:\u00F2\u00E4{\r\u009F\u00D6u,\u00DF~j\u00C0\u00C4}t\u009C\u0094\u00CA\\x0017\u00BF\u009C\\x001e4u\\x001b}\u00F5\u00AF\u00EF\u00FB\u00EB\u008C62\\x0004+\u00F7\u009C\u00FB\u00FB\u00DB\u00F5\u00F7\u00CE\u00A8o\u00D5\u00B1\\x0005\u00BF\u009C\u00FAx\u00FD\u00D9\u00FE\\x0013\u00F6\\x000e\u00CC\u00ED\u00D9\u00D0x\u00FE\u00D1\u00B7v\u00BF\u00F8E\\x001be\\x001e6g\u00EF\u00CD\u00D3\u008F\u00BAX\u008D\u00DF\u00DF\u009D\\x001b\u00BB\u00F8\u00B4%\u00C3\u00BFj\u00D0w\u00DB\u00BB]\\x0012e\u00B0\\x001b_\u00B5\u00A8S\u0096\u00E3\u00FF\u00FD\u00AA\u00FB\u00BE\u00DB\u00DE\u00C5%k\u00B1jQ\u00D6\\x001e\"\u00AC\u0095\u00BB\u00ED\u00E3\u00EBl\u00F9\u00ECp\u00A2c\u00FF\u00A1\u00AB?=\u009Ft\u0088\u0096A\u0093&\u008F}|\u00E2\u00E6\u0099\u00ED\u00DE\u00A9\u00A6\u00FDf-\u00B5\u00DD\\\u00E3'\u00CDl\u00BB\u00D9G\u0092\u00A8\u0089Lm\u00EDyP\u00A9\u00BB\\x0000\u00FE\\x000e\\x0004\u00D0\u00D0\u0082\u008D<\u00EC,\u00F4\u009F\u00D8\u00F4\u009F\u00B1\u008B\u00DA~=\u00D8\u00FD\u00C5/\\x001d/.\u00EC\u00F8\u00FB''\u00C6~s\u00F2\u0097\u0083\u00E7\\x001e\u009A\u00B5\u00ED\u008E\u009AC\\x000b\u00EDxwe\u00EB\u00B8\u00EFHv\u009C\u00B9w\u00D6\u00FE\u00AA\u00D7\u00B6\u00BC\u00FA\u00F5q\u00D2+\u00AF/j\u00A5i\u009A\u00DC\u00D2S7\u00BC\u00B2q\u00C0\u0094\u0083w\u00CFiY\u00BA\u00ADsM\u00FD\u00D9A3\u00F7\u00DC=\u00B7}\u00D5\u00DE\u00EEY\u00CB\\x000e\u00DF=\u00AB\u00F9\u00EDU'7\\x001e8\u00F7q\\x001d\u00ED\u0098r\u00DA\u00C9\u00A4\u00FE\u00E7]9\u008A\u00B1\u00B5|\u00FB_u\u00DF\u00B7\u00DB\u00BB\\\\x0012e\u00B0\u00DB\u00DF\u00FF\u00BC{\u00E2\u00AB\u008B;,\u00E6X\u00AA(\u00DB\u00BD\u00F8\u00CF\u00BB\u00D4\u00A2\u00A4{8\\x0015\u00A5n3\u00DB\u00EDGL\u00A5\u00B9\u00F6j\u00C8\u0088\u00F9'\u008C\u0086h\u00D2\u00E4\u00D1\u008FO\\x000c\u00ACi\u00F3\u0091f\u00B6\r\u008C.\u00F9\u00AAI\u00B0\u00CC\u00D1U\u009EJ\\x000eV%_g\u00A1\u00FE.\\x0004|\u0091\\x000c\u0096\\x0019\u00FC\u00C1?X\u00CFag\u00A1\u00FF\u00C4\u00A0\u00FF\u00DC9\u00A3\u0091\u00D6\u00D4L\\|x\u00EC\u00D7\u00AD\u00CF\u00CCo\u00BD}Fc\u00CF\u0097\\x001e0\u00E5\u00D0M\u00D3\u008F\u00DE;}\u00D7\u00E0\u009A\u00FA\u00BE\\x0013\u00EA\u00AB^\u00DFv\u00E3\u00B4#t\u00BFnys\u00FF\u0090\\x0019;\u00EE\u0098\u00B1\u00BF\u00CF\\x001b;o\u009D\u00BA\u008FT\u00CB\u008C\\x001fO?[\u00DBN\u00D3:?7t\u00DD\u00F3V\u00CB-5GozcS\u00DFq;n\u009C\u00DEr\u00D7\u00F4=\u0083\u00A6m\u00B9q\u00C2\u00F6>\\x0013\u00F6\\x0008\u00CD\u00C1\u00DC=q\u00CC\u00E2\\x000e\u00FBWd\u00DA]R!?G\u00EF?\u00EER\u008B2\u00F3\u00AC|i\u009D{Q\u0094\u00C1\u00DE\t\u00B5\u00A2\u00FCtl\u00E3*F\u00DD\u00ECG\\x0004\\x0004Dw\u009F\u00AE\u00FE\u00D4g'\u008CZi\u00D2\u00A4\u00FA\u00A3\\x00137\u00CDh\u00F3H\u00D3\u00DBn\\x000c\u009A\u00BC\\x000b\u00F7\u00BC\u00BAK\u0086\u0099^5g\u00E7\\x0006\u00AD<\u00B5\\x001a\u00F5w#\\x0000\u00FE^]\\x000b\u00FD\\x0007\u00FD\\x0007\u00E3OTOA\\x0011\u00E3O\u00FF7[\u00FALh\u00A8zcO\u00D5\u00F8\u00FA\u00BE\\x0013\\x001b\u00E9O\u00C3\u00C6\u00F5\u009Fr\u00B8\u00DF\u00E4f\u00F6'\u00AB\u00F9\u008D\u00D3Z\u00FBOi\\x001e0\u00B5\u0085\u0096\\x0016/\u00DC|\u00E6\u0086\u00B1[\u00AB\u00C6\u00ED\u00EE\u0097k\\\u00B2\u00AD\u00F3\u00A1Y;\u00E9\u00F8\u008D\u00D3\u008F\u00DD8\u00ED(\u00CB<`\u00EA\\x0011\u00CAL\u00A7\\x0008[\u00FD\\x001fwN|eQ\u0087\u00F6U\\x0011\u00F5\u00A7\u00BA\u00FDo*\u00EA\u00EB\\x000ew\u00D3,I\u00DET+y\u008B\\\\\u00FD\u008D\u009ASC\u009E\u00FC\u00F4\u0084\u00F1\u00A7.M>,\\x001crl\u00E4\u00B4\u00B6\\x0001\u00D3\u00DA\u00FAO=\u00D6o\u00CA\u0091>\u00B9\u0083\u00BD\u00C7\u00D5\u00DF\u00F0\u00DA\u00CE^c\u00B7\u00CB\u00A4\\x001b\u00C6nW\u00D2k\u00F2i\u00DB\r\u00AFm\u00BBa\u00ACdR\\x000b\u0097H2U\\x0015\u00E6A\u00FD]\u00EF\u0085\\x0018~\u00EF\u00D7w*\\x000f\u00FC\u00A4\u0083\u00FD\u00DF<2`\\x001a=\u00B4J\u00FF\u00F1\u0091\u00A6\u00B7\r\u00D0\u0093\u00D6'it\u0090M\u00C7n\u009CqL\\x0019)\u00A4\u0092\u009C\u00E6\u00F6Uy\u00CA\u008C\u00FAK\u00C1\u00A7{\\x0004\u00FE\u00A2\u00E7\\x0002\u00FD'\u00AE\u00FDg\u00F4\u00A2\u008E\r\u008D\u00DD\u00FF\u00FCp\u00FF\u0090w\u008F?\u00F7\u00E5\u00C9w\u00D7vR\\x0018l\u00BF\u00C9\u0087\u00B8\u00D1\u00C9c\u00FC\u00F9\u00F3\u00DF\u00BFxp\u00F6\\x001e}t*\u00AA\u00FF\u00FF\u00AF;&\u008E\u00FE\u00BAC0\u00AE\u00FA\u00EF?\u008A\u00CAY\u00D4\u00A1\u00B6\u00A2\u00D4\u00E3g\u00D5\u00F8\u0086\u00CB\\x001e|\u00E7\u0089ON\\x0018\r\u00D1\u00A4\u00C9#\\x001f\u009E\u00E0GR\u00A7\u00CF\u00FD\u00A7\u00B6\u00F6\u009D\u00DCt\u00C3\u00EB;\u00AF\\x001b\u00B9\u00E6\u00CA\\x0011\u008B\u00AFxt\u00FE\u00E5\u00C3?\u008C&\u00FD\u00FB\u00F2\u00E1\u00F2)\u00A2:\\x0014S\u00AC|\u00E5)g1\\x0017\u008A\u00E8\u00DC\\x0010\u00EAO\u00DD\u0083:\tu\\x0015\u00EA0\u00D4m\u00A8\u00F3\u00C8\u00F4\u00B1\u0090\u00F2\\x001c\\x001b0]>\u0099dDH\\x0015(\u00B2L\u00F9\u00CAS\u00CE\"\u00AF\\x0015\u00C5\u00E9\u00A8\\x0014T\u00E5\u00CB\\x0004yVAr\u008E\u00F8\u00E8\u00C8\u00EC\u00E5Gf||\u00F4\u0082\u00E3\\x0003&7\u00D2\\x000b\u00ADy|\u00F3\u00E0\u00DFk\u00EC\u00B6\u00EB\\x001e}\u00A7\u00DF\u00F8]\u00EA0\\x0015\u00A4\\x0002\u00C6Y\u00FF\u00EBNU\u009A\\x0014W\\x0008;\u009D+\u00AA\u00A4\u00FD\u00A7j\u0082\u00A2K\u0088!\u00FD\u00AA\u009F\u00D1\\x0010\\x001f\u00D2\u00A4\u00FF\u00B4c}'5\u00F5\\x001c\u00B3\u00F5\u00CA'\\x0017\u00FDc\u00DAwK\u00D7\u00ED\u00EE\u00E8\u00EC\u00FE\u00EDb\\x001e\t\\x0004\u0084\\x0004Nvv/^\u00B3\u00E7\u00D1\u00DC\u00B7W>\u00B5\u00A8\u00E7\u00AB[UurL\\x0017\u00C5\u00F4\u00C1O\u00F2\u00A13|=T,\u00B3\u00F4\u00D0Pp\u009C\u00F8\u00A9<\u00B5\\x0014\u00F5w#\\x0000\u00FE^\u00DD\t\u00FD'u\u00FD\u0087\u00A2R\u00FE<(Wq\u00F7D\\x0012\\x0004\u00B2\u00E9\u008E\u0089\u00E4#Q\u00D3\\x0004\u00E9\u00CE\t\u00FF+\u00C2\\x0014B\u00FDI\u00AB\r\u009AGks\n\\x000f\u0082&M\u0086p\u009C\u00CC\u0086{\u00EA;\u00F9p\u00AF\u00B1;\u00FE\u00FC\u00C4\u00C27?\u00F9\u00E9\u00FCo\\x0017)\u009D\u00FB\u00ED\u00E2\u0085\u008By{\n\u00D1T\\x000b\u00CB\u00B7\\x001c\u00E4/'\u0093\u00DF3\\x000f\u00EAo\\x0010\u00F0dE\\x0019\u009C\u00F8S\u00F7`\u00E9\u00D5\u00B7WP\u00B7\u00A1\u00CEC]\u0088\\x0004\u00AE\u009AZc\u0094\u00BCz\u00BE\u00E9\u00B9@\u00FDC\u00BFw\u00E0\\x001f:R_\\x0005\u0082\u00BF/\\\u00E1e\u00FEkM\u00EB}\u00F3\u00DA\\x001e\u00FF\u00F8\u00B8\u008F\u00F4\u00C9\u00F1\u00C7\u00E3\u0096\u00C2\u00A8?q \\x001a\u00BCQ0\u00A4\t\\x0005\u0091\\x001cuI\u00FD\u00DEl\u00A9\\x001a\u00BF\u00EF\u009A\u00E7V\u00FCc\u00EA7\\x0017T]\u00C2R\u0088V\u00DCR\u0094\u008CQdy\u00A2\u00ABC1%\u00A3\u00FE\u009A~\u00BD\u00F0\u00DB\u00A9\u00CE3\u00C3\u00C6-\u00B8\u00F6\u00B9\\x0015\u00BD\u00C7\u00EF\u00EB\u00FBfK\u00BF\u00A9G\u00FBMm\u00F5\u0091|\u008F\\x0005G\u00FBO\u00F3\u0093\\{>\u00FFP\u00A85g\t\u00F5w\\x0011\u0097~\u00E0\u00D3\u009D\\x0002\u00F7\u00EE\u0084\u00FE\u00EF\u00FE8\u00A3\u00FF\u00A4\u00B1\u00FF\u00E8\u00D2\u00E4\u00DF\u00ED\u00EEo\u00B1}\u00A74\u0093O\u00FE\u00F2G>^\u00B2n\\x0017\u00F3\u0097\u00B0$o\u0080\u00913k\\x0004X\\x000f\u00E9&ir\u00E6\u00EC'K6R\u00E7Q\u00A6u\u00A64\u00FB\u00F6\u0097Lm\u00A5y\\?\u00C9\u0087\u00B5S\u00EC\u00A2\u00EF\u00A1\u00DF\u00A7\u00CB\u00C7_\u00E5\u00A9\u00A5\u00A8\u00BFO\u00C2\u00EEw\\x0010\u00FC\u00DD{\\x0014\u00FA?\u00FA\u008F\u00E9\\x0019\u0089\u00C5\u00F8cH\u00936\u0097\\x0017\u00CD~S[\u00AA&6\\\u00F3\u00AF\\x001f\\x001e\u00CF-\u00E8>\u00FF\u009B\u00A1K\n\u00D2\u00A4uk\u00FE\u00CB*\u00C7\u00F4\u00F5_\u00F3\u0087\u00D7^\u00BC\\x0008\\x001d#\u0098\u00FCJ\u00B1^1\u00FA\u00C9\u00D9s\u00E7\u00DBNt\u00DC\u00FF\u00EA|\u00EAB\u00BD'4\u00E8\u008E\u0093\u00A3\u00BD^\u00DBq\u00CD\u00F3\u00AB\u00AE~\u00E6\u00FB\u00AB\u00FE\u00B9\u00F4\u00CA\u00A7\u00978\u00A6.\u00A5\\x000c\u0094\u00AE~f\u00F95\u00FF\u00FA\u00B1\u00F2\u0095M}h\u00D5\u008F\u00E7x*o\u0090\u00FC\u00B8X8\u00C7\u0089\u00E1A\u00F1\u00FA\u00E0YUa\\x0006\u00D4_t_\u00C0\u00DF\u00BB\u00E7\u00B3\u00EE\u0084\u00FE\u0083\u00FE\u00C3\\\u00BC\u00C9\\x001c\u008C\t\u009Dv\u0097\u00AEL!\\x0002\u00F4\u00BE{\u00C5#\u009F\u00FE\u00B8\u00B1\u009Ew\u0099\u0088\u00A5\u00C9\u00D2\\x0007\u00F2?T\u00E7\u00BF\u00EC\u00C3)\u0095>\u00F9UO_l\u00DDz\u00E1\u00B7|$I\\x0014\u00EFR\u0094\u00C9\u008F\u00A8\u009EN\u00C5\u00A6\u00B4\u00FE\u00864a\u008E\u0093\u00DA\u00E5\u00BF^\u00F1\u00C8'\u0095c\u00B7\u00F6\u00A1\r\\x0003\u00A6\u00B5\u00F6z}\u00E7\u00807~\u00BDw\u00CE\u00A1\\x0007\u00DE9:\u00F4\u00FD\u00B6\u0087>hwNm\\x000f\u00BF\u00AF\u00A4\u00A1\u00EF\u00B6\\x000e\u0099{\u00F8\u0096\u00DC\u00F6\u00CA\u0091+{\u00BC\u00BC\u00D1\u00B7w\u00C1\u00F1\u00DD\u00D1\u00C78N5\u00F7\u009F|\u00BE\u0085\u00F8\u00F5\u009A\u00C8\\x001b!r\u00FC\u00A2\u00FE\u00BE\u00F1z\u00DE>\u00F4\\x001f\u00F7~\u00E5\t\u00B0\u00C8\\x000c\u00E0\u009FB\u00FER^\u0093\u00AA\u00DC\u00FEkG\u00AE\u00BA\u00CC\u00FC\u00F3\\x0017.\u009E3'Mj\\x001c\u00D5\u00BD&_\u00DF\u009Co\u00FE)r_~\u00D1\u00AD\u009A4\u00F9\u00AA/\u00FBpq\u00FD\u00F8HtI\u0089e\\x0004.'M\u0080\u00EF*g\u00BA\u00CE\u00B5\\x001d?y\u00DB\u00C8\u008F\u00A8#Qw\"UQ5q\u00AF\\x0017V\u0093\u00D4`\u00B2\u00C3o\u00AA\\x001a\u00FD\u00B3\u0093:\u00F1\u00FBb\u00ED/0\u0085\u00BD\u008A\u0085o\u00DE\ne\u00A2\u00FE\u00DEw\\x0004\u00FC\u009D\t\u00A0\u00FF\u00A0\u00FF\\x00143@\u00C5\u00A4\u00FFx\u0087\u00C1R\\x0000,\u00EDK\u00F1\u00E7\u00C7\u00BF\u00FAn\u00CDnoi\u00F2U\u00BF\u00FC/\u0093\u00F2[\u00E7\u00E4\\x0017\u00DC\u0098_0 \u00BFqB\u00BEiE~\u00E3\u00C4\u00FC\u00C2\u0081\u0090&YSf\u00BC4\u00A1y\u00C0\u0093\u00A7:?\\\u00B4\u00FE\u00CF\u008Fy\u00C3\u00EB;\u00FA\u00BDy\u00A4\u00FF\u00D4\u0096\\x001e/\u00FE|\u00C7\u00D4\u00DD\\x000f\u00BF\u00CC)U=\u00B3\u00E0\\x000fw\u008E\u00A3D\\x001f\u00EC\u00DA\u00A5\u00C7\u00F3+hA|1\\x000fa\u00A0s[\u00A8\u00E6\u00FES\u00B4j\u00C6OC\\x0002T\u009ENA\u00FD\u00C3\"\\x0000\u00FEa\u0091\\x000cV\\x000e\u00F8\\x0007\u00E3\\x0016\u00D6Y\u00B2\u00FC\u00BD\u00A5\tmG\u00D1\u00E3\u00A5\u00F5W<4\u00AF\u00EB\u00DCo\\x0016\u0097\t\u00FD\u00A9\u0099\u00DB\u00F6\u00BD\u00F9\\x001f\\x001e\u00CD/\\x0019\u00A4\u00CC\u00E3\u0090\u009B\u0084yJ\u00BE$\u00DF\u00DD\u0091\u00BF\u00F8[\u00BE\u00EBx~\u00F5\u00B3N\u00D2\u00A4~V\u00EFK\u00F4\u00BDf5\u0094\u00C7~\u00EF\u009B\u00D3\u00AB\u00D7\u009Cz\u00C3\\x001f`\u00F9S\u00DAOP\u009E\u00CA\u0097\u00B5z\u00A7N\u009F\u00D9\u00D7\u00D0\u00C87\u00BCa\u00FF\u0081\u00D3\u009Dg\u00E9\u0088\u00A5\u00B7\u009C>\u00D3\u00D5|\u00E4\u00D8\u00E5\\x000f\u00BE\u00D5\u00E3\u00A5\u00BA\u00BE\u0093\\x000f\u0091u\u00EF=no\u00D5\u00E8\u00B5.\u00D2\u0084D\u00C9\u00CA=]\u0094\u00E8\u0083]\u009A\u00DC\u00FE\u00E6n\u00EA\u0099\\x000eVS\u00F6\\x0001PE\u0086\u00AF\u00A7\u00CEW\u00C9,\u00B3\u00AF\u00F2Yf_W\u00F1U\u00BE\u00AF\u0092Q\\x0019\\\u00E0\u00EFN\u00C9\\x0017\\x001f\u00F4w\\2\\x001d\u00D2\u0092'\u0091\u00FC5i2\u00EC\u00FDVz\u0091\\x0015\u00A6\u00DE\u00E3\u00EB)\\x0002\u00F1\u00F1\u0089_\u00DA]&\\x0005ir\u00FE\\\u00BE\u00EBD\u00FE\u00D8\u0096\u00FC\u00E2;\n!&?>\u009E?&\u00F1b\u00FE\u00DC\u00E9\u00FC\u009A\u0091$M\u00CE\u00FF\u0096\u00B7\u00A4\u00BD\u00A4Kz\u00CD\u00D9\u00AB\\x001do\u00A8y\u00CA\u00F8l\u00CDi?Wx$\u00A08\\x0010I\\x0013\u00BDV\\x0001k\"YaK\u00B6\u0080\u00F5\\x0017\u00A9\u0093`\\x0015\u00F0{V}C\u00E3g\u00F3k7\u00FC\u00B2\u0089\u009D\u00B8y\u00CB\u00B6\u00F9\u00F3k\\x001b\\x000f\\x001c\u00B2K\u0093\u00B3\u00DD\u00E7iN\u00E7\u00FE\u00D1\\x001fSw\u00A2NE\u009D\u008D\u00A2Y\u00AF\u00FB\u00D7\u00F2\u00FB\u00E75?\u00F4^\u00AB0U\u00DC1n\u00C5\u00EE\u00B3\u0094\u00E8\u00830\u00C3\u00D5\u00FF\\\u00D2wr\u00B3\u00D2o\u00A7\u0088\u00D2\u00E4#\u00FD<\\x0013\u009D\u00E8\u00D0\u00F3Kz\\x001c\u00F5/\u00EF]\\x0000\u00F0/\u0086\\x0000\u00FAO1\u00F4D\u00E7r\u00D2\u0084\u00E0\u00DA\u00C6\u00F1\u00BE\u00B9\u00E6\u009E\u00AF(\\x0001\u00B0\\x001bw5\u0091\\x0010\u00E9\u00B6%f\u0090\u00C8\\x000e)\u00FF\u00BAO\u00E6\u00BF\u00BB\u00AF MhNg\u00FB\u00DB\u00F9\u008E\u00C6\u00FC\u00EE\u008F\u00F3_\u00DF,\u0094&O^\u00D2\u00BBf\u009F\u00D9\u00F6\u00AB*\u00A1\u00E6)r\u00A4\u008CX\u00AA~\u00D6$\u0082\u00F6\u00B9\u00A1\u00A6\u00D7%O.c\u00A7|\u00AF\u009DN_i~\\x0017\u00B54\u00BE\\x0004\u00CAf\u00F9V;b\u00BE.!\u0096\u0081]\u00B7p\u00EE\u0088\u00A5\u00DA\u00F1\\x0011O\u00AA\\x0017{r\u0099R\\x0013\u00F5\u0083Z\\x0019\u00FBUl:\u00CC\u00AF\u00D5OJ~\u00D2%\u00A4N\u00B6\u00ED\u00D8E\u0089}`5\u00B7\u00F4\u0096\u00AE\u00F3\u00BF\u009D8\u00D5\u00B9d\u00CD6\u00EAN\u00D4\u00A9\u00A8kQ\u00BB\u00F6\u00B9\u00D5wO\u00DF\u00F7\u00D0;\u00AD|\u00EA\u00FD\u00CF\\x0005\u00A4EX2\u00A4\t\u00FB\u00B3\u00F73\\x000bx\u008D\u00D2\u00EC\u0086\u009Ec\u00B6\\x0014\u00AB!\u008Ca\u00C5S\u00C7\u00C8g\\x0010\\x000eU\\x0011\u00C9 \u00D4\u00DF~_\u00C0_\u00DET\u00A0\u00FF\u00A0\u00FF\u00C8\u00F7\\x0016{\u00CEh\u00FA\u008F\u0087\u00D7Dy\u00AF}a\u00DD\u00D5\u00C3\u00E7*\u00BA\u00E4\u00BC \u009D\u00BF\u0090\u00A7t\u00E1LG\u00FE\u00E8/\u00F9-5\u00F9\u00857\u0099\u0096\\x0010S\u00E8\t\u00C5\u00C3.\u00E8O\\x0007[?\u00FE\u00DC\\x0005r\u00F2\u009BROR\\x0000\u0096\u0083\u00F5sz\u0092\u00BD_\u00AAd;_\u00AFJ\\x0004\u00F5\\x0012\u0085\u00CFKG\\\u00F2\u00D4\u00F7\u00CA\\x0011\u00ED\\x0003\t\u0094\\x0011K\u00F9<t\u0096Z\u0082Z7\u00DB\u00B7\u00AC(\u0092D\u00F5,\u0083^\u00B81\u00AB\u00C4>(\u00D7\u00A5s\u00B5\u009A(\u00DE\u009D\u00A7\u00BE?\u00A7\u00D4\u00AD\u00F7\u00CC\u00FA\u00FC9\u00BA\u00B4\u00F1A\u00CB9b\tk\\x0008\u00E5\u00D1\\x001bU(\u00DF\u00B8P\u00F4\\x001f\u00EC\u0090\\x0003\\x001f\u0091\u00AF\u00FF\u00B6\u00ED\u008A(\u00A1\u00B4{\u00CF>\u00E3,{\u00879}\u00A6\u00BB\u00A5\u00B5\u00FD/\\x000f\u00BDu\u00DD\u00A8u\u00F4\\x000b\u0091$Mz\u008D\u00DD\u00D9\u00FB\u00C55\\x0016ib(\\x0012\u00A6K\u00F8\u00A4\u00B8O8\\x001d3x\u00F6\u00A1k\u009E\u00F9\u00D1\u00DB5\u00E2.)d\\x001e\u00CB\u00C0oE\u00F2j&pN\u00D4?0\u00BAPN\\x0004\u00FFP0\\x0006.\\x0004\u00FC\\x0003\u00A3\\x000b\u00E5\u00C4h\u00F8{xMz\u00BF\u00BE\u00F7\u00CA\\x0011\u00DF\u008E\u009E\u00B3\u0084\u00CCL\u0097(1\u00B3w\u00BEe\u009B\\x0012\u00F7*\u00DC\u00DA\u0084\u00D4\u00C9\u00E2\u00DB\u00F2_\u00F5s\u0095&\r3\u0099\u00DF\u0083\u008C:g\u00DAy3\u00CF}V\u00D4\\x0006\u00E9\u0080%O\u00A9\u00BAA\u00952\u00DC\u00BF\\x0011K,%X\u00BE\u00B5\u00C9#\u008B\u009E(\u00FCi-\u0087+\u00D9\u00F8\u008A}\u00B0\u00D7Ax\u0095\u00F4\\x001e\u00DC\u00BA}\u00D7\u00A7\u00F3k)\u00ED\u00DD\u00D7h(!{\u0087\u00E9\u00EC:\u00DF\u00DA~\u00F2\u00A9\u00DC\u0097\u00D4\u00A9\u00A8k\u0091\u00A4\u00E83\u00F1\u00E0u\u00CF,'\u0085\u00C1\\x000b\\x000eyiBg\u00D1\u00E9THQ\u00EA$\n\u00D5\\x001f\u00CA3/Y\\x0008\u00EA/\t*\u00A2l\u00E0\\x001f\\x0011X\u00C9b\u00C1_\\x0012TD\u00D9\u00A2\u00E1\u00CFI\\x0013\u00E1l\u00CE\u00E8-\u0097\\x000f\u00FBx\u00F3\u009E\u00C3\u00B4\u00C2\u0082\\x001c\u00F2\u00F6\u00C4B\\x001d\u00CF\u00B7l)\u00E8\u0092\u00EF\u00EE\u00C9{\\x0017\\x0017q\u00F2\u00F7|\u00FB\u00CE\u00FC\u008A'H\u009A\u00D8\u00E7\u0083\u009E\u00B8\u00A4\u00D7\u00CCz}\u009E\u00A8~v\u00CF^\u00B3\u00F7\u00B0\u00FF\u00B3\u0099#\u0087\u00CF$J\u009EX\u00BA\u00FC\tE\u00A0hy\u00F6\u00F2K\u009A\u00D5\u00B3\u00B4#\u00FCg\u00DB\u00CA\u00E7B\u009C\u00A69\u009Bv]\u00CB\u00D5\u00E9r\u00C6\\x0011\u00CB\\x0007>\u00A7h\u00DA\u00CB\u00DEp\u00FE\u0088=\u00B8\u00B8\u00C8#\u00EE\u0097\\x000b\u00FD\u00DB_7o\u00FDt\u00FE\u00E7\u00BB\u00F6\u00D4\u00EF\u00DD\u00B7\u009F}`\u00F5\u00B7\u00F7\u0096\u00B3\u00E7.\u00D0\u009C\u00CE\u00F2\u009Fw\u00FCq\u00F8\u00C7\u0095\u00AFl\u00E93\u00A9\u00B9\u00EF\u0094#\u00D7\u008EZ{\u00C7\u00B4\u00BD\u00B4g\u0089\u0091\u00DC&t\u00FE\u00B9\u00C0\u00E2b\\x0019\u00F8\u00C6\u00E6\u00CA\u0097\u00E9\\x0017\u00C9%\u00C2J\u009C\u00F2\u00B0GK\u00A2\u0084\u00BE\u0093\u008F(i\u008A\u00EF$Sx\u00F0<\u00A8\u00BF\u00D7\\x001d\t\u00CEV\u00A2WhqN\\x00129\u00D1\"\u00B9\\x0011\u00E8\u00FFi\u00EC\u00FFn^\u0093>\\x0013\\x000e\\\u00F7\u00FC\u009A\u00EB\u0086\u00CF\u00ED\u00BA\u00F0\u00DB\u00D9\u00F3\u00E2\u00C4\u00EC\u00DC9C\u009A|sg\u00BE\u00A5.\u00DF\u00B1_\u00F1\u00940'\nm\\x0005\u00BB\u00F6\\x0005Z<\u00ACH\\x0013\u00DB\u0094\u00D0\\x001e\u008A\u00D7 !\u00C2\u008E\u00EFUE\t\u00FB\u00BFq\u0084\\x0004\u0081\u00FA\u00D9\u009A\u00F3\u0092Kz\u00D64\u00A8\\x0005\u0092F!\u00A5\u00C2\u00C5\u00C1\u0098\u0084\u0082\u00ED[\u00A6fxId\u00D1@\u00F4\u00A7V\\x0007\u00FD\\v\u00F5'\u0097\u00EB\u00C7\u008D\\x000c\u0082\u009C\u00C2i/\u008F\u0083\u00FE\u00D5\u008C\u0087\u00BC\\x0010M\u00BD\\x0005\u00A9\u0098D9\u00E4&!9\u00B2u\u00FBNV\u00A5\u009D{\u00EA\u00E9\u00CF\\x0003M\u0087\u00E9\u00B3\u00B0\u00CFt\u009C\u00E9:\u00DC\u00DAv\u00D5\u00D09\u00D4\u00B5\u00A8\u0083\u00D1Pu\u00C3\u00EB{z\u008DZm\\x0011\\x001c\u00ECOS\\x0018\u00AC9\\x001e\u00C5\u00C8\u00FF[\u00CDW?\u00BD\u00DC<\u00E4\\x001d\u00EEG\u00BB\u00BA\u00F9Hz\\x0008\u00AD\u0084u\u0089dl\u00B5^\u00D7W\u00E5)3\u00EA/\u00A5,\u00A5\u00EF\\x001d\u00F8\u0087\u00CB\u00D3oi\u00E0\u00EF\u0097X\u00B8\u00F9c\u00C1_\u0097&\u00EF\u00B5\u00DA\u009F[\u00B2\\x0019W>\u00F5\u00CD\u00ABs\u0097\u00D2\u00EB\u00EF\u00D9s\u00E2\u00C4\\x000c^A\u009A,\\x001c\u0098\u00DF[\u009B\u00DF\u00B7\u00C0\\x001at\u00A2\u00C6\u009A\\x0008\u00A7\u0084v\u00B1hR\u00F5\\x001f\u00A9\u008D.U\\x0016\u00EC\u00D2'\u008F\u008Co{>9\u0082;\u00DE0\u00A3W\u00AF\\x0019{\u00B59&E1\\x0014\u00D6\\x001f\u009B\u00C5\rS<\u00FC\u00B7\u00DA\u0091^3\u00F7r\u00A13\u00BC\\x001e\u00A2K\\x001bu(\u009C;\u00E2[\u00CBqVIAN\u009A\u0096*\u00D4_\u00D8d\u00CB\u00C1\u00D0E\u0083\u00CCE\u00C3\u00CAs\u00E2\u00D4\u0099}\u00FB\\x000f\u00F2M8p\u00E8p\u00C7iZ\u008EsQ\u00D8g\u00D8\u009C\u00CE\u00D3\u0093\u00BF\u00BAr\u00C477\u00BC\u00B1\u009B\\x0004D\u009F\u00DC\u0081\u00EB\u009E]voM\u00E3C\u00EF\\x001e\u00B5$\u00934\u00B1}kd\u00EE\u00F1\u00FC\\x000f\u00B4\u00C1\u0089\\x001f-b~\u00F6|)\\x0012\\x001f\u008A\u00C7\u00EF\\x0013\\x001e4?\u00EA_\u00DE\u009B\\x0002\u00FE\u00E0_\\x000c\\x0001\u00F4\\x001f\\x0011=M\u009A<\u00FC\u00DEQZ\u0084\u00C9'\u008AR\u00EC1\u00FA\u00D7\u00CB\\x001e\u00FE\u00A0\u00A1\u00F98\u00D9\u00983\\x000e\u0089Y\u00B8n~B\u0087mmb\u008B;q\u0092&Al$E\u00A1\u00FA4\u00FFA\u00AE\u00E2\\x0010^\u0083\u00A2$\t\\x0008\u00FBLg\u00F7\u0085\u00F6\u008E\u00CE\u00BA\u00AD\u00FB\u00A8kQ\\x0007\u00AB\u00CA\\x001d\u00EC3\u00B9\u00B9r\u00CC\u00D6\u00DE/\u00AFy\u00F0\u009D\\x0016K\u00BA\u00E1\u009F_i\\x000bs\u00FE\u00F9\u00D5\u00D0wZ\u009C\u00D2\u00CD\u00E37\u00F7xi\u0083\u00B5\\x0003On\u00A6\u0092e\u0092\u00E5D\u0097?eJ\u00B3\u00E7\u0091/\u00DF\u00F4\\x0000\u00CAU\u009E.'_>\u00EA\\x001f\\x0005\u00AB(\u00CA\u00E4\u00EF\u0094|\u00F9\u00E8?\u00EE\u00AC\u00D0\u00FF\u00E5\u00FB\u0092<\u00AB(\u00CAT\u008CBe\u00E5%UUU\\x000f\u00BDw\u0094\u00AFJ\u00D5\u00A4\u00A6\\x001b\u00C6\u00EF\u00BB\u00FA\u00D9\\x001f{=\u00F6\\x0016s\u0099\u00F8\u0091&\u00E2\u00DF\u00F9\u00BB\u00B0~\u00FCYz\u0093\u0096N]\u00E7.:\u00A5o\u009F\u00BC\u00E4\u0089%\u0085o\u008D2%M\u00A6g6\u00F9J\u00BA\u00E4t\u00A9\u00BF\u00E5\u00AB\u00B4\u00D6\u00DF\u00A9\u00CFt\u009C\u00E9>\u00DC\u00DA~\u00DD\u00F0Y\u00D4\u00C1z\u008F\u00DF\u00D7gRS\u00D5\u00C4\u00C6k\u009FYv\u00DB\u00E4\u009DB\u00F1\u00A1\u00E9\u0095\u00B7[\\x001etHC\u00E64_9bI\u009F\\3\\x0005\u00AF\\x0018\u00A9/\\x0005\u00B2P\u0092\u00B0\u00DC\u00F2\\x000f\u00A1\\x000f\\x001d\u00C0\u00AE\u00AE&\u00ADJT=\u00CF\u0084\u00FA{\t2\u0099\\x001b\u00AA\u00E4\\x0001\u00F4Q_B\u00FFq\\x001b\u0085\u00E24\u00FE\u0088\u00BD&\u00E42\u00E99f\u00EB\u009F\\x001e\u00AB\u009DS\u00BB\u0086tIg\u00B7c:{\u008E\u00FC\u00F6\\x0017\u00BB\u008Fpa\u00B0\u00CC_B\\x000bvh\u00FAC?\u00E4W?\u00C3\u009C(\\x0017\u00EA\u00C6\u00B3\u00CCH\\x0019!\u00E0\u00D4mN\u009D=\u00DFz\u00FC\u00D4\u00EBo/\u00B9\u00E2\u00B1Z\u00F2\u00970\u00C7I\u00AF7\u00F6\\\u00F3\u00CC\u00B2\u00BFN\u00DCv\u00F7\u008C\u0086!s\u009B\\x001fx\u00FB\\x0008\u00EFAqq\u0099\u00B0\u00AFhN\u0087\u00B6q\u00A3\u009D\u008B\u00B9d\u00B2O\u00BC\u00AD2}\u00CEI\u00C9\\x00176\u00A2\u00F9\\x00121z\u00E6\u00A6>\u00A6Z\u00F15t\u00FF\u008C\u00FA[o\r\u00F8\u009B{8\u00FAO3m\u008F$\u00AB6\u00F0\u00FC\u00FA\\x001b\u0088\u00CA<\u00FE\\x0018\u00D2\u00A4\u00C5\u00E8\u00F4}&\\x001d\u00A2Q\u00FE\u00DA\u00E7W\u00DE\u00FC\u00EC\u0087m\\x001dg\u00C9\u00C0\u009CvNg\u00CE]\u00A4\u00D4e\u0097&+\u009E\u00C8\u009F=\u00A6\u00EC\u00C3\u00D6\u00B6=\u00FF\u00ED\u00DDL\u009A\u00B0\u00CC\u009E\u00C9\u00AF\u00E5\u00F6,\u00B0\u00C4\\x0019P\\x0006\u00DC\u00A5\u00DB\\x001c?\u00DD\u00B5\u00F7@K\u009F\u00A7\u00DE\u00A7nF\u009D\u008D\u00BA\\x001cu?\u00FAp\u00FD\u008B?_\u00F3\u00AF\\x0015W\u00FE\u00E3;\u008AD\u00B9r\u00C4b%=%\u0095\u00AE\u00E1\u00E7\u00BE\u0093\u009AL\u00C9\u00DFs(\u00AF\\x0018|\u00E6\u00B4\u00D4J\u00FEO\u00D4?\\x0014\\x0002\u00F2\u00C0\u00D1B\\x0001n)\\x0004\u00FC\u00A3\u00A0*_fb\u00F9\u00EB\u00D2\u00E4\u00DD#}\u00C9<\u00A8\u0089\"\n+G\u00FFrE\u00F5\u00A7\u00A3g}s\u0086DI\u0097[:\u00D3}\u00B1\u00EC\u00A9\u00B3\u00FB\u00A2%\u0095\u00BDJ\u00BE*\u0090\u00D6\u00FA\u00BB\u00F4\u009C\u008E3\u00E7\u008F\u00B6\u009F\\x001a\u0091\u00FB\u00E2\u008AG?\u00AB\u00A4\u0088\u0093\u0089\u00FB=^\\x0007\\x0003?`R'j=\u00DFx\\x0004\\x001c?L&\t\u00C5R\u00A9\\x0004\n\u00EA\u00AF\u008FK\u00CAM\\x0001\u00A9\u00FE`\u00D6\u00E8\u00DE\u00A7\u00A0\u00FF{=\u00CE\u00DE\\x000c\u00FD2\u00E7\u00F3\u0083\u00BF\u0080\u00BF@\u009A\u00F4|e\u00F3\u0095O-\u00BA\u00F7\u0085\u008Fv4\\x001c\u00A5\\x0017\u00DFS]n\u00C9nVq\\x0004\\x0004\\x0018\\x0001\u0097\u009E\u00D3q\u00F6\u00C2\u00F1\u00D3\u00DD\u00EB\u00B6\u00EC\u00BF\u00E5\u0099\\x000f\u00FE\u00F2\u00D4\u00A2\\x001e\u00AFl\"\u00C7\u0089K\u00F2\\x0016\r\u00BC\\x0001S>\u00FB\\x001a)d\u0087\\x0006\u00F7J\u00A2\u00FE\u00DCm\\x0002A\u00A7B\u00FF\u0091~\u0090\u00D1\u00B2\u00DE\\x000ci\u00D2B[jVM\u00D8\u00C3k\u00BB*\u0086\u00BC\u00D5\u00EF\u00D1\u00E9_,\u00DB\u00A8L\u00E5\u00B8\u00EA\\x0012\u00B2=Q\u0098\u00E1\u00D3]\\x0017}\u00A5(\u00EAPL\u0099\u00BE*O\u0099\u008B\u00B9V\\x0014\u00E7\u0086UwQ\u00CB\u00D4\u00C9{_\u00AD\u00A9|\u00E8\u00CD?<\u00F86-\u00B1)_\u00DA\u00D8\u00E3%\u00BF\u00A9\u008C\u00B5\u00B5_\u00DAo\u00E5)?\u00EA\\x001f\"\\x0001\u00F0\\x000f\\x0011f\u0080\u00A2\u00C0?\\x0000\u00B4\\x0010O\t\u008D\u00AF\u00D7vT\u00D1\u00C2\u0088\u0089\\x0007H\u00C2\u00EA+t\u00DE9Lk%*_\u00D9|\u00F53\u00CB\u0087\u008F\u009C\u00BA~\u00DB>E\u0094\u009C\u00FD\u00AD\u00C3+\u009D\u00EE\u00A6\u0090\u0082r'^\u00CA\u0094\u00BD2\\x0001*\u0090\u00D2\u00FA{v\u009E\u0093g.P\u00FAq\u00C3\u00AE\\x0007G\u00CE\u00AA\u00B8.\\x0012\\x0008\u0080\\x0000\\x0008\u0080@f\t\\\u00F5\u00F4\\x0012\u00DAQ\u00A2\u00F7\u00B8zZ\u0088cH\u0093\u00E6\u009Ec\u00B7_\u00F5\u00CC\u00B2\u009F7nf!\\x00022\u00BA\u0084l\u00CF\u00A9.\u00F2\u00DB#\u0081\u0080\u0080\u0080\u00A74a\\x0019H\u009D\u00A0#\u00E1!\\x0002\\x0001\\x0010\\x0000\u0081\u008C\\x0013\u00D8\u00B8e\u00E7\u0095O/!)B\u00CB6ui\u00F2vs\u00E5\u00E8MWTv\u00BC\u00E3l\u00C6\u00E9\u00A0\u00F9 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002%&\u00D0p\u00B0\u00E5\u00F2G>\u00ED1z\\x0013'M\u00DEi\u00EE\u00F1\u00F2\u0086?\\x000c}\u0087\u00FC%\u0092/\u00BB\u00C8\\x0006\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A1\\x0010\u00D8\u00BB\u00BF\u00B9\u00E2\u00C1\u00B7\u00AFi}U\u00EE@\u00C1kr\u00FD\u008Bu\\x0015\u00F7\u00BFE\u00A1\u008B'\u00C9\u00C7\u008E\\x0004\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A5\"\u00B0\u00BB\u00A1\u0089\u00E2lH\u008AP$\u00ACM\u009A(s\u00FF\u00D6t\u00A2\u00F3\\x0002\u00A5\u00E3\u00A7\u00CF\u00B7\u009F:\\x0017\u0087D5aU\u00B2W\u0095?R|\u00B5%/t\u00FA\u00EC\\x0005\u0096::\u00CF\\x0015\u0099X9\u00A7\u00CE\u009CG\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\u0088-\u0081p\u00C7|*\u00CD\u00DD\u009Ce\u00E1\u00DB\u00DD\u00FBH\u009A\u00BC\u00A5J\u0093F\u00AB4!\u00B7\u00CC\u00893\u00A6t\u00BC\u00F3B\u00CB\u00F1\u00AE\u0086\u00A6S;\\x001aNl\u00DEs<\\x000e\u0089jB\u00F5\u00A1ZQ\u00DD,\u00B55\u00FE\\x000c\u00A5\u00DA2\\x0017:u\u00F6B\u00DBI\u00E2sr\u00EB\u009Ec\\x001b\u00B7\\x001f->\u00D5m9\u00BC\u00E6\u0097f$\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00D8\\x0012\u00A0\u0081\u00BA\u00F8\u00D1\u009EJ\u00D8\u00BA\u00A7\u00B5\u00E1\u00D0I2\"dJ\u009C\u00CCYF\u008E\u00EFr\u0091&$\u00CD\u008Ew\\x0016R\u00FB\u00E9\\x000bM\u00C7\u00CEn\u00AF?q\u00B0\u00A5\u00B3\u00FD\u00D4\u00F9\\x0012\u00EF\u00F8\u00EEt9\u00AA\t\u00D5\u0087jEu\u00A3\\x001a\u00F2\\x0015f\u009F\u00C3\u00AA\u00B6\u00E7\u0085hs\u008E\u00C3\u00C7:\u00B7\u00EC:\u00B6\u00FF\u00F0\u00A9\u00F6\u008Es\u00A1\u00F0\u00D9\u00F0\u00A4\u00B2\u00C1?\u00FE\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0095\\x0000\r\u00D4\u00A1\\x000c\u00F8d8\u00C8|\u0090\\x0011!S\u00A2\u00EC\u00F6\u00C4\u00D9\u00DF\u00AC}\u00DEi\u0097&C\u00E75]\u00FB\u00C2\u00CF\u00BF\\x001f2\u0087\u00D4Y;\u0099v5\u00B5\u009D\u00BEp\u00B8\u00BDk[\u00FD\u0089\u0096\u00F6n\u00B6\u00B9\u00A7\u00B2\u00D4\u00B3\u00B8t\u00A4\u00BD\u00BB\u00C8\\x0012\u00D8\u00E9T\u0093\u00C3mJ\u00DD\u00A8\u0086TO\u00A3\u00CE\u00A1W\u00DB\u00E5B'\u00CF^h=\u00D1\u00B5Y\u00E9R\u00F4KC\u00E1\u00F0\u00A1\u00A6A\u009A\u00C4u,B\u00BD@\\x0000\\x0004@@#\u00C0\u00A4IX\u00E6\u00AC\u00A9\u00F5\\x000c\u0099\\x00122(dVxs\u0096\u00A9\u00CF;\u00F65\u00FD~\u00F0\u00ECkG\u00AD\u00EB=\u00BEA\u009B\u00D0\\x0019:\u00EF\\x0010\u00FDMG)>\u0083,=K\u00C7N\u009D\u00DF{\u00B0\u00E3\u00C0\u0091N\u00DA\\x0016V\u009D\u00E8!wS\u00B1\u00A9\u00F5\u00E4\u00B9\u00B0\u008A\u00A2\u00CA\u00EC?\u00D2I5\u00A4z\\x001au\u008E\u00A8\u00DA\u00C2\\x000b\u00D1\u0086\\x001c\u00F5\\x0007O44\u009F\n\u0091\u008F\u00D2(xM0\u00FA\u0081\\x0000\\x0008\u0080@\u00BC\t\u00D0@M#\u00F16\u00D1(a_S\\x0007\\x0019\\x00142+\u00BC9\u00CB\u00D4\u00E7\u00ED\u00F5\u0087\u00A4\u00A4Ik\u00C7\u00B9\u00AD\u00F5\u00C7\u00DB:\u00CE\u00D1\u00F6ka\u00DD\\x0000\u0092&\u0084>\u00AC\u00D2ZNtS\r\u00A9\u009E\u00FC\u00FD\u008B\u00A2\u00DA\u00C2\\x000bQC6\u00EFnm;\u00D9\\x001d\"\\x001fH\u0093x\\x000fG\u00A8\\x001d\\x0008\u0080\\x0000\\x0008(\\x0004B\u0097&G\u008Ew\u0091A\u00C9\u00B84\u00A9\\x0018<\u00FB\u00BAQ\u00EB\u00AA\\x000c\u00AF\u00C9C\u00F3\\x000e\u00D1\u00DFt\u0094\u00A2G\u008F\u009D\u00D2\\x0012\u00D9\u00E3_w\u00B5\u0093\u00DDU\\x0003Ph\\x000e,\u0084t\u00F4D7Y\u00DFP\u008A\u00A2B(\u00A6\u0084jH\u00F54\u00EAL\\x001f\u00A2\u00A8\u00B6\u00F0B\u00B4X\u00E9\u00E7\u00CDG$\u00F94\\x001e\u00E9X\u00B2z\u00BBL\u00C3\u00F7\\x001f<\u0081G\\x001f\\x0004@\\x0000\\x0004@ \u00CE\\x0004h\u00A0\u00EE\u00EC\n\u00CD22sF\\x0006\u0085\u00CC\no\u00CE\u00EC\u009F\u00E9=\\Y\u00FF!J\u00C7i\u00BAC7\u00DF\u00EE\u0085\\x0014\u00FF\u00AD\\x001a\u00E5\u00A9.\u00DDUk^|\u0081T\u00C2\u00B6\u00BD\u0087\u00AC\u00D2\u00C4\u0098\u00D0\u00B1H\u0093\u008D;\u00DA\u0088>\u00BB|(\u0089tC\u0088\u00D2\u0084\u00AAD5<r\u00A2\u00BB\u00F5\u00D4\\x0005\u0096\u00984\u00F1\u00AC6M\u00E9\u00AD\\\u00BFw\u00CEG?L\u009A\u00FB\u00CD\u009CO~\\\u00B5\u00A1\u00FE\u00E8\te\u00BD\\x000f\u00A5\u00E6\u00B6\u00CEY\\x001f-\u00B77v\u0083\u00F9Bt-\u00EAC\u00EB6\\x001f\u00A1M\u00EA<\u00C9\\x001cn?\u00F3\u00E8\\x000bs\u00AB\\x0006\u00BD^\u00BB\u00F4W\u00CF\u00CC\r\\x0007 M\u00E2<\"\u00A1n \\x0000\\x0002 \u0090\u00A7\u0081Zf\u00F0\u00F7\\x001c\u00F0\u00F9\\x000cdP\u00DC\u00A5\t\u00E9\u0092oVn\u00BD\u00FD\u00B1\u00E9\u00FD\u00EE\u009F\u00D4\u00FF\u0081)\u0096t\u00CFSo\u00ED?L\\x0011\\x000e\u009A54\u00CCb\u0080\\x000fNR\u00E3\u00E8\u00C9\u00F3G\u008Ew7\u00B7\u009D\u0099\u00F5\u00D1\\x000f\u00F7<5\u00AB\u00DF\u00FD\u0093\u00A9\\x000e/\u00BE\u00B9@1\u009D\u00ED]\u00F4m1\\x001a\u0085\u00A4\u0089\u00E3\u0084N\u00DB\u00E9\u00F3G;\u00B4t\u00F8x\u00D7\u00FA\u00ED\u00ADD\u00BF\u009Dv4qN\\x001f-\\w\u00DB#\u00B9\u008D\u00FF\u0094\\x000c0\u00CBF\u00DB\u00818%Z\u00F1\u00CB\u00B6HqIm\\x001d\u00E7\u00D7nm\u00F9f\u00ED\u0081\u00AD\u00FBO\u00B8_\u009A\u00BE\u00A5\\x001a\u0092\\x001f\u00AC\u00B5\u00E3<%Vs\u00CFj\u0093\u00F7\u00E2\u00AE\u00C7&U\u00DE5\u00E6\u0086{\u00C7U\u00DD\u009F\u00ABz`2\u00FD\u00D0?f/[\u00BB\u00EB\u00D0\u00B1\u00CE\\x0007\u009E\u009E\u00F1\u00F8\u00E8\u00F7\u00EC\u00D5\u00DB\u00C0]\u0088]\u00AE\u00FDT\u00F7\u00BA\u00CD\u00CDJ\u00EF\\x00145\u0087\u00AF\u00F9\u00D7?n\u00AE\u00BC\u00EB\u0095[\\x001f\u009F=\u00F8_\\x001f\\x001c\u00ED8gi\u0094q:;\\x000ei\u0082a\\x000f\\x0004@\\x0000\\x0004bN@\u0093&\\x000e\u00B6\u00CC\u00D3r\\x0019\\x0019\u00F8\u00F1\u00ED\u00E6\u00E6\u00B6S\u00DD\u0086\t\u00B6 \\x0003}k\u00F5\u009B\u00FD\\x001e\u009Cvc\u00F5\u00DB\\x0003\\x001f{\u009FOo\u00B9\u00F1\u00A6G\u00DF\\x001d\u00F4\u00EC\u0087\r\u00CD'\u008F\u00A9\\x0016\u00AA\u0098\u00E4T\\x0007\u00D2\\x001fM\u00C7\u00CE\u008C\u0099\u00F6U\u009F!\u0093\u00FA?Ts\u00D3\u00A3\u00EF\u00DC\u00FC\u00D8{\\x000f\u008E\u009A\u00FF\u00DA\u00EC\u00E5\u00AD\u00A7\u00CE7\u00B5\u009Du\u00A9\u00BC\u00E7W[\u00F7\\x001c\u00B4K\u0093\u0083\u00D7\u00BE\u00B0\u00F6\u00F7Cf\u00FB\u0095&\\x001f|\u00B5\u00A6\u00E7]\u00A3\u00AB\\x001e\u00C8\u00F5x\u00C6\u00C6\u009D\u0087=\u00EF\\x0007\u00DB\u008C\u00C4=[S[\u00D7\u0082\u0095\u008D,mm8\u00EE\u009E\u0099\u00A4\ti\\x0011\u00BE\u00CD\u00EE\u00D2\u00E4\u009D\u00CFWR\u0085{\u00DD7\u00AE\u00CF\u0083\u00D3\u00FA\r\u009B}\u00D3\u00A3\u00F3\u00E8\\x001e\u00DF\u00F8\u00C8\\\u00FA\u00DC\u00FF\u00E1\u00E9\u00F7\u008C\u0098C_\u008Dxc\u00BE\u00FD\u00A2\u00F6\\x000bQ\\x001fZ\u00B3I\u0091&\u009E\u00AD~\u00E6\u008D\\x000f\u00EF\\x00191\u00FB\u00F3e\u00DB\\x0006\\x000c\u009F\u00FB\u00F3\u00B6&\u00F7\u00FC\r\\x0007\u008E\u009B\u009F\u00C9\u009D\u009F\u00BF\u00F0\u00C2\u00E7;#~N\u00E9\"3V\u00B5\\x001a\\x0017\u00B1\u00FC\\x0019\u00D1\u00C5\u00BF\\x001fqI\u00EF9\r\\x0011\\x0015\u008EbK@ \u00A2~\\x0012Q\u00B1%\\x0000\u0082Kd\u0086\\x0000\r\u00D4\u00EE\u0083\u00FFK\u0093>{\u00FA\u00B5o\u00ADo\u00F14\\x0010F\\x00062(\u00EE\u00D2\u0084\u00A6Nz\\x000f\u009A\u00D0\u00FF\u0091\u00B9\u00DF\u00ADihn?\u00DB\u00AEz\u00FA\\x0017\u00AE\u00DC=\u00F0\u00F1\u008F(He\u00E9\u00BA}\\x0003\\x001e}\u00F7>U\u009D\\x0018\u00EF\u00EA\u009E\u0082\u00C0W\\x0006\u00BA\u00E8\u00F7\u00EBvS\\x001d\u00FA\r\u009Bu\u00D3\u00DF\u00FF=\u00F0\u00C9\u00CF\u009E\u009E\u00FC\u00FD\\x0007\u008B\u00B7n\u00DC\u00D5BWl9I\u00E9\u009C\u00AF\\x0002\u00F9\u00CC$M*\u0086\u00CC\u00BE\u00EE\u0085\u00B5U\u00E3\u00F7\u00E9[\u00AE\u00CD;x\u00DD\u00A8\u00B54\u00CDC\u00AB]\u00D4\u00D2\u0095D\u00FA\u00E8\u00E7\u00ADG)\u0096\u00A2\u008D\u0096\u00C0\u0088\u00D2\u00FB_\u00FEt\u00FD\\x001d/\u00F7\\x001e\u0092\u00EB?|\u00F6\u00BF&\u00D7\u00DCv\u0096\u00CFF\u009B\u0082\u00D8\u00D3\u0091\u00F6.\u009A\\x000f\\x0013~e\\x001c$\u00C5\u00B7j\u00F3\\x0011C\u009Dl\u00A9?\u00EE\u0092\u00BFn\u00EBQZ?L~$J\u009E\u00D5^\u00B9a\u00EF\u00B5\\x001b\u00D5\u00F3\u00BE\u00F1\\x0003\u0086\u00CF\\x001a\u00FF\u00F6\u00CAu[\u009Bw\\x001e8N\u00FF\\x001f?o\u00C5\u00CD\u008F\u00BD\u00DB\u00F8\u00BC\u00BE\\x000f\u00CF\u00E93t\u00D6\u00D3\\x0013\u00BE\u00A6\u0086X.\u00CA_\u0088]\u00AE\u00AD\u00A3{\u00CD\u00AF\u00CD\u00A7\u00CF\u00FE\u00E6\u00DE\\x001cRc\u00BD\u00EFyu\u00C2\u00BCeT\u00CF\u00BEC\u00A7O\u00FBp\u0095S~Fo_\u00A3\u00A44i]5\u0083\u0097\\x0013\u0096?\u00FD\u008D\\x0010eQ&yH\\x0013w\u00C9=w\u00C3\u009C\u00DE\u00A5VzV\ta\u00FD[\u00E9\u0093\u0085\\x0005}m>n\\x0013\u00DEP&a\u00F6\\x000b\u0094\\x0015\r\\x0001\\x001a\u00A8\u00DD\\x0007\u00FF\u00BE\u00F7\u008D%\u00E38\u00F0\u0091\\x0019s?[\u00DDr\u00BC\u00DB\u00DDL\u00D0\u00B74\u00F8\u00FF\u00F4k\u00F3\u00B1\u008En\u00C3\\x0004\u00DB?\u00D0\u0084N\u00AF\u00FB&\u00F4\\x001b\u00FE6Y\\x0013\u00F6-\u0099\u00F6e\u00EB\u00F6\u00F4y\u00A8F\r\u00F88\u00FF\u00ED\u00EA\u00DD\u00FD\u0086\u00CD\u00BD\u00FB\u009F\\x001fPi\u00CCN\u0085\u009Bh*g\u00F4\u009B_\u00F6\\x001e2\u00A5\u00DF#\u00EF\u00DE\u00F4\u00F8'7=\u00F1\u00E9\u00E6=\u00AD\u00EA\u00B5\u00CEQ\u0095\u00C8/\u00D0r\u00E2\u009CK\u00FD\u00DD\u00BF\u00DA\u00B2\u00FB \u00F9G\u00C8K\u00D2{\u0082]\u009A\u0090\u00F09\u00A1\u00A5\u00E667i\u00F2~\u00ED\u00EAko{\u00B1\u00D7\u00A0\t}\\x001f\u009A\u00F5\u00AC\u00A2K\u00BA\u009C\\x0014\\x000c\u009CjO\\x0004=s\u0092\u00FE\"u\u00F2\u00D5\u00CA\u00C6\u00AFV(\u0089\u00D4\u0089\u00D3)$\u009EHBi\rVk\u00EER\u00ED\u009B\\x001ex\u00ED\u00FA\u00BB^\u00EB\u00FD\u00C0\u00F4o\u00DA\u00C7\\x0017\u00D8p\u00F8\u00D4\u00BD\u00FF\u0098\u00DB\u00E7\u00A1\u00D9\u00FD\u0086\u00CF\u00A3\u00F4\u00F4\u0084E\u00F6\u00CB\u0099.\u00A4\u00F6\t\u00EAC?\u00FD\u00DAd\u0097n\u0087Z;?\u00FBf\u00FD\u00AB\u00D3\u00BExy\u00CA\u00E7\u00A3\u00DF\u00AC}\u00E2\u0095\u00F7\u00AE\u00BB\u00E3\u0095\\x001f74P\u0099O\u008C\u00F9\u00F0\u00C6a\u00D3\u00C7\u00CC\u00FC\u00F6\u00E57\u0095oss\\x0017\u00FF\u00B2\u00B3\u0089&\u00A4\u00F8\u00CB\u00EDkl\u0097\u00F3\u009A\u0084(M\u00CA\u00A3L MB\\x001d3K/M\u00B8n\u00A3\u00B8\u00F6\u00D4\u00BC\u00EF-\u00BF\u00F3\u00F3\u00C2\u009Fj\\x000eM\u009D\u00F0\u00C7)\u0093\u00ED,s)\u00A1RBa \\x0010\\x000e\\x0001\\x001a\u00A8]\u00DE\u00DBiH\\x001fp\u00FF\u00B8\u00AA\\x0007\u00A6\u0091\u00A7\u00BC\u00CF\u00D0\u0099C\u009Fo\u00F9\u00BA\u00DD\u009E\u0086\u00EF\u00A7_\u009A\u008E\u009D\u00EC6L\u00B0\u00FD\\x0003E\u00B9\u00F6\u00B8w\\\u009Fas\u00E9\\x0003\u00FB\u0096\u0094\u00C7\u00D2\u00D5;{\r\u009E\u00FCC\u00DD>\u00B2\u00AD';/\u00CC\u00FA\u00E4\u00A7\u00AA\u0087\u00DF\"\\x0011\\x0013X\"\\x0014N\u00D4\u00C5\\x0000\u00BB\u00D6\u0091\u00E3\u00E7\u009B\u008F\u009D\u00AD~\u00F1\u00BD\u00DE\\x000f\u00CE\u00E8W\u00FD~\u00FF\u00C7>\u00A6\u00B4\u00FB\u00E0\tR$d\u00F56\u00EF9\u00F2\u00D2\u0094/H\u00A3\u00B8\u00D4\u00DF\u00FD\u00AB-\u00BB\\x0004\u00D2\u00E4\u00C0u/\u00AC\u00A9\\x00182\u008B4\u00C1\\x0011\u00AA\u0081\u009Ahbe\u00DD\u0096\u00A3\u00B4\r\ti1Kz\u00AFv\u00F55\\x001bYy\u00CF8\u00AAb\u00F5\u0098/v4\\x001e?p\u00F4\u00CC\u00FE#\u00A7(\\x0006\u0087\u00A5\u0083G;\u00EDg\u00D1\\x0011U\u00C1(\u00E2\u00CE\u0092\u008E*\u00CD>g$Uat/\u00DF\u00D0\u00CC\u00A4\tS'\u00C2\\x0002\u00A9\u0086TO\u00A3\u00CE.\u00D5^\u00F2\u00D3\u00F6\u00ABo\\x001dUy_.\u00F7\u00EEJ\u00BE(\u00AA\u00EA\u00ED\u008F\u00E6\u00AE\u00BB\u00EB\u00B5\\x001b\u00EE\u009F^\u00F5\u00D0[U\\x000f\u00CF}j\u00DCB\u00FB\u00B5\u00EC\\x0017j=\u00D9\u00BDjc\u0093\u009DOn\u00EE\u00A2\u00ABny\u00BE\u00FF\\x0003\\x0013\u00FF\u00F6\u00E8\u008C\\x001b\\x001f\u009E:\u00F0\u0091\u00E9\u00C3^\u00FA\u0090*Ie~\u00B9l\u00D3m\u009Fus\u00F5,\u0092\u00D2\u00B7=6\u00EB\u00FA\u00BB\u00DF\\x00188|\u00EA\u00C6\u009D\u00CD\u00FC\u00E5\u00EA\u00F7\u008B\u00A4\u00C9*\u00E3\u00FD\u0093\r\u00F6\u0096\u00F7\u00CE\\x00193\u00F8\u00D7S\u00C5\\x0002\u00B0i \u00C3bpo\u00A6\u00BC\u008D`\\x000f\u00A9\u009B2Q\\x000c\u009E\u00F6\u00AFw\u00EF\u00DE\u0097\u008C\u00F8^{\u00AE\u00C9\u00E3a\u00FC3\\x000e\u00D2wN\u00C7E\u00E5\\x0014\u00BC&\u0085\u00B3\u009Cgx\u00845aE\u00B0\u00D3G|o\u00B1\u00CE\u00CAa\u00AA\u009Bz\"_\u00C7\u00BCzH\u00BB\u0092\u00FD\u00D2\u00E62\u0095\u00F6\u00BAV\u008F\u00AB\u0097Z\t\\x0006\u0088]\u00BBp\u00A2\u00D7q;8\u00A7\\x0012\u0084\u0090\u00CD\u0095\u00B0\u00B4V\u00A9\u008F\u00B0\u0096\u00C2\u009B\u00A5^w\u008Eq\u00DBu\u0080\u00EA\u00DD6Q\u00B497\u00DC\\x001dw\u008E\u00DFZf,\u00E13\t\u00C7t\u00A2\u0094h\t\u00D0@-4\u008E\u00C6`\u00DEo\u00F0\u00EB\u00BD\\x001fx\u0093\u00DEu\u00FB\u0092:yhV\u00AF!\u0093GO]\u00B8\u00EB@\u00BB\u00D0\u0090\u00B1\u0083dP\u00C8\u00AC\u00F0\u00E6\u00CC\u00F2\u0099\u00AC\u00E7\u00F5w\u00BF\u00DE{\u00E8\\x001c\u00FA\u00C0\u00BE\"[\u00F9\u00ED\u00EA\\x001d=\u00EE\u00CB\u00DD\u00F0`M\u00CF!S{\u00DC3^\u00FD<\u008B\u00CF@f\u009D\u00FE\u00E4\u00932\u00F9\u00A2\\x001bz\u0097\u00CBY\u00BE:|\u00FC\\x001c\\x0005\u009A\\\u00F7kt\u00AD>\u008F\u00BC\u00DF\u00B7\u00FA\u00DF\u0094\\x001ez\u00A9\u00F6\u00FB\u00BA\u00FAi\u00EF-\u00EFu\u00DF\\x001b=\u00EE\u009D@\u00AD0*\u00E6\u00F7\u00BA\u009BI\u009A\\x000c\u009Eu\u00ED\u00A85\u00BD\u00C7\u00D7\u00EB\\x0013:s\\x000f\\7rM\u00C5`E\u009A\\x001c>\u00A1\u00A5Cm]k\u00B7\u00B4\\x0010}\no\u00E1\u00D3\u00BC\u00F9+\u00AE\u00BC\u00E5\u00B9k\u00EFz\u00AD\u00E7\u00907o\\x0018:\u00FB\u00AF\u00F7\u00AF\u009F7`\u00E8\u0094>\u0083\u00DE\u00A8\\x001a\u00F4\\x001aK\\x0003\\x001e\\x001c\u00F7\u00C1Wk-'\u00B20\\x0019\\x0002d9\u00BE\u00BD\u00F1\u00E4\u00A2\u00B5\\x0007\u00BE\u00FE\u00C9\u0094\\x0016\u00FDt\u00F0\u00EB\u00D5\\x0007\u00BE\\\u00D1h\u00A4M{i\\x000b\\x0013kh\u00CF\u00DA\u00CD-TO\u00A3\u00CE\u00F4\u00C1\u00A9\u00DA\u0093\u00E6-\u00BE\u00EAo/\u00F5\\x0018\u00F4\u00E6/\u00BB\u008F\u00F2\\x0015x\u00F7\u00F3U\u00E4\u00D8xa\u00CA\u0082\u0097f|\u00F7\u00F2\u00CC\u00A5\u0094\u00E6~\u00B1\u00DE^sBa\u00B9\\x0010\u00F5\u00A1\u0095\\x001b\\x000f\u00D9\u00F9\u00AC\u00DD\u00BC\u009F.4\u00E4_\u00EF\u00AD\u00DF~\u0098*Lj\u008C$\u0097Qs\u00DA\\\u00BF\u00E5\u00F89Jo\u00F1\u00F3u\u00F7\u00E4\u009Ex\u00EDs\u00CB\u00B5\u0084\u00D2\u00C4x\u008D\u00E4\u00C6ww\u00AF\t\\x0013%\u00BA\\x000f\u009D3\u00B5I\\x0013*\u0088\u00D7\u00E5\u00FE4\\x001bu\u00CD\u00D2k\u00A6\u00D1\u00D0\\x0010\\&%\u0087\u00E8\u00B8C9\u009A4)\u0094\u00AB[t\u00FB\u0098\u00E2V\u0093\u0082\u00C5\\x0014K\\x0013V*\u00AFy\u008C+\n/\u00AD\\x000b\\x001dN\u0084\u0099\u0085\u0085\u00B9z\r\r\r\u00C6\u0081\u00C2\u0085\u00CC\u0085x\\x001e\u00E7+\u00D20g\u0084\\x0012\u0081\u00E3V\u0082\\x0013d\\x0007ag\u00A6G)\u00EDq\u00BAY\u00EAu\u00B5\u0082\u0098\u00A0\u00E1\u00FF(\u0088\\x0013K\u00B7\u00D1\u00F4\u00B2\u00C9kb\\x0002e\u00F3\u008E\\x0018\u00BA\u00D8\u00E4$\u00B1\\x0017\\x001b\u00AD\u0085A\u00E9 \\x0010\u0088\\x0000\u0093&vK\u00A1\\x001d\u00E98\u00DF\u00FB\u00BE1=\u00EE\u009Bt\u00C3\u0083\u00B3o\\x0018:\u0087\\x000c\u00E5\r\\x000f\u00D4T\\x000e\u009E2\u00E0\u00E1\u00A9\u00B5K6\u0099\\x000c\\x0019g^\u00C9\u00A0\u0090Y\u00E1\u00CD\u0099\u00E53\u00AD\u00B9\u00F6\u00CE\u00B1=\\x001f\u00A8\u00A1\\x000f\u00C6W\u00E4\u00E4\u00F8\u00E6\u00A7]K\u00D7\u00D6\u00AF\u00DEth\u00C9\u00DA\u00BD\u0095C\u00A6\u00F7z\u00F0-#\\x0003}\u00DB{\u00D0\u00B8\u00BE\u00F7O\u00EA\u00F7\u00E0\\x0014>\u00D1q\u0097\\x000b\\x001d>N\\x000bJL\u00A9\u00B9\u00FD\\x001c\\x001di\u00A7\n\u00DC1\u00B6\u00E7\u00FD5\u00BD\\x001f~\u00AF\u00F7\u00C3\u00EF\u00AB\u00E9\u009D\u009E\u00F7\u00CF\u00EC1hJ\u008FASoy\u00FC\\x001dCB\\x0004\u00B8\u00EE\u00A6]\\x0007I\u0084\u0090\\x0014\u00A92\u00A4\u00C9\u00D0y\u008D\u00D7\u008E\u00FA\u00E9\u00F7\u0083k\u00C8;\u00D4LN\\x001b5\\x001d<\u00D6\u00B5fs\\x000bmjb\\x0011\\x0004=n\\x001bu\u00D5\u00AD\u00AF\\{\u00CF\u00A4\\x001eCfT\\x000e\u00A9\u00A9\\x001c2\u00B3\u00C7\u00E0i\u00F4\u00E7\u00B5w\u00E7\u00F8\u00D4\u00E7\u00C17\u00EDJ\u00E2\u00D0\u00B1\u00B3\u00CA\u00D2&\u00B3\u00C2\u00F8\u00FA\u00A7\u0083_\u00ACh\u00F4L\\x000bV\\x001f\u00B0\u00F7\u00835[Z\u00A8\u009EF\u009D]\u00AA\u00FD\u00D2\u0094\u00F9W\u00DE\u00FAJ\u00D5\\x00033\u00B6\u00EFo7*@\u00ED\u0095\\x000cc&\\x0014\u0096\\x000b\u00D1\\x001e-+6\\x001c\u00B2\u00F3\u00A1\\x0002\u00BF\\\u00BE\u0085\u009AO\u00DE\u00BC/\u0096o\u00B5\u00D7\u00B9\u00E1\u00C8\u00A9g\u00C7r\u00E5\u00AD/\u008Fx\u00E3\u00F3\u00DDMJ\u00BC\\x0012\u009F\u00F66\u00B4\u0099\u009F\\x0014\u00F3KeA\u0090xK\\x0013.x\u00D6\u00E5\u0085V\u00F9\u00CA\u0092S\u00FB\u0093\u00B7\u0097\u0086#\u00C0\u00E4r`5\u00D5\\x0014\u0081mFA?\u00E0P\u008E6\u00A1S\u00F0\u009D\\x0014\u00BC\r\u00D6\u00B1\u00C2\u00A9\\x0004\u00CB\u009C\u0090\u00934\u00E1\u00BD$\\C,g\u00EB\\x0017\u00B1U\u00883\u00F8\u0096\u008A\u00D8\u00C64\u00A1\u00E8) \u00B2i/'t|-\u00E5 [\u00DA\u00C8\u00D7LTi\u00C7\u009B\u00A5\u00F9{\\x0004\u00BA\u00CC|\\x0005K\u00B7Q\u00F2\u00BByMT7\u009FI\u00B7h\u008E?\u008B\u0096\\x0011\\x0014\\x001b\u00C8p\u00E0$\\x0010\u0088\u0096\\x0000\r\u00D4\u00C2\u00C1_\\x001b\u00CCO\u009D\u00EFy\u00F7+\u00D7\u00DC5\u00BE\u00C7\u00E0\u00E9d(\u00B54x\u00FA\u00F5\u00F7\u00BDIs\u00FA&\u00A3\u00C0\u008D\u00FFdP\u00C8\u00AC\u00F0\u00E6\u00CC\u00F2\u00B9\u00B5\u00E3\u00C2\u00D5\u00B7\u008D\u00E91x&}\u00E0\u00BF2d\\x0004\u0099\u00D7\u00EB\u00EF\u0099\u00DC\u00EB\u00FE9F\\x0006\u00FA\u008A\\x000e\u00F6\\x001a4\u00A5j\u00E8\u009C>\\x000f\u00CFeI\\x0011.\u00BA\u00A1\\x0017_\u008E&.\u00B8\u00D4t\u00FC\u00DC\u00A1\u00B6\u00EE\u00A3\u00A7\u00CE\u008F\u009C\u00F8\u00E95w\u00BEVy\u00CD\r\\x000f\u00BD\u00A3\u00A5\u00A1o\u00F7zp^\u00AF\u00FB\u00DF\u00EA\u00F5\u00C0\u00DC\\x0019\\x001f\u00D7\u0091\u00CB\u0084\\x0015\\x0018\u00E0\u00BA\u00BF\u00EE\u00B4{M\u00E6\\x001d\u00BC^\r\u0083%\u00A5\u00D3t\\K\\x0007\u008Eu\u00AD\u00DEt\u0084\u00E8[\\x0002n'\u00CE]\u00FC\u0097[_\u00BD\u00E6\u009E)\u00D7\u00DE7\u008D\u00D2\r\\x000f\u00CC\u00ECI\u00E8\\x0007M\u00E3\u00D3\r\u00F7\u00CF\u009C\u00F2\u00EF\u00D5\u00F6H\u00DD\u0083\u00C7\u00CE\u00D2\\x001ak\u00CB\u00F1\u008D{\u00DA\\x0017\u00AC:\u00F0\u00E5\u00CAF>}\u00B5\u00AA\u0091\\x000e\u00F2z\u00E5\u00E7\u009Dm\u00F6\\x0002\u00A9\u0086TO\u00A3\u00CE\u00F4\u00C1\u00A5\u00DA\u00FE\u00DB\u00E8k\u00EE\u009ED\u00B1\u00C4\\x0001B\u0088\u00ED\\x0017\u00A2\rT~\\O\u00BF\u00A3`\u00E5\u00C3\n\u00DF\u00B4\u00F7\u00E8\u00B0\\x0017?\u00B8\u00F2\u00B6\u00B1\u00AF\u00CF^\u00CC\u0082\u0095X\u00A2\u00E9\u009B\u009B\\x001e\\x001c\u00FB\u0097[F\u00CE\u00FAT\u00C0\u00872D#M\u00B4\t\\x001e\u00C1\u00C3\u00EA\u00ACL\u00AC\u00D6\u008B3\u00DD\u0096\\x0019\u0083\u00C2\u00DC\u0083y\u00DE\u0084\\x001dw*\u0087)\u0083\u00EF\\x000b3F\u00FA\\x000c\\x0011\\x0015\u00C2M5\u00900p,AV\u009A\u00F0V\u00B5P\u0098e\\x0016D\u009F\u00B10I\\x0013\u0087<f\u0090\u0082\u00D9\\x0012\u00AB\\x001cp\u0082\u00A7\\x001d7J(\u00C8 q\tv\u0099\u00A1\\x001f\u00B1\u0089\r\u00BD\u008E\u00C2/\u009C\u00CB1}c\u00FA\u0083/H$!\u009C\u00A5\u0089]\u0098\\x0018\\x0000\u00CD_A\u0099DkOQzh\\x0004\u00984q1%\u00D7\u00DD\u00F9\u00E2_n{\u00FD\u009A\u00BB\u00DF\u00BC\u00E6\u009E\u00A9F\u00BA\u00FF\u00F9\u008F\u00D7m?\u00ECt\\x0016\\x0019\\x00142+\u00BC9\u00B3|>\u00DAq\u00E1\u00AA[G_\u00DFt\u00FA \u00CC\u00A6f\\x0018c\u00C9@BAq\u00B7\u00DC\u00F3\u00E6\u00F5Cf_\u00BF\u00A2K\u00E8\u0088\u00CBU,_\\x001dl?GV\u0095b6\u009E\\x001b\u00FF\u00C9U\\x001b}\u00ED]\u0093\u00A8\u009C\\x001e\u00F7\u00CF\u00B3\u00A4\\x0017\u00A7\u00DFx\u00F4,\u00AE\u00DF\u00EB\u00FE\u00B2\u0093\u00BC&\u00B3I\u008A\u00F4\u00E1V\u00E8\\x001c\u00B8~\u0094\\x0012kb\u0091&\u00AB~=,\u00A4?n\u00CE\u00B7\u00B9}\u00FCUwN\u00BE\u00EA\u00AE)\\x000f\u008C\u00FC\u00F8\u00E7\u00ED\u0087\u00D9st\u00C3\u00CE\\x0016#m\u00AE?&\u00A4/\u0094&\u0094\u00F3`k\u00D7\u00FE\u00A3g\u008D\u00D4x\u00B4k\u00CB\u00D9\u00E5\\x001b\\x000f\\x001b\u00D2d\u00DD\\x000eq\u0081TC\u00BB4\\x0011V{\u00D1\u00CA\u00ADW\u00DC\u00FC\u00E2UwLxu\u00F6\\x0012a\u00DD\u00C6\u00CD\u00FAj\u00F8s\u00B3g|\u00B0L\u00F8\u00AD\u00FDB\u00D4\u0087~\u00A8;\u00E0\u00D2;\u00E9^R\\x0008\u00CB\u00A3\u00A3?\u00E2\\x000b\\\u00BF\u00A3\u00E9\u00B2~O\u008F\u009B\u00F3\u009DS\u00EF\u00DC\u00DBp,\\x0002\u00AF\u0089\u00A34qV&\u00B6\u00D7\u00F0\u00E8\u00A4\u0089\u00D7\\x0012\u00E2\u00E2\u00A5I\u00C1]\u00A1\u0094\u00A5\t(\\x0007cn\u0093&\u00EE\u00D5SU\u0094m\u00C6\u00C7\u00A741\u00BCO\u00AA<S/\\x0018ki\"\u0094\\x0010\\x000e\u00D2\u00C4E\u0097\u00A8\u00CD\u00B6LRF\u00BEP>4\u00E3\u0084\u0082\u00B2L\u0080\\x0006jwir\u00CD\u00AD\u00A3.\u00BFe\u00CC_\u00EE\u0098\u00F8\u0097;r\u0094z=0c\u00CE\u00E7u\\x0014\u00AE\u00E1\u00A2f\u00C8\u00A0xJ\u0093\u00BF\u00DC\u00F22\t\\x001d\\x0017i\"\u00CC\u00C0T\u00C2\u009Fo\\x001d\u00EFW\u0097\\x001c8\u00D6\u00BD\u00FF\u00E8\u0099\u00C6\u00A3\u00B4\\x0013\u00E9\\x000f\u00FE\u00EBKW\u00DF9\u00E1\u00DA\u00FBf^7x\u00CEuC\u00DEb\u00E9\u00911\\x000b^\u0098\u00B6l\u00C9\u00BA\u00FD\u00A4K\\x001a[Mn\\x0002\u0092)\u00BE\u00AE\u00ABH\u0093!\u00B3(\u00EC\u00B5j\u0082\\x0011k2O\\x000b\u0083%o\u00CC\u00A1v-\u00D1eV\u00FEr\u0098~\u008BX\\x0018\u00E8\u00FB\u00FA\u00ECo.\u00BF\u00F5\u00B5?\u00DD>\u0081\u00D2\u00F3\u0093\u00BF\u0096\\x000c\\x0006>\u00D0J[\u00B2HE\\x000e\u00AF\u00D9\u00DA\u00FA\u00F9\u008F\u00FBYZ\u00BB\u00E3\u0098S\u00F9TC\u00AA\u00A7Qg\u00FA\u00E0R\u00ED^\u00F7\u00BCz\u00C5m\u00AF\u00FF\u00E9\u00F6\u00F1\u00B5\u00CB\u00B6Z\n\u00FC\u00F7\u00C2\u00B5\u00BF\u00EF\u00F3\u00C4e7>\u00FF\u00C4\u0098\u008F\u0085\u00D7\u00B2_\u0088\u00FA\u00D0\u00F7?\\x001fp\u00E2C\u0085PH\u00F6e7>W\u00BB|;}\u00AE\u00DB\u00DE\u00F4N\u00ED*V\u00F2\u00ED\u008FN\u00BA\u00FB\u00A99N-\u00DA\u00B3\u00AF\u00B0\u00BD\u0088\u00FA\u00E4\u00876\u00A1#\\x001a\u00F3]\u0094\u0089\u00A34\u00B1\u00AD\u00AC\u00E1&nLV\u00DCa\u00B6\u0082\u009F\u00F4\u00D0bX\u00CD\u00CE\\x0016\u00DB\u0080\\x0017\u00864\u00D1L=\u00A7L\u009C\"[df\u0098\nU4+\\x0008\u00B7\t\\x001d\u00B5\u0091\\x0016\u00C1a\u00AA\u008Ei\u00E6\u00C6)\u00A7\u00B9v\u00DC\u00F4\u009A\u00A3\u00D7\u00C4&r\u00D4\u00EB8\u0096#\u00E35\\x0011;7D\u00D2\u00C4K\u0097h\\x001d\u00BC\\x0010\u00DC\re\u0092e{\u009F\u00A0\u00B6\u00D3@\u00ED2\u00F8\u00D3\u00F0~\u00E5_\u009F\u00FB\u00C3\u00CD/\u00FF\u00F1\u00B6\t\u0094F\u008C\u00FBjS}\u009B\u00A7\u0095$\u0083Bf\u00857g\u0096\u00CF-'/(/\u00D8wM9z\u00F2\u00820\\x001b\\x001dg\\x0019(\u00A7%CS\u00BB\"\\x0014\u00E8\u00FF.\u00E5\u008B\u00CB\u00EC\u00B8p\u00FD\u00ED/S\u00B1\u00B9m\u00DCUwO\u00BD\u00E6\u00BEY\u00D7\u00DC7{\u00D4\u00D4\u00A54\\x0001B\\x0006\u009D\u00FC\\x0008\u008D\u00AD\u00AA[\u00A1\u00A5\u008Bt\u008C\u00BD\\x0004\u00F9\u00EBn\u00DC\u00A1H\u0093\u00EB_X\u00D3\u0087\u0097&\u00D7\u00ABa\u00B0\u0087O\u009C#\u00EF\rK\u00FB[\u00CF\u00AE\u00FC\u00A5\u00F9\u00F8\u0099\\x000bGhoZQz}\u00F6\u00B7\u0097\u00DD2\u00E6\u008F\u00B7\u008E\u00FB\u00E3\u00DF\u00C6\u00FE\u00E3\u008DO\\x000fR\u00BC\u00A7CN\u00E38\u00B5\u00A1\u0085\\x0016\\x0001\u00B9f\u00A3\u00D8\u009C\u00D5[ZjW\u00ECgi\u00ED\u00F6V\u0097;J5\u00A42\\x000f\u00B5\u009Fc\u00C9\u00BD\u00DAK\u00D7\u00EE\u00BEl\u00E0K\u0097\u00DF:\u008E\u00FCl\u00CFN\u009C\u00BF\u00BCn\u00EF\u00AF{Z\u00BE\u00AF\u00DB\u00F3\u00CF\u00D7\u00DF\u00FFC\u00DFT\\x000cx\u00FE\u008F}uY]\u0083\u00B0zt!\\x0002b\u00C0\u00A1\\x000fGNt-\u00FF\u00B9\u00D1\u0089\\x000f\u00D5y\u00E4\u00C4\u008F\u00AF\u00BCeTs{\u00F7\u00E7K6\u00FDy\u00E03\u00FF\u00D9g\u00C4\u00B0\u00E7\u00E7\u00D2R\u00AB\u00B7?_u\u00D9M/\u00FC\u00B2\u00BB\u00C5\u00DE.\u00BA\u00B4/i\u00C2\\x0005\u0089\u00A86\u00A00\u00AE\u009B\\x0004\u008D\u00E9;>\\x000c\u00D6M\u0099X\u00EC(\u009Br`\\x001aB\u00B1^~\u00C2`yk\u00C7\u0095\u00A3YG\u0093\u00DB\u0081\\x0004\u0091\\x001a\\x0004j\u00F9\u00E7P\u0082\u00D5\u00C0\u00F2\u00E6\u0099\u00CD\tq\u00A2G\u009B4\u00B1\u00C6\u00C3\\x0016\u00B2\\x0014\u00E2O=\u00F3\u00A8e\u00A9\u00B9\u00F8K\u009A\u00DB\u00C6\\x0017l\u00AC\\x0011\u00B2\u00CD\u0090\u00A8\u00B9\u00F8F\\x000b\u009DSj\u00C9\u00EE\u00F0\u00B9,\n\u00BCB\r\u00B5\u00CF\\x0005\\x0012\u00DF\u008F\u00F0\n\u00835-\u00C42\u00FE0\u009A\u00EA0\u00EDb\u0093&\u00F6\u00C5`\u00BA\u00D8\u00B6\u00ECq\u00C2\u00FE\u00C4lN\u0082,s\u00E6\u00ABJ\\x0003\u00B5\u008Bq\u00A4\u00B1\u00FD\u00F2\\x001b\u009F\u00AE\u00B8\u00E9\u00C5\u0081\u00D5\u00B3\\x0017\u00FC\u00B8\u00D3S\u0094\u00B0\\x000cdP\u00C8\u00AC\u00F0V\u00C6\u00F2\u0099\u00F2\\1p\\x0014\u00F9`\\x001aZ:\u0085\u00D9\\x000e\u00B4v\u00B2\\x000c\u0094\u00D3\u00A5\\x001c\u00CF\u00AF\\x000c\u0093\u00DA|\u00FC\u00DC\\x000b\\x0013?\u00A52\u00FF\u00AC\u00EA\u0092\u00AB\u00EF\u0099~\u00F5\u00BD3\u009Fx]qF(\\x0006\u00B7\u00AD\u00FB`\u009Bf|\u0099\u00FD-&m\u00D8q\u00A0bp\u00CDu\u00A3~\u00AA\\x001a\u00BF\u00D7\u00D8r\u00AD\u0091\u00FE\u00A6\u00A3\u008A4i\u00D3\\x0012\u00E9\u00A0\\x0015\\x001b\u009Ah\u00B39\u0097\u00C5Ecg.\u00FA\u00C3\u00C0W.\u00FB\u00EBk\\x00188\u00E6\u00A7\u00CD\\x0007<\u0097!Q\u0099\u00D4$\u00F7l\r-g>\u00FF\u00B1\u0081\u00A55\u00DBZ\u00DD3S\r\u00A9L\u00A3\u00CE\u00F4\u00C1\u00BD\u00DA\u00D3\u00FE\u00FD\u00C3\\x001foy\u00F5\u00B2[^\u00AF\\x0018\u00F8\u00CA\u00F6\\x001f\u00F9\u00FB~\u00CF\u00FE\u00EF>#\u00FE\u00A3\u00CF?\u00E9\u00F3\\x001fo\\x0019;\u00F3\u00935\\x0014\u0087,\u00BC\u00A2\u00FDB\u00B4\\x001f\u00C9\u00B2u\u00FB\u009D\u00F8\u0090\u009C\u00ECq\u00C7\u00C8\u00FB\u009F\u009D;\u00B6\u00E6\u00DB\u00FF\u00E8\u00FB\u00EC\u00A0\u00A7gO\u00FD`\u00C5e\\x0003_\u00A6\\x0015V5\\x001f\u00AF\u00F8\u00C3\u008D/\u00CC\u00F8h\u00B5\u00F0B\u00BB\u00EB%\u00BD&\u00FC\nbuh\u00D7\u00E2\n\u00D9\u00C2\u009C\u00C2\u00B2au\u00BB\t\u00EE]\u0094\u00B3\\x0017\\x001e\u00CAD7p\u00DA$\u00C3\\x001c\u00B6\\x0016\u0097\u00FD\u00E3\u0082AL\u0081'\\x000e\u00C7\\x000b\u00D1\\x0018\u00BD\u00E7\\x0018\u00E5\\x0014^\u00DC\u00F9\u00B3\u00DCV\u0099\u00D8jb}\u00F7\u00E7\\x0016\u00C9\u00B2\u00A5\u00BB\u00BC?\u0086\u00B7\u00D6\u00C6\u00C8j\u00BF\u00B4\u00ADLScY\u00F5l\u0086\u00DFZ3\u00BEX^!9\\x001c\\x0017\\x0000p*\u00C1\\x0019~\\x0001\u00B2\u00BE\u00E2\u00B7\u00C0\u00D2\\x0014\\x000e\u00A3\\x001f\\x0016\u00DE,o\u00AF\u0089@B\\x0008\u00BB\u009B\u00E5`\u00A1#\u009A\u00BF\u00D0\u00FB&\u0094I\u00E6\u00CD}\u0092\\x0000\u00D0@\u00EDn\\x001c\u00E9\\x0007\u00DA^\u009F\u00FD\u00DD\u00FE\u00963\u009Ef\u00D1\u00C8@\\x0006\u0085\u00CC\no\u00CE,\u009Fi\u00C5\u00EF\\x001fo\\x001a\u00F5\u00A7;r[\u00F6\n\u00DE\u00D8iU\u00C7\u00C2\u00EF7\u00FFq\u00E0\\x000b&ir\u00E2\u00BCK9\u00F2_\u00D1\\x000c\u00D4\u009D\u009Fz\\x0005\u00CDL\u00DD\u00F5\u00E6\u0095\u00F7\u00CC\u00A0t\u00D73\u00CA\u00C4\u00C2!]'\u00C8\\x0017\u00E5\u0099s\u00C3v\u0092&\u00EA\n\u009Dq\u0085\t\\x001d\u0092&\u00ABI\u009A\u0090D:pLK\r-g\\\u00DFD\u009B\u00B7\u00DA\u00D7\\x0011\u00F1G\u00C6\u00D6,\u00BE\u00EE\u00EE\tw\u00FD\u00E3\u009D\u00DD\u0087:\u00DCs\u00D2\u00B7\u00FB\u008F(\u00F7\u00C9=\u00DB\u00C1c\u00DDK\u00EA\u009A\u00BFZy\u0080\u00FC%\u009E\\x0005R\r\u00A9\u009EF\u009D\u00E9\u0083g\u00B5?_\u00BA\u00B9\u00EF\u0083S\u00FE0p\u00EC\\x001f\\x0006\u00BE\u00FA\u0087\u009BF\u00FF\u00FE\u00C6\u0097\u00E9\u00FF\\x0003\u0086\u00CD\u00F8\u00F2\u0087].\u0097\u00B3_\u0088\u00B6\u008F[\u00BAv\u00BF\\x0013\u009F\u0086#g\u00AE\u00BD\u00F5\u00F9\u00FF\u00EC\u00F7\u00FC\u00EFo|i\u00EC\u00ACo\\x000f\\x001d\u00EB\u00A6\u00C2Wo:\u00F0\u00D7G\u00A7+\u0092\u00A8\u00FF\\x000b\u0093\u00DF\u00FBQx\u00B9\u00DD\u00F5G\u00C3x@-\u009BE\u0088\u008B\u00A4L\u00BC\u00FF\u00DC\u00F2\u00A7\u00C0s\u00E1\\x0015\\x0014\"Us\u00BB\u00E9\u0097:\u008D\u00CB\\x0014\u00B0\\x0004\u00ABT\u00F1{Y?\u00F9\u009D\u00AE%_\\x0007\u00F9\u009C~\u00EA\\x0015F^\u008F~\\x0012\u00F4\\x0012\\x0011\\x0015\\x001b\u00B4:8\\x000f\\x0004\u00DC\\x0008\u00D0@\u00EDi\\x001c=\u00ED\u0097%\\x0003\\x0019\\x00142+\u00BC9\u00B3|\u00A6\u00FC=\u00EF\\x0019\u00FB\u00A7[)\u008Eb\u00D2\u00E57\u008F\u00BE\u00EC\u00C6\u0091\\x0014\u0084\u00C0'\\x0012.W\u00DC\u00F2j\u009F\u00A1\u00B3)\u00A7K9\u00F2_\u0091\\x0004\u0099\u00FA\u00EE\u00D2+\u00FE\u00F6\u00DA_\u00EE|\u00F3/wM\u00A7\u00D5=\u008A\u00E8\u00D1E\u0082|929\u00D7o\\x0013yM\u00AEW\u00A5\t\u00AD\\x0011j<\u00A6\u00A5}-g\u00BF\u00AF;D\\x001b\u00CC\u00B9\u00ACe\u00F2\u00FB\\x0015\\x0019l\u009A\u00AF\u00F1{\u0096K~\u00AA!\u00D5\u00D3\u00A83}\u0090\u00A9\u00F6\u00CE\u0083'\u00DF_\u00B8\u00F1\u00E5\u00E9\u008B\u009F\u0099\u00F0\u00D5\u00CB\u00D3\u00BF\u00FDp\u00D1\u00A6]\u0087N\u00B9\u00D7\u00CA~!\u00DA\u0085\u0096z\u0092\\x0013\u009F\\x0003\u00AD]c\u00A6\u00F5\u00AF\t_,\\\u00B9\u008B/\u00B9\u00E1H\u00E7\u00C4y\u00CB\u009E|\u00ED\u00B3\u00A5\u00EB\\x001a\u0084W\u00DC\u00B5\u00B7d\u00D2\u00C4s\\x0013Xz\u00D5\u00B6{\u00F3\\x0003\\x000cX\u00C5\u0097S|\t\u00F6\u00E8\u008A\\x0000\r\u0091?%\u00C5\u00D2$\u00A2=\u00D1\"*V\u00FE\u0096!'\\x0008\u00F8 @\\x0003u\u00B8\u00C6\u0091\u00CC\\x0001\\x0019\\x00142+\u00BC9\u00B3|&\u00C7\u00C3\u009COW\u00F5\u00BE\u00EA\u009F\u00EF\u009C\u00F2\u00A7\u00DBs\u00BAm\u00A2=\u00D1o\u00AD\u00CC\u00FB\u00E2\\x0017\u00CA\u00E9R\u008E\u00AF\u00AFH\\x0015L}\u00FF\u00C7{\u009F\u00FE`\u00EC\u00EC\\x001f\u00C8|\\x001fPK\u00AE?b2\u00BB\u00BE\nt\u00CA\\\u00A7I\u0093\u00D5U\u00E3\u00F7\\x0014&t4i\u00A2\u0084\u0098h\u0089\u00AE\u00FD\u00FD\u00FA&\u00FAE\u009B\u00A6\u00F6sA\\x0012\u00ED\\x001cgK\u00FB\u008Et\u00D2ji\u00FB\u00F1`G\\x000e\u00B5wS\r\u00EB[\u00CE\u00EE?vNK\u00AD\n\u00B2\u00A2\u00AAm4\u0096\u00AB\u00BC\u00E0B\u00C7\u00CEQ\\x001fZ\u00B2\u00A6\u00916\u00BF\\x000bVy\u00F1Y\u00ED\u00E7v\u00EDm\u00F1\u00F1|8f\u0095\u00F2\u009Ax]\u00C84\\x000b \u00D8b\u00D4\u00EB|\u00FD\u00FB\u00E2\u00CB)\u00BE\\x0004S|\u008Cl\u00C5\u0083\u00E7K\u00B14\t\\x000e\\x0005g\u0082@j\\x0008\u00D0@M\u009B\u00C1\u00878\u00F8\u0093\u0095Y\u00F2S#\u0099\\x0015\u00C3\\x0004\\x000b?\u0090\u00C7\u0082\\x0005\u0096:%\u00FA\u0096\u00F2\\x0014lb\\x0018\u009FY@\t\u00C5\u0091\u0090\u00AA\u00A0\u0092\u00F7\\x001e\u00E1l._\u00BE.\\x001e\u00DC\u009B\u00E0\u00F4m\u00DD\u00D6\\x0003\\x0015\u0083j\u00AE\u00FE\u00A7>o\u00E8\u00B1&\\x000f\u00CFk\u00EC\u00F1\u00C2O\\x0018RC\\x0012dk7K\u00F5G\u00CE\u00AC\u00FA\u00A5\u0089V\u00C0\u00D2A#(\u00A6\u00C8\\x000f\u00F5\u0087;i\u00CE\u00A8\u00C8B\u008C\u00D3\u00F74wR\r\u00A9\u009EF\u009D#\u00AA\u00B6\u00F0B\u00E4y[\u00B9\u00F1\u00E0\u0081\u00A3\u009D!\u00F2\u00A1\u00A6\u0085$MR3\\x0002\u00A0! \\x0000\\x0002 \\x0010;\\x0002\u008A49\u00A5\u0084\u0082\u0086\u0095\u00F64\u009D&\u0083Bf\u00857g\u0099\u00FA\\\u00B7\u00B5\u0091D\\x0008I\u0091\u00BE\\x0013xi2\u00EA\u00A7?\\x000c\u00AE!\u00CA\r\u00AD\u00DD,\u00ED;\u00DAU\u00B7\u00A3uk};\t\u00C3b\u00C2n\u00F9s\u00F7\\x001e\u00EE\\x000c\u00B1\u00B4_\u00F6\u00B4S\r\u00A9\u009EF\u009D#\u00AA\u00B6\u00F0B\u0087\u008Fw\u00D3>.\u00BF\u00EE9\\x0016b\u008B\u0088\u00D5\u00CE=\u00A1xMb\u00F7$\u00A3B \\x0000\\x0002 \u0090\\x001a\\x00024P\u0093\u00CB<,\u00CBH\u00E5l\u00D8\u00D9J\\x0006\u0085\u00CC\no\u00CE2\u00F5\u00F9\u00E7\u00AD\u008D\\x0015Cj\u00AE\u00E1\u00A7>\u00864yh^\u00E3\u00F5\u00EA\n\\x001d\u00F2\u00DB\u00EC;J\u00A2DI\u00F5-]\u00DB\\x001b;Vll\u00DEq\u00A0\u0083\u00D6+\u0087\u0092\u00B6\\x001f\u00E8\u00A0\u00B0\u009AP\u008A\u00DA\u00BA\u00FF\u00E4\u008F\\x001b\u009A\u00A9\u0086\u00F5G\u00BB\u00F6\u0091\u0090b)\u0082j\\x0017.\u00D4\u00D2e\u00C0\u00A1\\x000fM\u00ED]\u00FB\u008E\u009CZ\u00B6\u00EE\u00C0\u00F6\u00FD'\u008AjQ[\u00F7\\x0001#\\x001d\u00EB\u00DE\u00B9\u00E7Hj\u009E^4\\x0004\\x0004@\\x0000\\x0004RI\u0080\\x0006j\u00DAo\u00BE\u00A8\u0091\u009FYUu\u00F0\u00DF\u00D2pb\u00E9\u00CF\\x0007\u00C8\u00A0(fE7\u00C1\u00C9\u00F8`\\x0018_\u00D5\u00FE\\x0016\u0093\u00D6\u00D9\u00BD&\u00864\u00A1\\x0008\u0097z\u00B2\u00EEz\u00DA\u00DB\u00D2\u00B5\u00A9\u00E1\u00C4\u008F\\x001b\u009Ah/\u00F9\u009D\u0087N7\\x001e\u00EB.>\u0091c\u00A6\u00C8B\u00A8&\\x001bv\u00B7\u00FD\u00B0\u00A1\u0099\u00EAF5\u00E4+\u00CC>\u0087Um\u00CF\\x000b5\\x001d\u00EF\u00DE\u00D9x|\u00D9\u00CF\\x0007\u00EAv\u00B6\u00EE<x\u00AA\u00C8v\u00B1\u00D3!MR9\u0090\u00A1Q \\x0000\\x0002i\"\u00A0H\u0093\u008E\u00F3\u00C5\u008F\u00F9d8~\u00DE\u00D1\u00BAd\u00DD\u0081\\x001d\u008D\u00C7\u00C9\u00A0\u00D8\u00CDYv\u008E\u00AC%\u00AF\u00C9\u00E0\\x001a\u00F2\u0092\u00F41\u00F651bM\\x001a\u00DB\u00CE\u00ED%\u00D3\u00CE\u00A5=-][\\x001b;\u00D6mo\u00FD~\u00C3\u00A1\u00EF\u00D6\\x001dtOK\u00D6\\x001d\\x000c+\u00B9\\\u0088jB\u00F5\u00A1ZQ\u00DD,\u00B55\u00FE\u00F4Um\u00E3Z\u0096\u00CA\u00FF\u00B0\u00E1\u00D0\u00CF\u00DB[\u00B75v\\x0008\\x0005\\x0010\u00EB1Jg:rj\u00FD\u008E\u0096\u00EF\u00D7\\x001fX\u00BCj\u009F\u0091\\x0016\u00AD\u00DA\\x001745,^}\\x0010\t\\x0004@\\x0000\\x0004@ \u00BE\\x0004V5\u00F0\\x0003\u00BE\u00E5\u00B3\u00FC\u00E0\u00BFt]\u00E3\u00CF\u00DB[\u00F66\u009F\"S\u00E2d\u00CE$\u008F\u0087(b$\u00AF\\x0018n6\u0092&\u00D6X\\x0013\u00C5k\u00F2\u00C2j\u009A\u00E6\u00A1\u00C5\u00C7\u00F5-4\u0095cJ{\u008FtQ\u00DA\u00DD|F2\u00EDj>S|r\u00BF\\x0016\u00AB\\x0012\u00AB\u00E7^=\\x0015Ym\u00E3\u008A|\u00E5\u00F7\\x001c\u00E9\u00A2d\\B\u00F8\u0081\u00B6\u00C1mj\u00EF>\u00D4\u00D6E?Ml\u00A4C\u00C7\u00BA$\u0093\u00E9\\x0014\u00B5\u00A8\u00A6\u00B6\u00A2\\x0012\u00FDDd\u00F1I\u00BE\\x000e\u00C6\u00B5\u00E4Oq\u00CFY|\u00E5\u00A9\\x0004\u00F9\u00CA\u00A0\u00FE\\x0016V\u00E0\u008F\u00FE#\u00FF\u00F8\u00D8sf\u00A4\u00FF\u00D8\u00C7\u00FC`\u00E3?\\x0019\\x000ee\u00CCo\u00B7\u009A]\u00BB!\u0096<\u00E2n\u00AD$\u00BF\u0095\u00BC\u0096\u008B\u00FD\u0095/\u00C1\u00C8\u00B9vK#\\x0005\u00BC\u00F6\\x0018\u00B5\u00BA\u00AF\u00B1xX\u00F1\u009A\u008CZMGii\u0090d\u00D5\u0091\r\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004B!\u00B0f\\x000b\u009B\u00D0Y\u00DD\u00C7$M\u00D4\u00C5\u00C3\u00B4\u00E0x\u00CF\u0091n$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010(\\x0019\u0081\u009F6\u00DB&t\u0086\u00CDk\u00AC|\u00E1\u00A7\u00CBTi\u00B2\u00FBH7\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000#@[T\\x0000E\u00D4\\x0004Von\u00BClpM\u00E5\u00A8\u009F\u00FA\u0099\u00C2`\u00D5\t\\x001dE\u009A\\x001c\u00EEF\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010`\\x0004\u00F6\\x001e\u00E9\\x0004\u008A\u00A8\t\u00AC\u00DE\u00C4\u00BC&\u00AB\u00FBN\u00D07\u00AAW\u00BD&\u00AB\u00C9k\u00B2\u00AB\u00E9\u00EC\u00EE\u00C3]H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u008C\u00C0\u00AE\u00A6\\x000e\u00A0\u0088\u009A\u00C0\u00F2\u00BA}\u00A20\u00D8\\x0017V\u0093`!i\u00B2\u008Bn\\x0003\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080J`\u00C7\u00C1\u00E30\u008BQ\\x0013p\u0090&\u00EA\u0084\\x000e\u00A4I\u00D4\u00F4Q>\\x0008\u0080\\x0000\\x0008\u0080@\u00B2\\x0008l\u00DB,Y\\x0015NbmI\u009A\u00A8\u00B1&\u00AB\u00FB\\x0019+t\u0086\u00CD\u00DB_9j\u00D5e\u0083g\u00924\u00D9\u00D9\u00DC%L_\u00F1\u00F9K\u0083\u00AE\u00E1\\x0013\\x001dq\u00CA\u008C\u00E3 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x000e\\x0002\u009B\u00F7\u00B5\u00C02F}+U\u00AF\u00C9\u00CC\\x001e\u00A3V\u00F5\\x001d\u00BF\u00BB\u00B2\u00B2\u00F2\u0092\u00AA\u00AA\u00AA\u00E1\u00F3\\x001a{\u00EA\u00B1&;\u009A\u00BB\u0084\u0089DI\u00DB\u00CEZJ]\\x0007\u00BF\u00A3\u00B4s\u00E9\\x0004:\u00E2\u0094\\x0019\u00C7A\\x0000\\x0004@\\x0000\\x0004@ \\x001d\\x0004~\u00DD\u00D3\\x000c\u00CB\\x0018\u00F5\u00ADT\u00BC&CjH\u008A\u00F4\\x0017\u0086\u00C1\u00EEh:kO_\u00D7\u00CE\u009F>\u00F2\u00FE\u008D\u009F\u008C\u00A0\u00F4\u00CB\u00A7OR\u00DA\u00F4\u00F1\u00F0\u00B7\u009E\\x001d`\u00F1\u00A3\u00D0\u009F\u0094SX\u0082\u00F7\u00C1\u00F5\u00DF\u00F5\u00B8\u00E3\u00BBe\u00A2\u00AB\\x0017\u00CE\u0095\u00C9C%Hfs\u00BF\\x0016\u00BE\\x0005\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00A6\u00B3\\x001bw\\x001d,\u008Fe\\x000cl\u00CB\u0082\u009D\\x0018\u00EC,K\\x000f\tZ\u0088:\u00A13\u0093&p\u00FA\\x0019^\\x0013~\u0085\u008E\u00F0\\x0006\u0090\u00E6\u00B8x\u00F2\u00C7\u008B'(\u00FD\u00F0\u00DBq5\u00B5\u00FFp\u00A1\u00ED{%\\x001d[~\u00BEu\u00F9\u00F9\u00A3\u00CB(un\u009BK9\u00E97\u009C,\u0085\u00984\u0087S\u00BDe\u00DA#\u0093\\x0007\u00D2\\x0004C\t\\x0008\u0080\\x0000\\x0008\u0080@x\\x0004\u00EAv\u00EC\u008F\u00C22R\u0099\u00CBf\u008C\u00FF\u00AF\u00BF\u0092\u00A5\\x001e3t\\x0001dX:I\u0093goi\u00B0\\x0013\u0083\u009D\\x0015\u00A54)\u00C4\u009Alo:kO$8~;\u00F1\u00C3\u00C5\u00F6\u00A5\\x0017\u00DB\u0097\\l\u00FB\u00F6\u00E2\u00B1\u00C5\\x0017\u008F~}\u00B1e\u00C1\u00C5#_\u00E4\u009B\u00E7\u00E7\u009B>\u00CD\\x001f\u00FC\u0088\u00D2\u00E9\u00A5#\u00984\u00B1\u0094p\u009D\u00EA\\x000e\u00D1\\x000e\u00AE\u00FF\u00CE\u00F4\u00A7\u00E7q\u00BE>N\u00E7Z\u00EA,\u0099M\u00D4Ra\u00F3q\\x0010\\x0004@\\x0000\\x0004@ \u00B3\\x0004\u00D6m\u00AD\u008F\u00C22*\u00BA\u00A4`\\x001c\\x0019\u00FA\u00FB'\u00AF\u009BqP\u00B9\u0090a\u00C2\\x0002\u00DB\u00B2`'\\x0006;+$\u00FB+\u00F0\u009A\\x000c\u009F\u00B7\u00BF\u00A7\\x001e\\x0006\u00EBx\\x0003\u00DA\u00B8x\u00EC\u009B\u008B\u00AD\u008B.\\x001e]x\u00F1\u00C8W\\x0017\\x000f\u00D7\u00E6\\x000f~\u0090o|'\u00DF\u00F0V\u00BE~V~\u00EF\\x000cJ\u00FE\u00A4\tQ\u00D0\u00D4\u00E2\u00F81\u00EB\u00F5\u009B\u00A1\u00A0y\u00E8\\x001d\u009A\u008A\\x001c\u00BA@\\x00154\u0085\u009COj7\u00D2r.\u00AF=\u00E9N\\x001b|\\x0017\u00BC\u00FF_\u00AF\\x0016\\x000e\\x0015\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002\u0081\\x0008\u00AC\u00D9\u00BC;\n\u00CB8\u00D4b\u009E4\u00CBup\u008Cn\\x0001\u00AF{\u00F6}z\u0093\\x001f\u00F3\u00AC\u0093A,\u0098N5\u00CF\u00FB\u00EF\u009A^\u00F5\rK\u00AA\\x001b\u00C1\u0082\u00DD\u00D4sZ\u008EXL\u00E7\u0082\u00829\\x001e\u00BA@\u00AB\\x00153\u00CA\u009C\u00B3\u00C7V\\x0007\u009B\u00FD-d\u00E6\u009D\\x0014\u00B6\\x001b\u00C1\u00A4\tI\u0091\u00FE\u00DC\u0084N\u00C1k\u00B2\u00AD\u00E9\u00AC=\u0091/\u0084\u00E6nT7\u00C9\u0097\u00F9\u00E6\u00CF\u00F3\\x0007\u00DE\u00CF\u00EF;\u00BFoN\u00BE\u00BE&\u00BFgz~\u00F7\u00D4\u00FC\u0096\u00D7(\\x0019\u00D2\u00C4R\u0082.A4\u00BE$/\u00966\u00FD\u00F2\u00E0\u00EF\u00DF\u0087]Km\u00C9R\u00E3\u00FF\u00EA\u00DDR\u008E+\u00C2\u0082\u00F2P\u00CE'\\x001f\\\u00C0\u00E5\\x0014\u009E\u00AB\u0097\u00F6\u00CE\u00B3\u00EF\u00BFS(J\u00BF\u0084\u00A8Q\u00C2\u0096\u00E2 \\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00F0\\x0004V\u00FD\u00B2#\\x0012\u00CB\u00A8\u0098B\u00DE\u00E0\u00EAf\u0091\u00990f\\x001c\r\u00F3G\\x0006\u00D1\u00C9t\\x001ay\u008C\u00D2\u0094\\x00135K\u00BAT\u00F5\u00CD\u00A86W\u00B3\u00A4\u00CA\u0091g\u00D9f?b1\u009DF!\u00FAK\u00BEb\u0094-u\u00A6#T\\x0014_OA!\u009A!V\u00AC\u00B3\u00B3-\\x0016\u00C5\u009A\u00CCm\u00A8\\x001c\u00B9\u00F2\u00B2\u00C13h\u00F1\u00B0\u00D3\r8t\u00B92ws\u00E8\u0093|\u00C3\u00BC\u00FC\u00BE\u00D9\u008A\u009Bd\u00F7\u00B4\u00FC\u00EE7\u00F3\u00BB\u00A6\u00E47\u008Da\u00C9Q\u009A\u00F0\u008D)\u00D4[W*\u008A\u00EF\u0084\u00D3\\x0013\u0085\u00CC\u0084r\u00FC\\x0018E\u00B8\u00E9\u00F7\u00CF\u00E9\\\\x0015\u00B1\u00AAct\\x0005\u00C3\u00FF\t]\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002A\t\u00AC\u00D8\u00B05r\u00CB\u00A8\u00D4M$M<\u00CD\u009F\u00A1c\u00F8\u00D6\u00F1\\x0007\\x0015\u00DD\u00A0[\u00D8\u0082\u0089t8b\u00B1\u00A4\u0086B\u00B2\u00D0Cd\\x0014\u00B1b\u00BD\\x001cg\u008E-\u00D6\u00D9\u009F4\u0099\u00D7P9J\u0097&\u0087\u00CEn\u00B3%\u00F2\u009A\u009C;\u00B24\u00E0Ce\u00EEFq\u0093\u00A8\u008Ad\u00E7\u00E4\u00FC\u00CEI\u0086.1I\\x0013s\t\u008A\u00B60\u008E\u00F0>\\x0012>\u009B\u00E0\u00B8*M\u00BER\u00A5\t\u00CB\u00E9t\u00AEV\u008E.P\u00D4l\u00EF0a(j\\x000e\\x000e\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\u0080$\u0081\u0095\u00E45\u0089\u00C02*\\x0006\u008E\u00A6\\x0008,\u00C6\u00D1\u00B0t\u00FC\\x0007\\x0017\u00F3\u00C7\u00CC\u00A2\u00A5z\u00FCA^\u009A\\x0018\u0096\u00D4\\x0010+\u00B6#\\x0005\u00D3i\\x0014b\u00F9`xS\u0084\u00B5\\x0012\u00DB_\u00DD:;[d\u00D5k2\u00A3\u00E7\u00A8\u0095\u00FD\u00C7\u00EF\u00D2\u00F65yd\u00DE\u00FE^\u00A3V\u00FDQ\u00DDr\u00CD\u00E9\\x0006t7-\u00C97\u00BC\u00A3(\u0092]\u00AA\"aI\u00F7\u0097X\u00BD&\u009E\u00D2\u00E4\u0090\u00EA\\\u00FA\u00CAvWx\u00A0_\u00A9\u00BE#%\u00A7v\u00FF4\u00C7\u0094\u00E8\u00DC\\x0007g\\x001cTkN\u00F3a\\x00055\u00F3\u00CE\u00B3JT\u0091d\u00E7C6\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00B0\\x0013X\u00F5\u00EB\u00AE(,\u00A3n\u00D1\u0098\\x001dTl\u00A2f\u00B0\u0098\u0098\\x0010J\\x0013'\u00D3\u00E9,M\u00B4\u00E9\\x001b\u00EED\u00C7#\u00BA\u00FD\u00D5L\u00A7\u008B4\u00D1\u00C5\u0090\u00D6\\x0004\u008B\\x0012R\u00BF5\n1Yg^\u008A\u0099\u00EB,\u00885\\x0019>\u00AF\u0081\u00A4\n\u009B\u00D0\u00D9zH\u0090\u00C8k\u00E2K\u009AX\n!M\u00B7\u00C4(Vm\u0083\u00F2\u00A7:;\u00A5\u00AD\u009B\u00A2#\u00EC8\u00F0\u00F7\u00EF\u00BF\u00CD\u00CE\"\u008D\u00A2\u00E6d1A\u0082sU\u00E8Z\u009E\\x0019\\x0007\u0095\u0092\u00B5+j7[\u00D8(\\x001c\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001O\\x0002?m\u00DE\\x001b\u0085e\u00A42\u0097p\u008B\u0087\u00E9]\u00DD\u00B8\u00CA\u00DBj\u00E8k\u00C1\u00E41\u008B\u00E9b:-\u0086\u00DBb^\u00D9\u00B7\u0085\u0083\u00BAm\u00B5\\x001c\u00B1\u0098N\u00DE\u00E0\\x001a\u0097V?\u00B0\u00EA\\x0015jX8\u0091\u00AB\u00A7&\u00B6\u00BE3Yg\u0091\u00C0`\u00AD&i\u00F2\u00C7\u00C13z\u008DZ9@\u00E85\u00D9z\u00F0\u00AC=\u009149\u00FA\u00F5\u00DF)\u0094\u00C4=Q\\x001e\u00B6xXX\u0088\u00D4\u00C1:\u0095\u00BE\u00A8\\x000eR\u00A7\u00E3D\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0008\u0095\u00C0\u009A-\re\u00B6\u008C\u00A16'\u009E\u00C6T\u00E85),\\x001e\u00DEr\u00F0\u00AC=}\u00F5\u00F9|\u00FB\u00C6\u00AF\u00C2#\\x000b?z\u008B\u00A4\u0089\u00B0\\x0010\u00A9\u0083\u00AA4\u00F9NT\\x0007\u00A9\u00D3q\"\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0084J`\u00ED\u00B6\u00C62[\u00C6P\u009B\\x0013Oc\u00AA\u00C5\u009A\u008C\\\u00D9\u009C\\x001ek\u00C2O\u00E88U\u009A\\x0004\u0087\u00E4\u00BFx6\\x001b\u00B5\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0000\\x0004\u00D6m?\\x0004\u00CB\\x0018\u0080\u009B\u00AFS\u00B4\t\u009D\u0091+\\x0007\\x0018\u00D2\u00E4\u0091y\r4\u00C1C\u00D3<\\x0014k\u00E2\u00AB,d\\x0006\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081t\\x0013\u00A8\u00DB\u00D9\u009C\u00EE\\x0006\u00C6\u00A1u\u0082X\u0093\u00E1s\\x001bz\u00EA\u00FB\u009A\u00C4\u00A1\u008A\u00A8\\x0003\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0084\u00C0\u00FA]-1\u00A9I\u008A\u00AB!X<\\x000ci\u0092\u00E2\u00FB\u008D\u00A6\u0081\\x0000\\x0008\u0080\\x0000\\x0008\\x0014C`\u00C3\u009Ec\u00C5\u009C\u008Ese\\x0008\\x0008&tdbMd\u008AF\\x001e\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H\\x0019\u0081\u008D{\u00DBS\u00D6\u00A2\\x00186G\u00B4xxnC\u00AF\u0091\u00885A\u009C\r\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008X\t\u00FC\u00BA\u00EFd\\x000cmy\u00CA\u00AA\u00840X<x \\x0000\\x0002 \\x0000\\x0002  K`\u00D3\u00FES)\u00D3\\x00011lN\u00C0\u00C5\u00C31l\t\u00AA\\x0004\\x0002 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x0002\\x0002\\x001e\u00B1&\u008B\u00BE\u00FB\\x0001\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004JF@\u00E45\u00E1\\x0016\\x000f\u00E7\u00F35H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002 P2\\x0002\\x0002i\u00F2\\x0008\\x0017\\x0006[\u00B2z\u00E0B \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002 @\\x0004\u00E05\u0081[\\x0008\\x0004@\\x0000\\x0004@\\x0000\\x0004@ F\\x0004<\u00C2`!\u00DF@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u0094\\x0004 Mb\u00A4\\x0013Ky\u00E3q-\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088'\\x0001L\u00E8@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\u0080\u00E07t\\x0010\\x0006\\x001bO\\x0015\u0089Z\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\\x0016\\x0008`\u0085N\u008Ctb\\x0016:\\x001c\u00DA\\x0008\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00EE\\x00040\u00A1\\x0003i\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002 \\x0010#\\x0002\u0090&1\u00BA\\x0019\u00D0\u00D1 \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\u0098\u00D0\u00814\\x0001\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001A\\x0018\u00EC\u00F0y\r=G\u00AD\u00BCl\u00F0\u008C]Mg\u00A1\u00DD@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u0094\\x0004D?\u00EF\u0087\u00DF\u00D0\u00C1/\\x0007\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0094\u0089\\x0000&tb\u00E4\u00C2*\u00A5&\u00C5\u00B5@\\x0000\\x0004@\\x0000\\x0004@ \u009E\\x0004D\\x0013:\u00F0\u009A\u0094I'\u00C6\u00B3\u008B\u00A0V \\x0000\\x0002 \\x0000\\x0002 PJ\\x0002\u00DA\u0084\u00CE\u00A8\u0095\\x0003\u00C6\u00EF\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj8\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u0099\\x0008`\u00F10&t@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004bD\\x0000a\u00B01\u00BA\\x0019\u00A5t\u0097\u00E1Z \\x0000\\x0002 \\x0000\\x0002 \\x0010O\\x0002\u00F8\u00E5aH\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\\x0010yM\u00B0\u00AFI\u0099f\u00D7\u00E2\u00A9^Q+\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010(%\u0081(y\u00F8\u0087;\u00F2H \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002Y#P\u00DC\\x001b~\u0094+t\u00B2v'\u00D0^\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\"\\x0010\u00BA4ydnC\u00AF\u0091+\u00FFX\u00FCF\u00F5\u00B8= \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\\x0019$P\u00B44\u00A1_\u00CB\u00E99re\u00FFq\u00A1\u00EFkb\u00DC\u008C\u00FC\u008A<\\x0012\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u00BA\t\\x0014\u00EC~QA\u00B5QnT\\x000fi\u0092\u00EE.\u0088\u00D6\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000O :i\\x0012\u00DAn\u00B0\u0090&\u00E8\u00B2 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x001d\\x0002\u0090&\u0098$\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001H\u0093\\x0018\u00DD\u008C\u00EC(b\u00B4\\x0014\\x0004@\\x0000\\x0004@\\x0000\\x0004\u009C\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\\x00144\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\u00942\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088@v\u00A4ISm\u00BF\u008A\u008A~\u00B5M\u00B6\u009F/n\\x001a]]qiE\u008E~\u00DE\\x0010\u00BFl\\x000c\\x0002 \\x0000\\x0002 \u0090L\\x0002u\u00C3*h$/$\u00CBh_[[}iE\u00F5\u00E8\u00A6\u00F0\u00C7\u00F9bJV\u00CF\u00F5\u00B4>ekZ\u00F9z\\x0002\u00A4I\\x001e\u00D2$\u00FCg\u00B5|\\x001d\\x001am\\x0001\\x0001\\x0010\u00C8\\x001e\u0081\u00BA\\x001c/J\u00B8\u00CF\\x0005\u00AB_\u008C\u0080p\\x001f\u00D0\u008A)\u00D9[\u009A\u0094\u00B5i\u00E5\\x001b\u00C9!M M\u00E0.\\x0002\\x0001\\x0010\\x0000\u0081\\x0004\\x0013`N\\x0005\u008BG\u0084\u00BDsV\\\u009A\u00AB+\u009F}\u00F5\u00D6\u0088^\u00D2$\u00C1M+\\x000e;\u00A4\t\u00A4I\u0082\u0087$\u00EF'\u00BF\u00B8\u00C7\\x0003\u00E5\u0083\\x0000\\x0008\u00C4\u009E\u0080\u00FBd}umm\u008C\u00878\\x000fi\u0092\u00E4\u00A6\\x00157\u00F6B\u009A\u0088\u00A4\u0089\u00DA]\u008C9K\u00B3\\x0018W\u00DCk\u00CA\u0091B\\x001e\u00BD\u00EBsgY\u00E7\\x000e\u00CD\\x0005z\u00CE,\u00C6~,\u0088\u00F1\u00A3^\u00DC\u00F3\\x0000\u00F2 \\x0000\\x0002I#\u00A0\u00DAoO\u00EF\u0088}\u00DA\u00A5&\u00C7\\x0007\u00A6\u00D4)^\\x0016\u00D3`N\u00E3\u00BC\u00EEz\u00A1\u00F2\u009D%\\x000e_\u00B2\u00FEY\u00EAD\\x001a\u00ACd\u00A4IL\u009A\u00C6\u0086V\\x0013Fu\u00B2iX]~\\x00057\u00EB\u00A4\u00FC\\x0019\u0082\u0081\u00804\u00B1J\\x0013\u00AEKq\\x0011U\\x0005\u00DCL\u009A\u00D4\u009A\u00A76suf\u00F1\u00C1\u00F7c\u00AF\\x0002C\u00B8\u008B\u00A1t\\x0005\\x0014\\x0002\\x0002 \\x0000\\x0002I$\u00C0\u008F\u00B1\u008E/~fi\"\\x001e\u0096\u00CD\u00D2\u00C4\\x0014T\u00AB\u00BC\u00AC:\u00A8\\x0013\u009B4\u0091=\u00D1[\u009Ah\u00E6\u0089\\x0015X\u00E6\u00A69J\u0093\u009C5\u00D0G\u00B4\u00DC\u00C4o\u00BF\u00CA\u00984q\\x0008\u0095\u00E2\u00EE\u00BA\u00A6\u00FE\u00B8N`9\u00A2\u00FDi\u00B8R\u008C.n\\x001c1\u00CD\\x000ej\u0092\u0085\u00EF\u00D3L\u00E3{Ge\u00FB\u00BD\u0097\u00C8\\x000f\\x0002 \\x0000\\x0002\u00D9$ \u0094\\x001a&[.\\x0010\\x0010\u0085aY?\u00DD\u00EA\\x0002\u00D7Kp\\x001d\u00B4E\u00D2D\u00EAD\tiBw3.Ms\u0092&dU\\x000bZ\u00C4n@\\x0003\u00BE{C\u009Ah\u00AE\\x0011\u00AD'\u00A9.>\u00EB\\x00023&/4\u00C7\u0089\u008A\u009EW\u0085\u00A6o\u00AD./\u00B5W\u00D9\u00B5\u00B6\u00E1\\x0007\\x000bx\u00DB\u00B29\u00FA\u00A0\u00D5 \\x0000\\x0002 \u00E0J\u00C0\u00B6\u009E\u00C5\\x0018\u00AB9\\x0001!\\\u0095\u00A9\u00BER\u009A\u00A5\t?7!4\rvkm7\\x0007.'\u00CAI\\x0013\u00BD\u00BD\u00E5n\u009A\u00934\\x0011-\u00D2\u00D6\u00CDep\\x0003\u00971i\u00E2\u00B5\u00AF\u0089\u0083\u0092\u00E0c\u0091l\u00AA\u00C2>\u0085\u00C9\\x001d\u00B1\u00AEGwYv\\x001f\u00C6\u00FC\\x001c\u0086-\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u0085\u0080\\x001eJ\u00A2\u00BDvZ\u0087e\u00EB\u00CA\\x001d\u00D3\u00E0\u00EF:\u00AA[\u00F1\u008AbM\ny\u00DC\u0097\\x0016{\u00AD\u00D0\\x0011\u00DF\u00CA\u00B24\u00CD-\u00D6\u0084\u0097 \u008E\u00A1\u00BB\u00BE\u00BA%\u00A4\u0089)\u00D6\\x0004\u00D2\u00C4W\u00EFAf\\x0010\\x0000\\x0001\\x0010(;\\x0001\\x001a\u00B7\u00C5q\\x0018\u00BC\\x000f#\u0099\u00D2$FM\u00834\u00C9\u00D3\u00C6\u00AC\\*\u00A8\u00A7\u00A2\u00FC\nr\u00BB\u00C1JN\u00E8\u00F0\u008E>W}\u00ED\u00A0u\u0082\u00BB\u00B9\u00CA>\n\u00A0\\x0002 \\x0000\\x0002 \\x0010#\\x0002\u00CC\u0085 \\\\x0018\u00E2 M$'tL3\u00FB.\u00CE\u008F\u00E8\u00BC&\u00F1h\u009A\u0089\u00AD\u00C9D\u00DA\u00C2\\x001b\u00F4)*L\u00E8\u00C8\u00DBx9i\u00A2/\u0082\u00F2\\x0008\u0083\u0095\u0096&\u00FA\\x001ac\u0093\u00F3P\\x000bk\ni\u0091U\u008C\u00C6\u0088\u00A2\u00B4\u00A3\u00FC\u00ADDN\\x0010\\x0000\\x0001\\x00100\\x0008\u00E8A\\x0018\u00C2\u00A0\\x0007c\u00C1\u0081\u00FF0\u00D8\u00F2K\\x0013cQn\u00B9\u009A\u00A6U\u00C0\\x001a\\x001d\u00AC\u0093\u00D1\u00C9\u009BW\u00B0\u0086\u00B2\u00C8\\x0003\\x0013:\u00B6}M\u00F8\u00C5\u00EEFh\u0088%\\x0002Y^\u009A8\u00C4W{\u00AF\u00C2\u0087\u0099\\x0007\\x0001\\x0010\\x0000\\x0001\\x0010\u0090!`\u00DD\u00BBA\u00B4+\u0095\u00FF\u00C5\u00C31\u0090&\u00DA>\"\u00B6\u00D5\u00C8\u00E6\u00DDo\u00A3k\u00DA\u008A\u00BC%\\\u00B2zX\u008E\u00FB)\"\u00E65\u00A9\u00E6\u00B7\\x0001s\u00F4`\u00C9\u00DCG.\\x000f\u00A4\u0089\u00F7\u0096k\u00E6YLa\u00B0\u009AK\u00C3\u00F2\u00E4\u00C0_\u00E2\u00B3\u009B\u00C23\\x0004\\x0002 \\x0000\\x0002\u00EE\\x0004lk\\x000e\u00CC\u0081\u00AE\u00F6\\x0019\\x0019\u0089-\u00D7\u00A4\u00A2Y\u00A3\u009B\u00D0\u00D1\u00C7\u00C9\u00B25M\u00A9\u0080\u00B6pZ[\u00BB*\u00DCr\u008D3pa\u00FD\u0080bv\u00A4\t\u00FC\u009F \\x0000\\x0002 \\x0000\\x0002  &P\u009E\u00B8\u00C0`+t|\u00BE\u00DAE\u00D6\u00B4\\x0008w\u00C1\u00C8\u008841\u00FFX\u00B6\u00F3\u00C6kB\u00BFY\u0094\\x00071L\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0004&\\x0010\u00DB\u00B1\u00DD^1Q\\x001b\u00DD\u00A4I\u0082\u009A&\u00ACj\u00E0{\u00AA\u009C\u0098\\x0011iR\\x0014#\u00F8QA\\x0000\\x0004@\\x0000\\x0004RD\u00C0\u00B6}\u0099\u00FBN\u00F0>\u00BD\\x0014>@\u0085\u00EF5)e\u00D3\u00E05\u00B9C\u00D1P>\u00EEwt=\t%\u0083\\x0000\\x0008\u0080\\x0000\\x0008$\u009E@!\u0084B\u00F5\u008B[w`+\u0091\u00B9\t_\u009A\u0098\u00A2C\"n\\x001a\u00A4\t\u00A4I\u00E2\\x0007\\x0002(K\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0090\"\u0080\t\\x001d)L%R\u00D0\u00D0\\x001f \\x0000\\x0002 \\x0000\\x0002 \u0090y\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0001\u00DF\\x000c\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A\u00A4_\u009At\u00AE\u00C8w.\u00B6\u00A5\u00F9\u00F9NJ\u00E6\u00E3x\\x001e@\\x0000\\x0004@\\x0000\\x0004@\u00A0\u00EC\\x0004 MR%M4\u00A9\u00C1d\u00C7\u00FC|k\u00A0\u00C4\u00CE5TK\u00D9\u00FB(*\\x0000\\x0002 \\x0000\\x0002 \u0090)\\x0002\u0090&\u0089\u0097&\u008A\u0086(B\u0088\u00C8\u00C8\\x0017C\u00ACd\u00EA\u00D9@cA\\x0000\\x0004@\\x0000\\x0004\u00CAB\\x0000\u00D2$\u00A9\u00D2\u0084)\\x0012\\x0019a\\x0011n\\x001e\u00C3\u00A1R\u0096\u00FE\u008A\u008B\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u00A4\u009E\\x0000\u00A4I\u00C2\u00A4I\u00B9\\x0014\u0089P\u00DF\u00B0I\u009F\u00D4?$h \\x0008\u0080\\x0000\\x0008\u0080@)\t@\u009A$\u00C3\u00B2\u00C6J\u0091Xd\n\u00F3\u00A3\u0094\u00B2\u00D7\u00E2Z \\x0000\\x0002 \\x0000\\x0002)&\\x0000i\\x0012w\u009B\\x001a\u0096(\u00D1\u00E2E\u00F8\\x0010W=Z6\u00AC\u0089!\u00A5\u00AA\u0099\u00DF_9\u00C5\u0083\\x0005\u009A\\x0006\\x0002 \\x0000\\x0002\u00A5!\u0090$ib\u00D45#\\x001f\\x0016\r\u00C8V\\x0019$-\u00AA\u00CC\u00D3\u00B9,\u00F9ee\u009CH\u0085\\x0004\u00BE\u00BA\u00DF\u008B\"?\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00D8\t\u00E4k\u00F2E\u00A4\u00E5u\u00FB.\\x001b<\u00A3\u00E7\u00C8\u0095\u00FD\u00C7\u00ED\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj\u00F8\u00DC\\x0006\u00FA\u009B\u008E\u00EEj:[L\u00D1\u00BE\u008Dk\n\u00EEn\\x0000Q\u00C2\u00E4\u00C8\\x000f\u00FE\u00B5\u0088'.&V\u00FC\u00CA\\x0014\u00AA\u008Fg\u00C9\u00C8\\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002.\\x0004\u008A\u00D0%$< M\u00EE\\x0008\u00C7\\x0012\u00FB\\x0012\\x0001\u00D1\u00C9\\x0011\u00A7\u008E\u00A2\u00C8\\x0014?\u00DE\u0094\\x0000n\\x001b<\u00A5 \\x0000\\x0002 \\x0000\\x0002 \u00C0\\x0008\u00C4W\u009A\\x0014W\u00B3\"\\x001bV\u00BA\u00D3\u00D7\\x000f\u00CD\u00AF\u00AF\u00C8\u00D7\u00C8%\u00CA\\^,\u00C9\u00AAmyY\u00E1\u00EA \\x0000\\x0002 \\x0000\\x0002\u00E5 \\x0010\u00A5\u00D7\u00A4\\x001c\u00ED)\u00B5\u00E1'K/#JH\u00BB\u00E4\u00CB-JL\u00B7\u0083\u00E4\u0094t\u00CD\u00CB.\u00A7\u00B2\u00D0\u0091\u00D0F\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u009D\\x0000\u00A4I\u00D0P\\x001dY\u00D3\\x001e+Ebkl:Z\u0081\u00E7\\x0019\\x0004@\\x0000\\x0004@ E\\x0004 M\\x0002I\\x0013\u0099\\x0019\u009C\\x00049\\x001bd\\x0004\n59A-J\u00D1#ZjG \u00D0\u0081\\x0000\\x0008\u0080@\u00B9\t@\u009A\u00F8\u0097&\u009E\u00BA$\u00A1&\\J\u00A0\u00C4\u00DB\tT\u00EE\u00C7\t2\\x0002\\x0004@\\x0000\\x0004@\u00A0x\\x0002\u0090&~\u00A4\u0089\u00A7\u00F1VbJ\u00FC\\x0014\\x0018\u00C3\u00CC\u00DEm\u0084:I\u00F8-\u008Ea\u00AFC\u0095@\\x0000\\x0004@\u0080#\\x0000i\"mf2d\u00B3\u00BD\u00D6\\x001c\u00A5@\u0081a\\x0014\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088+\\x0001H\\x00139i\u00E2>\u0089\u0093\u00D0\\x0019\\x001c\u00F7N\u00E9.\u00C5\u0094\u00D0\\x00139tq\u00ED\u00FA\u0089\u00F7o\\x0001,\\x0008\u0080\\x0000\\x0008\u00A4\u0094\\x0000\u00A4\u0089\u0084}\u00CD\u00A0.\u00D1\u00BA\u00BB\u00A7\u00FBD\u0082^J\u009F\\x001c(\\x001b\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u0088\\x0008@\u009Ax\\x0019W\u0097mK22\u00AF\u00E1\u00E1>A\u00E8\u0089W\\x0017\u00828\\x0003\\x0001\\x0010\\x0000\\x0001\\x0010\u00F0C\\x0000\u00D2\u00C4\u00D9\u00AE\u00C0$\\x001b=\t(\u00FC<T\\x0011\u00BDF\u00A0X\\x0010\\x0000\\x0001\\x0010\u00C8\\x0008\\x0001H\\x0013\\x0007iB\u0081\\x0014n\u00FE\u0092\u00EC\u00B9\n\u00A0N\u00A0N@\\x0000\\x0004@\\x0000\\x0004JB\\x0000\u00D2D$M\u00A0K\u009C:\\x001f\u00E4ZI\\x001e\u00CB\u008C\u00BC\\x0018\u00A1\u0099 \\x0000\\x0002  $\\x0000i\"\u0094&\u00CE\u00BF\u00D5\\x0007\u00CB\u00E4\\x0012\\x0014\u008C5;\u00E8\\x001e \\x0000\\x0002 \\x0000\\x0002E\\x0013\u00804\u00B1\u00FF\u00AC\\x000ct\u0089W\\\u00A7\u009B:\u00C9\u00DETW\u00D1\\x000f!^\u009B@\\x0000\\x0004@\\x0000\\x0004x\\x0002\u0090&f3\u00ECbta\u0081x\\x0002N\u00A02\u00B2j\t\u009D\\x0001\\x0004@\\x0000\\x0004@ 2\\x0002\u0090&\u009C4q\u0089\u00F4\u008C\u00EC\\x0006$X)C\u009D\u00A0W\u0080\\x0000\\x0008\u0080\\x0000\\x0008D@\\x0000\u00D2D\u0097&\u00D0%\\x0001\u00BA\u0097\u00A3:\u00C1\u00B4\u008E\u00D7\u00A4X\\x0000\u00DA8\\x0005\\x0004@\\x0000\\x0004\u00B2A\\x0000\u00D2D5!.Kr\u00F2\u00B0\u00B2\u00AEV\u00D6i\u00CDN*7\u00EF\u00CF\u00C6\u00A0\u0090`O\\x001en\\x0010\\x0008\u0080@*\\x0008@\u009A0i\u00E2\\x0010\u00FA\n\u00FB*\u00D3\u00CB\u009D\u00D4\u0089\u00CC\u00B9\u00C8\\x0003\\x0002 \\x0000\\x0002 \\x0000\\x0002f\\x0002\u0090&\u00A4K\u0086\u008AwW\u0083.\u0091|Z\\x001c\\x0001V\u00E0\u00FD\\x001b\\x0004@\\x0000\\x0004@\\x0000\\x0004\u00FC\\x0012\u00804q\u00D8\u00F5\\x0015+M$u\t\u00CB\\x0006y\u00E7\\x000b\\x00172\u0083\\x0000\\x0008\u0080\\x0000\\x00088\\x0013\u00C8\u00BC4q\u009A\u00CAA\u00A7\u00F1K\u00C0qR\\x000c\\x0001\u00A1 \\x0000\\x0002 \\x0000\\x0002 \u00E0\u0083@\u00B6\u00A5\u0089\u00D3\u00BB>B_\u00FD\u00EA\\x0012\u0096_\\x0018t\u0082y\u00B1`0q\\x0016\\x0008\u0080\\x0000\\x0008d\u0095@\u0086\u00A5\t\u00E6 B\u00EF\u00F4@\\x001a:R\\x0014\\x0008\\x0002 \\x0000\\x0002\u00D9#\u0090ei\"Z\u0095\u0083\\x0010\u0093\"\u009F\\x0001\u00A1:\\x0001\u00D5\"\u00A9\u00E2t\\x0010\\x0000\\x0001\\x0010\u00C8\\x0012\u0081\u00ACJ\\x0013\u00C7\u00A9\\x001c\\x001f\u0093a~C\u008E\u00B3\u0092\\x001f\u00D3:Y\\x001aA\u00B2\u00D2\u00ABqOA\\x0000\\x0004JH \u00B3\u00D2D\u00E82\u00C1\u00EEja(3\u00C8\u00BE\\x0012>\u00C0P\\x0006 \\x0000\\x0002 \u0090>\\x0002\u0099\u0094&\u00B0\u009DQ\u00DBN\u00E1j\\x001d\u00C4\u00C3F\u008D\\x001d\u00E5\u0083\\x0000\\x0008\u0080@*\\x0008dS\u009A\u00C0e\\x0012\u0086w\u00C4\u00FD\\x0001\\x0010N\u00EB\u00A4\u00E2\u0099I\u00DF\\x000b\nZ\\x0004\\x0002 \\x0000\\x0002\u00B1\"\u0090=i\u00828\u00CD\u00D2\u00E8\\x00031gL\u0099E/\nKsq\\x0015\\x0010\\x0000\\x0001\\x0010\u0088\u008C@\\x0006\u00A5\u0089\u00C8e\u0082\u008DL\u00A2\u00E8ap\u009CDA\\x0015e\u0082\\x0000\\x0008\u0080@\u00DA\tdO\u009A\u00D8\u00ED%\u0096\u00B6F\u00D4\u00CB\u00E18\u0089\\x0008,\u008A\\x0005\\x0001\\x0010\\x0000\u0081T\\x0013\u00C8\u00984Axf\u0089{3\u0084`\u0089\u0081\u00E3r \\x0000\\x0002 \u0090|\\x0002\\x0019\u0093&\u00B0\u0094%\u00EE\u00B2p\u009C\u0094\\x00188.\\x0007\\x0002 \\x0000\\x0002\u00C9'\u0090%i\\x00023Y\u0086\u00FE:T\u00F0\u00C3:XE\\\u0086\\x001b\u0081\u00F0[\\x0010\\x0000\\x0001\\x0010H\\x000c\u0081LI\\x0013a\\x0000lbnU\u00ACVv\u00F9\u00A8\u008Cp\\x0012\r\u00B6\\x0019\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x001c\\x0008dI\u009A\\x0008fs\u00B0\u00965ze\\x0006g\\x0015F\\x001f\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001?\\x00042#M\u0084\\x0006\\x0012k\u0086\u00FD\u00F4\\x0015\\x001f\u009E\\x0012K\u00B1\\x0008\u00F1)\rg\\\\x0005\\x0004@\\x0000\\x0004RA ;\u00D2\u00C46\u009B\u00835\u00C3%\u00EB\u00C1\u0098\u00D3)\\x0019j\\\\x0008\\x0004@\\x0000\\x0004\u0092O 3\u00D2\\x0004\u00B39e\u00EC\u00AC\u0098\u00D3)#|\\\\x001a\\x0004@\\x0000\\x0004\u0092F \\x001b\u00D2D<\u009B\\x0013}\u0098E\u00D2zC\u00F0)\\x001b\u00CF\u0096\u0096dN\u00A7\u00A9\u00F6\u00BA\u008A\u008AK\u0085)W\u0087\u00DB\u009Db\\x0002\u00FF\u00CA\u0099\u00EF{u\u00ED\\x001b\u009E\u009D\u00B9.g\u00E9*\u00B7\u00D5yvcd\\x0000\\x0001\\x0010(\t\u0081\u008CH\\x0013\u00AC\u00CD)\u00B7Y\u00B2\u00CF\u00E9\u00848\u00A1\u00D64\u00BC\u00DAA\u0091\u00D8d\n\u00CCO\u00B9{B$\u00E3\\x001a\u00A4I*o+\\x001a\u0095]\\x0002\u00D9\u0090&\u0098\u00CD\u0089\u00C4\\x001e\u00F8yl\"s\\\u00D9\u00DE}\u00C5^\\x0013^\u00A3\u00C8\u00BCR{\u00BEs#C\u009C\\x0008@\u009A\u00F8y\\x0018\u00CB>\\x001a\u00A0\\x0002 \u00E0E\\x0000\u00D2\\x0004\u008Ft\u00A9\\x0008\u0084/\\x0010\u00AD\\x0006\u00C9i6\u00C7~\\x001c\u00EA$N\u00C2\u00A2\u00F8\\x001e\\x0008iR<C\u0094\\x0000\\x00021\"\u0090\\x0001i\\x0012\u00D9\u00FBz\u00BA\\x0006\u00F7\u00E8;e\u00C8s:\u00C1u\tS*\u0088>IQ\\x0007\u00864\u0089\u00FE\u00F9\u00F5z\u00CDMQw\\x0002\u00CC\u00F2\\x0013\u00C8\u00A44\t1\u00CA\\x0001\u008F\u00AB<\\x0001\u00BBF,\u00E2F8\u00CE\u00E3T\\x000fo\u00B2T\u00C9)\\x0012\u00C5\u009ES\u00BE-\u00C8\\x0019/\\x0002\u0090&\u00E5\u00B7%\u0090& \\x0010\"\u0081,H\\x0013\u00FB\u008E&\u00D8\\x0004\u00B6\\x001c\\x0003Y\u0088\u00EE\u00AB\u00BA\u00DB\\x0004s7\u00AERC\u00B8x\\x0007\u008E\u0093\\x0010\u0087\u0092\u00B2\\x0016\\x0005iR\u008E':^\u00F2\\x0014\\x0004RE \\x0003\u00D2$\u00FC\\x0010\u0087T\u00F5\u0080\u0092Z\u0094p\u00EE\u00C5\\x001b\u00B5\u00D5\u00B6XW\t\\x0017\u0088@\u009DH\u009CUR>\\x0018\u00EB\\x0003\\x0012\u00804\u00C1\u00A0\\x0004\\x0002\u00A9\"\u0090Ii\u0082\u00FD\u00E9\\x0003\\x001a\u0080\u00A2\u00BB~(\u00D2D\u00E02\u0091\\\\x0012l\\x000fO\u00B1\u009Dh\u0099\u00FD\u00D1\u00B4\u008BU\\x000c\\x0019\u00EE\\x0016\u00EB\u00BC\u0092X\u00EB8\\x0019N\u00BB\u00C6rk\u0088MZ9f\\x0016\u00B9\u0088\u00AE\u00ABmr\u00BD}>\\x001bnQlA\u00AE\u00A8vB9\u0080\u009E\\x001d\u00AFD\u00D2D\u00E8{\u00F3\\x000c\u00A9\u00B6\u00B4\u0091\u00CBo\u00EB\u0090\u00A2\u00FEc\u00BF\u00A8\u00BC\u00B7/\u00F0}\u0081\"\\x0007\u0081\u00F2\\x0012H\u00BB4\tq\\x0012\u00A1\\\u00E6<M\u00D7\r#\\x0012\u00D6\\x001ee\u00E2i\\x001b\u008Cg\u00CC\\x0018\u00A9\\x001d\\x0007w\u0081\u0085\\x0016\u00C7\u00DB\u00B2\\x0012\u00E4,\u00AB\u00A3\u00E1\u00F4cul:&\u00F7/\u00FB\u00D8\u00E1\u00B2\u00E9\u009CG\u00F0\u00AF\u00CF\u0086\u00DB\u0091\\x0006\u00DB\u00ECN\\x000e`\u00D9\u00A5\u0089\u00C8Qg\u00D9J\u00C7\u00D9\\x0003'\u0092&nA\u00DC\u0085\u00FE,\u009C\u00B8\u00D4\u00AE\u00EB!\u00C7\u0083\u00F7\u00844\r8hKb\tdO\u009A\\x0014\\x0011zY^\\x0015\u0099\u0086\u00AB\\x000b\"a\u00FD\u00C6\u00FD\u00D8\u008D\u0084\u0097?\u00C0\u00D7\u00C3i\u00B5\u00D0\u00B7\u00E5\u00EC\u0093Gd\\x001bt;$gY]\u00DE\u00E9m&J$8\u0094[o\\x000b\u00E6\u00B5\u00AB+\u00D9-^\u0084\u0097\u00F0\u00D9p\u00D6\\x001b\u008B\u00BAbR\u00BC&>6\u00F4\\x0013wE\u00AB4\u00C9\u00DD\u00E6\u00B9C \u00A9\\x0013OmQQ\u00E1\u00A8N\u008A\u00BF/i\\x0018m|=\u00F8\u00C8\\x001c3\\x0002\u0090&\u009E/d\u00C8\\x0010\\x001e\u0081\\x0010\\x0016\u00E9H\u00F9\u00C0\u0083\\x000f\u00ACrv\u00C8x\u00AF-Z\u009A\u00D8\u00AD\u00BB\u00D8\u00DEx\u00CE\u00E6\u00C8Z#\u00F5\u009D[\u00E0g\u00F2\u00D9p\\x001f\u00BA\u00C4\u00E9\u008AQJ\\x0013\u00F9\\x001dn\u00B8\u009C\"\u00F2rX\u00B8B\\x0004\u00EA\u00C4\u00D7\u00AD\u00F1Us\u00A1\u00BF\u00D0\u00D7\u00E5\u00E4=\u008E\u00C1\u009F\u00A9\u0098\u00D9<4$\\x0011\\x00042(M\u00FC\u00BE\u00A6\u0087g\u0098\u00F1\u0088\\x0016/M\u00EC\u00A6\"\u00DCPV)ST\u00B0a\u00C5K\u0093\u00BC\u00CDi/\u009Al\u00F2\u009A\u00CD\u00F1\u0088\u00BF\u00B1O\\x001f\u00D8,\u00A8\u00CF\u0086\u00DB\u00ABm~\u0089\u0097\u00B8b\\x0002\u00A4\u0089h\u00DA\u00C5\u00D4\u00DF\u0084\\x0013=V\u0089\u00E3\u00A0\\x0015\u00B8[\u00E0\\x0002\u009F\u00BB\u009C\u00A0\\x001c{\u00E7/\u00BE'`\u0098\\x0002\u0081\\x0018\\x0010H\u00BD4\u00C1\u00CA\u00E18I\u00AB\u00E2C\u00EC\u0083\u00B8\u00D3\\x000cH^jO6\u00AB\\x000ep0\\x0012N\u00B1)!H\\x0013{=\u00ED-\u00B2\u00D6\u00CA\",l\\x0006R \u00D7\u00BCf\u008E\u00FC5<\u008C+\u00C6^\u009A\u00D8\u00A7T\u0084>\\x0006\u00C1\u00CC\u008B\u00F9\\x000e\u008A\u00A4\u0089\u00CDC#\\x000c+\u00B1\u00F6\\x0004\u00CF\u00B8\u00E9\u00D0\u00EEK\"^\u00ACQ\u00C9\\x0014\\x0013\u00804\u0089\u0093\u00E5\u008E\u0081V\u008D\u00BC\u00AF\u00DB\\x0017\u00E9\u00F8j\u00B5}\\x0004\u008F^\u009A\u00B8,\u0088\\x0008C\u009A\u00D4xN\u00D6X3X\u0094\u0087D\\x0018\u008Ar[\u00AD\u00E8\u00CC\u00D6Q$Md\u0083\u0085\u009D\u00B6\u00D6u\u00BF\u00A2\u00AF\u00FB\u00EE\u0091YJ\u0086z\u00CD\u0095X\u00E4\u0082\u008F\u00A9C\u00F7\\x001f1\u0096\n\u00DC\\x0016\u00F0\\x0017L0\u00D9\u008A2\u008B\u00D4PzB\u0098\u00F7\\x0005\u00A3+\\x0008\\x0004$\\x0000i\\x0012\\x0010\\\u00E4&<\u00AD\\x0003D\u0091\u00D2\u00A4\\x000c^\\x0013\u00B7\u00A5\\x0010\u00A1H\\x0013\u00AF\\x0010W\u00EB\u00AB\u00B0\u00E5\u00DD\u00DDS\u00D9\u00E8}\u00D5jkM\u00CAC\u00CE4\u00B2\u00A2\u00C2\u00B9b\u0098=<\\x0002i\"5\u00D1\u00A6\u008F\\x001e\u00AE\u0099=\u00F4\u0084\u00C6AJ\t\u00D9\u00C8\u009B\u00A4I\u00FC\u00EE\\x000bFW\\x0010\\x0008H\\x0000\u00D2$ 8H\u0093\u0080\\x0004B\u0097&\u008E\u00B1&R\u00E6\u00CA{B\u00C7\u00D1+\\x0013\u00C2\u00E2a\u009D\u00A1k(\u0089\u00C7l\u008E\u00E4\\x0002f\u00AA\u00AD\u00AB\u00C4\u00F1\u00A1\u00F9B\u00BAb\u0094\u00D2D&\u00BA\u00D3\u00DD\u00D5\u00E1.\\x0002l\u009D\u00DFmc\\x0015\u00F7\\x000b9\t\u00C7\n\u00A9\u00C5\u00E1&i\"'\u0094\u00BDzB\u0098\u00F7\\x0005\u00A3+\\x0008\\x0004$\\x0000i\\x0012\\x0010\\@\u00C3\u008C\u00C7\u00BEHi\"\u0088 q\u00F2j\u0084#M\u00DC\u008D\u009C\u009C1\u00F0\u00DE\\x0010\u00CC\u00E5}\u00D7c6\u00C7&8\u00BC\u00A6-\u00B8\u008Dty\u00E3g\u0093&\u00CE\r\u0097\u00D8\u00E4\u00C3\u00B2\u00E7\u0087\u00F1\u00A7\u00AB\u00CE+\u00E2\u0099\u00F2&l/\u00DC\u00E7,\u008C\u00FB>\"n\u00E22\u00984\u0091\u008Bk\u00E1\u00A5I\\x000c\u00EF\\x000bFW\\x0010\\x0008H \u00ED\u00D2$\u0094\u00EDG\u00A1'B$P\u00AC4)n_\\x0013O/\u00BD\\x000f\\x000b\\x001d\u00A2\u00D7\u0084\u008Ar\u009Am\u00F1\u0098\u00CD\u00B1\u00FBB M\u00C4\u00AB\u00A3m}\\x0018\u00D2\u00A4\u00D0U\u00A2\u0092\u008C\\x0001\u00CDR\\x0011\"\\x0015WL\t\u0081\u00ECI\u0093\\x0010\u00AD,\u008A\n@\u00A0Xib\\x000ft\u00B8T\u00E8\u00FA\\x0016\u008Fn\u00FE\u00A5\u0089\u00FB\u00A6\u00E0R^\\x00139\u00B9c-\u008AY\\x000b\u00EB\u00B9\u00F6w\u00F7\u0090\u00DE\u0095%#(\u0095;\\x001e\u00D2\\x0015\\x0003t\\x001e\u00C7S\u00E05\u0089\u00E7}I\u0089\u0099\u0084T*=\u0081\\x000cJ\\x0013\u00ECkR\u00D6\u00F1\u00A2hib\\x000f\\x001a\u00AD\u00A8\u0090\u00DE\\x00106ji\"\u00DC\u00A0SN\u009A\u0088W\u00D0X*,z\u00BB\u0095\u0092G\u009E:\u00C0\u00874\u0091\u008F5)YO\\x000b_\u009A\u0094=\u00D6\u00C4\u00FF\u0084N\\x000c\u00EFK\u00C9:\\x0000.\u00946\\x0002i\u0097&\u0082\\x001fm\u00814)k'.^\u009A\\x0008\u00DF\u00DA%7^+\u008B4\u00B1]\u00D4!\u008CC\u00F0#\u0082\\x0016\u00D9!t\u00E1H\u00AF\u00CBp\u00BD\u00EF~\u00A4I8W\u00F4TK>2\u0084/M\u00E4\u00B6\u00C2\\x000b\u00B6BG\\x0018\u00B6\"\u00D5\u0084\u0090V\u00E8\u0094u\\x0004\u00F0q[Q\u00CF\u00EC\\x0012\u00804\u00C9\u00EE\u00BD/\u00BD\u008FN\u00B9b\\x0008\u00D2\u00C4\u00BEE\\x0007\\x000b\u00ED\u00F4\\x0019\u00A8\u00A8\u00C6fz\u00AE\u00D0\u00F17\u00A1#\u00AA\u0083\u00E4\u00CE]\u0082E\u00B9\u00B9\u00DBr\u00A6xR\u0087\\x0006z\u00EA-\\x0019c\u00E0G\u009A\u00F83\u00DB2W/6\u008F\u0094]\u00B7tx\u00AF\u00E8T\u00A9\u00D5\u00BC\u00AC\u00CC0\u00C2V\u00A4\u009A\u00E0\u00E1\u00CB\t\u00A5'\\x0014{/0\u00A2\u0082@\\x0008\\x0004 MB\u0080X\\x001e\\x001b\u009F\u00D0\\x0011$\\x0014i\u00E2\u00F2\u00C3rv\u00F7\u0089\u00EB\\x0016\u00ECEJ\\x0013\u0089\u009F\\x000e\\x0016,\\x0014r\\\u00FC\u00E2\u00BE[\u00BC\u008F\u00CD\u00E5\\x0004\"\u00C6\u00A8\u00AA\u00F8\u00EA\u00BE\u00A4\u0089\u00DC:)\u008F+\n\u008D\u00BA\u00A4\u00F7\u00CB\u00DA\u00F9\u00A5\u00EC\u00BAOi\"\u00F8\u00F1B\u00B9I\\x0016\u00EBO\\x0014yi 6\\x0004I5\u00C1k\u009A\u00C9\u00DE\u00D9\u00FC\u00F7\u0084\u0084\\x000e,\u00A8v\u00BA\\x0008@\u009A@\u009A\u0094\u0096@H\u00D2\u00A4\u00A8`L\u00CE\\x0015Q\u00A44\\x0011\u00FD\u0094\u008C\u00F7o\u00A3\\x0004[\u0097\u00EB\u00E2\u00BF\\x0011\u00FDJ\u00AD\u00FBf\\6'\u0093?i\"\nF6G\u00FC\u0088\u00AA$\u00B1\u00BDi\u009C\u00A4\u0089].(\u00CE\u00B9\\x0010~C'\u00AA\t\\x001d\u00D1nxt\u00A3}\u00F6\u0084tY8\u00BC7&\u0094\\x0000\u00A4Ii\rs\u00C6\\x001f\u00FB\u00E2C\u00C7\\x0004\u00B0\u0088\u00A5\"\u008A:\\x0011\\x0005\u00CF\u00FA\u00B4\u00D0b\u00EB\u00E5\u00B4\u00AB\u0087~\u00DCm\u00AF\\x0014\u00E1o\u00A9X-\u00A2\u00BD\u00D3\u00FAFa\u00AD\u0083\u00EF\u0086\\x0017}\u00C5\u00D8{MD\u00BB\u00FBs\u00BB\u00C2\u0088\u00EF\u00B2\u00CC/\\x000fG(M\\x0002Hv\u0099\u00ED\u00E9\\x0012j\u00DEP\u00ED\u00E4\\x0012\u00804\u00814)!\u0081\u00E2y\u00D8{w\nO\u00E3\u00A1fp\u009A\\x001c\u00F1m\u00A1\u0085\u00FE\\x0003K\\x001dn\u00CB\u00E5LG\\\u008D\u0081x\u00A78\t\u00FB!\u00B5\u00C5\u009C\u00B6\u0095\u0085\u00F7/\\x0008\u00DA\u00A2p\\x0004\u00AA\u00BA\u00B8+&B\u009AP%\u009D\u00C4\u00A2@\u009A\u0088W\u008A\u0095pBG<7\u00E4\u00B6\u00D5\rv4\u00C9\u00F8\u00EBb\\\u009B\u009FAiR\u0091\\!\u0099\u00F8\u009AG M\u0084\u00F3\u00F4.c\u00B1\u0087\u008D\u00F7/M\\x001c\u00BC\u00E8\u00BA\\x0016Q\u00FD\u00FF\\x0016\u00E3\u00E4o\u0087Y'\\x0007\u008FhL\\x0011\u00FD\u00C8\u00ADU\u00AB\u0089'\u0086\\x00025\\\\x0014\\x0001*\u0090\u0086E\u00FF>\u00A2\u00A7z\u0096\n\u00D4\u00F0\\x001bk\u00C2\u00E5\u0097p\\x00119OE\u0095\\\u009A\\x0008#s\u00FD\u00DD\u0097\u00C4\\x000f5q\u00B5\u00B8\\x0000+I \u00F5\u00D2d\u00A8uI\\x0008-'F\u00AF-\\x0017\\x0001\u00814\tu-\u00B7s\\x0018\u00A9\u0084\u00D7A\u00B5A-\u00B4\u00C8\u0091^\u00F0\u00DB\u00FB\u0092&\u0082\u008D[|F`\u0088\u00E2<\\x001c&\u00B0\u008C\u009E\\x0010\u00BC\u00E1\n\u00B7 WL\u008A\u00D7\u0084{X\u0084\u00CD\u00F4\u00ECZe\u0091&l\u0094\\x000b|_0H\u0082@y\tdO\u009AP\\x0018f\u00B9\\x000c3\u00AE\u008Bmfd\u00FA\u0080\u00E4\\x0016m2E!\\x000f\\x0008\u0080\\x0000\\x0008$\u0090@\u00DA\u00A5\t\u00DD\u0092\u00D0\u0096\u0084xz\u0095\u0091\u00C1\u008B\\x0000~\u00D2Hb\u008C\u00F0Z \u00EA\\x0005Y\u00E2\\x0012P\u00E7 \\x0000\\x0002 \\x0010g\\x0002\u0099\u0094&4\u00AD\u0080\u00E1\u00BB,\\x0004 M<\u00B1\u00DB\u00E7\u00A4|\u00CE\u00E6\u00A0o\u0083\\x0000\\x0008\u0080@\u00D2\td@\u009A`\\x0012\u00C1\u00D3\\x001c\u0096&C\u00C8+\u0087\u00D3\u00E8<\\x0010\u00C5\u00CA\u00B8oG\u009B\u00F4\\x0001\\x0008\u00F5\\x0007\\x0001\\x0010\\x0000\\x0001;\u0081,H\\x0013D\u00C2\u00C6\u00C3\u008AG\u00B5<'\\x001e\u00AD\\x000b,\u00EF\u00DC\u00D7\u00A6\u00C2e\\x0012\\x0018,N\\x0004\\x0001\\x0010H,\u0081LJ\\x0013D\u00C2\u0096\u00A5\u00BF\n\u00DCW\\x0008I\\x0016\u00AC\t\u00E2V>K\u00FF\u00A2rYn(.\n\\x0002 \\x0000\\x0002\u00D1\\x0010\u00C8\u00AC4A\u00B8I\u00C9\u009D\r\\x00084\\x0011?\u00C3\u008E\\x001b\u0097a*\\x0007\u008En\\x0010\\x0000\u0081l\\x0012\u00C8\u00804\\x0011.\u00D2A$l4R\u00D7\u00F1)B\u00A0\u0089#p?\u00BF\u00FFW\u00E2\u00BB\u0086\u00CB\u0081\\x0000\\x0008\u0080@9\\x0008dC\u009A`*\u00A1\\x001c}\u00CB$S M\u00CA~\\x000bP\\x0001\\x0010\\x0000\\x0001\\x0010H\\x0008\u0081\u008CH\\x0013[$,\u00C2MJ\u00DCA\\x0005\u00B39\\x00084)\u00F9\u009CZ\u0089o:.\\x0007\\x0002 \\x0000\\x0002\u0081\\x0008dD\u009A\u00886^\u00C3\u009CN\u00A0\\x001e\\x0013h\u00E2S$\r\u00C1\u00BFt\u00FC\u00A1\u0081@\\x0000\\x0004@ I\\x0004\u00B2!M\u00C8\\x0006`N\u00A7\u008C\u0086\\x0010\u00B39e\u0084\u008FK\u0083\\x0000\\x0008\u0080@\u00D2\\x0008dG\u009A`N\u00A7|\u0092\\x0019\u00B39I\\x001b\\x0017\\x0002\u00F9\u00C6\u00CA\u00D7\u00C1\u0080\\x0017\\x0004@ ]\\x0004\u00B2-M0\u00A7P\u0082\u00DE,t\u0099\u0080|\t\u00C8\u00E3\\x0012 \\x0000\\x0002 \u0090L\\x0002\u0099\u0091&\u00C29\\x001d\\x0004\u00C3\u0096\u00A0\u00D7\u00DA\u00A7\u00D2\u0080\u00BD\\x0004\u00D8q\t\\x0010\\x0000\\x0001\\x0010H,\u0081LI\\x0013\\x0004c\u0096\u00C3\u00E5\u008E\u00D9\u009C\u00C4\u008E\\x000e\u0098\u00D6\\x0001\\x0001\\x0010\\x0000\u0081\u00B2\\x0010\u00C8\u00924!\\x000b\\x00013Yb3\u0089\u00D9\u009C\\x0012\\x0003\u00C7\u00E5@\\x0000\\x0004@ \u00F9\\x00042&M\u00C4\u0093\\x000b\u00D8\u00B4>2o\u008A]\\x000bb6'\u00F9\u00A3FY\u00DE\u00A2pQ\\x0010\\x0000\u0081\u00EC\\x0010\u00C8\u009A4\\x0011\u00CE\u00E9`\u00EF\u00AFh\u00A4\t\\&P! \\x0000\\x0002 \\x0000\\x0002\u00FE\tdL\u009A8\\x0006\u00C3\u00C2q\\x0012\u0081:\u0081\u00CB\u00C4\u00FF\\x0003\u0099\u009D\u00B7\"\u00B4\\x0014\\x0004@\\x0000\\x0004\u009C\\x0008dP\u009A\u00C0q\\x0012\u0081\n\u00B1\u00DB`\u00B1\u00CB\\x0004\\x000e\u00AA\u0092\u00C0\u0087$\\x0002\\x0001\\x0010\\x0000\u0081$\\x0013\u00C8\u009E4\u0081\u00E3\u00A44\u00FDU\u00E82Y\\x000f\u00C3\\x000c\\x0002 \\x0000\\x0002 \\x0000\\x0002\\x001e\\x0004\u00B2)M\u00E08\u0089\u00F8\u00C1\u0080\u00CB\u00A44\u00FA\\x000fW\\x0001\\x0001\\x0010\\x0000\u00814\\x0012\u00C8\u00A44qr\u009C`\u008B\u00D2p\u00BA\u00B8H\u00F9\u0091\\x0013\\x0005x\u00C3\u00C1\\x001b\u00B1\u00ACD%A\\x0000\\x0004@\u00A0\u00DC\\x00042+M\\x001c\u00CCg\u00B9\u00EFG\\x001a\u00A2\u00A2\u0084+\u00B4\u00A1K\u00D0\u00B5@\\x0000\\x0004@\\x0000\\x0004\u00E4\\x0008dU\u009A8:N\\x0010\u00A7Y\u00DCK\u00B9p*\\x0007{\u0099\u00C8=\u008Di\\x0010\u00A6h)\\x0008\u0080\\x0000\\x0008\\x0014M \u00CB\u00D2\\x0004\u00F3\\x000e\u00C5\u00A9\\x0010a\u00E7\\x0013G\u00BFbmv\\x0004\u00A8\u008B~\u00F8\u00A1\u0084@\\x0000\\x0004@ \u009E\\x00042,M\u009C\\x001c'x\u00C5\\x000fl\u00F3\u00C4S9qrD\u00D1\\x0012!\u00F2\u00EB(\u0089b_\u00F4\u00C4\u00CB\u00A9\u00C2q\u0096\r\u00A2\n\u00A2\n\\x0004@\\x0000\\x0004JM \u00DB\u00D2\u0084l\u00B0\u00F8-?N\u00D64\u00B0P(\u00F1\u0089NS9e_0\u00AC\u00C9\u0091\n\u00F1\u00BD\\x0016v\\x0000\u00E1o-A\u00A6\u0094\u00B8G\u00E1r \\x0000\\x0002Y%\u0090yi\u00E2hP\u00F1\u00BA\u00ECG&\u00C7\\x0010\u00A3\u00E1\\x001d\u0091\\x0014\\x001f\u0092\u00D9\\x0014\u00B7\n\u00FA\u0086\u009F\u00BE\u0091\u00D5\u00B15\u009E~r\u00D4\n\\x0004\\x0012A \u00F3\u00D2\u00C4eZ\\x0007\\x0016H\u00DE\u00A8\u00C4\u00CA\u00F9\u00C4\u00E6k$\u00A5F\u00E0l\u0098\u00EE\u0091\u00EF\\x001e\u00C8\t\\x0002 \\x0000\\x0002~\\x0008@\u009A\u00A8\u00EFN\u0096\u00CC\\x000f\u00CADH\u00D1H*\u00E9d\u00DDKO\u00AF4\u00A2\u00C4\\x0012\u009BR\u00FAf\u00E2\u008A \\x0000\\x0002 \u0090j\\x0002\u0090&L\u009A8\\x0004\u009D $\u00D6\u00B3\u00F7;\u00A9\u00BA\\x0012\u00FB\u009CJ/J P<\u00FB\\x00062\u0080\\x0000\\x0008\u0080@ \\x0002\u0090&\u00FA\u00AC\u00B9c\u00B4\\x0004Bb\u009D\\x0003\\x000b\\x001cuIi\u00A19\u00DD;'w\\x000e\u008B\\x0017\u00E1\\x0013{xL\\x0007\u00D5\u00F5;\u00BE\u00A6{J\u00AC\u00C6\\x0002=\u00F0\u0091\u00B8\u00CDP\\x0013\\x0010\\x0000\\x0001\\x0010\\x0008\u0095\\x0000\u00A4\tgw\u00A1N|\u00F5\u00AD8\u00E0RV\u00DF\u00C8\t\\x0008-|\u00D5\\x0004+\u00D3+\u0092\\x001a\\x0005\u00EA\u00C4W\\x0017Bf\\x0010\\x0000\\x0001\\x0010\\x0010\\x0011\u008041\u00BB\\x0004b\u00E2\\x0006\u0088gu\u00B1\u00D6%3\u00CF2\u008A!\u00CC\\x00055\u00D2\\x001a%\u00FE\u00B7\\x000f5\\x0004\\x0001\\x0010\\x0000\u0081\\x0018\\x0013\u00804\u00B1\u00CDV\u00B8\u00CC\\x0002\u00C4\u00F8F\u0096\u00D4Q\\x001f\\x000b]\u00E2\u00E5,\tS\u0094X\u00F4\u00AB\u0084\\x0013\u00A5d\u00FA\\x000c}\\x0012\\x0004@\\x0000\\x0004RG\\x0000\u00D2D\\x0014H\\x0001u\u00E2\u00D2\u00D1\u00E3\u00AFK\u00A2\\x0013%<\\x0016O\u009F\r\u00D4I\u00EA\u0086\u00CB\u0092\u00BE\\x0000\u0080\\x001e\\x0008d\u0098\\x0000\u00A4\u0089H\u009A\u00B8[\u009D\\x000cw\\x0017\u00B7\u00C0\u008E\u0092Yb\u00F7\u00E0\u0092\u0092U\u0083u\\x0003\u00F7\u00AER\u00E2\u00CAd\u00B9g\u00A2\u00ED \\x0000\\x0002)\"\\x0000i\u00E2\u00B0\u00FC\u00C4C\u009D\u00F8\u008F\u00A6LA\u00A7q\u00D1\\x0004%\u00B3\u00C1nu(\u00ED\u00B2 \u00E3\u0086B\u009D\u00A4\u00A0o\u00A3\t \\x0000\\x0002q\"\\x0000i\u00E2\u00B22\u00D65\u00A4\u00A0d\u00C68\\x0016\u00DD%\\x001e(\u00E2\u00A0\u008D\u009CnG\u009C\u00EB\\x0016\u008B.\u0084\u00BD\u00EDA\\x0000\\x0004@@\u0096\\x0000\u00A4\u0089+)\u00BC\\x0010\u00C7g\u00CE\"\u00FE\u00B6?\\x000eQ8P! \\x0000\\x0002 \u0090|\\x0002\u0090&\\x0012\"\u00CEeO\\x000b\u00B2\u0097\u00C9\u00EF\\x0004nM\u0088I`GR\u00AC~R\u00EA\u0099\u00EEN\u008B\u00D6\u0081\\x0000\\x0008$\u009C\\x0000\u00A4\u0089\u00844Q<\\x0007\u00AEKUS9\u00B9\\x0013\u009F\\x0015(.5\u0089\u00E1\u00E3\u0097\u00AC\u00DA\u00C6\\x0010 \u00AA\\x0004\\x0002 \u0090y\\x0002\u0090&r\u00D2\u00C4[\u009D\u00A4\u00CB}\u00E2\u00ADK\u00A4\u00B9\\x0015\u00FF\u008C\u00C5\u00E7\u00E7\\x0003%\u00DB\\x0012\u0087}r%\u00AB\u008Al \\x0000\\x0002 \\x0010?\\x0002\u0090&~L\u00AC\u00B7\u00C1N\u00FE\u00CA\\x001d\u00EF6\u0096V\u0084\u00C5\u00E4\u00E7\\x0003\u00FD>\u00BA\u008E\u00EA$\u00F9=\u00C4/\n\u00E4\\x0007\\x0001\\x0010\\x0000\\x0001\u009F\\x0004 M\u00FCH\\x0013\u00C5w\u0092\u00E2\u009D@i#v\u00CF-VKkY\\x0013m\u00E0\\x001dE\u0095\u00CF.\u00E7\u00F3\u0091Ny\u00F0\\x0013h\u0080\\x0000\\x0008d\u0080\\x0000\u00A4I ;\u00E1m\u00C2\u00D5\u00DF\u00B6ML\\x0007\u0092\\x0010%4\u00ABR\u00FA\\x0016\t9\u0097\u00BE\\x001a\u0081\u00EF\u00A3p**\u00F5\u00A1\u00D3\u0081q\u00E1D\\x0010H4\u0081\u00BAO+*\\x0016\nSu\u00ED\\\u00FF\u00E6\u00E0\u00DD\u009C^Z\u00AE.\u0090\u009Dr\u00839\u00B7\u00B6zaE\u00F5\u0087Mq\\x0005\\x000ei\\x0012\u00F4\u0096K\u00B9O\u00CAa\u00CE\u00FDu5IQR\u00DAI\\x001c\u00D6\\x0004'\u00C2\u00FE\\x001a\\x0018\u00F4\u00FE\u0086s\\x0015\\x0007\\x001f[\u0082\u00D4U8\\x001c\u00CA{\\x0017pu\\x0010(\t\\x0001gi\u00A2\u00E8\u0095\u00DC\u00BB\u00BE\u00D4I]\u00CEP9\u00B5\u00B5M\u00A1\u00D7\\x001f\u00D2$\u00C5C\\x001b\\x0019\\x0018O\u00F7\t{o\u008E\u00A1)\u00F2W\u00F9rx\u0080\u00C4.\u0087r\u00D4\u00A4\u0098>,\\x0014Xp\u009C\\x0014\u0083\\x0014\u00E7\u0082@<\t\u00A8\u00D2D\u00E4\u00E1`\u00FE\\x000f_\nC\u0095\\x000e\\x0015\u009F\u00D6E\u00D5RH\u0093\u00A8\u00C8\u0086\u00AE\"\u0083\\x0016(\u00E3>\u00D1\\x0004J\\x001c4\n\u00C9)\u0089p\\x0019\u00A3\u00C2\u00E5\u00BA}b\u008B\u009E4]\u00C2\u00E8\u00A5Cc\u0095\u00AB'\u00E0\u00BA \u0090\\x0014\\x0002\u008E\u00D2\u00A4&\u00EF\u00F2\u0095\u00B8uQK\u0087\u00A8\u00CB\\x000fjOu\\x001a\u0098\u00D0)\u0096\u00A0\u00E6\u00A3\u0093t\u009F\u0094M\u00A3\u00F8Q$\u008A\u009B\u00A7\u00DC*Jh\u00CE\u00932BY\u00EA\t\u00C7IBo\\x001c\u00AA\r\\x0002\u00BE\\x0008\u00F8\u0093&\u00CC/\u00A2'~\u00BA\u00C721\u00A4|\u00A5f\u00CE\u00BD\u00DBT[\u00AB\u009Eb8`\u009C\\x000bQk\u00AE\u00E7gW\u00E1}0\u00864)D\u00B4\\x0004\n\u0088\t\u00C9\u0080\u00DA8C\u009A\u0084GV~\u008A\u00C4\u00B0\u00BB\u009A\\x0002\u0088\u00CC\\x0019\\x0010\u00BCJ\u00E1a\u00F1\u00F5l\u00BBD\u0099\u00C4pRL\u00BEiI\u008F\u00E7\u0095o)r\u0082@f\t8I\u0093\u00A6\\x000f\u00AB-\\x0013:\u00DA\\x0011K\u00CC\u00AC.\\x001d\u009C\u00A4Iu\u00ADZ\u008E\\x001e\u00BE\u00EA^H\u00BE\u0086\u008BV\u00B1\u0087\u00AD0i\u00F2i\u008E\u0097G\\x0015\\x000b\u00E3\u00A3N M\u00C2\u00B6\u00C1\\x0001\u00D4\\x0000\u00EFJQN\\x000f\u00ACT\u00D4s\u008B\u00AC@\\x001c\u0086\\x0015\u00A1!\u008FC\u00C5\\x0002\u00D7!M\u00F3S\u0081!\u00E0D\\x0010H7\\x0001\u00D70X\u00CE\u00EAk\u00AE\\x000e^\\x0007h\u00EE\u008D\u0082\u00EF\u00C42\u00E1b?\u00C5\u00B3\\x0010\u00D5\\x001d\u00C2\u00AF\u00C1Q\u00AB\u00A7_Tw\u00B7\\x0018\\x0019X\u00E5}\u00C6\u00EA\u00FA\n\u00EC\u00F5\u0095\\x0019\u00D2$lib\u00BC\u00F7\u00FB\u009A\u00E2qZe\u00CA\u00DC*nI\u009D|q\u00F9\u0095\\x001f\u0099\u00AF\u00CA>}c\\x0019\u00B0\u00ECu\\x000e.\u00D7\u00A2\u00B9\u00BF\\x0001FX\u00FBmB0l\\x0000\u008C8\\x0005\\x0004bK\u00C0Y\u009A\u0098bcUo\u0087\u00DD?\u00A1:9\u008C9\\x0017\u00A14\u00E1fd\u00BC\\x000b1fj\u0084\u00B1\u00B4L\u009A\u00F0\u0091\u00B96)SV\u00CE\u0090&Q\u009A.&)d\u00C4A\u00B9\u00F2\u00C4M\u0094\u00D0\u00C3 $\u0096\\x000f\u00ECI\u008A\u00F2\u00FE\u00FAzt\u00E18\u00F1\u0085\\x000b\u0099A q\\x0004\u00AC\\x0013:\\x0002\u00C7\u0086\u00E29ps\u00AE\u0098\u0083H\n>\\x000f[\u00D4\u00AAD!\u00E6@\\x0013uN\u00C7\u00D1+C\u00E3d\u00BC\\x0002c!MJb\u00BA\\x0002O\u00B2D$Yb\u00A8H\u008Ca(\u00C5\u00DE\u0085Tz\u0083\\x0012g?Pa\\x0010\u0088\u0088\u0080 \u00D6D\u00A4N$T\u0085M(\\x0004\u0091&\u00EA\\x0004\u008A9N\u00B60\u00C5c\\x0017\"\u0090&\\x0011u\u008BD\\x0014[^\u008D\\x0012gEb\u00DC\u00BE\\x0014\u00DB\u00EF\\x0014\u00AB\u00AED<}\u00A8$\\x0008DJ@\\x001c\\x0006k\u00DB\u00D4\u00C4a.\u00C6\\x001c\u008A!\u009A\u00D0\u00E1\\x0003G\u00A4\n\u00B1\u00BCx\u00F35\u00814\u0089\u00B4+$\u00B7\u00F0b\u00E2U}\u00B9R\u008Ch\u0095D\u00B0\\x0012\u00CF\u00E6\u0094\u00C4\u00B3U\\x0002>\u00E9n]\t\\x0000\u00E2\\x0012 \\x0010g\\x0002N+t\u0098\u009B\u00C42;c\u00D9\u009CM[n\u00E3\\x001akb\u00DAW^s\u0087\u00D8\u00A3X\u00B4\u0080\\x0015V\u00A0\u00E0\\x00146g\\x0004i\\x0012\u00E7\u009E\\x0014\u009F\u00BA1o\nK\u00BE\u0094\u0087\u00C0\u00C7\u00A0\u00EFJ\u0092\u00C4\u00D0\u00D1\u00D4\u00FB\\x0015R\u00EC\\x0013\u008A\u00CF\u00D3\u0084\u009A\u0080@Y\\x00088\u00EFk\u00C2\u00D6\u00F1\\x0016B_\u00C5\u00EB~\u00F9\u009Dd\u00BD\u00BC&\u00D4@\u00AFBD\u008B\u0087\u008Dp\\x0013H\u0093\u00B2t\u0091\u00A4_\u00B4\u00B0$G\u00D7+\u0086p\\x0011|\u00D0\u0097\u00F0$\u00BD\u00D5T\u00814I~\\x0000,_ MR\u00D0K\u00D1\\x0004\\x0010\\x0010\\x0012p\u00DB\u00F2\u00D5\u00BEW\u00BD%\n\u00C4\u00B2\u008EFB\u009A\\x0008BI\u00AC\u008Bq,\u0091\u00B0\u009C\u008B\\x0005\u00D2\\x0004\u009D\\x0018\\x0004\u00E4\t\u00A4\u00DEr\u00A7^{\u00C9\u00DFk\u00E4\\x0004\\x0001\\x0010\\x0000\\x0001\\x0007\\x0002X\u00A1\u0093\u00968\u0086ttq\u00BB4I\u00C1\u00B2a\u00FE\u00D6\u00D8\u00C3M\u00B0\u00BBI:\u00BA.Z\u0091m\\x0002\u0085-\u00E7\u008D\u00BD\u00E7\\x0013\u00FB\u00C1\u00D7\u00DEh\\x0011e\u00864\u00814\u0089\r\u0081,D\u0089B\u009Ad\u00DB\u0080E4\u008E\u00A3X\\x0010H\\x0019\\x0001H\u0093\u00D8\\x0018f\\x000c\u00D9Y\u0090&\u00E4\\x0004\\x0012x\u0086\u00D0\tA\\x0000\\x0004@\\x0000\\x0004\n\\x0004 M\u00D0\\x001bbC #\\x001e\\x0005H\\x0013\u00A8p\\x0010\\x0000\\x0001\\x0010p%\\x0000i\\x0012\\x001b\u00C3\u008C\u009E\ni\u0082>\\x0000\\x0002 \\x0000\\x0002 \u0090\u00AF\u00814\u00814\u0089\r\u0081\u00D4oj\u00C2F\\x001cxM0\u00F2\u0082\\x0000\\x0008\u0080@\u00D9\u00BC&?\u00DC\u0091G\\x0002\\x0001y\\x0002\u008B*\u00F3\u009F\u0099\u00D3\u00A2\\x0001)\u00ECB\u00966\u00D2\u009F\u00F2\u0088\u0090\\x0013\\x0004@\\x0000\\x0004\\x0012A\u00A08\u00ED\\x0015\u00A5\u00D7$\\x0011\u00F8P\u00C9\u00F8\\x0010\\x0010H\u00934\u009AmH\u0093\u00F8t9\u00D4\\x0004\\x0004@ \"\\x0002\u0090&x\u00E9L\t\\x0001\u00F2\u0091X\u00BD&\u0090&p=\u0082\\x0000\\x0008\u0080@\\x0002\t$@\u009A\u00E4W\u00E4\u0091@\u00C0\u0093@\u00E7\u00E2|\u00EB|S\u00EA\u009C\u009F\u00C2\u009Eci#\u00FD\u00E9I\\x0006\\x0019@\\x0000\\x0004@ \\x0011\\x0004\\x000c\\x001f\\x000c\u00A4\tF\u00F6\u0094\\x0010\u00B0K\u0093\u00F4\u0099\u00ED,\u00B41\\x0011\\x0003(*\t\\x0002 \\x0010\\x0005\\x0001H\u0093\u0094\u00D8\u00E3(:Gr\u00CBL\u00BDG!#\u009E\u00A1\u00E4\u00F6@\u00D4\\x001c\\x0004@\u00A0\\x0018\\x0002\u0090&\u0090&)$`\u0097&d\u00CB\u008ByN\u00E2v.\u00A4I\u00DC\u00EE\\x0008\u00EA\\x0003\\x0002 \\x0010\"\\x0001H\u0093TY\u00AC\\x0010{F\u00A2\u008B\u00A2\u00E0\\x0012k\u00B8I\u00CA\u00A4I\u00DA\\x001b\u0098\u00E8\u00EE\u0087\u00CA\u0083\\x0000\\x0008\\x0014I\\x0000\u00D2\\x0004\u00D2$\u0085\\x0004\\x0004\u00D2$]Q\u00A2\u00A9w\\x000b\\x00159\u00AE\u00E1t\\x0010\\x0000\u0081D\\x0013\u00804I\u00A1aNt\u008F\\x000c\u00A5\u00F2)\u008F\\x0012\u00B5-A\"\u00A5\u0092\u00B2\\x0019\u00ABP\u00BA\\x0001\n\\x0001\\x0001\\x0010H(\\x0001H\\x0013H\u0093\\x0014\\x0012\\x0010K\u0093\u00B4\u00CC\u00E9\u00A4\\xa\u008F\\x0000\\x0010\\x0000\u0081\u00CC\\x0013\u00804I\u00A1aN\u00A8L\\x000e\u00B7\u00DA)\u009E\u00F2\\x00104-]\u00D3U\u00E1\u00F6\\x0004\u0094\\x0006\\x0002 \u00908\\x0002\u0090&\u0090&\u00E9$`\\x000f7I\u00C9\u00EE&\u0098\u00CD\u00C9\u00FC\\x000be\u00E2\u00CC\\x000c*\\x000c\\x0002~\t@\u009A\u00A4\u00D30\u00FB\u00ED\\x0007\u00E9\u00CB/\u009C\u00F5HA@\\x0006fs\u00D2\u00D7W\u00D1\"\\x0010\\x0000\\x0001\\x000b\\x0001H\\x0013H\u0093\u00D4\\x0012H\u00E5\u00C4G*\\x001b\u0085q\\x0019\\x0004@\\x0000\\x0004x\\x0002\u0090&\u00A95\u00CC\u00E8\u00E8\u00E29\u009D$\\x0007\u00C3\u00A6\u00D5\\x0015\u0084\u00BE\n\\x0002 \\x0000\\x0002\u0090&\u0090#\u0099  6\u00E4I\u008E\\x0018\u00B5\u00BBLR\\x0012@\u0083\u00F0\\x0011\\x0010\\x0000\\x0001\\x0010\u00E0\\x0008\u00C0k\u0092\t#\u009DY=\u009E&\u00C7\t\\&\u0099\u00ED\u00C6h8\\x0008d\u008D\\x0000\u00A4\t\u00A4I\u009A\t\u00A4\u00C9q\\x0002\u0097I\u00D6Fg\u00B4\\x0017\\x00042K\\x0000\u00D2$\u00CD\u00869\u00B3\u00DD\u009Ao\u00B8\u00D0q\u0092\u00B8\u00A5:\u00E2V$yr\n\u009D\\x0013\\x0004@\\x0000\\x0004\u009C\\x0008@\u009A@\u009A\u00A4\u009C\u0080\u00D0q\u0092\u00AC\\x0010\u008D\\x00144\\x0001C0\\x0008\u0080\\x0000\\x0008\u00C8\\x0013\u00804I\u00B9a\u0096\u00EF\n\u00A9\u00CD\u00B98\u009Fl\u0097\u0083h\u008F5\u00FChNj\u00BB+b!A\\x0000\\x0004V\u00E4!M M2A@\\x0018\u00A8A\u0092%\u00FE\\x0016.\u00B95\u008F?[\u00D4\\x0010\\x0004@ \u009E\\x0004 M\\x0012`\u009C\u00E2\u00D9u\u0092U+\u00A79\u0091\u0098\\x0007\u009D\\x0008\u00FD=p\u0099$\u00AB\u00EF\u00A1\u00B6 \\x0000\\x0002~\t@\u009A@\u009Ad\u0085@\u00E2\u00CC|\u00E2*\u00ECw\u00F4A~\\x0010\\x0000\\x0001\\x0010\\x0010\\x0012\u00804\u00C9\u008Aa\u00C6\\x0003@\\x0004\u0084\u0093#\u00F1tB8\u00EA\u0092$LB\u00A1\u00B3\u0081\\x0000\\x0008\u0080@1\\x0004 M M2D\u00C0iZ'n\u00EA\u00C4I\u0097$kaQ1\\x0003\\x0013\u00CE\\x0005\\x0001\\x0010\u00C82\\x0001H\u0093\\x000c\\x0019\u00E6,wt\u00A3\u00ED\u00F1W'\u00D0%\u00E8\u00A8 \\x0000\\x0002\\x0019'\\x0000i\\x0002i\u00929\\x0002n\u00EA\u00A4\u00AC\u00D3%.\\x0015\u008B\u009B_'\u00E3\u00E3&\u009A\\x000f\\x0002 \\x0010)\\x0001H\u0093\u00CC\\x0019\u00E6H\u00FBSR\n\u008F\u00A1\\x0008\u0088a\u0095\u0092r7QO\\x0010\\x0000\u0081\u0094\\x0011\u00804\u00814\u00C9(\\x0001\\x000f)PB\u00F7\u0089{M\u00E0/I\u00D9\u0098\u008B\u00E6\u0080\\x0000\\x0008x\\x0012\u00804\u00C9\u00A8a\u00F6\u00EC\\x0019Y\u00C8P~M\u00E0\u00B0S-\u00BF\u0092(\u00E6;\u00AFd\u00A1\u009F\u00A0\u008D \\x0000\\x0002%&\\x0000i\\x0002i\u0092i\\x0002\u009E\u00EADsZ,\\x000e\u0099\\x0012]\u00D7%\u00DC\u0095I\u0093DlV[\u00E2\\x0001\\x000b\u0097\\x0003\\x0001\\x0010\u00C8\\x0002\\x0001H\u0093\u0090MN\\x0016:M\u00CA\u00DA\u00D8\u00B9\u00C2[%0\u00A1\\x0010\u0082\\x0003\u0083\\x0014\u0089\u00C3o\u00E2X\u00F6\\\u0081.IY7Cs@\\x0000\\x0004\u00E4\td\\\u009A4\u00D5\u00F6\u00AB\u00A8\u00B8TO\u00C3\u00EAL\u00E0jr\u0085\u00AF.\u00CD\u00D5\u0085\u00FF\u0093Ku9\u00CB\\x0015\u00C3\u00BFD\u00A4\u00C2+\u00E2\u00FA\u00D7\u00D6V\u00AB\u00B7\u00A6zt\u0093|\u0087\\x000e\u009C\u00D3\u00E6\u00C3\u00A8{\u00EE\u0096:\u00A7\u00DF\u00AFQ|\\x001e~\u00FC(,\u00BF\u00D3\u0086o\u00F6\u00E3\u00BE\n\\x000f\u00DCd\u009C\\x0008\\x0002 \\x0000\\x0002\u00F1$\\x0000i\u00C2I\u0093~\u00B5M\u009C8\u00A8\\x001b\u00C6}\\x0015\u00BA4a\u00BA'\u00B9\u00D2\u00A4\\x0004\u00F5/\u00AD4\u00A1\u00E7\u00B30\u00C9\u00F2J\u00EE\u00D2\u00FFRq\u00A9\u00834\u00B1\u00BB7\u0098\u00F2\u00B0&\u00D5\u00D1\"/G\u00B4I\\x001c*'a\n5R\u00F9\u008B\u00C2A\\x0000\\x0004\u00B2H\\x0000\u00D2D\u00D3\\x001f\u00D5\u00FD\u00AA+.\u00AD\u00AE\u00AD5:\u0081\u00EAP\u00E9W\u00CD^\u00DC+B\u0096&u9VlR\u00A5I\u00D2\u00EB\u00EF\u00F6\u00A8w.\u00AE{\u008Et\u0089\u00B44\u00F1+>\\x001c7\u00CB\\x000fe\u00C2\\x0008\u00B2\\x0006\\x0004@\\x0000\\x0004\u0092O\\x0000\u00D2D\u0093&\u00B9a\u008A\\x001b#Wc\\x0018-\u00D5\u00FA\\x000e\u00CBi\\x001a\u00C2&M\u00BC|*\u00E6\u00A9\"\u00D3\u00AC\u0084n\u00D7\u009D&\u0092\u0094^\u00A5\u009F\u00DE\u00AF\u00B6n4i&\u00B5\u0092\\x0005\u00A7\u008E\u00A9\\x0004\u00AE\u00CE\u00E6\u00CA\\x001b\u00E5\u009B\u00BDA\u00AA\u00FB\u00CE\u00A5\\x0004Nv\u00E8~\\x000b\u00B38\u0093\u00A9?\u00D7\\x0004\u00BD\\x001a\u00E6y\\x0019\u00CF\u00AB\u00E4\u00F3V\u00AF\tw\n?\u00D7f\u0092w2y\\x0018%'\\x0002\u00DA\u00F1\u00DF\u00FD7U\u009D\\x0014\\x0004J\u00D3\u00EC\u00CB\u00F5#\u00EA\u00F1\u00DB\\x001fk2\u0089\u008CY\u00B5\u00B7\\x000b\u008FK8N\u00C2\u0089bI\u00FE`\\x0014O\u00C72j\\x0005\\x0002 Pz\\x0002\u0090&\u00BA4\\x0019\u00ADF6\\x0018vN5~\u00D5\u00A3kE\u00D2\u00C4f\u009B\u00AD!\\x0011V]\u00A2i\\x000b\u00ADp\\x0019\u00D3.(A3\u00ED\u00A6\\x0008\\x0018Q\u0094\u008CIO\\x0018sR\\\u00AC\u008CG\t\u00E2\u00D6q\u00DA(`\u00FD\u00CD^\"\u00CF\u00AB8K\\x0013Cr\t\u00B4\u0097D\u00B1d\u00C2\u00DD\\x0008\u0098J \u0081\u00F2;eZ\u00C7\u00AAK\u00CC\u00AAE\u009D\u00B5\t$M JJ?\u00E4\u00E1\u008A \\x0000\\x0002\u00F1'\\x0000i\u00C2\u008C7M\u00E5\u00A86Iw04)\u00BE\n:hH\\x0004\u00C3\u00B4\\x0017D\u0083\u00EE\u00AE0\u008E\u00E8\u00F3A\u00BA\u00E53\u00FC\\x0019\u00BA\u008B\u00C5\u00980\u00F2\u009C\\x0010\u00E1\u00A4\u0089\u0093W\u0080\u00BD%[\u00AFe\u00AD\u00B0\u00DA\\x0010>\u0098\u00D4vik\t\\x0005\u00DB\u00AC\u00FB9l\r4\\\\x000eN\\x0013R\u00F2\\x0004\n\u00FE$\u00DBU\u009C\u00BC&\u009C\u00824|W:jNX\u00E8us\u00CCc\u0096\u00A1\u009C\u00CF\u00CC\u008A\u00A8\u00B3&\u00A7h\u0094\u00FFR\u00F1\u00DC+Z\u00EC\u00C8\u00E2[\u0098\\x0007\u00A5z\u00F6,=\u009A\u00C4\u008F4\u0081\"\u0089\u00FF\u00C8\u0088\\x001a\u0082\\x0000\\x0008\u0094\u0091\\x0000\u00A4\u0089!M\u00F2\u00AA\rc\\x0012\u0084\u0099I\u00FAl\u0093&\u00E2\u00D8L\u009313\u00D4\u0080s(\u0089\u00BC4\u00E1\u00C3_\\x000c!b\u008B\u00891\u00AC\u00B5M\\x0013\u00B0\u0099\u008B\u00C2\u00A4\u008F\u0096\u00C1\u00B9\\x0004Cv\u00F0\u00D3@N\u00F2\u00C5A\u009A\u00F8 \u00E0r\\x0015Gi\u00C2\u00AF\u0096\u00B2\u00904\u00A4\u0089s\\x001ey\\x0002z\u00EB\u008C\u00E6\u00FC\u00EE\u00DE:\\x0016*\\x001b$\u00BEU\r%\u00C1\u00D2\u009B2\\x000ev\u00B84\\x0008\u0080@R\\x0008@\u009A\\x0014\u00A4\t\u00B3@\u00AA\\x00157<(NN\\x0008\u00B3b\u00E0BC\u00945>\u0082)\\x0015K~yibZ\u00B4\\0\u00F9\\x000e\u0093\\x001az\\x0006\u00CB\u00E5\nQ\u009F\u009E%\\x0014\u00820x\u00D9\u00E1S\u009A\\x0004$`\u00B9\u008AK\u00ACI!\u00AE\u00A2\\x0010\u0094\u00A3\u00AE\u00AE\\x0012\u00825\u00E5\tB\u00C0\u00E1\u0086\\x0016\u0096\u00E4\u00E8\u00B2\u0083\u00A9\\x0016-\u00E9kv\u00922\\x0016\u00A0\u009E \\x0000\\x0002 \\x0010\\x0013\\x0002\u0090&\\x0005i\u00C2&G\u0094Y\\x000cf\u008A\\x0014\u00DB,)M\u0098\u00C7\u0085[\u00C8#\u008Cf(\u00C4\u00D2JK\\x0013\u00B7\u00F5\u00CC\u00FC\u00DAfm*\u00CAS\u009A\u0098\u00A3w\\x0005%\u0084#M\u009C\u00E29\u00DC\t\\x0004\u0091&\\x0016\u00F2b\u00B0\u00FC\u00DD)\u0092\\x0000\u00B7\u00D5M\u00E8\u00EB\u00B6\u00B2\u00B8D0&\u00E3 \u00AA\\x0001\\x0002 \\x0010+\\x0002\u0090&\u009C\u00A4`\u008AD_\\x0014\u00C3\"-,\u009A\u00C3\u00C1\u00F6[\u00DE\u00DD\u00CD+\u00909\\x000f\u0087\\x001e\u00BD\\x0011P\u009A\u00E8Ww\u00DC\u00FF\u00CDS\u009Ax\u0096\\x0010\u009A4\u00D1\\x001c\\x001bN+\u0095D\\x0004\u0082H\u0093\u00C0^\\x0013\u0097=\u00F4\\\u00EE\u008E\u00CB\u00C2+\\x0008\\x000b\\x0010\\x0000\\x0001\\x0010\\x0000\u0081p\\x0008@\u009A\u00F0\u00DE\\x000ef\u0093r9\u00D5\\x0005\u00C2\u00E23\u00AC\u00EE\\x0010\u0089X\\x0013E{R6\u0093\u00C3\u00C3!$\u00C2q_\\x0013\\x0007\u00AD#\\x0008%1\u00F7\\x0003A\\x0006\u00B5(\u00C7\u0090O{7\u0092\\x0010\r\u009Ea\u00B0\u00C1\\x0008HJ\\x0013\u00D3B\u00EE\u00C0\u00B1&\u00FCBq\\x000b\\x0004\\x0011\\x0001\u008F\\x001b\\x001a\u00CE\u00D3\\x0018\u00AB\u00B7\\x0016T\\x0006\\x0004@\\x0000\\x0004\u00CAE\\x0000\u00D2\u0084\u0097&\u00FC;\u00B1\u00F6Vm\u0095&\u0085)\\x001e\u00C3\u00B6Y\u0097\u0096\u00D8\\x0016\u00C5\u00D8\u00D7\u00C1:yYl\u00EE\\x0016\u00EB\u0096$\u00B60O\u00DD\u009C\u00DBV\u00D3\u00E8^\\x0001cj\u00C9\u00BAt\u00D9\u009A\u00C1\u00CD\u00A3\u00E3\u00B4\\x000eH\u00B0c\u008A\u00D2\\x0004\t\\x0002\\x0012\\x0002(\u00EA\\x0015:\u0086\u00C4qbhZ\u00AEe\u00DE2\u00DF\u00AEPK\u00BEwm\u00B9\u0086\\x000c\\\\x0017\\x0004@\\x0000\\x0004\u00A2&\\x0000ib\u008A\\x0011)\u00C4H\u00EAf\u00C9&M\u0084Q\u00AE\\x0005/\u008Bz\u00C3\\x001c\u00F65\u00E1\\x000c\u00B9)\u00E2A\u00E0;q\u00D6.\u00C2(\\x0016^\"\u0088\u00F75\u00E1\\x0002c=J\u0090\\x0010\r\\x0005g\u0092\u00D3\u009E\u00B6\u009E\\x0004$\u00AE\u00E2\"M,Q\u00C0\\x0005\u0080\u00CE\u00FB\u009A\u0088\u00A2zM\u0081#nw\u00C7\u00B39v\u00F5\t?\n\\x0008\u0080\\x0000\\x0008\u0080@@\\x0002\u0090&\u00E6\u008DV\u00AD>\\x0006\u00C3\\x0001`\rM\u00F0\u00DA\r\u00B6\u00E090\u00EF\u00B7&\u00DA\u00B0U\u00E0{pu\u00ABX\u00C4\u0087@\u00D9\u0098-\u00B4\u00BD|\u00B7\\x0012$D\u0083e7U/\u00DF\u0089\u0088\u0080\u00C4U\\V\u00E8p\u00F5\u0097\u00D9dV\u00F0\\x0003\u0081\\x001e\\x000c9\u00806\u00DF\u0089\u00F8\u0086\u00C2k\u0082\u00EDhA\\x0000\\x0004@ $\\x0002\\x0019\u0097&\\x0001\\x0005]\u00D4\u00BE,\u0094/\"\u00E0\\x0019;\u00EC\u00B4x\\x0018w\\x0019\\x0004@\\x0000\\x0004@ I\\x0004 M\u0092t\u00B7\u00B2-Y M\u00D0WA\\x0000\\x0004@ \\x0013\\x0004 M2q\u009BS\u00A1i M\u00D0WA\\x0000\\x0004@ \\x0013\\x0004 M2q\u009B!MRA\\x0000}\\x0015\\x0004@\\x0000\\x00042A\\x0000\u00D2$\\x0013\u00B7\\x0019\u0086\\x0019\\x0004@\\x0000\\x0004@\\x0000\\x0004\u0092B\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004@\\x0000\\x0004@\\x0000\\x0004@ F\\x0004 Mbt3\u0092\u00A2gQO\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\u008E\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8fD\u00A7@Q2\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008$\u0085\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f$E\u00CF\u00A2\u009E \\x0000\\x0002 \\x0000\\x0002 \\x0010\\x001d\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\u00804\u0089\u00D1\u00CD\u0088N\u0081\u00A2d\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H\n\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0018\\x0011\u00804\u0089\u00D1\u00CDH\u008A\u009EE=A\\x0000\\x0004@\\x0000\\x0004@ :\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0011\u009D\\x0002E\u00C9 \\x0000\\x0002 \\x0000\\x0002 \u0090\\x0014\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\u0091\\x0014=\u008Bz\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080@t\\x0004 M M@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004bD\\x0000\u00D2$F7#:\\x0005\u008A\u0092A\\x0000\\x0004@\\x0000\\x0004@ )\\x0004 M|H\u0093\u00BA\u00FA\u008A\u008AV.\u00D5\u00D7\u0099os]\u008E}k=\u00EE\u00E3\\x0012\u00E2~\u00F3k\u008E]7\u00F7\u00ABsQ2yV\\x0014]\\x0013{\t5\u00B9\u008AK+\u00F8\u0094\u00AB\u0089\u00E0*Q\u00D4\\Xfmm\u00F5\u00A5\\x0015\u00D5\u00A3\u009B\u008A}\u0080\u00C3*G\u00A6\u00E1\u00A5\u00BC\u0096\u00BD>\u00E5\u00BD\u00BA\\x000c\\x001f\u00C9<|C\"jTD\u00C5J60p\u00B6\u0098V\u00BB.G#\u00CF0\u00CB \u009C\u00E4\u00C1'\u00F0\rJ\u00E3\u0089\u0090&r]Y7\u00FC&i\u00A2\u00C8\u0085\u00EA\u00DAuF\tY\u0093&\u00EA\u00D0 L\u00FDj\u009B\\x0012\u00FA\u00B4\\x0004\\x001f\u0085\u009Bj\u00FBq\\x0003e\u00F0r\u00E4:$\u008F\u00B7\u0094\u00D7\u008AV\u009A\u0098\\x0019\u0096\u00B8\\x000bE\"M\u00CA\u00D7+\u008A\u00A2\u0097\u0088jC\u009A\u00F8\\x001f+\u008A\u00EA\\x0015%\u00BD\\x001c\u00A4\u0089\\x0004\u00EEu\u00B5\u00D5\u00BC\u00B3\u00C4\u00FA9W\u00A7\u00DD\u00EFLI\\x0013u\u00F0Rt\u0089\u00D1|FR\u00D7+\u0099{\u009B1\\x000f\u0094\u00A5\u0094\\x000b\u00A5\u00BCV\u00B4C[Y\u008DM$\\x0018\u00CB\u00DA\u00A2\u00E07\u00AB|\u009D\u00D9G\u009D\\x0013\u00CAV\u00C2\u00E2\u00F8\u0080\u0090\u00DA\u00D2 M<omS\u00ED!}\\x0012\u00E7\\x0010\u00E7\\x000c\u00E0\u00F4J\u00F5\\x000e\u00E6\u00FF\u00E7\u00A4\t\u00AFf\u00F8\u00B3,\"\u00C6i\u009A\u0086?\u009D\u00A6\u0087\u0084\u00935\\x0012y\u009AvT\u009B\u00DC<\u00A6\u009A\u00E8\u00ED:T[gd\\x0013TU\u00CC\u00A7it\u00B5\u00A2K\u00C4\u00FA\u0083\u00A9\\x0016\u008Bd\u00F1\u00E4\u009C\u00F4\\x000c\u00E5\\x001b\u00CD#\u00B1\u00A9e\u00B9\\x001de56\u0091`,k\u008B\u0082[\u00B8\u00F2uf\\x001fuN(\u00DB\u00B2<Y\u00C9\u00BB(\u00A4\u0089\u00D7=3\\x0014\u0080=\u0082D\u00FD\u008A\u008B\u00FF\u00D0\u00A5\u0089\u00DD\u00C5\u00C2\u009B|\u00E1\u00DC\\x0010_\u00B8\u00E3\u00E4\\x0011w-\u0089<\u00D6\u00C8\\x0018V\u00ABBM8\u00C9\u00A5WX\u00D7X^LVx\u0089\\x000f\n@1T\u008B:\u00E2\u00E7jt/\\x000b\u00CD\u00F5\u00D8m@\u00E1\u0088\u009A\u00CD2\\x001f\u00A4\u0095\u00A0\u00D7J\u00FD\u00D3\u0098H2\u0085\u00B6\u00D8\u00AF\u00C5F:\u0097S,C\u00A1\u00B5n\u0086sH\u00BD\u00A2\u0093+\u00C8^\u00BEQN!\\x0016\u00A7\u00BA\u00B6\u00D6\\x000cV\u00BEV\u00AC\u0092|X\\x000f_\u0093P\u00AE\u00E5Q\\x0019g\\x000e\\x000ewS|\u0083\u0094\u00868\\x0014%G\u00A3n\\x0018?\u0087\u00C8#5\\x000c\\x00157\u00CFh\u00BA_^\\x0019\u00DC't\u009C\u00E0\u00AB\u00B7F\\+\u0097^a\u00F4:s\\x001eS\u0090\u0093^\\x001f\u00ED5@\u00E9\u00F3\u00B6.$\u00EA\u00BD\\x0006\u00F9\u0080\u00A5E\u00DA\u0099m\u00BDEE\u00C7\u00B5\u00CB\u0092\u00C1\u00ADWx\u00DDP\\x001f*\u00C7s\u00C4C\u0086R\\x0013\u00804\u00F1\"\u00EE#\u00BC\u00B4 M\\x000c\\x001b\u00AF\u00EB\\x0003#$\u00C56\u00E9c-\u00DF(D?\u0085\u00F3\u008E\u00E82H\"\u008F~\u0096\u00A1\u009Ct\\x000f\u008AQ\\x0013N\u009A\u00F8\u008D\u00DBe\u00E3\u0085\u00E4\u0094\r\\x001bk\u00FA\u00A9^\\x0016\\x0016a\u00EA&M\u00F2\u00EA@l\\x001a\u0082\u00D5\u00C1K\u00F3\u00C1p\u00C34g\u00A2\u00CC2\u00C8t\u00AD\\x0015\u00AC@[L\u008C\u00AB\u00C8\u00D0\u00C7tQ0\u008D0\u008C\u00C6i4\\x001f\u0096\u00E3U\\x0014\u00DF.\u00B5\\x0012\u00B6\u00C2\u00D2\u00EA\"\u00AE\u00E5U\\x0019W\\x000e\u00E6\u00BB\\x0019\u00BC(oib\u00D64\u00DA=5\u00BA\n3T9k\u00FCS\u00E1~yep\u0096&\u0082F\\x0015\u00FA\u008Fs\u00AD\u00BC\u00A4\u0089Lg\u00B6u]Gu\\x0012Zi\u00D1vf\u00CB\u00BB\u0087\u00D6\u00B5\\x000c\\x0015\u00C5?\u00FER}\u00C9\u00ED\u008E{\u008D\u00ED\u00D0.1&\\x0000i\u00E2\u00D1}m\\x0016\u00DD%\u00BF\u00A1\\x0018\u00B8\u00B9\\x000c\u008B\u00F2\u00D0\u00FE\u00E4\u0083gu\u0089\u00C0\u00F4\u0081H\t\\x0019\u00F32\u009A\u00CE\u0090\u00C9c\u00EAs\u00BC\u0083\u00C4.M\u00F8\u00CA\u00C8=\u00CCvm\u00E1\u00D2\u00C5\u00B5\u0091\u00CE\u00F9\u00C5H\u00F7jh\u00C3\u0093\u00B5p\u00CEmk/J\\x0005\u00D7|'\\x000e\u00D72k\\x001d\u00CD\u0096\u0088W\\x0012\u00F1WW_\u0094\u00F9WO\u00EB\\x001b\u009E\u00A9\u00D5\\x0002\\x001f8:{\u00B1v\u00AC\u00A7\u00A5!\u00E2\u00B7a\u0083\u00A1\u00D9k\u00A5\u00DB\\x0012\u00A3\u00AA\u00FE\u00AE\u00E5I\u00D5\u009D\u0083\u00CD\u00A2\u00BB\u00D1\u00F6@\u00EA\u00EA\u00A2g~\\x000b^S\u009AJ\u00D3\u00F5\u0093E\u008B\\x0018\u00CC\u008D((\u00A7\\x000cN\u00D2\u00C4\u00CA\u00C7\\x000c_\u00A6V\\x0016\\x0011\u00A9\u00AD\u00FF\u00D2*\u00CC\u00F5C\u00F3\\x0011\u00FD\u00B6\u00EA\\x0019\\\u00FB\u00AD\u00DE\u00BA0K3W;\u00AC\u00CE\u00AC\n\\x000e}\u00844d\u0090v-N\u00B8xvKAX\u009B;\"\u00B9\u00C1-\u00C6\u00D6\u00BA\u00D8e\u0083\u0089j\\x001a\u00A4I\\x0004\u00D2D4;\u00C3T\u00855\u00F8\u0083\u009F\u00FAQ\u00A7Z\u00C4J\u00C8\u00ACEd\u00F2(\u009DX\\x001c\u00BDk\u0097&\u00FE\u0083B\u0084\u00D2\u00C4\u00B6\u008A\u0098\u0097\\x001a&\u008B\u00E2\u00EA5\u00D1\\x001c\u00FE\u0086\u00FDP\u008Be\\x0003\u00AE\u00DD\u00A1R\\x0008\u00BCeC\u009B\u00CD\u009D\u00E3}\u008A\u00CB\u0084\u008E\u00D1\")\u00FF\u0090H\u009A\u00F0.\\x0016\u00CE\u008E\u00FA\u00AE\\x0015\\x0007A0<\u00B1V\\x0007\u00BD\u0096we\u00DC9pw\u00B3\u00D8\u00A2\u0098\u00B1\u0091\u00A1\u00CD\u00BD\u00D9\u009B\\\\\u00A2\u00A9@\u00BD@\u00B5p\u0097\\x000cN\u00D2\u00C4\\x001d>\u00DF\u009Cj%\u0094&6\u0095f\u00ED\u00C0v\u00DF\u00A4\u00F0\\x0014n\u00B2\u00CF\u00BA\u00E8\u009D/\u00C1Wi\u0096\\x001bQ\\\\x0007\u00B3\u00F6X\u00CB\\x0013\u00DD\u00AF\u00B6\u008E\u00C4\u008Av_\u0094{\u00C4Z\u00E1\u00DD\u0097X%\u00DD\u00EE8\u00B4H\u0082\t@\u009Ax\u00DD\u00BC\\x0000\\x0013:\u00CE\u00D2D\\x001c\u00FF\u00C1E\u0081\u0088e\u0087yvF&\u008FY\u0097(\u00E2\u00C3qBG:\u00F4\u00B50\u00C4\u00D8\u00879K$\u00841wc\u00F1\u0088p\u0091\\x001f\u00C2\u0089p\u00ED\\x0012\u00CA\u00E0\u00A5y\\x0008\u00F8\u00D9\\x001c\u00F3\u008C\u00BEy\u008E\u0086\u008DP6\u00D1\u00E3}\u008A[\u00AC\u0089\u00C0W\u00EF\u00BCk\u008BW\u00E4 W7\u00BF\u00B5r\\x0018\u00A6M\u00C17N<=\u00AF\u00E5\u0099\u00C1\\x001a\\x001d\u00A2\u00DE\u00DC\\x0002\\x0007\u00EDrG\u00EA!M\u0084\\x001e~\u00934\u00B1\u00CA\\x001a~\u00FA@X\u00B8\u00F55\u00DD\u00EE\u00BA\u00F3\u0080\u00EF0c(\u00AE\u0095\u00B7\u008Cs\u00A8\u008F\u00D3\u0083\u00A3\u00F7^\u0087J\\x0006,M[g'v\u00F6\\x0014\u0082\u00B7X\\x001b%\u00FA\u008Fe\u008C-\u00E8\\x000f\u00E5\\\u00BA\u008A\u00F1\u00BCs\u00AAE\u00A2X\u00AF\\x001b\u009A('A\u00A6<\"\u009D\u008B\u00F3\u009D\u00F3M\u00A9u~\u00DEH\u00EC\u00ABE\u0095j\\x001a\u0090_?\u0094\u00C2\u00EC\\x0002\u00A7\u00E5u\u00FB.\\x001b<\u00A3\u00E7\u00C8\u0095\u00FD\u00C7\u00ED\u00AA\u00AC\u00AC\u00BC\u00A4\u00AA\u00AAj\u00F8\u00DC\\x0006\u00FA\u009B\u008E\u00EEj:\\x001b\u00B8\\\u00E5\u00C4\u0082z*KW\\x000b\\x0010\\x0006\u00EB\u00ED5qtT\u00C8xD\u0082\u00E5\tS\u009Ax\u0086\u00C1:\u00BD\u0080JJ\\x0013\u00F5}H\\x001d\u00F8L\u00A3\u008F\u00F7h\\x0015\u00B24\\x0011\u0084\u00D0Z\u00A6x\u00B8\\x0001%\u00C5\u00D2\u00C4\u0095\u0083?i\u00E2\u008ETbB\u0087\u008F\\x0006\u00B5O\u00E8\u0094^\u009A\u00D8\u00C3\u009C]j\\x0005ibD\r+\u00EF\\x0012\u00CA\u00EDV4\u00AE\u008A\u0085>\u00F0s=\u00DE\\x000f\u00BB\u00D8\u00C7&\u008A\u00A3/\u008B\u00E1\u00C0E9\\x0002\u008A\\x0016Q\u00E5\\x0008/A\u00DC?V\u0099g\u00A9\u00A6BI\u00EBY\u00F2-SR,M\u00C8\\x000c\\x0007X<l\u00DC\\x0015q\u00AC\u0089\u00F3\u00BE\u00AE2q$\\x0012yt\u00F7LA\\x0003\u00D9\\x0002r\\x000b\u008B\u0087\\x0003l\u008F\u00E6\u00BAx\u00D8\u00EC\u00BDp\u0098\u00BEq\\x000e\\x001a\u00D0\u0097<\u00D0\u00E0\u00C5\u00B9O\u009C}\u00BC\u00DC;\u0099\u00EDZ\u009E\u00AF\u00BC\u00D6\u0097\\x0015\u00E1\\\u0095q7\u0099\\x001d\\x0012o(\u00E7C\u009A\u00F8\u00AE\u0095\u00C4\u0084\u008E\u0093\u00D7\u00C4\u00F3Z\u009E\\x0019\\x0004\u00EFs<\\x0007os\u00EB\u00EA\u00984!u\u0093&\u00BC\u00FF\u008C\u00F3\u00AE\\x0019\u00C1@\u009E\u00EE}\u00AF\\x000c\u0081&t\u00A4jU\u00C4\u0084\u008E\u009Bs\u00917~r\u00D3C\u00B2\u00A5\u0089&t\\x0002w0\u0087\u00FE\u0093\u00ABS\u00803\u00E7(\u00DB\u00E1\u00AD\u0096\u00DF\u00B4P\u00A2[z\u00DDP\u0088\u0083\\x0018\\x0010\u00F0\u00ABH\\x000c\u00BDb\u0091&L\u00A0\\x0014d\u008A\u00ACFI\u00B34q\n\u00DA0v\u00ACw\u00DDr\u00CDq\\x0001\u008E~\u0096\u009E\u00C1\u00BA9\u008A\u00B1\u00CFl\u00A0\\x0015:FP\u008BVla\u00B1\u00B1-\u00D6$\u00C0\u0084\u008E\u00D2\u00E3\r\u00CF\u00BCu\u00C9\u0080\u00E1uw\\x0008k\u00A5sY\u00B8\u009F~\u00A2>Co\\x001a\u00FBTQ\u0092\\x001bfLB\u00F3o\u00DB&\u009F\u0093I$9\u00C9 \u00F3&+n\u00BA\u00CAjh\u00CD\u009B\u00D6\u00DB'\u00DD\\x000b\\x000f\u00BFy\u00A0t\u008F\u00A7\u00D1\u009A\u00EC\u00DC\\x0010q\\x0018l!?k\\x0002\\x001fT\u00EBhu<\u00AF\u00E5\u0095\u0081]\u00CB^\u00BE&\u00D1l\\x0016\u00DD\u00B2\u00A5\rO\u00DB\u00A3(a\u00F4\u0080\u008E\u00C2\\x0014\u00DB\u00CBM Z\u0097S\\x0015\\x001c'\u00968S=N\u00D6)\u0083\u00934\u00B1\u00F1\u00E1\u00E1K\u00D5\u00CA\u00D0\u00B2\u00A6^!\\x0015\\x0006\u00EBOL\u00F0\\x0013m\u0096\u00C0X\u00F7\\x000ei\u00B5aQvfc\u00E2\u0095V\u00ED\u00E9d\\x0014\u008C\u00FD\u00AA\u0099\u00EFD\u00932^\u00DDR\u00B4\u00BB\u00A3\\x001d\u00A9\u00D7|}\\x000c\u008Cw*\u00A7r\\x0002+\\x0012\\x0019iR\u00D0(\u00DE\\x0002%\u00DD\u00D2\u0084\u00BA\u00AF\u00C4>\"\u00A6-\u00D7\u009C\u00BC&NEyn|b\u00D9\u009C\u00CD\u00B3>\u00CE;\u00D8\u00EA\u00CB\u0089\u008B\u00F2\u009A\u00A8\u008F\u0093p\u00D9\u00A4\\x001e\\x0002\u00E22Qm\u009B\u009F\u00AEV\\x0017\u00BE\u009A\u0083\u00F8\u00B4Q\u00C6\\x0012\u00D9'^Oh\\x000e\u00F8\u00F7w\u008A[\u00AC\u0089n\u00CC\u00A4~$\u00A8@\u00C3\u00F0Q\u00BB\u00D8\\x0015\u008F\u0086\u00D8FLA~\u00B1\u00C1\u00B3\u0086\\x0002\u00E8\u00DE&\u00FBO\nX\u0085\u008Em\u009D*\u00A7\u00B9E?G \\x0014F^\u00EDrGjfh\u0081`\u008B\u00B3\u00D6*\u00AC\u00F54fM\\x0015\u00F3fj\u0088E\u0088\u00B8dp\u009E\u0085t\u0083\u00EFQ+\u00D7^!<W\u00FA\u00B6\n\u00C3K\u00AD71`i\u00D1v\u00E6\u00C2\u00D0a\u00DC\\x001d\r\u0085\u00E9=G\u00AA/\u00D9\\x0017\\x000f[\u00D6u'\u00F7G3\u0092)\u009B:W(s7\u009E\\x00137J@\t\u009B\u00E5QS\u009E\u0092\u00DA^\u00E3\\x0008E\u0099(I\u009F\u00D0\u00E1\u00BD&\u0096\u00CF\u00AE\u00B3<\u00A9\u0097&l\u008A4\u00C0\u00CF\u00FByn\u00E4*\u00FC9@\u0089\u009D^M\u0081\u00AE\u00C2\\x001dc\u00AD;\u00D2\u009AW)\\x001b\\x0013U\\x0001\u00BD&\u0096\u0097\\x001b\u00D1.#n\u00B1{\u0085\u00B1O\u00BC\u00D3\u0089c\u0088\u00BEu\u00FF4\u008F\u00B5?\\\\x001d\n\u00A3\u00B6\u00CB\\x001a\\x0010\u00EB\u00CB\u00A5E~\u00B9\u00AEf\u00D2-\u008D\u00E7\u00DE-\u00E6\u00F7B\u009B\u0098s\\x001a\u0092xK&\u00DCr\u00CD8\u00D1\u00D1{\u00E4|-\u00DDwe\u00B6\u00F7\u00C6K\u00A73\\x0007\u00DF\u00D7rE\u00CA3\u00B4s0\u00D9r\u00BA\\x0017\u00FC\u00CB\u00BD>\\x0019\u00C45D v\u0089\u009BS\\x0006\u00F7\\x0000)'\u00F8\u009C\u00FFF\u00FF\u00DD\\x0006\u00B3\u00CBA\u00A2W\u00B8\u00EC\\x001f(\u00ED5\\x0011\\x0004\u00F1\u00D8w#\u00F4Q\u009AD\u00B5\\x0005\u008E4C\\x0017z-\u00B32\u00B9\u00FDt?\u008A`\u00AA\u00D4\u00AD[z\u00DEq\u00C4\u009D\u0094\u00DAi\u00E4\\x001eM\u00C2\u00E4\u0088\u00A4\u0097\u0088_\u00A1C\u00E2CI\u00DC\u009C\u008E]\u00A98\\x0008\u0094lH\\x0013I\u00A6\u00C8\\x0016\\x0006\\x0001\\x000c+\u00B2\u00CFp\\x0018\u00B4Sp-\u008F\u00D5=\u00D6U'\u00C9|%\u00C5\u00BD\\x0006\u0081x\\x0012p\u00F1\u0094\u00F8R$F\u00EB\u009C\\x0016\\x000f\u0093\\x0004q\u00F2\u00A0\u0090v\u00B1\u00AD\u00E5\u00814\u00C1H\\x0017.\\x0001\u0097-\\x001c\u00C2\u00BD\\x0010JK\t\\x0001H\u0093\\x0014\u00E8K4!\u0091\\x0004\u009C\u009C%t\u00DC\u0098\u00A9\u00F1\u00AB\u00A8\u00DC\u00F75qq\u00A2\u0098\u00DD'\u0090&)\\x0019\u00DFc\u00F0`\\x0014<\u00E7\u00FE\u00F7\u0082\u00C3]\u00C8.\\x0001H\u0093\\x0018<\u00BC\u00D9\u00ED~\\x0019\u0085O\u0091%\u00C2\u00B0\\x0012E\u0094\\x0014\u00D7\\x0019d\u00B6\\s\\x0012(\u009C\u00FB\\x0004\u00D2\u00A4\u00B8\u00DBP\u00E4]L\u00D5\u00E9\u00DA\u00EC\u00B2\u00D7/\u0099\\x00018\\x0008\u0098\\x0008@\u009A\\x0014k\\x000cR5\u008C\u00E0\u00E9\u0088\u009E\u0080p\\x0012\u00A7\\x0018O\t\u00DF\\x0003e\u00A4\t\u009B\u00BE\\x0011N\u00F1\u00E8\u00EA\\x0004\u00D2$\u00FA~\u0080\u0081\\x0003\\x0004@\\x0000\\x0004@\\x0000\\x0004\u00E2@@\u00ACK\u00A4\u00A3\\=\u009B /M4\u0081\"\n\u0092]?\\x0014\u00D2\\x0004\u00D2\\x0004\\x0004@\\x0000\\x0004@\\x0000\\x00042@ j]B\u00C2\u00C5\u00AF4qp\u009F@\u009Ad\u00A0;z\u00EA\\d\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H7\\x0001\u00BB.)>\u00B2\u00C4N,\u00804\\x0011\u00A9\\x0013H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010H5\u0081\u00D2\u00E8\u0092`^\\x0013c\u00E50\u00B7\u00BA\\x0018\u00D2$\u00D5\u00DD1\u00DD/\\x0001h\\x001d\\x0008\u0080\\x0000\\x0008\u0080\u0080'\u0081\u0092\u00E9\u0092\"\u00A5\ti\\x0014]\u009D\u00A4Y\u009Ap?\u00EFg\u00DF\u00B9\u00D5\u00B4a|&\\x0017\u00BB~_[\u00BD\u00B0\u00A2b1\u00FD\u008E\u00A8m\u0081\u0080\u00FAU\u00F5\\x0012\u00E5\u0097\u00D3\u00F3\u00FC\u00E7\\x0010e\\D\u00C5\u0086XC\u00C7\u00A2\u009Aj\\x0017\u008B\u00B95-\u00A9\u00AEXX\u0091[\u008E\\x0005\\x0017 \\x0000\\x0002 \\x0010\\x0017\\x0002\u00F6u\u00C2Q\u00CC\u00E3\\x0018\u00F2(\u00D8\u0084\\x000e\u00BF\u00E5\u009A\u00AAN\u00B2#M\u00CC\u00DB\u00BA\u009B\u00B7\u00AE\u00CF\u00A24av\u00B4bau\u00ED\u00F7Y\u0090&\u00AA\u009E\u00F8\u00A6\u00CE\u00F3\u00F5B\"\\x0003\u00A4I\\\u00C6\\\u0089\u009B\u0085\u00AA\u0082@\u00D6\tX\u00F6U\u008BT\u0097\\x0014\u00EF5a\\x001a%+\u00D2\u00A4\u00FAPu\u0085\u00F1\u0083\u00C0\u00CA\u00DB\u00B0\u00EAP9T]\u00AD\u00FE\u00F6^Ek\\x0006\u00A5I]\u008Et\u00C979\u00F5\u00FF6\u0083]\\x0002\u00AFI)\u00DC\\x001b\u00FC\u0090\u00C4\u00DA\\x000bi\u0092\u00F5a\\x001aj\\x0006\\x00042E\u00C0>\u0095\\x0013u\u00F3\u008B\u00F7\u009A\u00A8Q\u00B1\u00D9\u00F0\u009A\u00E4\u00EAs$A\u00F4_\u00EE\u00A5\u00D1\u00B9.\u00A7L\u00F1\u00E4\u0094\u00FF\u00DB\u00A4I\u00D3\\x000e\u00D21\u00EC\u00B8\u009A\\x0004\u00BF\u00A2\u00A7\u009E\u00EE\u0096!\u00F6\\x0006`y\u008EM=\u00D4}#r\u009C@\u009A\u00B8)'xMb\u00DF\u00BDK-|\\x0001\\x0004\\x0004bJ\u00C0\u00B2\u00E5k\u00D4\u00BA$,\u00AFI\u00BE&#\u00D2dG\u00AD\u00E2 \u00A1\u009F\u00F9ec\u0096\\x001ahR\u00BD\u00A3\u00D6.M\u00AC\u00BFQlW'\u00FC\u00CF\\x0002\\x0017\\x0004J\u00B2\u00FC.\u00AAq]\u00A8\u00D6Y\u00D5(ZX\u00891\u00A0\u00FB\u0090&\u00AC(=\u00F1n\t\u00BD\\x0010}\u00E6\u00C8\u00AC\u0081L\u00B1&\u0086KC\u00FD\u00C0\u0092\u00C9\u00C3\u00E1\u0099A\u00BD\u00AD,zFO\u0085\u0098\\x000f\u00F1q\u00E7\u009A{\\x00186?\u00D2\u00C4|i3g\u00A5Q\u00CA\u0091B\\x001e}r\u008D;\u00CB\\x001a\u00B9\u00E2\u00D4F\u00A5\u00CER\u0094T1j$\u00DBt\u009E\u00DA\\x001f\u00B4\u00B4\u00B8\u00B6N\u0099\u00F53\u00E7q\u00AB@LG\u00E7\\x0012\\x000c\u00C7\u00B8\\x0004\\x0008\u00C4\u0090\u0080u*'\u00BC}\u00D5\\\\x001a\\x001b\u008A\u00D7$#\u00D2\u00A4\u00BAv\u009D\u00EA\u00E7\u00D0\u00FD\\x001f\u00AA_\u0084\\x000e\\x001aq\u00B2\u00BA\u00B0\u00D0e\u0087\u00E1_\u00D1=(\u0094\u0099\r\u00BB\u00D6S\\x000c\\x0017K\u00F5\\x000e5h4\\x0011\u0089Y\\x0017\u00CD\u00F635`\u0096V\u00B2\u00D2\u0084S\\x0012\u009C=\u00D3\u00E2j\u00CD6L7x&\u00EB\u00AB\u009Bjnv\u0089\u00D3\\x0016\\\u0088\u00AEg\u0086<'\u0080lRI`M]k\\x001e\u00924q\u00AB\u0092\u00AE$\u00AA\u0097\u00D4\\x0016\u00D4\\x0018\u00BB\\x0011Vn\\x0005e S\u00A06I'\u00C6hVcZ\\x001e\u00AF\u00F29i\u00E2U\u0081\u0084\u00F4\u00FFD<\u00A4\u00A8$\\x0008\\x0014G\u00C02\u0095\\x0013u\u0088I\u0088a\u00B0j\u00B8I&\u00BC&\u008A\u00B0P\u00DD!\u00CC\\x00003yA\u009Fm\u00D2\u00C4\u00D4\\x0015\u00F8\\x0005>\u00BA4\u00D1\u00D7\u00F5X\u00E6\u0086\u00B8?\\x00130:[&q\\x0004\u00EBJ$\u00A5\u0089\u00CD\u00E3b*Y7\u00B1\u00FA{\u00BFf\\x0017\u00B5?\u00ED^\\x0013\u00D3r!M:\u00E8\u00E7\u00EAJ\u00A2\u00B0\u009E\u00C8\u009CA\u00BB\\x0016\u00FF~o\u00BE\\\u00C1\u00A3\u00A0\u00DE \u00F7\u009A\u00CBH\\x0013\u00DE\u00F6\u009B?[\u00EA\u00CC\u00B9=\u00C4\u008D2\\)\u0086\u00E17\u008E0\\x000f\\x0007\u00BFT\u00CA\u00EC\u00C3\\x0010\u00B5\u00D1\\x0005#\u00F3\u0088\u00F0\u00EE(\u009E\u0083\u008D\u00A15P\u00DA\\x001br\\x0002:2^\\x001e\u008A\u00B3Ih#\\x0008\\x0010\\x0001\u008B\u00CB\u00A4dL\u00E05\u00F1\\x001c\\x0007\rm\u00A1\\x0008\\x000b\u00E6\u00DEP5\u0084\u00E1A\\x0011I\\x0013\u00F1|\u008D&MlN\\x0014\u00CF:\u00C40\u0083j \u00F95\u00C3\u00F6U\u00C4~\u00A4\u0089m\u00F2Eo\u00B2\u00C97c\\x0013\\x0004vibY\u00C6lw\u00ED8gP\u008D\u00A8}\u00A9\\x0011\\x001f\u00FAj\\x000e\u00835\u00A6-\u0082\\x0004\u00C6\n}\\x000f\u00B6\u0089$\u00E7\u00992\u0093\u00BF\u00CA~#D\u0093b4\u00AC\u00C8\u00B6\u00D1\r#\u00D7\\x001b9\u00DF\\x000c\u0093>\u00C2\u0095\u00CF\u00BC\u00D6\u0094\u00A8@\\x000c{;\u00AA\\x0004\\x0002Y$`u\u0099\u0094d*\u0087\u00A9\\x001fH\\x0013\u00CF\\x000eg\u0092&z|IS\u009E\u0089\\x000f%\u00EE\u00C4qB\u00C7\u0088\u008D\u00B5h\u00914H\\x0013>\u0098\u00C0\u00F4\u00BA\u00CF\u0099vIiB\\x0000\u00F9@\\x0013\u00B54K\u0084\u0087)\u00BA\u00C2\u00B1X\u00E1\u00F2\\x0019>\u00A4\u00C3#\u00839~\u0082\u008F\u00A50D\u0098\u00A5\\x0004\u00D7\u009A\u00CBxMD\u00FB\u00C1\u00F0\u00D6\u00DD\u00C1\u0090\u00BB6\u00CA\u00BE\u00D7\\x000bw\u00C4\\x001b\u00F5)Hn\\x0017\\x0016\u00E1\u008C\\x000c\u00BBGj\u00F9\u00D6\u0090)\u00BE\\x0015\\x0012\\x0015\u00F0|$\u0091\\x0001\\x0004@\u00A0\\x0014\\x0004x\u0097I\u00C9\u00A6r M$o\u00ADYy0Er\u00A8\u00B6Nu\u009F\u00B0\u00D0\\x0010=\u00E8U\\x001b\u0091\u00ED\u00CA#u\u00D2\u00C4\u00F5\u008D\u00DFx_\u0097\u0095&\u0082\u00E0S\u00CB\\x0004D\\\u00A5\u0089k\u00CD\u00D3*M\n\u00AAT\u0097\u00A1\u009Ck\\x0007\u00D2\u00A4d\\x001eo\\\\x0008\\x0004\"%PF\u0097\t\u00BC&2\u00EA\u00C4\u00E2\\x0014a+~s9%\u00E8D[Hl\u0091&\u0096?9\u00ED\u00E2\\x0012k\u00A2^\u00C5X\u00FB\\x0013\u00F3Ib\u00FB$\u008BVas0\u00AC/i\u00C27\u0099\\x0019?\u00E6Qp\u00F5\\x0001\u0098\u00BF\u00B5\u00CD1\\x0019\u00CBm\u00F8X]\u00DF\\x0013:|'\u00F1\u00DA\u00D7\u0084\u00AFy\\x0018\u00D2\u00C4e\u00E9\u0093iB\u00C7a\u00FAF\\x001b\u00B98\u0086\\x000en\\x0018[\\x001b\u009D)\t\u00C4\\x0007'M\u0082N\u00E8\u00C8<\u0089\u00C8\\x0003\\x0002 P:\\x0002\u00E5\u008A2\u0081\u00D7D\u00F2\\x001e[\u00A4\t\\x001f\u00D6\u00AA\u00B9I\\x001c\u00BC&\u009AO\u0085\u00CD\\x0001\u00A9\u00C9q\u0085N!O\\x0012\u00D4\t\u00F3\u00C9\\x000bwRg\u0096I\u00B09\u00BD]a\u00E8\u0096\u00DBt\n;\u00C8\u0087\u00AD\u00F8\u0095&\u00A6\\x0008M\u00870\u00D8\u0082!\\x0017\u0086\u00C1\u009A\u00E6#\u00B4\u00C9\\x000b\u0091\u00B8\u00F1\u00A8y(\u00D2\u0084\\x0005\u00DE\u009Ah\u008B\\x001a%-M\u00F45\u00C6^mt\u00C6h\u00BD\u00FB\u00BA\\x0013\u00C5)\u00CC\u00D6!\\x000c\u00D6\u00A5\\x0002\u0092\\x000f&\u00B2\u0081\\x0000\\x0008DE\u00C0\u00B2-=yP\"\u00F5\u00D0\u00D8\\x000bG\u00AC\u0089'q\u00C7\u0085\u00BE\u00C6*b\u00AB\u009BD\\x001c\\x0003[\u00F0\u00B2(\u00B7\u00C15N\u00B6\u00C4\u009D\u00C0\u00E7\u00E5D\u00CE\u0089\u0082\\x0019\u00E6\\x001c'\u00B2^\\x0013\u00D1\\x0012\\\u00C3\\x0018\u00FB\u0095&\u008B\u00AB\u00F9]I\u00CC\u00D1\u00B5\u00AC\u00E6.\\x0019\\x001c\\x0016\\x000f\\x0017\u0082'\n3Y\u00AA2s\u00ADy8\u00D2D[\\x0007\u00C4m\"\u00A2\\x0006\u00C1X\\x0016\\x0019\u00C9K\\x0013=R\u00D5Z`\u00A1\u008D^\u0094\u009C\u00C2\u008C\u00F4:\u0088\u00D7\\x0006{.\\x001e\u00B6E\u00A8\u00F8\u00EC\u0096\u009E\\x000f22\u0080\\x0000\\x0008\u00C8\\x0012\u00B0\u00CC\u00E6\u0094\u00FEa\u00844\u00F1\u00BCU\u00BA41\u00B6s5\u00BC \u00BA\u0087C\\x000f%\u00E1^\\x0004y\u00E5\u00A1\u009C\u00A8\\x0017br\u008A$s7X}\\x0007X\u00A7\u00CEZx\u00AB\u0096\u0095&t\\x000b,\u00C1+\\x001cI\u00BF\u00D2\u0084\\x000c\u00A4m\u00D9\u0088^U}:\u00C61\u0083(v\u00C4\u00B2\u00FA\u00C6\u00E2$p\u00A9yX\u00D2\u00C4p#\u00D9w\u0081\u00D3\u00F751-\u00E5u'\u00C6\u00FB\u00A5\u00DC7\u00A6s\u00A1dR't\u00B3lj\u00D5\u00E7\u0096k!\u00ED\u00FD\u00EF\u00F9,#\\x0003\\x0008\u0080\u0080\\x0014\u00812\\x0006\u00C0bBG\u00EA\\x000e\u0095^-\u00E2\u008AA\tx\\x0005\u0082Xv%\u0089y@O\u00D9\u00AA\u00E7\u0089\u00D1\u00F7\u0083#\\x0011\u00E0\u00E2\u00BB\u00CC\u00A0\u009D\\x0004\\x0017\\x0002\\x0001\\x0010\u00F0&\u00C0\u00EFL_\u00FA\u00D9\\x001c\u0084\u00C1z\u00DF!\u008C\u00806\\x0002\u00E6U\u00B5\u00CE\u009B\u0086\u00D9\u00A6\\x000c2u\u00A2{\u00D7\u00CA\\x0014\n_\u008D\u00C5#\t\\x0002 Pf\\x0002e\u009F\u00CD\u00814)s\\x000f\u0080\u00EE\t\u0095\u0080\u00E7\u00EB\u00BEg\\x0006\u00F4\\x0007=\u0080&\u00C8&r\u008C^1\u00F17\u00E0\\x000f\\x0002 P~\\x0002e\u009F\u00CD\u00814)'\\x0008\u00D56g\u00BC9\u009E\u00CA\u00C33C\u00C6\\x0001r\u00DA\"\u00B84\u00A1B\u009C#\u0087\u00CA6K\u0085;\\x000b\\x0002  K\u00C0$MJ\u00BE6\\x0007\u00B1&\u00B2\u00F7\t\u00EA\\x0001\\x0004@\\x0000\\x0004@\\x0000\\x00042B\u00A0\u00EC\u0081&\u00F0\u009A@\u009D\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0014\\x0008\u00F0\u00D2\u00A4\\j\\x000c\u008B\u0087\u00D1#A\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x0014\\x0002q\u0088\u0081\u0085\u00D7\\x0004}\\x0011\\x0004@\\x0000\\x0004@\\x0000\\x0004@@#\u00C0K\u0093\\x0012\u00FF\u00A4\\x001f\u00EF\u00A1\u0081\u00D7\\x0004=\\x0012\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00C0\u00EA5\u00814\u00C9\u00E7k\\x001cSA=!\u00BC\\x001f\\x0004@\\x0000\\x0004@\\x0000\\x0004@ 2\\x0002\u00F0\u009A\u00B8\u00C9\\x0011^\u00A9@\u009A\u0094+\\x0010\t\u00D7\\x0005\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0014\u00818\u00AC\\x001cF\u00AC\t<x \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002z\u00AC\u00C9\u00FC\u00BC\u00B1B\u00A7,[\u00D4c_\\x0013\u00F4E\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\\x0002\u00818l\\x0005\\x000b\u00AF\tz$\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000V\u00E88G\u00BC\n\u0083a\\x0011k\u0092\u00A9\u0099N4\\x0016\\x0004@\\x0000\\x0004@\u00A0\\\\x0004\\x0010\\x0006\u008B0X\u00E8t\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u0088\\x0011\\x0001l\u00B9\\x0006i\\x0012\u00A3\u00EEX.\u0085\u008E\u00EB\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u008A\\x00006\u00AA\u0097R'\u0098\u00D0\u0089U\u00AFEe@\\x0000\\x0004@\\x0000\\x0004RL\u00C0$M\u00F0\u00CB\u00C3N\u00BB\u00AEA\u009A\u00A4\u00F8\\x0019@\u00D3@\\x0000\\x0004@\\x0000\\x0004bE \\x000e[\u009B`\u00A3z\u00CC\u00AA\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0088\u00B66\u0099_\\x001e,\u0090&\u00E5\u00E1\\x001e+\u008D\u008C\u00CA\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000#\\x0010\u0087HXH\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\u00C1\u00D6&\\x0014wR\\x0016\u00C5\\x0006iR\\x001e\u00EEe\u00B9\u00D9\u00B8(\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008x\\x0012\u00E0#a\u00CB\u00B2]=\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u0081@\u00D9\u00B7\u00AB\u00874Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00E0\u00A4\u00C9\u00E2\u00C2\u008F\u00FC)s:%_B\\x000ci\u0082\u00EE\\x0008\\x0002 \\x0000\\x0002 \\x0000\\x0002 `\"P\u00DE9\\x001dH\\x0013tG\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0013\u0081\u00F2\u00AE\u00D3\u00814Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010p\u0093&%\\x000e\u0086\u00854Aw\\x0004\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00B0\\x0012\u00E0\u0083aK\u00BC\u008A\\x0018\u00D2\\x0004\u00DD\\x0011\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00C0&M\u00CC\u00C1\u00B0\u00A5t\u009C@\u009A\u00A0;\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\\x0008\\x0008X\\x001c'%S'\u0090&\u00E8\u008E \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x0002\"ibq\u009C\u0094jsXH\\x0013tG\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x00011\u0081\u00B28N M\u00D0\\x001dA\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004\\x001c\t\u00F0{\u009C\u00D0\u00E7\\x0012L\u00EB@\u009A\u00A0;\u0082\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x00088\\x0012\u00B0\u00ECqR\u0082\u00FDaC\u0091&\u00EB\u0087.\u00AF\u00DBw\u00D9\u00E0\\x0019=G\u00AE\u00EC?nWee\u00E5%UUU\u00C3\u00E76\u00D0\u00DFttW\u00D3\u00D9|\u00BE&x*TQ\u00FD\u00BDf$\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\u0081R\\x0012\\x0010\u00A8\u0093(\u00CDq\u00F1\u00D2d\u00FD\u00D0|M\\x0005\u00A4I\u00947\u00A9\u0094\u00FD\\x000f\u00D7\\x0002\\x0001\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001;\\x0001K\u00D0I\u00A4;\u009D\\x0014)MT]\\x0002i\\x0002]\\x0002\\x0002 \\x0000\\x0002 \\x0000\\x0002\u00A9&\u00D0\u00B9\u00C2\u00F4\u009B,\\x0000%\"\rW\u008C4\u00D1u\t\u00A4I\u00AA\u00BBcD=\\x000f\u00C5\u0082\\x0000\\x0008\u0080\\x0000\\x0008$\u008B@\u00C9\u00D4I`i\u00C2\u00E9\\x0012H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0006\\x0001\u00CB\u0082\u009D(\u00D6\u00EC\\x0004\u0093&f]\\x0002i\u0092\u008D\u00EE\u0098,u\u008F\u00DA\u0082\\x0000\\x0008\u0080\\x0000\\x0008DD ju\\x0012@\u009A\u00ACW\u0082KLi=\u00C2`#\u00BA\u00FD(\\x0016\\x0004@\\x0000\\x0004@\\x0000\\x0004bH@\u00A0N(\u00F4dq8\u00D1'\u00BE\u00A4\u0089\u00CDY\u00A2\\x0008\\x0014R*y,\\x001e\u008Ea\u00BFA\u0095@\\x0000\\x0004@\\x0000\\x0004@ \"\\x0002\\x0014wb_\u00B3\\x0013\u00D6\u00E4\u008E\u00AC4\\x0019\u00AAH\\x0010\u008B\u00B3D\u00D1%C\u00D9~%X<\u008C9\\x001d\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001\\x0010\u00C8\\x0018\\x0001\u00FB~'\u00CC\u009BR\u00E4\u008E\u00B12\u00D2D\u00E8,\u00E1tI\u00DA\u00A5Im\u00BF|\u00C5\u00A5\u00E2T=Z\u00C2yU\u009B\u00AFVO\u0097\u00CA\u009C\u0090n]7\u00AC\u00A2\u00E2R{\u00CA\u00D5\u00B9\u00D7\u00BF\u00B6\u00B6\u00FA\u00D2\u008A\u00EA\u00D1MAT|1\u00E7\u00F2\u00B5\n\u00AB\u009C\u0084\u00DC\u00A9 \u00A8kr\u00FA\u00CD\u008D\u00F2\u0086\u00FA\\x0005\u0098\u00F4\\x001bW\u00A3\u008E!\u00C3\u00B8\\x0011C\u00E6\u0088_J\u00C8\\x000f\\x0002%'\u00E0\u00A4N\u008A\\x0011(n\u00D2\u00C4\u00C1S\u00C2&q\u00D6\u009B\u00F6wM\u00B5\u00D7\u00C4E\u009AX\u00C7\\x001aa\u009F\u00C8\u00904!\u00B1R][\u00EB,\u00D7\u008A\u00B1.\u00C1\u00CFm\u00AA\u00EDWQ1\u00ACN3\u00D2\u00C1\u00CB\u0091\u0090\u00A1%\\x001f\\x0014\u0082(\\x000f\u008FJ\u00D6\u00E5\\x000c\u00D1\u00D9\u00AF\u00B6\u00C9\u009A\u00B9|0\u0093~\u00E3d\u0084\u0088=O\\x001azTF\\x001e\u009C\u00AC7S8\u00B9\u00A3yP\u00FC;Q\u0084\u00D2\u0084\u00DC$\u00C2\u00E9\\x001b6\u00A1\u00A3O\u00E2\u00F0[\u00CFgY\u009A\\\u009Aw3\u00C6)\\x001dYT\u00AF\u0089\u00ED\u0095\u009A\u00BDm\\x000b\u00ECYy\\x001fZ\u00D5\u00D6B\u009AHvEU\\x0001\\x0014pY\u00CF*\\x001fLH\\x0013\u00C9;\u0088l P&\\x0002\u00E4>q\\x0011(\u008A\\x0013E\u00D5(2s=\u00864Q\u00E4\u0088\u00AB\"\u00D1\"^\u00C5?\u0086\u0093\\x0005i\u00C2{b\u00D5\\x001b\u00DF4Z\u009B\u00E5\u00C9\\x0011\\x0014\u00F5\u0088\u00E6_\u00E9\u0097\u00AF\u00D3\u00BF\u00AA\u00E8\u0097or\u00F0\u009A\u00E4\u00B8I\"\u00A3\u0084\\x0008^\u0082#\u0091\\x0005bi\u00B2B}\u00A5\u00B6K\u00962=':\u00CC\u00F2Y\u00D327<\u00D0\u00AD\u00F7P\\x0000\u00E5\u0083\ti\u0092\u00C4\u00EE\u0084:g\u008F\u0080\u00A7@1\u0096\u00F6\\x0018J\u0085\u00E9\u0095B\u009A\u009F_T\u0099\u00FFLM\u00F6\\x0010W\u00FE\u00882\u0083\u00A3E\u00BC\n\u00A7/\u00DB\u00D2\u00C4\u00F0\u009A\u00D8\u00A7~\u0094\u00F8\\x0012\u00BB4an[K\u00B2I\u009F8\u00CB\\x0014\\x0007i\u00927\\x001dWmI\u00AE\u0086\u00E9\\x0015\u00D5\u009Bb\u00B7.\u00EC\\x001d]On\\x0012\u00CDz\u00AE^,;\u00D7p\u008AX\\x0006\\x0002{\u00F9F9\u0085\u0088\n\u00DB$\u0094|\u00AD4\u0091Z\u00AD7A)\u00AAi4\u00FD\u00A9\u0097\u00E9\u00D0dS\u00C0\u008D\u00E7\u00E5\u00B8\\x000c\u00BF\u00FBo\\x0015c&\u00EA\u00CF0\u00BD\u0082\u00CC\u00AA\\x001d\u00F2_*n\u00ACi\u00D3c\u00D5\u0097\u00FE\u0097\n5U0K};\u00E1\u00DEQL\u00AF)\u00E6\u00CB\u00F15\u00B1\u0084\\x0010YoGI`\u00E6\\x000b\u00F7\u00C5|[C\u00B9q\\x001e\u00A8\u00BD:U1\u00A7cB'{F:\u00CEcx\u00D4u\u0093\\x0017(\u00F6E\u00C8t\u0084\u00E9\\x0012\\x0017i\u00A2\u00B8R\u00BC68\\x000b\u00D2D\"\\x0012\u00B6 Mx\u009Da\u0093&\u009A\u00BF\u00C4\u00C8\u00A3+\u0095\\x0004\u00F9N\u00DC&t,S'\u00FD4\u00B3\u00AD\u0098@\u00B3\u009DVM\u00B8-\u0096\u00D6Ud\u00E8v\u0094\u008B\u0087p\\x000b\u008C ]h\u0093>\u00AC\\x000e\u00C3r\u00BC$\u00E2Cd\u00FC\u00D5j\\x0005Sc|\u00AA\u00CE\r\u00F3!M</G\\x0019H\u008E(IS\\x001e\u00AA\u00FE\u00B8\u00A5N{\u009Eg\u00D5\u00DE\u00CE\\x001f\u00D7\u00D5\u00C9\u00ECY\u0082_\u00BB\u00A0S\u00F6<\u00A6\u0094f\u00C5\u00AE3\\x000f(M\u00C2\u0083)\u00A0a\u00E9NE\\\u00CB\\x000b\u00B5G\u00A7*\u00F2t\u00F6\u008Ab\u008A\u0085\u00979\\x0002s\\x000e\\x0002I&\u00A0,0\u00F6\u009A\u00E5\u00F1%M\u00BC\u00DC$\\x0016\u00DFI\u0086\u00A5\t\u00BF&\u00C5\u0090&\u00A6\u00E8\\x0013\u008B4\u00D1\u0085\\x0008\u009FG;19\u008E\\x0013\u0087\\x0015:\u00E6@\\x0013M\\x0016p>\t^\u009A\u00D8\u00BF\u00D5\u00E6\u0083\u00C8\u00D1\"\u009A\u0089\u00E0\u00CFU_\u00ACm\u00AF\u00FBN\\x0011\u00B8\u00829\\x0008\u00FEt\u00D6\\x0016\u00ED\u00A2\u0081j\u00C5+\\x001b\u009D\u008C\u009C\u00D7\u00C4\u00F5r\u00CA#\u00AD)\u008FjNj4\u00CD\u00BE\\Q'\u00CF\u00BD\u00A2\u008A\\x000f]\u009Ah\u00CE7\u00AB\u00AE\u00E2\u00E3R\u00DDs\u00AAva\u0099U\u00F7\u00A9f\u008F\\x000b\u00CC\u00FDO\u00E8D\\x0006\u00D3<?\u00A8\u00ABL\u00E3\u00BE\u00FB\u00BBq\u009Ew\u00D6\u00BDS\\x0015y:Y\\x0017\\x0019!b\u00CF\u0093d\u00B3\\x0014\u00F5{9\u00CAO\\x0016\\x0001\u00A6Q\u00DC\u0083Q\u008C\u00C1\u008A\u00F7\u009A(r\u00C4c\u00E2F8\u009B\u0093\u00E1\u00C5\u00C3lR\u00C6>\u00A1cZCk\u0096&F\u0084\u008A`N\u0087\\x0002S\\x00122\\x00129J\\x0013~\u0085\u008E=\u00A0\u00923{\u00A6Y\u008FB\u00AB\u00CD2\u0082\u00A7a\u0093&n\u00F38&\u008C\"i\u00C2\u00C7\u00EAr6\u00C9o\u00AD\u00D8\u009B\u00B4EK\u00A9p\u00A4\u00A4\u0089\u00F0r$\\x0017\u00C6\u00E8~\\x0011u\u009A\u0086\u00D7%Lg\u00A8\n\u00839N\u009841\u009C(t\u00E4\u0095\\x001c\u0089\\x000f\u009A\u00E2\\x0011\u00BC\u008B\u0088\u00BER\u00A6\u0084\u00C8\u008F\"\\x001b&\\x001c!L6\u0095\u00E3\u00E8;d\u00DD)\u00E8\u008D\u00F3\u00BE\u00B3\u00C6D\u0092\u00C8oW\u00E4\u00E9\u00CC\u0084\u0090\u00BB\u00D4\u00B2\u0083\u0080\u00CC\u0091d\u0099\\x001f\u00D4\\x0016\\x0004d\\x0008\u00F0a%\u0085\u00D9gc\\x001a\u009AbM\\x0006(\u0089\u0082a\u00D5\u009D\u00D3\\x0002\u00A7,xM\u00EC.\r#dD\u00FF\u00CA\\x0008\u00835)\\x000c\u00B34\u00A9\\x001b\u00E6\u00B8K\u008A\\x00123\u009B$ib\u00DF\u00F4\u0082\u00BD\u0082KYegq\u00E3\u00B0\u00C6\u00C7\u00F46o\u008E\tP\u00E7S\u009C\u00A7\u00C3\u00BC\"7\u00B9\u0092\u00FD\u00D6J8\u00B1%\\x001fkb\u00B9\u009Ci\u00D6\u00E6\u00F2\u00DAM\u00F3\u00F3\u008Boa\u00E1#\u00A2\u00A4f`\u00D2\u00C4$D\u00ECGt\u00C7\u0089\u0083\u00D0Q\\x001d-\u0097\u00D7\u00EEa\\x000b\u00FC\u00FC{M\u00ECq3\u00EC\u0088_\u0098\\x000e\u00E6_w\u00A1\u00B9F\u00EDx^\u00CB3C^w\u00DA\u00F1\u00B3]F\u00A7*\u00F2tC\u009AXz)I\\x0013\u00CF#2\\x0003=\u00F2\u0080@\u00CA\\x0008\u00C8l\u00B9&!Y\u00B2)M\u00B8%9LR\u00C8H\\x0013\u00C3k\u00E2\u00B1;Y\u00BC5\u008AS\\x0018\u00AC\u00C9\u00B0\\x0015gK\u00ACO\u009ACi\u00BC!q\u00D8\u00CC-\\x0001\u00D2\u00C4\\x001aJBZ\u00A4\u00E4\u00D2D\\x0011:,\u00AE\u00D6m[\u00BC\\x0008a\u0096[\u009A\u00A8\\x001a\u00C8\\x001c\u009Cd\u00CCUIH\\x0013\u00B7\u00D3!MRf8\u00D1\u009C\u00A8\t@\u009Ax/\u00B0t\\x000c\\x0004\u00D1\u00DD!\u0086\u00B7CF\u009A\u0090\u00D0cS9\t\nz\u00B5\u00F7\u00C2\u00E2\u00A5\u0089\u0087\\x001d\u00B2+3\u00F7\u00B7y\u00B7-U|XS\u00BF\u00B5\u0092\u009C\u00D01- 2\u00CF\\x001f\u00FD\u00EE\u00BF)\\x000bj\u0084\u0081`t\u00D0\u00C1\u00CF\u00C1\u00E5\u00F7\u00E35\\x0011\u00CF\u00F5X\u00A6\u0084\u00D4?\u0087<\u00E6\u00B4co\u00840e&t\u009C<4\u009E7\u00CE3\u0083`\u00A8\u00E5:U\u0091\u00A7\\x001b\u009B\\x000bX\u009Ez\\x001a1<\u008FDm\\x0003P>\\x0008\u00C4\u0090\\x0000\u00A4\u0089\u00B44qX\u00A1\u00C3\u00EF@/%M\u00D4)g\u00A6N4\u00C7\u0089.V\\x0012\u00B4\u0093\u00BD\u008341\u00C7T\u00BAzM\u00F4\u00D7S\u00D3\u00AC\u0090\u00B6\\x0008B\u00B8H\u00C7\\x001a\u00A7b\u00DE\u00F0\u00DE\\x001e\u0088`\u0089_1b\\x0014\"\u00A8\u0095h\u0081\u008F\\x0011\u0093+\u0098\u00E4b\u00EF\u00E2\u00CAl\u00EB\u00FBl}Mn1\\x0017\u00AC\u00AA-\\x0003\u00E6CI\u00BC2HN\u00E8hA*F\\x0008\u00AD\\x0011\u00B6\u00C2\\x001f\u00E1\u00B4\u008Ehg$\u00B59\u00D1\u00C2,t\t\u0093\u00F2+\u00F2\u00C6i\u00EE\\x0010\u00C7\u00FE\u00C6\u00AE%X\u00D4\u00CD\\x001a[\u00E4\u00E9\u00F1v\u0082\u00C6\u00D02\u00A1J\\x0019'\\x0000iR\u00B44\u00E1\\x0002D$\u00A5\u0089\u00E181E\u00C2&'\u00D0\u00C4#\u008C\u00C0%\u00A0Rf\u00F1\u00B0\u00D3\u008Em\u00A6sE\u00EB<\\x001d\u00C3M\n\u0081)\u00CA\\x001b\u00AA\u00BB\u0085Sv\u00D2\\x0013-iv\u00DEG\u00CE\u009E\u00BFZY/]X.d\u0099\\x000b`\u00EB\u0096\u0087<\u00A3\u0085\u00A9r\u00FB\u0091\u00F0\\x0001%\\x0005\u00B1\u00E2\u0091\u00C1\u0097\u00D7D\\x000f\u0092\u00B5\\x0006\u00AF\u00B0\u00B0\\x0015\u0096\u00CC\\x0005\u00B2=\u0091\u00B8Q\u00B2\u00D40ee\u0090\u00C4\u008D\u00F3\u00BA\u00B3\\x001e\u009D\u00AA\u00C8\u00D3\u00B5\u00A7\\x001e\u00BF\u00A1\\x0003\u0095\\x0006\\x0002\\x0012\\x0004 M\u008A\u0093&\u00E6\u00D8XYi\u00A2\u00AF$,H\u0093\u00E4,\\x001bfV\u00CAi\u00EA\u00DD\u00C9\u00DF\u00AE\u00D96\u00CFx\\x0011\u00A7MM\u00F4\u00D7V\u00AE|K$\u00AC\u00EB\\x000f\u00D1\u00E9\u008B/\u00EC{\u00AB\\x0018\u00E1\\x0005.{\u00A09\u00EF\u00DAn\u008A\u00D0dQ/\u00A4~l\u00CE\u00FFBUY\\x0005\u00D8&i\u0085I\\x001c\u00CB\u00DE$\u00FCr\\x001bN.\\x0014\u00F4\u00C4-u\u0085\u00ED\u00D4\u00DEW\u00D6\u00D7\u0090\u00D0)\u00A8\\x0007\u00FD\u0088\\x0016\\x0003o]?\\Xo\u00CC\n\u00D4W\\x001d\u008B\u00A5\u0089\u00E0GD\u00A3\u0086\u00E9\u00B9\u00E5\u009A1\u00AE\\x0005\u00E8N\u0096P\\x0012k\u00F3\u00EAT\u00C5\u009C\u008E-\u00D7$\\x000cR\u00C6]\\x0005h\u00BEA\\x0000\u00D2\u00C4[\u009A\u00A0\u00BB\u0080\u0080/\\x0002.q\t\u00B4\\x0001\u0091SX\u0089\u00E7q\u00F9\u009F\u009F\\x0010\u00D6\u0096)\\x0015\u00CF\u00AB8e\u00A0\u00AB\u00FB\u0082\u0080\u00CC \\x0000\\x0002 \\x0010\u0098\\x0000\u00A4\u0089\u00C7\u0080+\u00D8}\u00C49\u00E8$\u0094\u00CC\u0081\u00EF%N\u008C\t\\x0001'i\\x0012L\\x0019\u00D8\u00A6T\u008A\u0096\\x0008A5\n\u00D4IL:\\x0018\u00AA\\x0001\\x0002\u00A9'\\x0000iR\u00F4@\\x000f/%\\x0008\u0098\t8l\u00A4\u00E6\u00DBc\u00A1\\x0004y\u0098\u00E2<B\u00EE\u00AB\u00C16\u0090\u0096\u00F9\u00D5\u00D0\u00D4\u008F\u009Bh \\x0008\u0080@\u00A4\\x0004 MB\\x001e\u00EE#\u00BD[(<\\x0011\\x0004\u00EC\u00D2\u00C4\u00AF\u00BF\u00A4\u00A4\u00E6\u00DF\u00FF/\\\u0094\u00B4z\\x0010\u00BE \\x0000\\x0002\u00D9#\\x0000i\\x0002i\\x0002\\x0002\u00D1\\x0012\u00F0\u00A5K\u00CAf\u00F5}\n\u0094\u00B2\u00D53{ct\"\u00E48*\t\\x0002\u00E1\\x0012\u00804\u0089\u00D6,\u0085{\u00B7PZ\u00E2\\x0008\u00C8\u00EB\\x0012%\u0092#\u00CA\u00E9\\x001b\\x0019t\u00F2\u00B5e\u00BF\\x000e(S&\u00F2\u0080\\x0000\\x0008\u0080\u0080_\\x0002\u0090&\\x0018^A *\\x0002\u00F2\u0096>Vf^\u00F2\u00A7A\u00A1N\u00FC\u008E\u00B6\u00C8\\x000f\\x0002  I\\x0000\u00D2$*\u00B3$y\\x0003\u0090-\u00AD\\x0004\\x0012\u00AAK\u00D8\u00ED\u0090\u00AF|Zo\\x001f\u00DA\\x0005\\x0002 PF\\x0002\u0090&\u0090& \\x0010>\\x0001I\u00D3\\x001e\u00E7\u00E5\u00B8\u0092M \u00DFI\\x0019\u00C7/\\\\x001a\\x0004@ \u0095\\x0004 M0\u00B0\\x0016G\u00E0\u00FB\u00DA\u00EA\u0085\\x0015\\x0015\u008B\u00D5\u00DF\\x0019\u00B1$\u00F5\u00AB\u00EA%\u00EAF\u00A5\u00FC\u00E7\\x0010#\\x0019#*\u00B6\u00E8\\x001aJ\u00ECl\u00D6\u00F4\u00C1\u00BBbnMK\u00AA+\\x0016V\u00E4\u0096\\x0017w_\u008An\\x0002\u00BB\u009B\\x0012\r\u00C9\u00C7Y`\u00A5r\u00D4F\u00A3@ \u00F5\\x0004 Mba\\x0000\u0092\u00DB\u00CF\u0098\\x001d\u00ADXX]\u00FB}\\x0016\u00A4IS\u00ED\u00E2\u008A\u008Ao\u00EA\u00DC\u00EF\u0097L\u00ACF\u00E7b\u00B5(\u0091\u00A4\u008B\u00954\u0091U'\\x0008\u0089\rI\\x000b&w(@\u00CDA D\\x0002\u0090&\u0090&\u00C5\\x0010\u00A8\u00CB\u0091.\u00F9&\u00A7\u00FE\u00DFf\u00B0K\u00E05)\u00B5=`\u00EDu\u0093&2\u00F3 j\u00D0kb\u00A4\t\u00D4I\u0088\\x0003.\u008A\\x0002\\x0001\\x0010\u0090!\\x0000iR\u008Ca\u00CE\u00FC\u00B9\u00CBsl\u00EA\u00A1\u00EE\\x001b\u0091\u00E3${\u00D2DZ\u0097$L\u009A\u00C8\u00A8\\x0013L\u00EB\u00C8\\x000c\u00B8\u00C8\\x0003\\x0002  C\\x0000\u00D2$\u00F3\u00F2\"\u00B8\u00E3A}\u00EF_\u00A8\u00FE\u00E4\u00AF\u00AAQ\u00B4\u00B0\\x0012\u00A3@\\x001f\u00D2\u0084\\x0015\u00A5'\u00DE-\u00A1\\x0017\u00A2\u00CF\\x001c\u00995\u0090)\u00D6\u00C4pi\u00A8\\x001fX2y8<3\u00A8\u009D\u0081E\u00CF\u00E8\u00A9\\x0010\u00F3!>n\u00AA\u00F9\u00EF\u00DE\u00ABs\\x000f\u00CE\u00E0\u00EC\u00B7\\x001f\u00AF\u0089\u00F9\u00D2f\u00CEJ\u00A3\u0094#\u0085<\u00FA\u00E4\\x001aw\u00965r\u00C5\u00A9\u008D\u00CA\u00BDs\u00A4\u00C47m\u00F1{\\x0015\u0097\u00CE3R\u00F5\u00ECO\u0094\u00A8\u0094\u00C2\\x0012h\u00B5?hiqm\u009D2\u00EBg\u009E\u00F2s\u00AB\\x0000\\x001eI\\x0010\\x0000\u0081\u00AC\\x0013\u00804\u00C9z\\x000f\u0090\\x0011\u00B0\u00E2<\u00CC\u00BAh\u00B6\u009F\u00A9\\x0001U\u00A6\u00F8\u0096&\u009C\u0092\u00E0\u00EC\u0099\\x0016Wk\u00B6a\u00BA\u00C13Y_\u00DDTs\u00B3K\u009C\u00B6\u00E0\u00E29<3\u00E49\\x0001d\u0093J\\x0002kj\u00AA\u00F9\u00EF>VM\u00F5\u00BB\u00B5\u009B\u00E6;F\u008Fr$e\u00A5\u0089[\u0095t%Q\u00BD\u00A4\u00B6\u00A0\u00C6\u00D8\u008D\u00B0r+(\\x0003\u0099\\x0002\u00B5I:3\u00C6=\u00DA\\x000f\\x00177\u00CD~\u0097\u00D7%\u00EC\u00B3\u00A6N\u00A8\u0081\u00E2\u00F29i\u00E2U\\x0001<\u0092 \\x0000\\x0002Y'\\x0000i\u0092\u00F5\\x001e\\x0010X\u009AX&q\\x0004\u00C1\u009B\u0092^\\x0013\u009B\u00C7\u00C5T\u00B2nb\u00F5\u00F7~\u00CDK\u00A1\u00FDi\u00F7\u009A\u0098\u0096\\x000bi\u00D2A?WW\\x0012\u0085\u00E0Ss\\x0006\u00EDZ\u00FC\u00FB\u00BD\u00F9r\\x0005\u008F\u0082\u00DAm\u00CC5'\u00B7\u0081\u00EAK\u00D0\u008C\u00B4\u00DD}bFmv\\x0014\u00F1\"@\u00FDl\u00A93\u00E7\u00F6\\x00107\u00CAp\u00A5\\x0018\u0086\u00DF8\u00A2\u00F24-\u00952\u00FB0Dmt\u00C0\u00A8\u00CCX}\u009CS\u00B4\\x0008\u00EF\\x001fR\u008F\u00DC\u00FE\u00EF&\u00C5q\u00F2\t\u00F39\u00D9\u0095\u0090\u00C5\u0097\u00E3\\x0002\\x0019\u008F$\\x0008\u0080@\u00D6\t@\u009Ad\u00BD\\x0007\\x0004\u0095&\u00AA\u0081\u00E4\\x0017\u0098\u00D8W\\x0011\u00FB\u0091&\u00B6\u00C9\\x0017\u00FD\u00BE\u0098|36A`\u0097&\u00965/v\u00D7\u008Es\\x0006\u00D5\u00A8\u00DB\u0097\\x001a\u00F1\u00A1\u00AF\u00E60Xc\u00DA\u00E2\u009B:\u00CFU9\u00B6\u00FD^\u00E5\u00A4\u0089\u00F3L\u0099\u00C9_e\u00BF\\x0011\u00A2I1\u00DD\u00A5!\u00D1FgJ\u00A6\u0096~R{\u00BB>\u00AD\u00C3\u00A4\u00C9\u00A6W\u0093\u00F7\u00C82\u00C4kM\t\u00C8x$A\\x0000\\x0004\u00B2N\\x0000\u00D2$\u00EB= \u00A04\u00E1\u0083\tLo\u00FC\u009C\u00D9\u0093\u0094&l\u00AD\u008A\u00D9m`\u0089\u00F00EW8\\x0016+\\>\u00C3\u00CF\u009Bxd`\u00DE\\x0005q\u00D2L\u00B5\u00A5\u0084B\u00CD\u008D\u00C0\u008B\u00E7>\\x0016\u00CC\u00E6\u0088BD\u00A5&t\\x001c\\x000c\u00B9k\u00A3\u00EC{\u00BDpG\u00FC\u00B7\u0091= \u00A6\u00DA\u0092\u00FE\u00E0\\x0002M\u00B4\u00C9\\x001d&M\u00C8o\u00F4\u00BBy\u00E6y=m\u008AG\u00EB\\x0018\\x0012\\x0015\u00C0#\t\\x0002 \u0090u\\x0002\u0090&Y\u00EF\\x0001\u0081\u00A4\u0089\u00EB\\x001b\u00BF\u00F1\u00BE.+M\u00D4[`\u008B)q\u00DC\u00AB-F\u00D2D\u00AB\u00F9\u0090B@\u00A8b\u00A7\u0099\u0091\u00E6\u0093\\x0008rb\u00A5\u00C9\u00F2\u009C\\x0016UcL]q\\x0013:\u00EA\u0094V\u00EEG\u00F36'\u00BC\u00C0\u00824\t\u00F4\u00C4a\u0098\\x0002\u0081l\\x0011\u00804\u00C9\u00D6\u00FD\\x000egX\u00B4O\u00B2h\u00A1\u00AF\u00E6`X_\u00D2\u0084\u008F\u009Fe.\\x0019\u00E6\u00A8p\u00F5\\x0001\u0098\u00BF\u00B5\u00CD1\\x0019\u008A\u0087\u008F\u00D5\u00F5=\u00A1\u00C3\u00F7\\x0010\u00F1\u00BE&\\x0005\\x0015\u00C2\u00E20\u00CC\u0091\u00B0\\x000e?\u00DD'%M\\\u0096>\u0099&t\\x001c\u00A6o\u00B4\u00DB\u00CD1tp\u00C3\u00D8\u00DA\u00E8LI\u00D5\\x0016\u00B9\\x001fy\u00ED\u00C5I\\x0013\u00E6P\\x0019\u00F3\u00B1\u00E9\u00B1\u0092\u0098\u00D0\u00C1c\\x0008\\x0002 \\x0000\\x0002\\x0005\\x0002\u0090&\u00E8\r\u00BE\t\u00B0\\x0017_\u00E1N\u00EA,\\x0006S\u00E0\u00F0\u00B0+\\x000c]\u008B\u0098Na\\x0007\u00F9\u00B0\\x0015\u00BF\u00D2\u00C4\u00B4`\u00D8!\\x000c\u00B6`\u00C8\u0085a\u00B0\u00A6\u00F9\\x0008-\u00AAT$n\u00D8WC\u00BE\u00E0|$,\u00F6\u0082\u0093&\u00CE\u00BB}\u00C8I\\x0013\\x0016xk\u00A2-j\u0094\u00B44\u00D1\u00BDS^mt\u00C6h\u00DC}M\u009015f\u00F8\u008A\u00B4\u00E8\u0093\u00EA\\x000f\u00F4\u00DD\u0081\u00AD\u00FB\\x0005k\u00EE1\u0097\n\u00F8\u00EE\u0090\u00E1\\x0008\u00EE\u00E0\u00AB\u00E8Qa\\x0010\\x0000\u0081\u0090\t@\u009A\u0084\\x000c4\\x0003\u00A3\u00A4\u00C89Q\\x0018\u00D69\u00C7\u0089\u00AC\u00D7D\u00B4x\u00D80\u00C6~\u00A5\u00C9\u00E2j~W\\x0012st-\u00AB\u00B9K\\x0006\u00A7\u0085\u00AF\u0086\\x001d-\u00CCd\u00A9\u00CAL)\u00D0\\x001eu\u00C1\u0087\u009B8\u00B8L\u00AC\u00D1\\x001b|\u00B7\u00B1\u00AEu\\x0012\u0086\u00F5X\\x0016\\x0019\u00C9K\\x0013\u00C7\u00C5\u00BDF\\x001b\u00BD(\u00E9\u00F5\u00D1\u00A7ut\\x0002\u00FA\u009A\\x001d\u00E68\u00F9\u00DD<K\u00D4\u008E\u00D7\u00EAe\u00CB\u00CAs\\x0008\\x0005\\x0010\\x0000\u0081\\x000c\\x0013\u00804\u00814\u00F1I@\u00DF\\x0001\u00D6I\u0084\\x0015|*\u00B2\u00D2D\u00B7\u00D3\u0085\\x0010T\u00EE\u0095\u00DA\u00AF4!#\u00CD\u0085\u00AD\u00D8w'S\u00E6A\\x001c3\u0088\u00A2^,\u00DB\u00D2\u00EB\u0086\u0099\u0095L?\u0085c\u00DE\u00E4#\u00B7\u0098\u009B\u00E9p\u00DD U\u00D2k\"\u00A8\u0092\u00D9_e\u009Bcr'\u00C6\u00FB\u00A5\u00DC7\u00A6s\u00A1\u00A4CPe\\x00195\u00B9\u00EE9\u00CB4\u0096\u00EAJ\u0091\u00DFr\u00CD\u00F3g\u00892\u00A0\u00F8}>\u0086\\x00196Z\u00E8\\x000cY \\x0000i\u0082\\x0011!5\\x0004\u00C4\u0081 \u00DCc\u00EC\u0099\u00C17\n\u00F75\u00C3\u00CE.\\x0013\u00DF\\x0017*\u00E1`\u00E4\u0083\u0092d\u00F3%\\x0002\\\u00E2\\x000c\\x0004u\\x0003\\x0001\\x0010(5\\x0001H\u0093R\\x0013/\u00A1\u008D\u0089\u00A8i\u00CE+l\u009DV\u00DE\u00A6\u00F7\u00B8}6G?\u00A2\u00AC\u00D0q\u00BE\u00D7ia\u00C86\u00C0uH\u00B69\\x001d\u0099VG\u00D4iQ,\\x0008\u0080@\u0092\\x0008@\u009A$\u00E9n%_\u00D6DJ\u00DB\u00F3u\u00DF3\u0083\u00BF\u00EA\u00B9\u00FF\u0098_2]&Z\\x0000\u008D\u00FC\\x000c\u008B\u00CDq\u00A2N\u00EE\u00E8I\u00F0SD\u0098\u0089\\x0000\\x0001\\x0010\\x0000\\x0001/\\x0002\u0090&\u00FE\u00AC\\x0011\u00C4A\u008C\tx*\\x000f\u00CF\\x000c\u00FE:\u0083\u00FBtF\u008CA\u00B97\u00D3\\x001f%\u0091>+\u00C4\u00DFP\u00A8\u00AC\u00F5\u0097\u0095\u00BC\u0086\u00A4\u00C4r\u00F3\u00D7y\u00D0L\\x0010\\x0000\\x0001\\x0017\\x0002\u0090&\\x0018P@  \\x0001\\x0017i\u00E2\\x001a\\x0000\\x001b\u00F0r\u00B1\\x001d\u00C8\\~l9S\\x001cb{\u0083P1\\x0010H\\x001c\\x0001H\u0093\u00B4\u00D9\u0089\u00C4u\u00C1\u00E4V\u00D8\u00CD$\u009B\u00B7CMn\\x001bej\\x000e\u0089&C\ty@\\x0000\\x0004\u00E4\t@\u009A@\u009A\u0080@\\x0010\\x0002\u00EE\u0081&\u00F2O`\nr\\x0002E\nn\"\u009A\\x0000\\x0002\u00B1\"\\x0000i\\x0012\u00C4,\u00C5\u00EA\\x0016\u00A22e!\\x0000{\\\u00C0\u00BEX\u00F0\u008B\u0086\u0086K)\u00B1\u00E1\u00C0\\x0018\\x0019@\\x0000\\x0004\u00CAF\\x0000\u00D2\u00A4l\u00E8\u00CBbPq\u00D1\u00B0\\x0008`\\x0016\u0083'\u0089\u00B9\u00AD\u00B0\u00FA\\x0015\u00CA\\x0001\\x0001\\x0010 \\x0002\u0090&\u0090& \\x0010\u0084\u0080\u009B4\u00C9R\u00A0\t\\x001bF!\u00D4`N@\\x0000\\x0004B$\\x0000i\\x0012\u00C4,\u0085x\\x0003PTB\t\u00C0O\u00C0\u00DF8\u0097\u00E9-,\u00D2Ih\\x000fG\u00B5A\u00A0\u008C\\x0004 M M@\u00C07\\x0001\\x0004\u009AX\u00C6,H\u00932\\x000e\u00E2\u00B84\\x0008\u00A4\u008F\\x0000\u00A4\u0089o\u00B3\u0094\u00BEN\u0080\\x0016\u00F9%\\x0000i\"/M\\7\u00EC\u00C7\u00D3\\x0007\\x0002 \\x0000\\x0002\\x0002\\x0002\u0090&\u00E8\\x0016 \u00E0\u009B\\x0000\u009C\\x0004v1\u00E72\u00C3\u00E5W\u00F9!?\\x0008\u0080@\u00C6\t@\u009A\u00F86K\\x0019\u00EF1h\u00BE\\x0012\u00F5\u00E9\u00BC\\6\u00B3\u00A1\\x0015\u0090&x4@\\x0000\\x0004\u00C2\"\\x0000i\\x0002i\\x0002\\x0002\u00BE\t@\u009A\u00C0k\\x0012\u00D6\\x0010\u008Cr@\\x0000\\x0004\u00EC\\x0004 M|\u009B%t#\\x0010\u00C0\u00CAaH\\x0013<\\x0005 \\x0000\\x0002\u00D1\\x0011\u00804\u00814\\x0001\\x0001\u00DF\\x0004\u00DC\u00BC&\u00D9\u00DB\u00D4\u0084\rO\u0098\u00D0\u0089n\u0098F\u00C9 \u00905\\x0002\u0090&\u00BE\u00CDR\u00D6\u00BA\\x0008\u00DAk'\u0080\t\\x001dxM\u00F0\\\u0080\\x0000\\x0008DG\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004|\\x0013\u00804\u00814\u0089nPF\u00C9 \\x0000\\x0002\u0090&\u00BE\u00CD\\x0012:\r\\x0008@\u009A@\u009A\u00E0)\\x0000\\x0001\\x0010\u0088\u008E\\x0000\u00A4\t\u00A4\t\\x0008\u00F8&\\x0000ib\\x001d\u0092\\|8\u00BA\u00F1\\x000b%\u0083\\x0000\\x0008\u00A4\u0092\\x0000\u00A4\u0089o\u00B3\u0094\u00CA~\u0080F\u00F9\"\u0080\u00DD`-\u00B8\\x0000\u00C4W\u00FFAf\\x0010\\x0000\\x0001w\\x0002\u0090&\u0090& \\x0010\u0084\\x0000\\x0016\u00A4\u00F0#\\x000b\u00DCH\u00B04 \\x0000\\x0002!\\x0012\u00804\tb\u0096B\u00BC\\x0001(*\u00A1\\x0004\u00F0\u00CB\u00C3&i2\u00DFq\u00F1pf\u00B7\u00C7Mh\u00C7F\u00B5A \\x000e\\x0004 M M@ \\x0008\\x0001\u00EC\u00BA\\x0006i\\x0012\u0087\\x0011\\x001cu\\x0000\u0081T\\x0012\u00804\tb\u0096R\u00D9\\x0015\u00D0(_\\x0004\u00DC\u00A4\u00C9\u00FC\u00CCu*\u00F8\u0090|u\\x001ed\\x0006\\x0001\\x0010@\u00ACI\u00E6\u00EC\\x0004:}\t\\x0008 \u00F0\u00D3\u0080\\x000c\\x0014%\u00E8o\u00B8\\x0004\\x0008d\u008A\\x0000\u00BC&\\x0010. \\x0010\u0084\u0080\u00BB=\u00A6o\u00B33\u008E@\u009Ad\u00E7^\u00A3\u00A5 P\\x001a\\x0002\u0090&\\x00192!\u00A5\u00E9R\u00D9\u00B9\nf1\u00D8\u00BDv\u00E3\u0090\u00BD\u00B9\u00AD\u00EC\u00F4\u00B4\\x0014\\x0004\u00A2#\\x0000i\\x0002i\\x0002\\x0002\\x0001\t\u00B8\u0084\u009B\u0090\u00B5\u008E\u00EE\u00A1\u008DW\u00C9\u00AE\u009B\u00ADe\u00CA{\\x0014\u00AF\u00FB\u00A2\u00AAF$\\x0010H(\\x0001H\\x0013<\u00BD \\x0010\u0090\u0080\u00C7DF6\u00E6t0\u00B1\u0095\u00D0\u00A1\\x001f\u00D5\\x0006\u00818\\x0013\u00804\th\u0096\u00E2|SQ\u00B7\u00D2\\x0010\u00F0\u00B0\u00CA\u00D9p\u009C\u00B8\u00CC\u00E6d\u00C8u\\x0004\u00FF\\x0004\\x0008\u0080@\u00A8\\x0004 M M@ 8\u0081\u008C\\x001bf\u0088\u00B3\u00D2\u0088`\\\\x0005\\x0004\u00B2F\\x0000\u00D2$\u00B8Y\u00CAZ_A{\u00ED\\x0004\u00DC\u00C3MR\\x001fi\u0091\u00F1\u00E6\u00E3\u0089\\x0000\\x0001\\x0010\u0088\u0088\\x0000\u00A4\t\u00A4\t\\x0008\\x0004'\u00E0\u00EE6H\u00F9\u008C\u0086{\\x0000l6\u00E6\u00B3\"\\x001a\u0097Q,\\x0008d\u009C\\x0000\u00A4Ip\u00B3\u0094\u00F1\u00AE\u0083\u00E63\\x0002\u0099\u00F5\\x001cd\u00B6\u00E1\u00E8\u00F9 \\x0000\\x0002Q\\x0013\u00804\u00814\\x0001\u0081\u00A2\\x0008d\u00D3q\u0092\u00CDVG=\\x001c\u00A3|\\x0010\\x0000\\x0001F\\x0000\u00D2\u00A4(\u00B3\u0084n\\x0004\\x0002\u00D9t\u009C\u00B8\u00C7\u00FF\u00E2\u00D7\u0086\u00F1\\\u0080\\x0000\\x0008\\x0014C\\x0000\u00D2\\x0004\u00D2\\x0004\\x0004\u008A%\u00E0\u00E9BHY<\u00ACg{\u008B\\x0019\u0092p.\\x0008\u0080\\x0000\\x0008@\u009A\\x0014k\u0096\u00D0\u0087@\u00C0\u00D3q\u0092\u00AAxX\u00D7\u00E8Wj)\\&x\"@\\x0000\\x0004\u008A$\\x0000i\\x0002i\\x0002\\x0002!\\x0010\u00F0t$\u00A4\u00C6q\u00E2>\u0095\u0093*\\x0011\\x0016\u00EA\\x0016RE\u008E\u00D48\\x001d\\x00042E\\x0000\u00D2$\\x0004\u00B3\u0094\u00A9\\x001e\u0083\u00C6:\\x0011p_\u00B1\u00A2\u00B8\\x0013\u0092\u00BFu}\\x0016\u00DA\u0088\\x001e\\x000e\\x0002 Pv\\x0002\u0090&\u0090& \\x0010\\x000e\\x0001O\u00C7\u0089\u00E2QH\u00B2:\u0091j <\r \\x0000\\x0002 P4\\x0001H\u0093p\u00CCR\u00D95&*\\x0010\\x0007\\x0002\u009EN\u0085\u00E4\u00CEw\u00C8\u00E8\u0092\\x0014\u00B8\u0085\u00E2\u00D0\u008BP\\x0007\\x0010\\x0000\\x0001H\\x0013H\\x0013\\x0010\\x0008\u0093\u0080g(F\\x0012\u00D5\u0089\u0094.\u00C1\u00F6\u00AFE\u00BF)\u00C2 \u0081\\x0000\\x00080\\x0002\u0090&a\u009A%\u00F4*\\x0010\u0090\u00B1\u00E2\u00C9R'\u00E9k\\x0011z)\\x0008\u0080@\u00CC\t@\u009A@\u009A\u0080@\u00C8\\x0004\u00D2d\u00CB%\u00DB\u0082\u00A9\u009C\u0098\\x000f\u00F4\u00A8\\x001e\\x0008$\u008B\\x0000\u00A4I\u00C8f)Y\u00B7\\x001f\u00B5\u008D\u0088\u0080L\u00D0I\u00FC\u00A3b\u00A1K\"\u00EA\\x001e(\\x0016\\x0004@\u00C0\u009D\\x0000\u00A4\t\u00A4\t\\x0008DB@&\u00E8$\u00CE+\u008Aeu\tBL\\x0010b\\x0002\\x0002 \\x00106\\x0001H\u0093H\u00CC\\x0012\\x00141\\x0008\\x0010\u0081\u00E4\u00AA\\x0013I\u00AF\\x000f6~E?\\x0007\\x0001\\x0010\u0088\u0082\\x0000\u00A4\t\u00A4\t\\x0008DE@\u00D2\u00F1\u00A0m\u00EE\\x001e\u008F-O\u00E4\u00EB\u009C\u00AC`\u00DE(FO\u0094\t\\x0002 \\x0010\\x0011\\x0001H\u0093\u00A8\u00CCRD7\\x000c\u00C5&\u008B\u0080/K_\u00F6`RIg\t\u00F3\\x0006u\u0086\u00ED\u00C2M\u00D6\u009DEmA\\x0000\\x0004\u00A2#\\x0000i\\x0002i\\x0002\\x0002\u00D1\\x0012\u00F0\u00A5N\u00CA\\x0015}\u00E2\u00BB\u0092\u00D0% \\x0000\\x0002 \\x0010\\x0019\\x0001H\u0093h\u00CDRt\u00A2\\x0012%'\u0088\u0080o\u00C3_\u00C2\\x001f\u00DC\tR\u00B7\u00C8\u00C6\u00A3\\x0004\u00DDST\\x0015\\x0004@ :\\x0002I\u0092&F]\u00F1\\x0001\\x0004\u0092H\u00E0\u00B3\u00CA\u00BC\u00DF\u00B4h@aW\u00C4\u0090\u009B< \u00BF(@}*#\u00AB\u00CF\\x001d(\\x0019\\x0004@\\x0000\\x0004\u00AC\\x0004\u00F25\u00F9\"\u00D2\u00F2\u00BA}\u0097\r\u009E\u00D1s\u00E4\u00CA\u00FE\u00E3vUVV^RUU5|n\\x0003\u00FDMGw5\u009D-\u00A6h\u00DC*\\x0010H\\x000f\u0081\\x0000j\u0080\u00D4\\x000c\u009D\\x0015\u009AF!E2\u00C0\u00B7Bb\u008A*\u00B4:@\u0085\u0080\\x0000\\x0008\u0080\u0080\\x001c\u0081\"t\t\t\\x000fH\\x00139\u00CA!\u00BF\u00F8\u00E2\u00A2\t$\\x0010X\\x0019\\x0018\\x001a\u00C5\u00AFD\u00A0\u00FCJ\u00F2\u00EF#\u00E1}<~/\u008A\u00AE\\x000e\\x0002 \\x0000\\x0002\u00C5\\x0013\u0088\u00AF4)\u00AEfE9lpi\\x0010\u0088\u0082\u00C0\u00FA\u00A1\u00F9\u009A\u008A\\x0010\u00D2\u00FA\u008A\u00BC\u0092\u0086\u008A\u0092\u00FAUhW)\u00CA\u00A7\u008Ag\\x0010\\x0004@\\x0000\\x0004\u00CAB J\u00AFI\\x0014\u00B6\\x0001e\u0082@\u00D9\t\u0084%\\x001dB\u00D1\\x001fN\u0085\u0090\u00EE);(T\\x0000\\x0004@\\x0000\\x0004\\x0002\\x0011\u00804\u00C1k%\\x0008\u00F8'\u00A08<B\u00F2m\u0084.P\u00A8b\u0081\u00C6\\x0002\u009C\\x0005\\x0002 \\x0000\\x00021!\\x0000i\u00E2\u00DF,a\u00DC\\x0007\\x0001F \u00AC\u00F9\u009D\u00B0\u00D4\t\u009B$\u00C2\u00DD\\x0001\\x0001\\x0010\\x0000\u0081\u0084\\x0013\u00804\u00814\\x0001\u0081\u00E2\\x0008\u00C4A\u00A0@\u0094$| \u0086\u00A0\\x0004\\x0001\\x0010\u00E0\t@\u009A\\x0014g\u00960 \u0082\u0080\u00E1A)\u00CB\\x0014\\x000fD\tz \\x0008\u0080@\u00EA\\x0008@\u009A@\u009A\u0080@x\\x0004J\\x0019\u0083\u00C2\\x0016\u00F8\u00A4nHB\u008B@\\x0000\\x0004@\\x0000\u00D2$<\u00B3\\x0004#\\x0001\\x0002\\x0006\u0081\u00884\u008A\u00B1\u00EA\\x0018\u00A8A\\x0000\\x0004@ \u00BD\\x0004 M M@ J\\x0002\u00DA\u00E6%E\u00ECV\\x00029\u0092\u00DE\u00F1\\x0017/\u00C7 \\x0000\\x0002B\\x0002\u0090&Q\u009A%\\x000c\u00A9 `'\u00C0\u008B\\x0015Mv\u00B0\\x001d\u00D8\u008C\u00A4o\u00C5\\x0006z \\x0000\\x0002 \u0090I\\x0002\u0090&\u0090& \\x0000\\x0002 \\x0000\\x0002 \\x0000\\x00021\"\\x0000i\\x0012\u00A3\u009B\\x0001\u00CF\\x001e\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u00C4\u0088\\x0000\u00A4I\u008Cn\\x0006\u00942\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u008C\\x0008@\u009A\u00C4\u00E8f@)\u0083\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0094\u008F\u0080\u00B6\t\u00A1\u00BE\u00D3 \u00FB\u0091\\x0007\u00F6\u00BB\u0095F\u00CA\u00E4\u00B6cY\\x0016(\u0090&\u00E5{ \u00F1\u00B0\u0081\\x0000\\x0008\u0080@\u00A6\\x0008\u0084\u00F8\u00BB\r\u00F8m\u00CBT\u00F7\\x001cH\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\u0081\u00C8\\x0008\\x0018^\u0090\u009A\u008A|\u00E8\t\u00BF0\u0095R\u0081\\x0002i\\x0012\u00D9\\x0003\u0099\u00D2\\x001e\u0093e\\x001f#\u00DA\\x000e\\x0002  K \u00A2\\x001f\u00DFv\\x00117l\\x000e\\x0008\\x0003o*\\x0008@\u009A@\u009A\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0084D\u00A0\u00F4\u008A\u00C4.V\u00A0Q\u0092\u00AFN MBz \u0093\u00DF\\x0015\u00F0\u00B6\\x0001\\x0002 \\x0000\\x0002\\x0001\t\u00AC\u00AFQ<\\x0016\u00A1\u00CF\u00D7\\x0014Y 4Jb\r\\x0013\u00A4\t\u00A4\t\\x0008\u0080\\x0000\\x0008\u0080@P\\x0002\u00F1\\x0014%\u00BC\u00A6\u0081@I\u00A0@\u00814\t\u00FA@&\u00F0f\\x0007|\\x001fBKA\\x0000\\x0004@@H\u0080\u00AC~\u0091\u008E\rv\u00BA\\x0016\u00CDj^0l\\x001c\\x000c\u00ED\\x0012\u0088DI\u008C\u00BD\u00834I\u00CC\u00AD\u0082\u00B0\\x0000\\x0001\\x0010\\x0000\u0081\u00B8\\x0010(F\u0094\\x0018{\u0096\u00E4}j\\x0005c\u00EDq`\u00B1B\u0097\u0086\u00CAL\\x0002\\x0001H\\x0013H\\x0013\\x0010\\x0000\\x0001\\x0010\\x0000\\x0001i\\x0002\u00C1bJ\u00A2\u0098UaJ%\u0080L\u0081@\u0089\u00BD:\u00814\u0091~ c/\u00F16\\x0000\\x0002 \\x0000\\x0002\\x0011\\x0012\\x0008\u00B0\u00FAFY\u00CD\u00EB\u00D35\\x0012d\u00A4\r\u00A4Q\u00B0\u00D28\\x0008\u00EA\\x0012YLH\u0093\\x0012\u0081\u008Ep\u00BC\u0088q\u00F7B\u00ABA\\x0000\\x0004RB\u00C0\u0097\"\n\\x001f\u0089\u00D4@\u00A7nr/\u00EFG\u0081:\u0091\u00A2Z\\x0006+\tiR\\x0006\u00E8)\\x0019\u00AA\u00E2\u00DA\u00A7\u0081\\x0017\\x0004@ L\\x0002\u00CA\\x001a\\x001ci{\\x001f\\x0013c//\u00A4\u00CA\u00A6\u00A2`z\u00DC\\x0008@\u009A\u00A0\u0080\\x0000\\x0008\u0080\\x0000\\x00088\\x0010\u00F0a\u00E3K0q\u00E3\u00F36\u00C9\u00CF@\u00C5DQ\u00E1}O'\\x0000i\u00E2\u00B3\u00AF\u00A3\u00EB\u0080\\x0000\\x0008\u0080@F\\x0008H\u00EA\u0092\u0098\u00DBu\u00D9V`\u00F1N\u008C\u00AC!\u00A4I\u008CnF\u0098>\u00D8\u008C\\x000c\u009Dh&\\x0008\u0080@D\\x0004d&q\\x0012\u00B4\u00D4EF\u00A0$\u00A89\\x0011\u00DD\u00F4\u00D8\\x0014\\x000bi\\x0002i\\x0002\\x0002 \\x0000\\x0002 `& \u00A5K\u00E27\u0083\u00E3aY\u00E5\u0082dcc\u009E\u00B3\u00FC\u00B2\ni\u0082!\t\\x0004@\\x0000\\x0004@@' \\x0013\u00F4\u009Ah\u00EF\u0082\u008C\u00FB\\x0004\u00EA\u00A4\u00DC\\x0004 M0$\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u00A8\\x0004H\u0097x\u00AE\u00BC\u008Dyd\u0089\u008CM\u0095Q')h\u00A6\\x000c\u008A\u00B8\u00E6\u00814\u00C1\u0090\\x0004\\x0002 \\x0000\\x0002  \u00F7\u00D3\u00C1q\u00B5dA\u00E6><'\u00AD\u00A0N\u00CAw\u00BB!M0$\u0081\\x0000\\x0008\u0080\\x0000\\x0008xm^\u0092\u00E8I\\x001c'\\x0013\u00EB\u00E9>)\u009Fm\\x000e\"\u00B6RT[H\\x0013\\x000cI \\x0000\\x0002 \u0090y\\x0002\u00EE.\u0084\\x0014\u00FB\\x000f<\u00D5I\u008A\u00DB\\x001ec)#\u0096&7\u00BC\u00F4\u00F3U\u009F\u00BFa\u00EFI\u00FA\\x001a\t\\x0004@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004JF`\u00E9\u00CF\u00F5$BH\u008A\u00F4\\x001f\u00B7\u00AB\u00B2\u00B2\u00F2\u0092\u00AA\u00AA\u00AA\u00E1s\\x001b\u00FA\u00BC\u00BA\u00B9\u00E7\u00C8\u0095\u00F4\u00C5e\u0083g \u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@\u00C9\\x0008\u0090\u00FC \\x0011BR\u00C4$M\u00FA\u00BD\u00BE\u009D\\x000e\u0091`\u00A1\u00EF\u0090@\\x0000\\x0004@\\x0000\\x0004@\\x0000\\x0004@\u00A0d\\x0004H~\u0090\\x0008!)\u00A2I\\x0013\u00F2\u009C\u00DC_SO \u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@y\t(\\x0013:\u00F4\\x001f\u00FE\u0081\\x0000\\x0008\u0080\\x0000\\x0008\u0080\\x0000\\x0008\u0080@L\\x0008\u00FC\u00FF\u00EDM\u00B9\u00AD\u00E4\u0098U\\x0000\\x0000\\x0000\\x0000IEND\u00AEB`\u0082"
                        }
                    ],
                    "count": "7",
                    "solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>",
                    "otherinfo": "<p>The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.</p>",
                    "reference": "<p>https://tools.ietf.org/html/rfc7234</p><p>https://tools.ietf.org/html/rfc7231</p><p>https://www.rfc-editor.org/rfc/rfc9110.html</p>",
                    "cweid": "-1",
                    "wascid": "-1",
                    "sourceid": "6",
                    "tags":[ 
                        {
                            "tag": "WSTG-v42-ATHN-06",
                            "link": "https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/04-Authentication_Testing\/06-Testing_for_Browser_Cache_Weaknesses"
                        }
                    ]
                },
                {
                    "pluginid": "10112",
                    "alertRef": "10112",
                    "alert": "Session Management Response Identified",
                    "name": "Session Management Response Identified",
                    "riskcode": "0",
                    "confidence": "2",
                    "riskdesc": "Informational (Medium)",
                    "desc": "<p>The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to \"Auto-Detect\" then this rule will change the session management to use the tokens identified.</p>",
                    "instances":[ 
                        {
                            "id": "118",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "GRUYERE_ID",
                            "attack": "",
                            "evidence": "609748043719438807953504420257354417050",
                            "otherinfo": "\ncookie:GRUYERE_ID",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: \r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=609748043719438807953504420257354417050; Path=/\r\nX-Cloud-Trace-Context: b7fc9a6e1225de363d64bd71f33d84d8\r\nDate: Fri, 28 Feb 2025 11:56:56 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 11:56:56 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 609748043719438807953504420257354417050.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/609748043719438807953504420257354417050\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "1",
                    "solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>",
                    "otherinfo": "<p></p><p>cookie:GRUYERE_ID</p>",
                    "reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id</p>",
                    "cweid": "-1",
                    "wascid": "-1",
                    "sourceid": "51",
                    "tags":[ 
                    ]
                },
                {
                    "pluginid": "10104",
                    "alertRef": "10104",
                    "alert": "User Agent Fuzzer",
                    "name": "User Agent Fuzzer",
                    "riskcode": "0",
                    "confidence": "2",
                    "riskdesc": "Informational (Medium)",
                    "desc": "<p>Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.</p>",
                    "instances":[ 
                        {
                            "id": "142",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=407354665389105321012803565709618413350; Path=/\r\nX-Cloud-Trace-Context: 149a1aa6a7ff7aa49a8eecd0b514fdf4\r\nDate: Fri, 28 Feb 2025 12:00:42 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:42 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 407354665389105321012803565709618413350.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/407354665389105321012803565709618413350\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "141",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=415632421523006197827458134816984466727; Path=/\r\nX-Cloud-Trace-Context: cd139592f42303c99a8eecd0b514fc5f\r\nDate: Fri, 28 Feb 2025 12:00:42 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:42 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 415632421523006197827458134816984466727.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/415632421523006197827458134816984466727\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "140",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=340448468435646463573191621638477068439; Path=/\r\nX-Cloud-Trace-Context: ade8eb94be3cc4409a8eecd0b514f2fc\r\nDate: Fri, 28 Feb 2025 12:00:41 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:41 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 340448468435646463573191621638477068439.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/340448468435646463573191621638477068439\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "143",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=674484195126208790319794673602120614070; Path=/\r\nX-Cloud-Trace-Context: 25e107ce9161f4669a8eecd0b514f690\r\nDate: Fri, 28 Feb 2025 12:00:42 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:42 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 674484195126208790319794673602120614070.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/674484195126208790319794673602120614070\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "144",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=421239886509109832883516658033417251681; Path=/\r\nX-Cloud-Trace-Context: b06ff1d281d7007a9a8eecd0b514fec7\r\nDate: Fri, 28 Feb 2025 12:00:43 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:43 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 421239886509109832883516658033417251681.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/421239886509109832883516658033417251681\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "151",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=498333028892456626695432469567126002698; Path=/\r\nX-Cloud-Trace-Context: 58e3688b276d18d008bbde12b2efebd5\r\nDate: Fri, 28 Feb 2025 12:00:46 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:46 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 498333028892456626695432469567126002698.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/498333028892456626695432469567126002698\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "150",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=541098838268241021329680560903815210425; Path=/\r\nX-Cloud-Trace-Context: e7d8f5a027f9442608bbde12b2efe3bc\r\nDate: Fri, 28 Feb 2025 12:00:45 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:45 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 541098838268241021329680560903815210425.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/541098838268241021329680560903815210425\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "145",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=444471334130862532258131630773035389404; Path=/\r\nX-Cloud-Trace-Context: b9a0211d879db67c9a8eecd0b514f761\r\nDate: Fri, 28 Feb 2025 12:00:43 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:43 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 444471334130862532258131630773035389404.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/444471334130862532258131630773035389404\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "147",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=353077781522790661335596260525362679698; Path=/\r\nX-Cloud-Trace-Context: 07bf4768e9f2ea169a8eecd0b514fd45\r\nDate: Fri, 28 Feb 2025 12:00:44 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:44 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 353077781522790661335596260525362679698.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/353077781522790661335596260525362679698\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "149",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=602618017911023906755553486219324679724; Path=/\r\nX-Cloud-Trace-Context: 52bd77a54dfc6e2208bbde12b2efea0f\r\nDate: Fri, 28 Feb 2025 12:00:45 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:45 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 602618017911023906755553486219324679724.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/602618017911023906755553486219324679724\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "148",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=555887048662915223709582595652269609879; Path=/\r\nX-Cloud-Trace-Context: 161a7e18481b64e508bbde12b2efe867\r\nDate: Fri, 28 Feb 2025 12:00:44 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:44 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 555887048662915223709582595652269609879.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/555887048662915223709582595652269609879\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        },
                        {
                            "id": "146",
                            "uri": "https://google-gruyere.appspot.com/start",
                            "method": "GET",
                            "param": "Header User-Agent",
                            "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
                            "evidence": "",
                            "otherinfo": "",
                            "request-header": "GET https://google-gruyere.appspot.com/start HTTP/1.1\r\nhost: google-gruyere.appspot.com\r\nuser-agent: msnbot/1.1 (+http://search.msn.com/msnbot.htm)\r\npragma: no-cache\r\ncache-control: no-cache\r\nreferer: https://google-gruyere.appspot.com/robots.txt\r\n\r\n",
                            "request-body": "",
                            "response-header": "HTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Type: text/html; charset=utf-8\r\nPragma: no-cache\r\nSet-Cookie: GRUYERE_ID=466965559060790165557301275706407211793; Path=/\r\nX-Cloud-Trace-Context: cf1a72a658cb28299a8eecd0b514f31b\r\nDate: Fri, 28 Feb 2025 12:00:44 GMT\r\nServer: Google Frontend\r\nContent-Length: 681\r\nExpires: Fri, 28 Feb 2025 12:00:44 GMT\r\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\r\n\r\n",
                            "response-body": "\n    <HTML>\n    \n  <STYLE>\n  body, th, td, form {\n    font-family: Verdana, Arial, Helvetica, sans-serif;\n    font-size: 12px;\n  }\n  h1 { color: #dd0000; }\n  </STYLE>\n    <TITLE>Start Gruyere</TITLE>\n    <BODY>\n    <H1>Start Gruyere</H1>\n    Your Gruyere instance id is 466965559060790165557301275706407211793.\n\n    <br><br><span style=\"color:red\"><b>WARNING: Gruyere is not secure.<br>\n    Do not upload any personal or private data.</b></span>\n\n    <br><br>By using Gruyere you agree to the\n    <A href=\"https://www.google.com/intl/en/policies/terms/\">terms of service</A>.\n\n    <H2><A HREF=\"/466965559060790165557301275706407211793\">Agree &amp; Start</A></H2>\n    </BODY></HTML>"
                        }
                    ],
                    "count": "12",
                    "solution": "",
                    "otherinfo": "",
                    "reference": "<p>https://owasp.org/wstg</p>",
                    "cweid": "0",
                    "wascid": "0",
                    "sourceid": "839",
                    "tags":[ 
                    ]
                }
            ]
        }
    ],
    "sequences":[
    ]
}

