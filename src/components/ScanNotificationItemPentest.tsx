import { Card, Divider, ProgressCircle } from "@tremor/react";
import { ScanNotificationDataWithGroupedPentestId } from "./type";
import { CircleCheckBig, Crosshair } from "lucide-react";

function classNames(...classes: any) {
  return classes.filter(Boolean).join(' ');
}

const statusColor = {
  'in progress': 'bg-yellow-50 text-yellow-900 ring-yellow-600/30 dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20',
  'completed': 'bg-emerald-50 text-emerald-900 ring-emerald-600/30 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-emerald-400/20',
  'error': 'bg-red-50 text-red-900 ring-red-600/20 dark:bg-red-400/10 dark:text-red-400 dark:ring-red-400/20',
  'default': 'bg-blue-50 text-blue-900 ring-blue-500/30 dark:bg-blue-400/10 dark:text-blue-400 dark:ring-blue-400/30',
}
const toolNameMap = {
  "nmap": "Network Mapping",
  "whatweb": "Technology Discovery",
  "amass": "SubDomain Enumeration",
  "zap": "Web Scanning",
  "theHarvester": "Information Gathering",
}

export default function ScanNotificationItemPentest({ pentestScanData }: {
  pentestScanData: ScanNotificationDataWithGroupedPentestId;
}) {

  // const overallStatus = pentestScanData.subScanDetails.length < 6 ? "in progress" : "completed";

  const overallStatus = pentestScanData.subScanDetails.findIndex(item => item.status === "in-progress") === -1 ? "completed" : "in progress";

  return (
    <>
      <Card key={pentestScanData.pentestId}>
        <div className="flex items-center justify-between space-x-4 sm:justify-start sm:space-x-2">
          <h4 className="truncate text-tremor-default font-medium text-tremor-content-strong dark:text-dark-tremor-content-strong">
            Penetration Testing
            {/* {pentestScanData.target} */}
          </h4>
          <span
            className={classNames(
              statusColor[overallStatus],
              'inline-flex items-center whitespace-nowrap rounded px-1.5 py-0.5 text-tremor-label font-medium ring-1 ring-inset',
            )}
            aria-hidden={true}
          >
            {overallStatus.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
          </span>
        </div>
        <div className="mt-4 flex flex-wrap items-center gap-x-6 gap-y-4">
          <div className="flex items-center space-x-1.5">
            <Crosshair
              className="size-5 text-tremor-content-subtle dark:text-dark-tremor-content-subtle"
              aria-hidden={true}
            />
            <p className="text-tremor-default text-tremor-content dark:text-dark-tremor-content">
              {pentestScanData.target}
            </p>
          </div>
        </div>
        <Divider />

        <div className="flex flex-col justify-between gap-4">
          {pentestScanData.subScanDetails.map(eachSubScanDetails => {
            const startOrEndTime = eachSubScanDetails.endTime.trim().length > 0 ? new Date(eachSubScanDetails.endTime) : new Date(eachSubScanDetails.startTime);
            const presentTime = new Date();
            const diffMs = presentTime.getTime() - startOrEndTime.getTime();

            const seconds = Math.floor(diffMs / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);

            let dataTimeStr = eachSubScanDetails.endTime.trim().length > 0 ? "Completed " : "Started ";

            if (seconds < 60) {
              dataTimeStr += `${seconds} second${seconds !== 1 ? "s" : ""} ago`;
            } else if (minutes < 60) {
              dataTimeStr += `${minutes} minute${minutes !== 1 ? "s" : ""} ago`;
            } else if (hours < 24) {
              dataTimeStr += `${hours} hour${hours !== 1 ? "s" : ""} ago`;
            } else {
              dataTimeStr += `${days} day${days !== 1 ? "s" : ""} ago`;
            }

            return (
              <div key={eachSubScanDetails.scanId} className="flex items-center justify-between gap-4">
                <div className="flex items-center space-x-2">
                  {eachSubScanDetails.status === "in progress" ?
                    <ProgressCircle
                      value={33
                        // (order.fulfillmentActual / order.fulfillmentTotal) *
                        // 100
                      }
                      radius={9}
                      strokeWidth={3.5}
                    /> :
                    <CircleCheckBig
                      className="size-5 text-emerald-900 dark:text-emerald-400"
                      aria-hidden={true}
                    />
                  }
                  <p className="text-tremor-default font-medium text-tremor-content-strong dark:text-dark-tremor-content-strong">
                    {toolNameMap[eachSubScanDetails.tool as keyof typeof toolNameMap]}
                    {/* ({order.fulfillmentActual}/{order.fulfillmentTotal}) */}
                  </p>
                </div>
                <p className="mt-2 text-tremor-default text-tremor-content dark:text-dark-tremor-content sm:mt-0">
                  {dataTimeStr}
                </p>
              </div>
            )
          })}
        </div>
      </Card>
    </>
  )
}