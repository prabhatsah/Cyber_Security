import { EncryptedCredential } from "./globalType";

export interface NetworkPentestFullInstanceData {
  pentest_id: string;
  client_name: string;
  pentest_name: string;
  pentest_description: string;
  aggressiveness: string;
  progress: number;
  scope_type: string;
  credentials: EncryptedCredential[];
  ip_addresses: Array<string>;
  start_ip: string;
  end_ip: string;
  cidr_range: string;
  hostname: string;
  allowed_actions: Array<string>;
  probe_id: string;
  probe_name: string;
  probe_machine_hostname: string;
  probe_machine_ip_address: string;
  probe_machine_os: string;
  agent_ip: string;
  subnet_mask: string;
  default_gateway: string;
  created_on: string;
  created_by_id: string;
  created_by_login: string;
  vulScanData?: any;
}

export interface NetworkDetails {
  pentestId: string;
  clientName: string;
  pentestName: string;
  pentestDescription: string;
  aggressiveness: string;
  progress: number;
  scopeType: string;
  ipAddresses: Array<string>;
  startIp: string;
  endIp: string;
  cidrRange: string;
  hostName: string;
  allowedActions: Array<string>;
  agentIp: string;
  subnetMask: string;
  defaultGateway: string;
  createdOn: string;
  createdBy: {
    userId: string;
    userName: string;
  };
}

export interface NetworkPenTestModified {
  userId: string;
  pentestId: string;
  pentestType: string;
  networkDetails: NetworkDetails;
  scanData: Record<string, string>;
  lastUpdated: string;
  scanDataLastUpdatation: boolean;
}

export interface NetworkPenTestDefault {
  id: number;
  userid: string;
  pentestid: string;
  type: string;
  data: {
    networkDetails: NetworkDetails;
    scandata?: Record<string, string>;
    isDataUpdated?: boolean;
  };
  lastscanon: string;
}

export interface NetworkPenTestWithoutScanModified {
  userId: string;
  pentestId: string;
  pentestType: string;
  networkDetails: NetworkDetails;
  lastUpdated: string;
}

export interface NetworkPenTestWithoutScanDefault {
  id: number;
  userid: string;
  pentestid: string;
  type: string;
  networkdetails: NetworkDetails;
  lastscanon: string;
}

export interface NmapEachServicePortResult {
  hostIp: string;
  mac: string;
  vendor: string;
  os: string;
  cpe: string;
  selected: boolean;
  ports: Array<{
    port: number;
    protocol: string;
    service: string;
    version: string;
  }>;
}

export interface NetBIOSInfo {
  name: string;
  hex: string;
  group: boolean;
  active: boolean;
  type: string;
}

export interface SmbDialects {
  versions: Record<string, boolean>;
  preferredDialect: string | null;
  smb1Only: boolean | null;
  smbSigningRequired: boolean | null;
}

export interface RpcSession {
  nullSession: {
    username: string;
    password: string;
  } | null;
  authenticatedSession: {
    username: string;
    password: string;
  } | null;
  guestSession: {
    username: string;
    password: string;
  } | null;
}

export interface OsInfo {
  os: string | null;
  version: string | null;
  release: string | null;
  build: string | null;
  nativeOs: string | null;
  nativeLanManager: string | null;
  platformId: string | null;
  serverType: string | null;
  serverTypeString: string | null;
}

export interface Enum4LinuxGenericResult {
  target?: string;
  services: {
    ldap: boolean;
    ldaps: boolean;
    smb445: boolean;
    smb139: boolean;
  };
  workgroupOrDomain: string;
  netbiosNames: NetBIOSInfo[];
  netbiosComputerName?: string;
  netbiosDomainName?: string;
  macAddress?: string;
  smbDialects: SmbDialects;
  fqdn?: string;
  dnsDomain?: string;
  rpcSessions: RpcSession;
  osInfo: OsInfo;
}

// Types for AD parsing
export interface Enum4LinuxUser {
  id: string;
  username: string;
  name: string | null;
  acb: string;
  description: string | null;
}

export interface Enum4LinuxGroup {
  id: string;
  groupname: string;
  type: string;
}

export interface Enum4LinuxShare {
  name: string;
  comment: string;
  type: string;
  mapping: string;
  listing: string;
}

export interface Enum4LinuxPolicies {
  smbConnections: Record<string, boolean>;
}

export interface Enum4LinuxPrinter {
  name: string;
}

export interface Enum4LinuxADResult extends Enum4LinuxGenericResult {
  // extra AD data
  ldapDomainInfo?: {
    rootDc: boolean;
    longDomainName?: string;
  };
  rpcDomainInfo?: {
    domain?: string;
    sid?: string;
    membership?: string;
  };
  users: Enum4LinuxUser[];
  groups: Enum4LinuxGroup[];
  shares: Enum4LinuxShare[];
  policies?: Enum4LinuxPolicies;
  printers: Enum4LinuxPrinter[];
}

// export interface Enum4LinuxUser {
//   id: string;
//   username: string;
//   name: string | null;
//   description: string | null;
//   acb: string;
// }

// export interface Enum4LinuxGroup {
//   id: string;
//   groupname: string;
//   type: string;
// }

// export interface Enum4LinuxShare {
//   name: string;
//   comment: string;
//   type: string;
//   mapping: string;
//   listing: string;
// }

// export interface Enum4LinuxADResult {
//   domain: string | null;
//   domainSid: string | null;
//   fqdn: string | null;
//   dnsDomain: string | null;
//   os: string | null;
//   osBuild: string | null;
//   users: Enum4LinuxUser[];
//   groups: Enum4LinuxGroup[];
//   shares: Enum4LinuxShare[];
// }
