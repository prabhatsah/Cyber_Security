"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { CheckCircle, Eye, Network, Server, Database, Shield, ArrowRight } from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface ConfirmedHost {
    ip: string
    hostname: string
    services: string[]
    osFingerprint: string
    tags: string[]
    riskLevel: "Low" | "Medium" | "High" | "Critical"
}

interface HostConfirmationPanelProps {
    pentestIdName: string
}

export function HostConfirmationPanel({ pentestIdName }: HostConfirmationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [isLoading, setIsLoading] = useState(false)
    const [confirmedHosts] = useState<ConfirmedHost[]>([
        {
            ip: "192.168.1.1",
            hostname: "gateway.local",
            services: ["SSH", "HTTP", "HTTPS"],
            osFingerprint: "Linux 3.2 - 4.9",
            tags: ["Gateway", "Critical Asset"],
            riskLevel: "High",
        },
        {
            ip: "192.168.1.10",
            hostname: "dc01.domain.local",
            services: ["RDP", "LDAP", "DNS", "Kerberos", "SMB"],
            osFingerprint: "Windows Server 2019",
            tags: ["Domain Controller", "Critical Asset"],
            riskLevel: "Critical",
        },
        {
            ip: "192.168.1.15",
            hostname: "workstation-01",
            services: ["RDP", "SMB", "WinRM"],
            osFingerprint: "Windows 10 Pro",
            tags: ["Workstation"],
            riskLevel: "Medium",
        },
        {
            ip: "192.168.1.25",
            hostname: "db-server",
            services: ["SSH", "MySQL", "HTTP"],
            osFingerprint: "CentOS 7",
            tags: ["Database Server", "Customer Data"],
            riskLevel: "High",
        },
    ])

    const getRiskColor = (risk: string) => {
        switch (risk) {
            case "Critical":
                return "bg-red-600"
            case "High":
                return "bg-orange-600"
            case "Medium":
                return "bg-yellow-600"
            case "Low":
                return "bg-green-600"
            default:
                return "bg-gray-600"
        }
    }

    const getServiceIcon = (service: string) => {
        switch (service.toLowerCase()) {
            case "ssh":
                return <Server className="w-3 h-3" />
            case "rdp":
                return <Network className="w-3 h-3" />
            case "mysql":
            case "mssql":
                return <Database className="w-3 h-3" />
            default:
                return <Shield className="w-3 h-3" />
        }
    }


    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/enumeration`);
    }

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        <Card className=" border">
                            <CardHeader>
                                <CardTitle className=" flex items-center gap-2">
                                    <CheckCircle className="w-5 h-5 text-green-500" />
                                    Host Confirmation & Classification
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="rounded-md border ">
                                    <Table>
                                        <TableHeader>
                                            <TableRow className="border">
                                                <TableHead className="">IP Address</TableHead>
                                                <TableHead className="">Hostname</TableHead>
                                                <TableHead className="">Services</TableHead>
                                                <TableHead className="">OS Fingerprint</TableHead>
                                                <TableHead className="">Tags</TableHead>
                                                <TableHead className="">Risk Level</TableHead>
                                                <TableHead className="">Actions</TableHead>
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            {confirmedHosts.map((host) => (
                                                <TableRow key={host.ip} className="border">
                                                    <TableCell className=" font-mono">{host.ip}</TableCell>
                                                    <TableCell className="">{host.hostname}</TableCell>
                                                    <TableCell>
                                                        <div className="flex flex-wrap gap-1">
                                                            {host.services.slice(0, 3).map((service) => (
                                                                <Badge key={service} variant="outline" className="text-xs border-gray-700 ">
                                                                    {getServiceIcon(service)}
                                                                    <span className="ml-1">{service}</span>
                                                                </Badge>
                                                            ))}
                                                            {host.services.length > 3 && (
                                                                <Badge variant="outline" className="text-xs border-gray-700 ">
                                                                    +{host.services.length - 3}
                                                                </Badge>
                                                            )}
                                                        </div>
                                                    </TableCell>
                                                    <TableCell className="">{host.osFingerprint}</TableCell>
                                                    <TableCell>
                                                        <div className="flex flex-wrap gap-1">
                                                            {host.tags.map((tag) => (
                                                                <Badge key={tag} variant="secondary" className="text-xs bg-blue-600 ">
                                                                    {tag}
                                                                </Badge>
                                                            ))}
                                                        </div>
                                                    </TableCell>
                                                    <TableCell>
                                                        <Badge className={`${getRiskColor(host.riskLevel)} `}>{host.riskLevel}</Badge>
                                                    </TableCell>
                                                    <TableCell>
                                                        <Dialog>
                                                            <DialogTrigger asChild>
                                                                <Button size="sm" variant="outline" className="border  bg-transparent">
                                                                    <Eye className="w-4 h-4 mr-1" />
                                                                    Details
                                                                </Button>
                                                            </DialogTrigger>
                                                            <DialogContent className=" border max-w-4xl">
                                                                <DialogHeader>
                                                                    <DialogTitle className="">Host Details: {host.ip}</DialogTitle>
                                                                </DialogHeader>
                                                                <Tabs defaultValue="services" className="w-full">
                                                                    <TabsList className="grid w-full grid-cols-4 ">
                                                                        <TabsTrigger value="services" className=" ">
                                                                            Services
                                                                        </TabsTrigger>
                                                                        <TabsTrigger value="banners" className=" ">
                                                                            Banners
                                                                        </TabsTrigger>
                                                                        <TabsTrigger value="shares" className=" ">
                                                                            SMB Shares
                                                                        </TabsTrigger>
                                                                        <TabsTrigger value="ldap" className=" ">
                                                                            LDAP Info
                                                                        </TabsTrigger>
                                                                    </TabsList>
                                                                    <TabsContent value="services" className="mt-4">
                                                                        <ScrollArea className="h-64 w-full rounded border  p-4">
                                                                            <div className="space-y-2">
                                                                                {host.services.map((service, index) => (
                                                                                    <div key={index} className="flex items-center gap-2 ">
                                                                                        {getServiceIcon(service)}
                                                                                        <span>{service}</span>
                                                                                        <Badge variant="outline" className="ml-auto border">
                                                                                            Port {22 + index * 10}
                                                                                        </Badge>
                                                                                    </div>
                                                                                ))}
                                                                            </div>
                                                                        </ScrollArea>
                                                                    </TabsContent>
                                                                    <TabsContent value="banners" className="mt-4">
                                                                        <ScrollArea className="h-64 w-full rounded border  p-4">
                                                                            <div className="font-mono text-sm text-green-400 space-y-1">
                                                                                <div>SSH-2.0-OpenSSH_7.4</div>
                                                                                <div>HTTP/1.1 200 OK</div>
                                                                                <div>Server: Apache/2.4.6 (CentOS)</div>
                                                                                <div>X-Powered-By: PHP/7.2.24</div>
                                                                            </div>
                                                                        </ScrollArea>
                                                                    </TabsContent>
                                                                    <TabsContent value="shares" className="mt-4">
                                                                        <ScrollArea className="h-64 w-full rounded border  p-4">
                                                                            <div className="space-y-2 ">
                                                                                <div>\\{host.ip}\ADMIN$ - Administrative share</div>
                                                                                <div>\\{host.ip}\C$ - Default share</div>
                                                                                <div>\\{host.ip}\IPC$ - Remote IPC</div>
                                                                                <div>\\{host.ip}\SYSVOL - Domain share</div>
                                                                            </div>
                                                                        </ScrollArea>
                                                                    </TabsContent>
                                                                    <TabsContent value="ldap" className="mt-4">
                                                                        <ScrollArea className="h-64 w-full rounded border  p-4">
                                                                            <div className="space-y-2 ">
                                                                                <div>Domain: DOMAIN.LOCAL</div>
                                                                                <div>Forest: domain.local</div>
                                                                                <div>Domain Controller: DC01</div>
                                                                                <div>Users: 150+ accounts discovered</div>
                                                                            </div>
                                                                        </ScrollArea>
                                                                    </TabsContent>
                                                                </Tabs>
                                                            </DialogContent>
                                                        </Dialog>
                                                    </TableCell>
                                                </TableRow>
                                            ))}
                                        </TableBody>
                                    </Table>
                                </div>

                                <div className="flex items-center justify-between mt-4">
                                    <div className="text-sm ">{confirmedHosts.length} hosts confirmed and classified</div>
                                    <Button onClick={handleProceed} className="bg-green-600 hover:bg-green-700">
                                        <ArrowRight className="w-4 h-4 mr-2" />
                                        Proceed to Enumeration
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    </div>
            }
        </>
    )
}
