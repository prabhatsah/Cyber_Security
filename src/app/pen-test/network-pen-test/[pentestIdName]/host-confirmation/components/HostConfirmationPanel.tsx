"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { CheckCircle, Network, Server, Database, Shield, ArrowRight } from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface ConfirmedHost {
    ip: string
    hostname: string
    services: string[]
    osFingerprint: string
    tags: string[]
    riskLevel: "Low" | "Medium" | "High" | "Critical"
}

interface HostConfirmationPanelProps {
    pentestIdName: string
}

export function HostConfirmationPanel({ pentestIdName }: HostConfirmationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_")
    const router = useRouter()
    const pathname = usePathname()

    const [isLoading, setIsLoading] = useState(false)
    const [confirmedHosts] = useState<ConfirmedHost[]>([
        {
            ip: "192.168.1.1",
            hostname: "gateway.local",
            services: ["SSH", "HTTP", "HTTPS"],
            osFingerprint: "Linux 3.2 - 4.9",
            tags: ["Gateway", "Critical Asset"],
            riskLevel: "High",
        },
        {
            ip: "192.168.1.10",
            hostname: "dc01.domain.local",
            services: ["RDP", "LDAP", "DNS", "Kerberos", "SMB"],
            osFingerprint: "Windows Server 2019",
            tags: ["Domain Controller", "Critical Asset"],
            riskLevel: "Critical",
        },
        {
            ip: "192.168.1.15",
            hostname: "workstation-01",
            services: ["RDP", "SMB", "WinRM"],
            osFingerprint: "Windows 10 Pro",
            tags: ["Workstation"],
            riskLevel: "Medium",
        },
        {
            ip: "192.168.1.25",
            hostname: "db-server",
            services: ["SSH", "MySQL", "HTTP"],
            osFingerprint: "CentOS 7",
            tags: ["Database Server", "Customer Data"],
            riskLevel: "High",
        },
    ])

    const getRiskColor = (risk: string) => {
        switch (risk) {
            case "Critical":
                return "bg-red-600"
            case "High":
                return "bg-orange-600"
            case "Medium":
                return "bg-yellow-600"
            case "Low":
                return "bg-green-600"
            default:
                return "bg-gray-600"
        }
    }

    const getServiceIcon = (service: string) => {
        switch (service.toLowerCase()) {
            case "ssh":
                return <Server className="w-3 h-3" />
            case "rdp":
                return <Network className="w-3 h-3" />
            case "mysql":
            case "mssql":
                return <Database className="w-3 h-3" />
            default:
                return <Shield className="w-3 h-3" />
        }
    }

    const handleProceed = () => {
        setIsLoading(true)
        router.push(`/pen-test/network-pen-test/${pentestIdName}/enumeration`)
    }

    return (
        <>
            {isLoading ? (
                <GlobalLoader />
            ) : (
                <div className="space-y-6">
                    <Card className="border">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <CheckCircle className="w-5 h-5 text-green-500" />
                                Host Confirmation & Classification
                            </CardTitle>
                        </CardHeader>
                        <CardContent>
                            <Accordion type="multiple" className="w-full">
                                {confirmedHosts.map((host) => (
                                    <AccordionItem key={host.ip} value={host.ip} className="border rounded-lg mb-2">
                                        <AccordionTrigger className="px-4 py-3 hover:no-underline">
                                            <div className="flex items-center justify-between w-full mr-4">
                                                <div className="flex items-center gap-3">
                                                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                                    <span className="font-mono text-sm w-32">{host.ip}</span>
                                                    <Badge variant="default" className="text-xs text-white">
                                                        {host.hostname}
                                                    </Badge>
                                                </div>
                                                <div className="flex items-center gap-2">
                                                    {/* Tags moved to trigger */}
                                                    <div className="flex flex-wrap gap-1">
                                                        {host.tags.map((tag) => (
                                                            <Badge
                                                                key={tag}
                                                                className="text-xs bg-blue-600 hover:bg-blue-700 text-white dark:bg-blue-500 dark:hover:bg-blue-600"
                                                            >
                                                                {tag}
                                                            </Badge>
                                                        ))}
                                                    </div>

                                                </div>
                                            </div>
                                        </AccordionTrigger>
                                        <AccordionContent className="px-4 pb-4">
                                            <div className="space-y-4">
                                                <div className="text-sm text-muted-foreground mb-3">
                                                    <strong>OS Fingerprint:</strong> {host.osFingerprint}
                                                </div>

                                                <Tabs defaultValue="services" className="w-full">
                                                    <TabsList className="grid w-full grid-cols-3 bg-muted">
                                                        <TabsTrigger
                                                            value="services"
                                                            className="data-[state=active]:bg-background data-[state=active]:text-foreground"
                                                        >
                                                            Services
                                                        </TabsTrigger>
                                                        <TabsTrigger
                                                            value="shares"
                                                            className="data-[state=active]:bg-background data-[state=active]:text-foreground"
                                                        >
                                                            SMB Shares
                                                        </TabsTrigger>
                                                        <TabsTrigger
                                                            value="ldap"
                                                            className="data-[state=active]:bg-background data-[state=active]:text-foreground"
                                                        >
                                                            LDAP Info
                                                        </TabsTrigger>
                                                    </TabsList>
                                                    <TabsContent value="services" className="mt-4">
                                                        <ScrollArea className="h-48 w-full rounded border-border bg-background p-4">
                                                            <div className="space-y-2">
                                                                {host.services.map((service, index) => (
                                                                    <div key={index} className="flex items-center gap-2 p-2 rounded bg-muted/50">
                                                                        {getServiceIcon(service)}
                                                                        <span className="text-foreground">{service}</span>
                                                                        <Badge
                                                                            variant="outline"
                                                                            className="ml-auto border-border bg-background text-foreground"
                                                                        >
                                                                            Port {22 + index * 10}
                                                                        </Badge>
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        </ScrollArea>
                                                    </TabsContent>
                                                    <TabsContent value="shares" className="mt-4">
                                                        <ScrollArea className="h-48 w-full rounded border-border bg-background p-4">
                                                            <div className="space-y-2">
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">
                                                                    \\{host.ip}\ADMIN$ - Administrative share
                                                                </div>
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">
                                                                    \\{host.ip}\C$ - Default share
                                                                </div>
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">
                                                                    \\{host.ip}\IPC$ - Remote IPC
                                                                </div>
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">
                                                                    \\{host.ip}\SYSVOL - Domain share
                                                                </div>
                                                            </div>
                                                        </ScrollArea>
                                                    </TabsContent>
                                                    <TabsContent value="ldap" className="mt-4">
                                                        <ScrollArea className="h-48 w-full rounded border-border bg-background p-4">
                                                            <div className="space-y-2">
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">Domain: DOMAIN.LOCAL</div>
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">Forest: domain.local</div>
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">Domain Controller: DC01</div>
                                                                <div className="p-2 rounded bg-muted/50 text-foreground">
                                                                    Users: 150+ accounts discovered
                                                                </div>
                                                            </div>
                                                        </ScrollArea>
                                                    </TabsContent>
                                                </Tabs>
                                            </div>
                                        </AccordionContent>
                                    </AccordionItem>
                                ))}
                            </Accordion>

                            <div className="flex items-center justify-between mt-4">
                                <div className="text-sm">{confirmedHosts.length} hosts confirmed and classified</div>
                                <Button onClick={handleProceed} className="bg-green-600 hover:bg-green-700 text-white">
                                    <ArrowRight className="w-4 h-4 mr-2" />
                                    Proceed to Enumeration
                                </Button>
                            </div>
                        </CardContent>
                    </Card>
                </div>
            )}
        </>
    )
}