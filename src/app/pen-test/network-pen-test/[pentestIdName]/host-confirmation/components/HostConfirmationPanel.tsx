"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { CheckCircle, Network, Server, Database, Shield, ArrowRight } from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"
import { getMyInstancesV2, invokeAction } from "@/ikon/utils/api/processRuntimeService"

interface ConfirmedHost {
    cpe: string
    hostIp: string
    vendor: string
    selected: boolean
    mac: string
    //services: string[]
    os: string
    tags: string[]
    //riskLevel: "Low" | "Medium" | "High" | "Critical"
    ports: Array<{
        port: number
        protocol: string
        service: string
        version: string
    }>
}

interface HostConfirmationPanelProps {
    pentestIdName: string
}

export function HostConfirmationPanel({ pentestIdName }: HostConfirmationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_")
    const router = useRouter()
    const pathname = usePathname()

    const [isLoading, setIsLoading] = useState(false)
    const [taskId, setTaskId] = useState<string>("")
    let [pentestData, setPentestData] = useState<any>()
    let [confirmedHosts, setConfirmedHosts] = useState<ConfirmedHost[]>([
        // {
        //     ip: "192.168.1.1",
        //     hostname: "gateway.local",
        //     //services: ["SSH", "HTTP", "HTTPS"],
        //     os: "Linux 3.2 - 4.9",
        //     tags: ["Gateway", "Critical Asset"],
        //     //riskLevel: "High",
        //     ports: [
        //         { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH_8.1" },
        //         { port: 548, protocol: "tcp", service: "afp", version: "Apple Filing Protocol" },
        //     ],
        // },
        // {
        //     ip: "192.168.1.10",
        //     hostname: "dc01.domain.local",
        //     //services: ["RDP", "LDAP", "DNS", "Kerberos", "SMB"],
        //     os: "Windows Server 2019",
        //     tags: ["Domain Controller", "Critical Asset"],
        //     //riskLevel: "Critical",
        //     ports: [
        //         { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH_8.1" },
        //         { port: 548, protocol: "tcp", service: "afp", version: "Apple Filing Protocol" },
        //     ],
        // },
        // {
        //     ip: "192.168.1.15",
        //     hostname: "workstation-01",
        //     //services: ["RDP", "SMB", "WinRM"],
        //     os: "Windows 10 Pro",
        //     tags: ["Workstation"],
        //     //riskLevel: "Medium",
        //     ports: [
        //         { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH_8.1" },
        //         { port: 548, protocol: "tcp", service: "afp", version: "Apple Filing Protocol" },
        //     ],
        // },
        // {
        //     ip: "192.168.1.25",
        //     hostname: "db-server",
        //     //services: ["SSH", "MySQL", "HTTP"],
        //     os: "CentOS 7",
        //     tags: ["Database Server", "Customer Data"],
        //     //riskLevel: "High",
        //     ports: [
        //         { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH_8.1" },
        //         { port: 548, protocol: "tcp", service: "afp", version: "Apple Filing Protocol" },
        //     ],
        // },
    ])

    useEffect(() => {
        setIsLoading(true)
        async function fetchData() {
            let data: any = await getMyInstancesV2({
                processName: "Network Pentest",
                predefinedFilters: { taskName: "Reconnaissance" },
                processVariableFilters: { pentest_id: pentestId },
            });
            setTaskId(data[0].taskId)
            let selectedHosts = data[0].data.Reconnaissance.nmapEachServicePortResultsAll.filter((e: any) => {
                if (e.selected)
                    return e
            });
            for (let i = 0; i < selectedHosts.length; i++) {

                selectedHosts[i]['tags'] = []
                delete selectedHosts[i]['selected']
            }
            console.log(selectedHosts)
            data[0].data['Enumertation'] = {}
            data[0].data['Enumertation']['confirmedHosts'] = selectedHosts
            setPentestData(data[0].data)
            setConfirmedHosts(selectedHosts)
            setIsLoading(false)
        }

        fetchData();
    }, [pentestId]);


    const getRiskColor = (risk: string) => {
        switch (risk) {
            case "Critical":
                return "bg-red-600"
            case "High":
                return "bg-orange-600"
            case "Medium":
                return "bg-yellow-600"
            case "Low":
                return "bg-green-600"
            default:
                return "bg-gray-600"
        }
    }

    const getServiceIcon = (service: string) => {
        switch (service.toLowerCase()) {
            case "ssh":
                return <Server className="w-3 h-3" />
            case "rdp":
                return <Network className="w-3 h-3" />
            case "mysql":
            case "mssql":
                return <Database className="w-3 h-3" />
            default:
                return <Shield className="w-3 h-3" />
        }
    }

    const handleProceed = async () => {
        console.log(pentestData)
        let transitionName = "Host Confirmation"
        await invokeAction({ taskId: taskId, transitionName: transitionName, data: pentestData, processInstanceIdentifierField: "pentest_id" })
        setIsLoading(true)
        router.push(`/pen-test/network-pen-test/${pentestIdName}/enumeration`)
    }

    return (
        <>
            {isLoading ? (
                <GlobalLoader />
            ) : (
                <div className="space-y-6">
                    <Card className="border">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <CheckCircle className="w-5 h-5 text-green-500" />
                                Host Confirmation & Classification
                            </CardTitle>
                        </CardHeader>
                        <CardContent>
                            <Accordion type="multiple" className="w-full">
                                {confirmedHosts.map((host) => (
                                    <AccordionItem key={host.hostIp} value={host.hostIp} className="border rounded-lg mb-2">
                                        <AccordionTrigger className="px-4 py-3 hover:no-underline">
                                            <div className="flex items-center justify-between w-full mr-4">
                                                <div className="flex items-center gap-3">
                                                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                                    <span className="font-mono text-sm w-32">{host.hostIp}</span>
                                                    <Badge variant="default" className="text-xs text-white">
                                                        {host.vendor}
                                                    </Badge>
                                                </div>
                                                <div className="flex items-center gap-2">
                                                    {/* Tags moved to trigger */}
                                                    <div className="flex flex-wrap gap-1">
                                                        {/* {host.tags.map((tag) => (
                                                            <Badge
                                                                key={tag}
                                                                className="text-xs bg-blue-600 hover:bg-blue-700 text-white dark:bg-blue-500 dark:hover:bg-blue-600"
                                                            >
                                                                {tag}
                                                            </Badge>
                                                        ))} */}
                                                        <Badge
                                                            key={host.mac}
                                                            className="text-xs bg-blue-600 hover:bg-blue-700 text-white dark:bg-blue-500 dark:hover:bg-blue-600"
                                                        >
                                                            {host.mac}
                                                        </Badge>
                                                    </div>

                                                </div>
                                            </div>
                                        </AccordionTrigger>
                                        <AccordionContent className="px-4 pb-4">
                                            <div className="space-y-4">
                                                <div className="text-sm text-muted-foreground mb-3">
                                                    <strong>OS Fingerprint:</strong> {host.os ? host.os : "Unknown"}
                                                </div>

                                                <table className="w-full text-sm">
                                                    <thead className="bg-gray-200 dark:bg-gray-800">
                                                        <tr>
                                                            <th className="px-3 py-2 text-left">Port</th>
                                                            <th className="px-3 py-2 text-left">Protocol</th>
                                                            <th className="px-3 py-2 text-left">Service</th>
                                                            <th className="px-3 py-2 text-left">Version</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        {host.ports.map((port, portIndex) => (
                                                            <tr key={portIndex} className="border-t">
                                                                <td className="px-3 py-2 font-mono">{port.port}</td>
                                                                <td className="px-3 py-2">{port.protocol}</td>
                                                                <td className="px-3 py-2">{port.service}</td>
                                                                <td className="px-3 py-2 text-muted-foreground">{port.version}</td>
                                                            </tr>
                                                        ))}
                                                    </tbody>
                                                </table>
                                            </div>
                                        </AccordionContent>
                                    </AccordionItem>
                                ))}
                            </Accordion>

                            <div className="flex items-center justify-between mt-4">
                                <div className="text-sm">{confirmedHosts.length} hosts confirmed and classified</div>
                                <Button onClick={handleProceed} className="bg-green-600 hover:bg-green-700 text-white">
                                    <ArrowRight className="w-4 h-4 mr-2" />
                                    Proceed to Enumeration
                                </Button>
                            </div>
                        </CardContent>
                    </Card>
                </div>
            )}
        </>
    )
}