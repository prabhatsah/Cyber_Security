"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { Terminal, Download, Trash2, Clock, AlertCircle, CheckCircle } from "lucide-react"

interface LogEntry {
    timestamp: string
    level: "info" | "warning" | "error" | "success"
    tool: string
    message: string
}

export default function ScanLogsPanel() {
    const [logs] = useState<LogEntry[]>([
        {
            timestamp: "2024-01-15 10:30:15",
            level: "info",
            tool: "Nmap",
            message: "Starting TCP SYN scan on 192.168.1.0/24",
        },
        {
            timestamp: "2024-01-15 10:30:16",
            level: "success",
            tool: "Nmap",
            message: "Discovered host: 192.168.1.1 (Gateway)",
        },
        {
            timestamp: "2024-01-15 10:30:17",
            level: "success",
            tool: "Nmap",
            message: "Discovered host: 192.168.1.10 (Windows Server)",
        },
        {
            timestamp: "2024-01-15 10:30:18",
            level: "info",
            tool: "Nmap",
            message: "Port scan complete: 22/tcp open ssh",
        },
        {
            timestamp: "2024-01-15 10:30:19",
            level: "info",
            tool: "Nmap",
            message: "Port scan complete: 80/tcp open http",
        },
        {
            timestamp: "2024-01-15 10:30:20",
            level: "info",
            tool: "Nmap",
            message: "Port scan complete: 443/tcp open https",
        },
        {
            timestamp: "2024-01-15 10:35:01",
            level: "info",
            tool: "Nessus",
            message: "Initializing vulnerability scanner",
        },
        {
            timestamp: "2024-01-15 10:35:02",
            level: "info",
            tool: "Nessus",
            message: "Loading vulnerability database...",
        },
        {
            timestamp: "2024-01-15 10:35:03",
            level: "warning",
            tool: "Nessus",
            message: "CVE-2021-44228 (Log4Shell) detected on 192.168.1.10:8080",
        },
        {
            timestamp: "2024-01-15 10:35:04",
            level: "error",
            tool: "Nessus",
            message: "Critical vulnerability CVE-2020-1472 (Zerologon) found",
        },
        {
            timestamp: "2024-01-15 10:35:05",
            level: "warning",
            tool: "Nessus",
            message: "SMB vulnerabilities detected on multiple hosts",
        },
    ])

    const [events] = useState([
        { time: "10:30:15", event: "Reconnaissance Started", status: "completed" },
        { time: "10:32:45", event: "5 Hosts Discovered", status: "completed" },
        { time: "10:35:01", event: "Vulnerability Scan Started", status: "completed" },
        { time: "10:37:22", event: "Critical Vulnerabilities Found", status: "warning" },
        { time: "10:40:15", event: "Exploitation Phase Ready", status: "pending" },
    ])

    const getLevelColor = (level: string) => {
        switch (level) {
            case "success":
                return "text-green-400"
            case "warning":
                return "text-yellow-400"
            case "error":
                return "text-red-400"
            default:
                return "text-gray-300"
        }
    }

    const getLevelIcon = (level: string) => {
        switch (level) {
            case "success":
                return <CheckCircle className="w-3 h-3" />
            case "warning":
                return <AlertCircle className="w-3 h-3" />
            case "error":
                return <AlertCircle className="w-3 h-3" />
            default:
                return <Clock className="w-3 h-3" />
        }
    }

    return (
        <Card className="bg-gray-900 border-gray-800">
            <CardHeader>
                <div className="flex items-center justify-between">
                    <CardTitle className="text-white flex items-center gap-2">
                        <Terminal className="w-5 h-5" />
                        Scan Logs & Events
                    </CardTitle>
                    <div className="flex gap-2">
                        <Button
                            size="sm"
                            variant="outline"
                            className="border-gray-700 text-gray-300 hover:text-white bg-transparent"
                        >
                            <Download className="w-4 h-4 mr-1" />
                            Export
                        </Button>
                        <Button
                            size="sm"
                            variant="outline"
                            className="border-gray-700 text-gray-300 hover:text-white bg-transparent"
                        >
                            <Trash2 className="w-4 h-4 mr-1" />
                            Clear
                        </Button>
                    </div>
                </div>
            </CardHeader>
            <CardContent>
                <Tabs defaultValue="logs" className="w-full">
                    <TabsList className="grid w-full grid-cols-3 bg-gray-800">
                        <TabsTrigger value="logs" className="text-gray-300 data-[state=active]:text-white">
                            Raw Logs
                        </TabsTrigger>
                        <TabsTrigger value="events" className="text-gray-300 data-[state=active]:text-white">
                            Events Timeline
                        </TabsTrigger>
                        <TabsTrigger value="tools" className="text-gray-300 data-[state=active]:text-white">
                            Tool Output
                        </TabsTrigger>
                    </TabsList>

                    <TabsContent value="logs" className="mt-4">
                        <ScrollArea className="h-80 w-full rounded border border-gray-800 bg-black p-4">
                            <div className="font-mono text-sm space-y-1">
                                {logs.map((log, index) => (
                                    <div key={index} className={`flex items-start gap-2 ${getLevelColor(log.level)}`}>
                                        <span className="text-gray-500 shrink-0">[{log.timestamp}]</span>
                                        <div className="flex items-center gap-1 shrink-0">
                                            {getLevelIcon(log.level)}
                                            <Badge variant="outline" className="text-xs border-gray-700">
                                                {log.tool}
                                            </Badge>
                                        </div>
                                        <span>{log.message}</span>
                                    </div>
                                ))}
                                <div className="text-green-400 animate-pulse">â–ˆ</div>
                            </div>
                        </ScrollArea>
                    </TabsContent>

                    <TabsContent value="events" className="mt-4">
                        <ScrollArea className="h-80 w-full rounded border border-gray-800 bg-gray-800 p-4">
                            <div className="space-y-3">
                                {events.map((event, index) => (
                                    <div key={index} className="flex items-center gap-3">
                                        <div className="text-gray-400 font-mono text-sm shrink-0">{event.time}</div>
                                        <div
                                            className={`w-2 h-2 rounded-full shrink-0 ${event.status === "completed"
                                                ? "bg-green-500"
                                                : event.status === "warning"
                                                    ? "bg-yellow-500"
                                                    : "bg-gray-500"
                                                }`}
                                        />
                                        <div className="text-gray-300">{event.event}</div>
                                        <Badge
                                            variant="outline"
                                            className={`ml-auto text-xs ${event.status === "completed"
                                                ? "border-green-700 text-green-400"
                                                : event.status === "warning"
                                                    ? "border-yellow-700 text-yellow-400"
                                                    : "border-gray-700 text-gray-400"
                                                }`}
                                        >
                                            {event.status}
                                        </Badge>
                                    </div>
                                ))}
                            </div>
                        </ScrollArea>
                    </TabsContent>

                    <TabsContent value="tools" className="mt-4">
                        <ScrollArea className="h-80 w-full rounded border border-gray-800 bg-black p-4">
                            <div className="font-mono text-sm space-y-2">
                                <div className="text-blue-400"># Nmap scan results</div>
                                <div className="text-gray-300">Starting Nmap 7.94 ( https://nmap.org )</div>
                                <div className="text-gray-300">Nmap scan report for 192.168.1.10</div>
                                <div className="text-gray-300">Host is up (0.00050s latency).</div>
                                <div className="text-green-400">PORT STATE SERVICE</div>
                                <div className="text-green-400">22/tcp open ssh</div>
                                <div className="text-green-400">80/tcp open http</div>
                                <div className="text-green-400">443/tcp open https</div>
                                <div className="text-green-400">3389/tcp open ms-wbt-server</div>
                                <div className="text-gray-300">MAC Address: 00:50:56:C0:00:08 (VMware)</div>
                                <div className="text-yellow-400 animate-pulse">â–ˆ</div>
                            </div>
                        </ScrollArea>
                    </TabsContent>
                </Tabs>
            </CardContent>
        </Card>
    )
}
