'use client';

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { fetchData } from '@/utils/api';
import { NetworkPenTestDefault, NetworkPentestFullInstanceData, NetworkPenTestModified } from '../../../../NetworkPentestType';
import { getMyInstancesV2 } from '@/ikon/utils/api/processRuntimeService';

interface NetworkPentestContextType {
    pentestData: NetworkPentestFullInstanceData | null;
    pentestDataLoading: boolean;
    error: string | null;
    setPentestId: (id: string) => void;
}

const NetworkPentestContext = createContext<NetworkPentestContextType | undefined>(undefined);

export const NetworkPentestProvider = ({ children }: { children: ReactNode }) => {
    const [pentestId, setPentestId] = useState<string>('');
    const [pentestData, setPentestData] = useState<NetworkPentestFullInstanceData | null>(null);
    const [pentestDataLoading, setPentestDataLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!pentestId) return;

        const fetchPentestData = async () => {
            setPentestDataLoading(true);
            setError(null);
            try {
                const pentestConfigInstance = await getMyInstancesV2<NetworkPentestFullInstanceData>({
                    processName: "Network Pentest",
                    predefinedFilters: { taskName: "Pentest Details View" },
                    processVariableFilters: { pentest_id: pentestId },
                    projections: ["Data"],
                });
                const pentestData: NetworkPentestFullInstanceData | undefined = pentestConfigInstance.length ? pentestConfigInstance[0].data : undefined;

                if (pentestData) {
                    setPentestData(pentestData);
                }
            } catch (err: any) {
                setError('Failed to fetch pentest data');
            } finally {
                setPentestDataLoading(false);
            }
        };

        fetchPentestData();
    }, [pentestId]);

    return (
        <NetworkPentestContext.Provider value={{ pentestData, pentestDataLoading, error, setPentestId }}>
            {children}
        </NetworkPentestContext.Provider>
    );
};

export const useNetworkPentestContext = () => {
    const context = useContext(NetworkPentestContext);
    if (!context) throw new Error('usePentestContext must be used within PentestProvider');
    return context;
};
