'use client';

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { fetchData } from '@/utils/api';
import { NetworkPenTestDefault, NetworkPenTestModified } from '../../components/type';

interface NetworkPentestContextType {
    pentestData: NetworkPenTestModified | null;
    loading: boolean;
    error: string | null;
    setPentestId: (id: string) => void;
}

const NetworkPentestContext = createContext<NetworkPentestContextType | undefined>(undefined);

export const NetworkPentestProvider = ({ children }: { children: ReactNode }) => {
    const [pentestId, setPentestId] = useState<string>('');
    const [pentestData, setPentestData] = useState<NetworkPenTestModified | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!pentestId) return;

        const fetchPentestData = async () => {
            setLoading(true);
            setError(null);
            try {
                const fetched = await fetchData('penetration_testing_history', 'id', [{ column: 'pentestid', value: pentestId }], null);
                const data: NetworkPenTestDefault[] = fetched?.data ?? [];

                if (data.length > 0) {
                    const formatted: NetworkPenTestModified = {
                        userId: data[0].userid,
                        pentestId: data[0].pentestid,
                        pentestType: data[0].type,
                        networkDetails: { ...data[0].data.networkDetails },
                        scanData: data[0].data.scandata ? { ...data[0].data.scandata } : {},
                        lastUpdated: data[0].lastscanon,
                        scanDataLastUpdatation: data[0].data.isDataUpdated ? data[0].data.isDataUpdated : false,
                    };
                    setPentestData(formatted);
                }
            } catch (err: any) {
                setError('Failed to fetch pentest data');
            } finally {
                setLoading(false);
            }
        };

        fetchPentestData();
    }, [pentestId]);

    return (
        <NetworkPentestContext.Provider value={{ pentestData, loading, error, setPentestId }}>
            {children}
        </NetworkPentestContext.Provider>
    );
};

export const useNetworkPentestContext = () => {
    const context = useContext(NetworkPentestContext);
    if (!context) throw new Error('usePentestContext must be used within PentestProvider');
    return context;
};
