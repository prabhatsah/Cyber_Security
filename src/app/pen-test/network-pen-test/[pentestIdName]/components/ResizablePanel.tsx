"use client";
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Terminal, Bug, AlertCircle, FileText, Wifi, GitBranch, X, ChevronUp } from 'lucide-react';
import { CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import ScanLogsPanel from './ScanLogsPanel';

interface ResizablePanelProps {
    children?: React.ReactNode;
    defaultHeight?: number;
    minHeight?: number;
    maxHeight?: number;
    isCollapsed?: boolean;
    onToggle?: (collapsed: boolean) => void;
}

const ResizablePanel: React.FC<ResizablePanelProps> = ({
    children,
    defaultHeight = 200,
    minHeight = 32, // 1rem = 16px
    maxHeight = 800,
    isCollapsed = false,
    onToggle
}) => {
    const [height, setHeight] = useState(defaultHeight);
    const [isDragging, setIsDragging] = useState(false);
    const [activeTab, setActiveTab] = useState('scan-logs');
    const [collapsed, setCollapsed] = useState(isCollapsed);
    const panelRef = useRef<HTMLDivElement>(null);
    const startY = useRef<number>(0);
    const startHeight = useRef<number>(0);

    const handleMouseDown = useCallback((e: React.MouseEvent) => {
        e.preventDefault();
        setIsDragging(true);
        startY.current = e.clientY;
        startHeight.current = height;
        document.body.style.cursor = 'ns-resize';
        document.body.style.userSelect = 'none';
    }, [height]);

    const handleMouseMove = useCallback((e: MouseEvent) => {
        if (!isDragging) return;

        const deltaY = startY.current - e.clientY; // Reversed for upward movement
        const newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight.current + deltaY));
        setHeight(newHeight);
    }, [isDragging, minHeight, maxHeight]);

    const handleMouseUp = useCallback(() => {
        setIsDragging(false);
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
    }, []);

    useEffect(() => {
        if (isDragging) {
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
            return () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
        }
    }, [isDragging, handleMouseMove, handleMouseUp]);

    const toggleCollapse = () => {
        const newCollapsed = !collapsed;
        setCollapsed(newCollapsed);
        onToggle?.(newCollapsed);
    };
    const minimizePanel = () => {
        setHeight(minHeight);
    };

    const defaultHeightPanel = () => {
        setHeight(200);
    };

    return (
        <>
            <div className="flex flex-col border-t border">
                {/* Resize Handle */}
                <div
                    className={`h-1 cursor-ns-resize hover:bg-blue-500 transition-colors ${isDragging ? 'bg-blue-500' : ''
                        }`}
                    onMouseDown={handleMouseDown}
                />

                <div className="flex items-center justify-between px-4">
                    <CardTitle className="flex items-center gap-2">
                        <Terminal className="w-5 h-5" />
                        Scan Logs & Events
                    </CardTitle>
                    <div className="flex items-center gap-2">
                        <Button size="icon" variant="ghost" onClick={height !== minHeight ? minimizePanel : defaultHeightPanel} title="Minimize/Restore Panel">
                            {height !== minHeight ? <X className="w-4 h-4" /> : <ChevronUp className="w-4 h-4" />}
                        </Button>
                    </div>
                </div>

                {/* Content */}
                {height !== minHeight ?
                    <div
                        ref={panelRef}
                        className="overflow-hidden"
                        style={{
                            height: collapsed ? 0 : `${height}px`,
                            minHeight: collapsed ? 0 : `${minHeight}px`,
                            transition: collapsed ? 'height 0.2s ease-out' : 'none'
                        }}
                    >
                        <div className="h-full">
                            {activeTab === 'scan-logs' && <ScanLogsPanel resizablePanelHeight={height} />}
                            {activeTab === 'problems' && (
                                <div className="p-4 ">
                                    <div className="flex items-center text-sm">
                                        <AlertCircle size={16} className="mr-2" />
                                        No problems detected
                                    </div>
                                </div>
                            )}
                            {activeTab === 'output' && (
                                <div className="p-4 ">
                                    <div className="text-sm font-mono">
                                        <div className="">[2024-01-15 10:30:45] Starting network penetration test...</div>
                                        <div className="text-green-400">[2024-01-15 10:30:46] Port scan initiated</div>
                                        <div className="text-blue-400">[2024-01-15 10:30:47] Vulnerability assessment in progress</div>
                                    </div>
                                </div>
                            )}
                            {activeTab === 'debug' && (
                                <div className="p-4 ">
                                    <div className="text-sm font-mono">
                                        <div className="text-yellow-400">Debug console ready</div>
                                    </div>
                                </div>
                            )}
                            {activeTab === 'terminal' && (
                                <div className="p-4 ">
                                    <div className="text-sm font-mono">
                                        <div className="text-green-400">$ nmap -sV target_ip</div>
                                        <div className="">Starting Nmap scan...</div>
                                    </div>
                                </div>
                            )}
                            {activeTab === 'events' && (
                                <div className="p-4 ">
                                    <div className="text-sm">
                                        <div className="flex items-center mb-2">
                                            <GitBranch size={16} className="mr-2" />
                                            Recent Events
                                        </div>
                                        <div className="text-xs ">No recent events</div>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div> : ""
                }

            </div>
        </>
    )
};

export default ResizablePanel;