import { NmapEachServicePortResult } from "@/app/NetworkPentestType";

export const arp_scan_raw = `Interface: eth0, type: EN10MB, MAC: 00:0c:29:ab:bc:fb, IPv4: 192.168.1.26\nStarting arp-scan 1.10.0 with 256 hosts 
(https://github.com/royhills/arp-scan)\n192.168.1.40\t24:43:e2:3d:ac:8f\t(Unknown)\n192.168.1.44\t2c:3b:70:6c:28:29\t(Unknown)\n192.168.1.31\t14:13:33:52:44:c1\t(Unknown)\n
192.168.1.14\t14:13:33:52:44:7d\t(Unknown)\n192.168.1.22\te4:0d:36:87:0e:c4\t(Unknown)\n192.168.1.5\t7c:70:db:47:4d:89\t(Unknown)\n192.168.1.3\t20:0b:74:1c:16:81\t
(Unknown)\n192.168.1.10\td0:65:78:bf:cd:18\t(Unknown)\n192.168.1.6\tb4:8c:9d:90:e0:c1\t(Unknown)\n192.168.1.4\t02:f3:20:81:31:c4\t(Unknown: locally administered)\n
192.168.1.50\t1c:ce:51:4e:45:8d\t(Unknown)\n192.168.1.34\tb4:8c:9d:54:6a:89\t(Unknown)\n192.168.1.35\tb4:8c:9d:37:85:35\t(Unknown)\n192.168.1.36\t2c:3b:70:5e:56:99\t
(Unknown)\n192.168.1.37\tb4:8c:9d:54:c3:25\t(Unknown)\n192.168.1.33\t96:e1:54:ed:7c:9e\t(Unknown: locally administered)\n192.168.1.19\tf6:d1:3c:c8:00:37\t(Unknown:
 locally administered)\n192.168.1.39\td8:3b:bf:bd:0a:15\t(Unknown)\n\n18 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts
  scanned in 1.855 seconds (138.01 hosts/sec). 18 responded`;

const arpScanResults: {
  hostIp: string;
  mac: string;
}[] = [];

// Regex to match: IP \t MAC
const regex = /(\b\d{1,3}(?:\.\d{1,3}){3}\b)\s+([0-9a-fA-F:]{17})/g;
let match;

while ((match = regex.exec(arp_scan_raw)) !== null) {
  arpScanResults.push({
    hostIp: match[1],
    mac: match[2].toUpperCase(),
  });
}

export const nmap_ping_raw = `Starting Nmap 7.95 ( https://nmap.org ) at 2025-08-05 02:07 EDT\nNmap scan report for 192.168.1.3\nHost is up (0.12s latency).\nMAC Address: 
20:0B:74:1C:16:81 (AzureWave Technology)\nNmap scan report for 192.168.1.4\nHost is up (0.089s latency).\nMAC Address: 02:F3:20:81:31:C4 (Unknown)\nNmap scan report for 
192.168.1.5\nHost is up (0.37s latency).\nMAC Address: 7C:70:DB:47:4D:89 (Intel Corporate)\nNmap scan report for 192.168.1.6\nHost is up (0.12s latency).\nMAC Address: 
B4:8C:9D:90:E0:C1 (AzureWave Technology)\nNmap scan report for 192.168.1.7\nHost is up (0.069s latency).\nMAC Address: B2:45:04:C2:16:A0 (Unknown)\nNmap scan report for 
192.168.1.10\nHost is up (0.12s latency).\nMAC Address: D0:65:78:BF:CD:18 (Intel Corporate)\nNmap scan report for 192.168.1.11\nHost is up (0.22s latency).\nMAC Address: 
66:26:24:47:57:CA (Unknown)\nNmap scan report for 192.168.1.14\nHost is up (0.11s latency).\nMAC Address: 14:13:33:52:44:7D (AzureWave Technology)\nNmap scan report for 
192.168.1.19\nHost is up (0.070s latency).\nMAC Address: F6:D1:3C:C8:00:37 (Unknown)\nNmap scan report for 192.168.1.22\nHost is up (0.085s latency).\nMAC Address: 
E4:0D:36:87:0E:C4 (Intel Corporate)\nNmap scan report for 192.168.1.31\nHost is up (0.11s latency).\nMAC Address: 14:13:33:52:44:C1 (AzureWave Technology)\nNmap scan 
report for 192.168.1.33\nHost is up (0.084s latency).\nMAC Address: 96:E1:54:ED:7C:9E (Unknown)\nNmap scan report for 192.168.1.34\nHost is up (0.084s latency).\n
MAC Address: B4:8C:9D:54:6A:89 (AzureWave Technology)\nNmap scan report for 192.168.1.35\nHost is up (0.10s latency).\nMAC Address: B4:8C:9D:37:85:35 (AzureWave Technology)
\nNmap scan report for 192.168.1.36\nHost is up (0.10s latency).\nMAC Address: 2C:3B:70:5E:56:99 (AzureWave Technology)\nNmap scan report for 192.168.1.37\nHost is up 
(0.10s latency).\nMAC Address: B4:8C:9D:54:C3:25 (AzureWave Technology)\nNmap scan report for 192.168.1.39\nHost is up (0.084s latency).\nMAC Address: D8:3B:BF:BD:0A:15 
(Intel Corporate)\nNmap scan report for 192.168.1.40\nHost is up (0.011s latency).\nMAC Address: 24:43:E2:3D:AC:8F (Dasan Network Solutions)\nNmap scan report for 
192.168.1.43\nHost is up (0.095s latency).\nMAC Address: 7A:92:B8:2B:77:F6 (Unknown)\nNmap scan report for 192.168.1.44\nHost is up (0.00011s latency).\n
MAC Address: 2C:3B:70:6C:28:29 (AzureWave Technology)\nNmap scan report for 192.168.1.47\nHost is up (0.040s latency).\nMAC Address: B4:8C:9D:37:87:65 (AzureWave Technology)
\nNmap scan report for 192.168.1.48\nHost is up (0.077s latency).\nMAC Address: BC:F4:D4:F5:19:A7 (Cloud Network Technology Singapore PTE.)\nNmap scan report for 
192.168.1.50\nHost is up (0.067s latency).\nMAC Address: 1C:CE:51:4E:45:8D (AzureWave Technology)\nNmap scan report for 192.168.1.26\nHost is up.\nNmap done: 256 IP addresses 
(24 hosts up) scanned in 5.77 seconds`;

const nmapPingLines = nmap_ping_raw.split("\n");
const nmapPingResults: {
  hostIp: string;
  mac: string;
  vendor: string;
}[] = [];

let currentHost = null;

for (let i = 0; i < nmapPingLines.length; i++) {
  const line = nmapPingLines[i].trim();

  if (line.startsWith("Nmap scan report for")) {
    // Extract the host IP
    const match = line.match(/Nmap scan report for ([\d.]+)/);
    if (match) currentHost = match[1];
  }

  if (line.startsWith("MAC Address:")) {
    // Extract MAC and vendor
    const macMatch = line.match(/MAC Address: ([0-9A-F:]+) \((.+?)\)/i);
    if (macMatch && currentHost) {
      nmapPingResults.push({
        hostIp: currentHost,
        mac: macMatch[1],
        vendor: macMatch[2],
      });
      currentHost = null; // reset for next entry
    }
  }
}

export const masscan_raw = `Discovered open port 139/tcp on 192.168.1.10                                   
\nDiscovered open port 135/tcp on 192.168.1.10                                   
\nDiscovered open port 445/tcp on 192.168.1.10                                   
\nStarting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2025-08-05 06:07:42 GMT\nInitiating SYN Stealth Scan\nScanning 1 hosts [1000 ports/host]\nrate:  0.00-kpps,  
0.10% done,6937:53:48 remaining, found=0       \nrate:  0.50-kpps, 23.20% done,   0:00:19 remaining, found=0       \nrate:  0.49-kpps, 42.20% done,   0:00:08 remaining, 
found=0       \nrate:  0.49-kpps, 60.00% done,   0:00:04 remaining, found=2       \nrate:  0.50-kpps, 79.90% done,   0:00:01 remaining, found=2       
\nrate:  0.50-kpps, 98.90% done,   0:00:00 remaining, found=3       \nrate:  0.01-kpps, 100.00% done, waiting 0-secs, found=3       \nrate:  0.00-kpps, 100.00% done, 
waiting 0-secs, found=3       \nrate:  0.00-kpps, 100.00% done, waiting 0-secs, found=3       \nrate:  0.00-kpps, 100.00% done, waiting 0-secs, found=3       
\nrate:  0.00-kpps, 100.00% done, waiting 0-secs, found=3`;

export const nmap_raw = `Starting Nmap 7.95 ( https://nmap.org ) at 2025-08-05 02:07 EDT\nNmap scan report for 192.168.1.10\nHost is up (0.012s latency).\n
\nPORT    STATE SERVICE       VERSION\n135/tcp open  msrpc         Microsoft Windows RPC\n139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp open  
microsoft-ds?\nMAC Address: D0:65:78:BF:CD:18 (Intel Corporate)\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. 
Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.74 seconds`;

const nmapEachServiceResults: NmapEachServicePortResult = {
  hostIp: "",
  mac: "",
  vendor: "",
  os: "",
  cpe: "",
  selected: true,
  ports: [],
};

const nmapEachServiceLines = nmap_raw.split("\n");

for (let line of nmapEachServiceLines) {
  line = line.trim();

  // Extract host IP
  if (line.startsWith("Nmap scan report for")) {
    const match = line.match(/Nmap scan report for ([\d.]+)/);
    if (match) nmapEachServiceResults.hostIp = match[1];
  }

  // Extract MAC address and vendor
  else if (line.startsWith("MAC Address:")) {
    const match = line.match(/MAC Address: ([0-9A-F:]+) \((.+?)\)/i);
    if (match) {
      nmapEachServiceResults.mac = match[1];
      nmapEachServiceResults.vendor = match[2];
    }
  }

  // Extract OS
  else if (line.includes("Service Info:")) {
    const osMatch = line.match(/OS:\s*([^;]+)/);
    if (osMatch) nmapEachServiceResults.os = osMatch[1].trim();

    const cpeMatch = line.match(/CPE:\s*(cpe:[^;\s]+)/);
    if (cpeMatch) nmapEachServiceResults.cpe = cpeMatch[1].trim();
  }

  // Extract open ports and services
  else if (line.match(/^\d+\/tcp\s+open\s+/)) {
    const portMatch = line.match(/^(\d+)\/(tcp)\s+open\s+(\S+)(\s+(.*))?/);
    if (portMatch) {
      nmapEachServiceResults.ports.push({
        port: parseInt(portMatch[1]),
        protocol: portMatch[2],
        service: portMatch[3],
        version: portMatch[5] ? portMatch[5].trim() : "",
      });
    }
  }
}

export { arpScanResults, nmapPingResults, nmapEachServiceResults };
