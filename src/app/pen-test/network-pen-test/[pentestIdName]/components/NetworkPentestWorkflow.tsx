"use client"

import GlobalLoader from "@/components/GlobalLoader";
import { CheckCircle, Circle, Lock } from "lucide-react";
import { usePathname, useRouter } from "next/navigation";
import { useEffect, useState } from "react";

interface WorkflowStep {
    id: number;
    name: string;
    completed: boolean;
    current: boolean;
    locked: boolean;
    href: string;
}

interface WorkflowProgressProps {
    pentestIdName: string;
}

export default function NetworkPentestWorkflow({ pentestIdName }: WorkflowProgressProps) {
    const [pentestId] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [loadingTab, setLoadingTab] = useState<string | null>("Reconnaissance");
    const [currentStepId, setCurrentStepId] = useState<number>(1);

    const workflowSteps: WorkflowStep[] = [
        { id: 1, name: "Reconnaissance", completed: false, current: true, locked: false, href: `/pen-test/network-pen-test/${pentestIdName}/reconnaissance` },
        { id: 2, name: "Host Confirmation", completed: false, current: false, locked: true, href: `/pen-test/network-pen-test/${pentestIdName}/host-confirmation` },
        { id: 3, name: "Enumeration", completed: false, current: false, locked: true, href: `/pen-test/network-pen-test/${pentestIdName}/enumeration` },
        { id: 4, name: "Vulnerability Assessment", completed: false, current: false, locked: true, href: `/pen-test/network-pen-test/${pentestIdName}/vulnerability-assessment` },
        { id: 5, name: "Exploitation", completed: false, current: false, locked: true, href: `/pen-test/network-pen-test/${pentestIdName}/exploitation` },
        { id: 6, name: "Post Exploitation", completed: false, current: false, locked: true, href: `/pen-test/network-pen-test/${pentestIdName}/post-exploitation` },
        { id: 7, name: "Report Generation", completed: false, current: false, locked: true, href: `/pen-test/network-pen-test/${pentestIdName}/report-generation` },
    ];

    useEffect(() => {
        const savedProgress = parseInt(localStorage.getItem(`pentest-progress-${pentestId}`) || "1");

        const formatStepName = (name: string) =>
            name.split(" ").map((part, i) => (i === 0 ? part.toLowerCase() : part)).join("");

        const toCamelCase = (segment: string) =>
            segment.split("-").map((part, i) => (i === 0 ? part : part[0].toUpperCase() + part.slice(1))).join("");

        const currentStep = workflowSteps.find(step =>
            pathname.split("/").some(segment => toCamelCase(segment) === formatStepName(step.name))
        );

        const detectedStepId = Math.max(savedProgress, currentStep?.id || 1);

        setCurrentStepId(detectedStepId);
        setLoadingTab(null);
    }, [pathname]);


    useEffect(() => {
        localStorage.setItem(`pentest-progress-${pentestId}`, currentStepId.toString());
    }, [currentStepId]);

    const getStepStatus = (step: WorkflowStep, index: number) => {
        if (index + 1 < currentStepId) return { ...step, completed: true, current: false, locked: false };
        if (index + 1 === currentStepId) return { ...step, completed: false, current: true, locked: false };
        return { ...step, completed: false, current: false, locked: true };
    };

    const handleTabClick = (href: string, stepName: string, stepId: number) => {
        if (pathname === href) return;

        setLoadingTab(stepName);
        setCurrentStepId(stepId);
        router.push(href);
    };

    return (
        <div className=" border bo rounded-lg p-2">
            {/* <h2 className="text-md font-semibold  mb-4">Penetration Testing Workflow</h2> */}
            <div className="flex items-center justify-between">
                {workflowSteps.map((step, index) => {
                    const stepStatus = getStepStatus(step, index);

                    if (loadingTab === step.name) return <GlobalLoader key={step.id} />;

                    return (
                        <div key={step.id} className="flex items-center">
                            <div className="flex gap-2 items-center">
                                <button
                                    onClick={() => !stepStatus.locked && handleTabClick(step.href, step.name, step.id)}
                                    disabled={stepStatus.locked}
                                    className={`flex items-center justify-center w-10 h-10 rounded-full border-2 transition-colors ${stepStatus.completed
                                        ? "bg-green-600 border-green-600 "
                                        : stepStatus.current
                                            ? "bg-blue-600 border-blue-600 "
                                            : stepStatus.locked
                                                ? "border  cursor-not-allowed"
                                                : "border hover:border-gray-500"
                                        }`}
                                >
                                    {stepStatus.completed ? <CheckCircle className="w-5 h-5" /> : stepStatus.locked ? <Lock className="w-4 h-4" /> : <Circle className="w-5 h-5" />}
                                </button>
                                <span className={` text-xs font-medium text-center  ${stepStatus.current ? "" : stepStatus.completed ? "text-green-400" : ""
                                    }`}>
                                    {step.name}
                                </span>
                            </div>
                            {index < workflowSteps.length - 1 && (
                                <div className={`w-16 h-0.5 mx-4 ${stepStatus.completed ? "bg-green-600" : ""}`} />
                            )}
                        </div>
                    );
                })}
            </div>
        </div>
    );
}
