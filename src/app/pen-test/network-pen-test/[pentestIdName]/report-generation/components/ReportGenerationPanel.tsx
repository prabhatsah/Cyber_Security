"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ProgressBar } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import {
    FileText,
    Download,
    BarChart3,
    Shield,
    AlertTriangle,
    CheckCircle,
    XCircle,
    Clock,
    Target,
    TrendingUp,
    FileJson,
    FileSpreadsheet,
    ExternalLink,
    ArrowRight,
    Zap,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface TestOverview {
    duration: string
    hostsScanned: number
    criticalIssues: number
    highIssues: number
    mediumIssues: number
    lowIssues: number
    successfulExploits: number
    credentialsObtained: number
    systemsCompromised: number
}

interface Vulnerability {
    cveId: string
    title: string
    affectedHosts: number
    exploitAvailable: boolean
    riskScore: number
    severity: "Critical" | "High" | "Medium" | "Low"
    cvssScore: number
}

interface AttackPath {
    id: string
    name: string
    steps: string[]
    impact: string
    likelihood: "High" | "Medium" | "Low"
    riskRating: "Critical" | "High" | "Medium" | "Low"
}

interface ComplianceMapping {
    framework: string
    controls: { id: string; name: string; status: "Pass" | "Fail" | "Partial" }[]
    overallScore: number
}

interface ReportGenerationPanelProps {
    pentestIdName: string;
}

export function ReportGenerationPanel({ pentestIdName }: ReportGenerationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [selectedChart, setSelectedChart] = useState<"bar" | "pie">("bar")
    const [selectedCompliance, setSelectedCompliance] = useState("nist")
    const [isLoading, setIsLoading] = useState(false)

    const testOverview: TestOverview = {
        duration: "3 days, 14 hours",
        hostsScanned: 24,
        criticalIssues: 8,
        highIssues: 12,
        mediumIssues: 18,
        lowIssues: 6,
        successfulExploits: 5,
        credentialsObtained: 47,
        systemsCompromised: 4,
    }

    const vulnerabilities: Vulnerability[] = [
        {
            cveId: "CVE-2021-44228",
            title: "Apache Log4j Remote Code Execution",
            affectedHosts: 3,
            exploitAvailable: true,
            riskScore: 95,
            severity: "Critical",
            cvssScore: 10.0,
        },
        {
            cveId: "CVE-2020-1472",
            title: "Netlogon Elevation of Privilege (Zerologon)",
            affectedHosts: 1,
            exploitAvailable: true,
            riskScore: 92,
            severity: "Critical",
            cvssScore: 9.8,
        },
        {
            cveId: "CVE-2019-0708",
            title: "Remote Desktop Services RCE (BlueKeep)",
            affectedHosts: 2,
            exploitAvailable: true,
            riskScore: 88,
            severity: "Critical",
            cvssScore: 9.8,
        },
        {
            cveId: "CVE-2021-34527",
            title: "Windows Print Spooler RCE (PrintNightmare)",
            affectedHosts: 4,
            exploitAvailable: true,
            riskScore: 85,
            severity: "High",
            cvssScore: 8.8,
        },
        {
            cveId: "CVE-2020-0796",
            title: "SMBv3 Remote Code Execution (SMBGhost)",
            affectedHosts: 3,
            exploitAvailable: false,
            riskScore: 82,
            severity: "High",
            cvssScore: 8.1,
        },
    ]

    const attackPaths: AttackPath[] = [
        {
            id: "1",
            name: "Domain Controller Compromise",
            steps: [
                "Initial access via Log4Shell vulnerability",
                "Privilege escalation to SYSTEM",
                "Credential dumping with Mimikatz",
                "Lateral movement to Domain Controller",
                "Zerologon exploitation for Domain Admin",
            ],
            impact: "Complete domain compromise, access to all domain resources",
            likelihood: "High",
            riskRating: "Critical",
        },
        {
            id: "2",
            name: "Database Server Access",
            steps: [
                "BlueKeep exploitation on workstation",
                "Local privilege escalation",
                "Network enumeration and discovery",
                "Credential reuse attack on database server",
                "Sensitive data extraction",
            ],
            impact: "Access to customer database and PII",
            likelihood: "Medium",
            riskRating: "High",
        },
        {
            id: "3",
            name: "Lateral Movement Chain",
            steps: [
                "PrintNightmare exploitation",
                "Service account compromise",
                "Kerberoasting attack",
                "Hash cracking and password recovery",
                "Multi-system access via shared credentials",
            ],
            impact: "Multiple system compromise, data exfiltration potential",
            likelihood: "High",
            riskRating: "High",
        },
    ]

    const complianceMappings: ComplianceMapping[] = [
        {
            framework: "NIST Cybersecurity Framework",
            controls: [
                { id: "ID.AM-1", name: "Physical devices and systems inventory", status: "Pass" },
                { id: "ID.AM-2", name: "Software platforms and applications inventory", status: "Partial" },
                { id: "PR.AC-1", name: "Identities and credentials are issued and managed", status: "Fail" },
                { id: "PR.AC-4", name: "Access permissions and authorizations are managed", status: "Fail" },
                { id: "PR.DS-1", name: "Data-at-rest is protected", status: "Partial" },
                { id: "DE.CM-1", name: "The network is monitored to detect potential cybersecurity events", status: "Pass" },
            ],
            overallScore: 58,
        },
        {
            framework: "ISO 27001:2013",
            controls: [
                { id: "A.9.1.1", name: "Access control policy", status: "Partial" },
                { id: "A.9.2.1", name: "User registration and de-registration", status: "Fail" },
                { id: "A.9.4.2", name: "Secure log-on procedures", status: "Fail" },
                { id: "A.12.6.1", name: "Management of technical vulnerabilities", status: "Fail" },
                { id: "A.13.1.1", name: "Network controls", status: "Partial" },
                { id: "A.18.2.2", name: "Compliance with security policies", status: "Pass" },
            ],
            overallScore: 42,
        },
        {
            framework: "OWASP Top 10",
            controls: [
                { id: "A01", name: "Broken Access Control", status: "Fail" },
                { id: "A02", name: "Cryptographic Failures", status: "Partial" },
                { id: "A03", name: "Injection", status: "Fail" },
                { id: "A06", name: "Vulnerable and Outdated Components", status: "Fail" },
                { id: "A07", name: "Identification and Authentication Failures", status: "Fail" },
                { id: "A09", name: "Security Logging and Monitoring Failures", status: "Pass" },
            ],
            overallScore: 33,
        },
    ]

    const getSeverityColor = (severity: string) => {
        switch (severity) {
            case "Critical":
                return "bg-red-600"
            case "High":
                return "bg-orange-600"
            case "Medium":
                return "bg-yellow-600"
            case "Low":
                return "bg-green-600"
            default:
                return "bg-gray-600"
        }
    }

    const getRiskColor = (risk: string) => {
        switch (risk) {
            case "Critical":
                return "text-red-400"
            case "High":
                return "text-orange-400"
            case "Medium":
                return "text-yellow-400"
            case "Low":
                return "text-green-400"
            default:
                return "text-gray-400"
        }
    }

    const getComplianceStatus = (status: string) => {
        switch (status) {
            case "Pass":
                return { icon: <CheckCircle className="w-4 h-4 text-green-500" />, color: "text-green-400" }
            case "Fail":
                return { icon: <XCircle className="w-4 h-4 text-red-500" />, color: "text-red-400" }
            case "Partial":
                return { icon: <Clock className="w-4 h-4 text-yellow-500" />, color: "text-yellow-400" }
            default:
                return { icon: <Clock className="w-4 h-4 text-gray-500" />, color: "text-gray-400" }
        }
    }

    const totalIssues =
        testOverview.criticalIssues + testOverview.highIssues + testOverview.mediumIssues + testOverview.lowIssues


    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/report-generation`);
    }

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        {/* Header */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <FileText className="w-5 h-5 text-blue-500" />
                                    Penetration Test Report Summary
                                </CardTitle>
                                <p className="text-gray-400 text-sm">Comprehensive security assessment results and executive summary</p>
                            </CardHeader>
                        </Card>

                        {/* Test Overview */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <Target className="w-5 h-5 text-green-500" />
                                    Test Overview
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-white mb-2">{testOverview.duration}</div>
                                        <div className="text-gray-400 text-sm">Test Duration</div>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-blue-400 mb-2">{testOverview.hostsScanned}</div>
                                        <div className="text-gray-400 text-sm">Hosts Scanned</div>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-red-400 mb-2">{testOverview.criticalIssues}</div>
                                        <div className="text-gray-400 text-sm">Critical Issues</div>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-orange-400 mb-2">{testOverview.successfulExploits}</div>
                                        <div className="text-gray-400 text-sm">Successful Exploits</div>
                                    </div>
                                </div>
                                <Separator className="my-6 bg-gray-800" />
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                    <div className="text-center">
                                        <div className="text-2xl font-bold text-purple-400 mb-2">{testOverview.credentialsObtained}</div>
                                        <div className="text-gray-400 text-sm">Credentials Obtained</div>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-2xl font-bold text-red-400 mb-2">{testOverview.systemsCompromised}</div>
                                        <div className="text-gray-400 text-sm">Systems Compromised</div>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-2xl font-bold text-yellow-400 mb-2">{totalIssues}</div>
                                        <div className="text-gray-400 text-sm">Total Vulnerabilities</div>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            {/* CVSS Risk Chart */}
                            <Card className="bg-gray-900 border-gray-800">
                                <CardHeader>
                                    <div className="flex items-center justify-between">
                                        <CardTitle className="text-white flex items-center gap-2">
                                            <BarChart3 className="w-5 h-5 text-purple-500" />
                                            CVSS Risk Distribution
                                        </CardTitle>
                                        <div className="flex gap-2">
                                            <Button
                                                size="sm"
                                                variant={selectedChart === "bar" ? "default" : "outline"}
                                                onClick={() => setSelectedChart("bar")}
                                                className="text-xs"
                                            >
                                                Bar
                                            </Button>
                                            <Button
                                                size="sm"
                                                variant={selectedChart === "pie" ? "default" : "outline"}
                                                onClick={() => setSelectedChart("pie")}
                                                className="text-xs"
                                            >
                                                Pie
                                            </Button>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent>
                                    {selectedChart === "bar" ? (
                                        <div className="space-y-4">
                                            <div className="flex items-center justify-between">
                                                <div className="flex items-center gap-2">
                                                    <div className="w-4 h-4 bg-red-600 rounded"></div>
                                                    <span className="text-gray-300">Critical</span>
                                                </div>
                                                <span className="text-white font-bold">{testOverview.criticalIssues}</span>
                                            </div>
                                            <ProgressBar value={(testOverview.criticalIssues / totalIssues) * 100} className="h-3" />

                                            <div className="flex items-center justify-between">
                                                <div className="flex items-center gap-2">
                                                    <div className="w-4 h-4 bg-orange-600 rounded"></div>
                                                    <span className="text-gray-300">High</span>
                                                </div>
                                                <span className="text-white font-bold">{testOverview.highIssues}</span>
                                            </div>
                                            <ProgressBar value={(testOverview.highIssues / totalIssues) * 100} className="h-3" />

                                            <div className="flex items-center justify-between">
                                                <div className="flex items-center gap-2">
                                                    <div className="w-4 h-4 bg-yellow-600 rounded"></div>
                                                    <span className="text-gray-300">Medium</span>
                                                </div>
                                                <span className="text-white font-bold">{testOverview.mediumIssues}</span>
                                            </div>
                                            <ProgressBar value={(testOverview.mediumIssues / totalIssues) * 100} className="h-3" />

                                            <div className="flex items-center justify-between">
                                                <div className="flex items-center gap-2">
                                                    <div className="w-4 h-4 bg-green-600 rounded"></div>
                                                    <span className="text-gray-300">Low</span>
                                                </div>
                                                <span className="text-white font-bold">{testOverview.lowIssues}</span>
                                            </div>
                                            <ProgressBar value={(testOverview.lowIssues / totalIssues) * 100} className="h-3" />
                                        </div>
                                    ) : (
                                        <div className="flex items-center justify-center h-64">
                                            <div className="relative w-48 h-48">
                                                {/* Mock pie chart */}
                                                <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                                                    <circle
                                                        cx="50"
                                                        cy="50"
                                                        r="40"
                                                        fill="transparent"
                                                        stroke="#dc2626"
                                                        strokeWidth="20"
                                                        strokeDasharray={`${(testOverview.criticalIssues / totalIssues) * 251.2} 251.2`}
                                                        strokeDashoffset="0"
                                                    />
                                                    <circle
                                                        cx="50"
                                                        cy="50"
                                                        r="40"
                                                        fill="transparent"
                                                        stroke="#ea580c"
                                                        strokeWidth="20"
                                                        strokeDasharray={`${(testOverview.highIssues / totalIssues) * 251.2} 251.2`}
                                                        strokeDashoffset={`-${(testOverview.criticalIssues / totalIssues) * 251.2}`}
                                                    />
                                                    <circle
                                                        cx="50"
                                                        cy="50"
                                                        r="40"
                                                        fill="transparent"
                                                        stroke="#ca8a04"
                                                        strokeWidth="20"
                                                        strokeDasharray={`${(testOverview.mediumIssues / totalIssues) * 251.2} 251.2`}
                                                        strokeDashoffset={`-${((testOverview.criticalIssues + testOverview.highIssues) / totalIssues) * 251.2}`}
                                                    />
                                                    <circle
                                                        cx="50"
                                                        cy="50"
                                                        r="40"
                                                        fill="transparent"
                                                        stroke="#16a34a"
                                                        strokeWidth="20"
                                                        strokeDasharray={`${(testOverview.lowIssues / totalIssues) * 251.2} 251.2`}
                                                        strokeDashoffset={`-${((testOverview.criticalIssues + testOverview.highIssues + testOverview.mediumIssues) / totalIssues) * 251.2}`}
                                                    />
                                                </svg>
                                                <div className="absolute inset-0 flex items-center justify-center">
                                                    <div className="text-center">
                                                        <div className="text-2xl font-bold text-white">{totalIssues}</div>
                                                        <div className="text-xs text-gray-400">Total</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </CardContent>
                            </Card>

                            {/* Top Vulnerabilities */}
                            <Card className="bg-gray-900 border-gray-800">
                                <CardHeader>
                                    <CardTitle className="text-white flex items-center gap-2">
                                        <AlertTriangle className="w-5 h-5 text-red-500" />
                                        Top Vulnerabilities
                                    </CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="space-y-3">
                                        {vulnerabilities.slice(0, 5).map((vuln, index) => (
                                            <div
                                                key={vuln.cveId}
                                                className="flex items-center justify-between p-3 bg-gray-800 rounded border border-gray-700"
                                            >
                                                <div className="flex-1">
                                                    <div className="flex items-center gap-2 mb-1">
                                                        <Badge className={`${getSeverityColor(vuln.severity)} text-white text-xs`}>{vuln.severity}</Badge>
                                                        <span className="text-blue-400 font-mono text-sm">{vuln.cveId}</span>
                                                    </div>
                                                    <div className="text-white text-sm font-medium truncate">{vuln.title}</div>
                                                    <div className="flex items-center gap-4 mt-1 text-xs text-gray-400">
                                                        <span>{vuln.affectedHosts} hosts</span>
                                                        <span>CVSS: {vuln.cvssScore}</span>
                                                        {vuln.exploitAvailable ? (
                                                            <Badge className="bg-red-600 text-white">
                                                                <Zap className="w-3 h-3 mr-1" />
                                                                Exploit
                                                            </Badge>
                                                        ) : (
                                                            <Badge variant="outline" className="border-gray-600 text-gray-400">
                                                                No Exploit
                                                            </Badge>
                                                        )}
                                                    </div>
                                                </div>
                                                <div className="text-right">
                                                    <div className="text-lg font-bold text-white">{vuln.riskScore}</div>
                                                    <div className="text-xs text-gray-400">Risk Score</div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        {/* Attack Path Summary */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <TrendingUp className="w-5 h-5 text-orange-500" />
                                    Attack Path Summary
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-4">
                                    {attackPaths.map((path) => (
                                        <Card key={path.id} className="bg-gray-800 border-gray-700">
                                            <CardContent className="p-4">
                                                <div className="flex items-start justify-between mb-3">
                                                    <div>
                                                        <h4 className="text-white font-medium">{path.name}</h4>
                                                        <div className="flex items-center gap-2 mt-1">
                                                            <Badge className={`${getSeverityColor(path.riskRating)} text-white text-xs`}>
                                                                {path.riskRating} Risk
                                                            </Badge>
                                                            <Badge variant="outline" className="border-gray-600 text-gray-300 text-xs">
                                                                {path.likelihood} Likelihood
                                                            </Badge>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="space-y-2 mb-3">
                                                    {path.steps.map((step, index) => (
                                                        <div key={index} className="flex items-center gap-2 text-sm">
                                                            <div className="w-6 h-6 rounded-full bg-blue-600 text-white text-xs flex items-center justify-center shrink-0">
                                                                {index + 1}
                                                            </div>
                                                            <span className="text-gray-300">{step}</span>
                                                            {index < path.steps.length - 1 && <ArrowRight className="w-4 h-4 text-gray-500 ml-auto" />}
                                                        </div>
                                                    ))}
                                                </div>
                                                <div className="text-sm text-gray-400">
                                                    <strong className="text-gray-300">Impact:</strong> {path.impact}
                                                </div>
                                            </CardContent>
                                        </Card>
                                    ))}
                                </div>
                            </CardContent>
                        </Card>

                        {/* Download/Export Options */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <Download className="w-5 h-5 text-green-500" />
                                    Export & Download Options
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <Button className="bg-red-600 hover:bg-red-700 h-16 flex flex-col items-center justify-center">
                                        <FileText className="w-6 h-6 mb-2" />
                                        <span>Export PDF Report</span>
                                        <span className="text-xs opacity-75">Executive & Technical</span>
                                    </Button>
                                    <Button className="bg-blue-600 hover:bg-blue-700 h-16 flex flex-col items-center justify-center">
                                        <FileJson className="w-6 h-6 mb-2" />
                                        <span>Export JSON Data</span>
                                        <span className="text-xs opacity-75">Raw Findings</span>
                                    </Button>
                                    <Button className="bg-green-600 hover:bg-green-700 h-16 flex flex-col items-center justify-center">
                                        <FileSpreadsheet className="w-6 h-6 mb-2" />
                                        <span>Compliance Summary</span>
                                        <span className="text-xs opacity-75">Framework Mapping</span>
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Compliance View */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <Shield className="w-5 h-5 text-blue-500" />
                                    Compliance Framework Mapping
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <Tabs value={selectedCompliance} onValueChange={setSelectedCompliance}>
                                    <TabsList className="grid w-full grid-cols-3 bg-gray-800">
                                        <TabsTrigger value="nist" className="text-gray-300 data-[state=active]:text-white">
                                            NIST CSF
                                        </TabsTrigger>
                                        <TabsTrigger value="iso" className="text-gray-300 data-[state=active]:text-white">
                                            ISO 27001
                                        </TabsTrigger>
                                        <TabsTrigger value="owasp" className="text-gray-300 data-[state=active]:text-white">
                                            OWASP Top 10
                                        </TabsTrigger>
                                    </TabsList>

                                    {complianceMappings.map((mapping) => (
                                        <TabsContent
                                            key={mapping.framework.toLowerCase().replace(/\s+/g, "")}
                                            value={
                                                mapping.framework.toLowerCase().includes("nist")
                                                    ? "nist"
                                                    : mapping.framework.toLowerCase().includes("iso")
                                                        ? "iso"
                                                        : "owasp"
                                            }
                                            className="mt-4"
                                        >
                                            <div className="space-y-4">
                                                <div className="flex items-center justify-between">
                                                    <h3 className="text-lg font-medium text-white">{mapping.framework}</h3>
                                                    <div className="text-right">
                                                        <div className="text-2xl font-bold text-white">{mapping.overallScore}%</div>
                                                        <div className="text-sm text-gray-400">Overall Score</div>
                                                    </div>
                                                </div>
                                                <ProgressBar value={mapping.overallScore} className="h-2" />
                                                <div className="rounded-md border border-gray-800">
                                                    <Table>
                                                        <TableHeader>
                                                            <TableRow className="border-gray-800">
                                                                <TableHead className="text-gray-300">Control ID</TableHead>
                                                                <TableHead className="text-gray-300">Control Name</TableHead>
                                                                <TableHead className="text-gray-300">Status</TableHead>
                                                            </TableRow>
                                                        </TableHeader>
                                                        <TableBody>
                                                            {mapping.controls.map((control) => {
                                                                const statusInfo = getComplianceStatus(control.status)
                                                                return (
                                                                    <TableRow key={control.id} className="border-gray-800">
                                                                        <TableCell className="text-blue-400 font-mono">{control.id}</TableCell>
                                                                        <TableCell className="text-gray-300">{control.name}</TableCell>
                                                                        <TableCell>
                                                                            <div className="flex items-center gap-2">
                                                                                {statusInfo.icon}
                                                                                <span className={statusInfo.color}>{control.status}</span>
                                                                            </div>
                                                                        </TableCell>
                                                                    </TableRow>
                                                                )
                                                            })}
                                                        </TableBody>
                                                    </Table>
                                                </div>
                                            </div>
                                        </TabsContent>
                                    ))}
                                </Tabs>
                            </CardContent>
                        </Card>

                        {/* Bottom Summary */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardContent className="p-4">
                                <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-4">
                                        <div className="text-sm text-gray-300">
                                            Assessment completed with {testOverview.criticalIssues} critical findings requiring immediate attention
                                        </div>
                                        <Badge className="bg-red-600 text-white">
                                            <AlertTriangle className="w-3 h-3 mr-1" />
                                            High Risk Environment
                                        </Badge>
                                    </div>
                                    {handleProceed && (
                                        <Button onClick={handleProceed} className="bg-blue-600 hover:bg-blue-700">
                                            <ExternalLink className="w-4 h-4 mr-2" />
                                            View Detailed Report
                                        </Button>
                                    )}
                                </div>
                            </CardContent>
                        </Card>
                    </div>
            }
        </>
    )
}
