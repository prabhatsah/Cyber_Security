"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Checkbox } from "@/components/ui/checkbox"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { ProgressBar } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
    Zap,
    Play,
    CheckCircle,
    XCircle,
    Clock,
    Terminal,
    Shield,
    Key,
    Network,
    ArrowRight,
    Eye,
    Crown,
    Database,
    Users,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface ExploitTarget {
    id: string
    hostIp: string
    hostname: string
    vulnerability: string
    cveId: string
    exploitTool: string
    status: "Pending" | "Running" | "Success" | "Failed"
    enabled: boolean
    severity: "Critical" | "High" | "Medium"
    rceGained: boolean
    privilegesGained: string
    shellAccess: boolean
    credentialsDumped: boolean
    lateralMovement: boolean
}

interface ExploitationPanelProps {
    pentestIdName: string
}

export function ExploitationPanel({ pentestIdName }: ExploitationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [exploitTargets, setExploitTargets] = useState<ExploitTarget[]>([
        {
            id: "1",
            hostIp: "192.168.1.10",
            hostname: "dc01.domain.local",
            vulnerability: "Apache Log4j RCE",
            cveId: "CVE-2021-44228",
            exploitTool: "Metasploit",
            status: "Success",
            enabled: true,
            severity: "Critical",
            rceGained: true,
            privilegesGained: "SYSTEM",
            shellAccess: true,
            credentialsDumped: true,
            lateralMovement: false,
        },
        {
            id: "2",
            hostIp: "192.168.1.10",
            hostname: "dc01.domain.local",
            vulnerability: "Zerologon",
            cveId: "CVE-2020-1472",
            exploitTool: "Metasploit",
            status: "Success",
            enabled: true,
            severity: "Critical",
            rceGained: true,
            privilegesGained: "Domain Admin",
            shellAccess: true,
            credentialsDumped: true,
            lateralMovement: true,
        },
        {
            id: "3",
            hostIp: "192.168.1.15",
            hostname: "workstation-01",
            vulnerability: "BlueKeep RCE",
            cveId: "CVE-2019-0708",
            exploitTool: "Metasploit",
            status: "Failed",
            enabled: true,
            severity: "Critical",
            rceGained: false,
            privilegesGained: "None",
            shellAccess: false,
            credentialsDumped: false,
            lateralMovement: false,
        },
        {
            id: "4",
            hostIp: "192.168.1.25",
            hostname: "db-server",
            vulnerability: "PHP-FPM RCE",
            cveId: "CVE-2019-11043",
            exploitTool: "Manual",
            status: "Pending",
            enabled: true,
            severity: "High",
            rceGained: false,
            privilegesGained: "None",
            shellAccess: false,
            credentialsDumped: false,
            lateralMovement: false,
        },
    ])

    const [selectedTarget, setSelectedTarget] = useState<ExploitTarget | null>(null)
    const [isExploiting, setIsExploiting] = useState<string | null>(null)
    const [exploitProgress, setExploitProgress] = useState(0)
    const [isLoading, setIsLoading] = useState(false)

    const exploitLogs: Record<string, string[]> = {
        "1": [
            "[2024-01-15 12:30:01] Starting exploit against 192.168.1.10:8080",
            "[2024-01-15 12:30:02] Using exploit/multi/http/log4shell_header_injection",
            "[2024-01-15 12:30:03] Setting RHOSTS => 192.168.1.10",
            "[2024-01-15 12:30:04] Setting RPORT => 8080",
            "[2024-01-15 12:30:05] Setting LHOST => 192.168.1.100",
            "[2024-01-15 12:30:06] Setting LPORT => 4444",
            "[2024-01-15 12:30:07] Exploit running as background job 0.",
            "[2024-01-15 12:30:08] Started reverse TCP handler on 192.168.1.100:4444",
            "[2024-01-15 12:30:09] Sending malicious LDAP request...",
            "[2024-01-15 12:30:10] Command shell session 1 opened",
            "[2024-01-15 12:30:11] Microsoft Windows [Version 10.0.17763.1637]",
            "[2024-01-15 12:30:12] C:\\Windows\\system32> whoami",
            "[2024-01-15 12:30:13] nt authority\\system",
            "[2024-01-15 12:30:14] SUCCESS: Gained SYSTEM privileges on target",
        ],
        "2": [
            "[2024-01-15 12:35:01] Starting Zerologon exploit against 192.168.1.10",
            "[2024-01-15 12:35:02] Using exploit/windows/smb/cve_2020_1472_zerologon",
            "[2024-01-15 12:35:03] Setting RHOSTS => 192.168.1.10",
            "[2024-01-15 12:35:04] Setting TARGET => DC01",
            "[2024-01-15 12:35:05] Attempting to exploit Netlogon vulnerability...",
            "[2024-01-15 12:35:06] Sending malformed Netlogon requests...",
            "[2024-01-15 12:35:07] Successfully changed machine account password",
            "[2024-01-15 12:35:08] Dumping domain credentials...",
            "[2024-01-15 12:35:09] Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::",
            "[2024-01-15 12:35:10] krbtgt:502:aad3b435b51404eeaad3b435b51404ee:209c6174da490caeb422f3fa5a7ae634:::",
            "[2024-01-15 12:35:11] SUCCESS: Domain Admin privileges obtained",
        ],
        "3": [
            "[2024-01-15 12:40:01] Starting BlueKeep exploit against 192.168.1.15",
            "[2024-01-15 12:40:02] Using exploit/windows/rdp/cve_2019_0708_bluekeep_rce",
            "[2024-01-15 12:40:03] Setting RHOSTS => 192.168.1.15",
            "[2024-01-15 12:40:04] Setting RPORT => 3389",
            "[2024-01-15 12:40:05] Checking if target is vulnerable...",
            "[2024-01-15 12:40:06] Target appears to be patched",
            "[2024-01-15 12:40:07] Attempting exploit anyway...",
            "[2024-01-15 12:40:08] Sending malicious RDP packets...",
            "[2024-01-15 12:40:09] No response from target",
            "[2024-01-15 12:40:10] FAILED: Exploit unsuccessful - target may be patched",
        ],
    }

    const getStatusIcon = (status: string) => {
        switch (status) {
            case "Success":
                return <CheckCircle className="w-4 h-4 text-green-500" />
            case "Failed":
                return <XCircle className="w-4 h-4 text-red-500" />
            case "Running":
                return <Clock className="w-4 h-4 text-yellow-500 animate-spin" />
            default:
                return <Clock className="w-4 h-4 text-gray-500" />
        }
    }

    const getStatusColor = (status: string) => {
        switch (status) {
            case "Success":
                return "bg-green-600"
            case "Failed":
                return "bg-red-600"
            case "Running":
                return "bg-yellow-600"
            default:
                return "bg-gray-600"
        }
    }

    const getSeverityColor = (severity: string) => {
        switch (severity) {
            case "Critical":
                return "bg-red-600"
            case "High":
                return "bg-orange-600"
            case "Medium":
                return "bg-yellow-600"
            default:
                return "bg-gray-600"
        }
    }

    const toggleTargetEnabled = (id: string) => {
        setExploitTargets((prev) =>
            prev.map((target) => (target.id === id ? { ...target, enabled: !target.enabled } : target)),
        )
    }

    const runExploit = async (target: ExploitTarget) => {
        setIsExploiting(target.id)
        setExploitProgress(0)

        // Simulate exploit progress
        const interval = setInterval(() => {
            setExploitProgress((prev) => {
                if (prev >= 100) {
                    clearInterval(interval)
                    setIsExploiting(null)
                    // Update target status
                    setExploitTargets((prevTargets) =>
                        prevTargets.map((t) => (t.id === target.id ? { ...t, status: "Running" as const } : t)),
                    )
                    return 100
                }
                return prev + 10
            })
        }, 500)
    }

    const successfulExploits = exploitTargets.filter((t) => t.status === "Success")
    const shellAccess = successfulExploits.filter((t) => t.shellAccess).length
    const credentialsDumped = successfulExploits.filter((t) => t.credentialsDumped).length
    const lateralMovement = successfulExploits.filter((t) => t.lateralMovement).length


    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/post-exploitation`);
    }

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        {/* Header */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <Zap className="w-5 h-5 text-orange-500" />
                                    Exploitation Phase
                                </CardTitle>
                                <p className="text-gray-400 text-sm">Execute exploits against identified vulnerabilities</p>
                            </CardHeader>
                        </Card>

                        <div className="flex flex-col gap-6">
                            {/* Exploitation Queue */}
                            <div className="">
                                <Card className="bg-gray-900 border-gray-800">
                                    <CardHeader>
                                        <CardTitle className="text-white flex items-center gap-2">
                                            <Shield className="w-5 h-5 text-blue-500" />
                                            Exploitation Queue
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        <div className="rounded-md border border-gray-800">
                                            <Table>
                                                <TableHeader>
                                                    <TableRow className="border-gray-800">
                                                        <TableHead className="text-gray-300">Enable</TableHead>
                                                        <TableHead className="text-gray-300">Host IP</TableHead>
                                                        <TableHead className="text-gray-300">Vulnerability</TableHead>
                                                        <TableHead className="text-gray-300">CVE ID</TableHead>
                                                        <TableHead className="text-gray-300">Tool</TableHead>
                                                        <TableHead className="text-gray-300">Status</TableHead>
                                                        <TableHead className="text-gray-300">Actions</TableHead>
                                                    </TableRow>
                                                </TableHeader>
                                                <TableBody>
                                                    {exploitTargets.map((target) => (
                                                        <TableRow
                                                            key={target.id}
                                                            className={`border-gray-800 cursor-pointer hover:bg-gray-800/50 ${selectedTarget?.id === target.id ? "bg-gray-800/30" : ""
                                                                }`}
                                                            onClick={() => setSelectedTarget(target)}
                                                        >
                                                            <TableCell>
                                                                <Checkbox
                                                                    checked={target.enabled}
                                                                    onCheckedChange={() => toggleTargetEnabled(target.id)}
                                                                    onClick={(e) => e.stopPropagation()}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <div>
                                                                    <div className="text-white font-mono">{target.hostIp}</div>
                                                                    <div className="text-gray-400 text-xs">{target.hostname}</div>
                                                                </div>
                                                            </TableCell>
                                                            <TableCell>
                                                                <div className="flex items-center gap-2">
                                                                    <Badge className={`${getSeverityColor(target.severity)} text-white text-xs`}>
                                                                        {target.severity}
                                                                    </Badge>
                                                                    <span className="text-gray-300">{target.vulnerability}</span>
                                                                </div>
                                                            </TableCell>
                                                            <TableCell className="text-blue-400 font-mono">{target.cveId}</TableCell>
                                                            <TableCell>
                                                                <Badge variant="outline" className="border-gray-700 text-gray-300">
                                                                    {target.exploitTool}
                                                                </Badge>
                                                            </TableCell>
                                                            <TableCell>
                                                                <div className="flex items-center gap-2">
                                                                    {getStatusIcon(target.status)}
                                                                    <Badge className={`${getStatusColor(target.status)} text-white`}>{target.status}</Badge>
                                                                </div>
                                                            </TableCell>
                                                            <TableCell>
                                                                <div className="flex gap-1">
                                                                    <Button
                                                                        size="sm"
                                                                        onClick={(e) => {
                                                                            e.stopPropagation()
                                                                            runExploit(target)
                                                                        }}
                                                                        disabled={!target.enabled || isExploiting === target.id}
                                                                        className="bg-orange-600 hover:bg-orange-700"
                                                                    >
                                                                        <Play className="w-3 h-3 mr-1" />
                                                                        {isExploiting === target.id ? "Running..." : "Run"}
                                                                    </Button>
                                                                    <Button
                                                                        size="sm"
                                                                        variant="outline"
                                                                        onClick={(e) => {
                                                                            e.stopPropagation()
                                                                            setSelectedTarget(target)
                                                                        }}
                                                                        className="border-gray-700 text-gray-300 hover:text-white"
                                                                    >
                                                                        <Eye className="w-3 h-3" />
                                                                    </Button>
                                                                </div>
                                                            </TableCell>
                                                        </TableRow>
                                                    ))}
                                                </TableBody>
                                            </Table>
                                        </div>

                                        {isExploiting && (
                                            <div className="mt-4 space-y-2">
                                                <div className="flex justify-between text-sm text-gray-300">
                                                    <span>Exploit progress</span>
                                                    <span>{exploitProgress}%</span>
                                                </div>
                                                <ProgressBar value={exploitProgress} className="w-full" />
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            </div>

                            {/* Exploit Results Panel */}
                            <div className="">
                                <Card className="bg-gray-900 border-gray-800">
                                    <CardHeader>
                                        <CardTitle className="text-white flex items-center gap-2">
                                            <Terminal className="w-5 h-5 text-green-500" />
                                            Exploit Results
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        {selectedTarget ? (
                                            <div className="space-y-4">
                                                <div>
                                                    <div className="text-white font-medium">{selectedTarget.hostIp}</div>
                                                    <div className="text-gray-400 text-sm">{selectedTarget.vulnerability}</div>
                                                </div>

                                                <div className="grid grid-cols-2 gap-2 text-xs">
                                                    <div>
                                                        <span className="text-gray-400">RCE Gained:</span>
                                                        <div className="flex items-center gap-1">
                                                            {selectedTarget.rceGained ? (
                                                                <CheckCircle className="w-3 h-3 text-green-500" />
                                                            ) : (
                                                                <XCircle className="w-3 h-3 text-red-500" />
                                                            )}
                                                            <span className="text-white">{selectedTarget.rceGained ? "Yes" : "No"}</span>
                                                        </div>
                                                    </div>
                                                    <div>
                                                        <span className="text-gray-400">Privileges:</span>
                                                        <div className="text-white">{selectedTarget.privilegesGained}</div>
                                                    </div>
                                                </div>

                                                <Tabs defaultValue="output" className="w-full">
                                                    <TabsList className="grid w-full grid-cols-2 bg-gray-800">
                                                        <TabsTrigger value="output" className="text-gray-300 data-[state=active]:text-white">
                                                            Output
                                                        </TabsTrigger>
                                                        <TabsTrigger value="shell" className="text-gray-300 data-[state=active]:text-white">
                                                            Shell
                                                        </TabsTrigger>
                                                    </TabsList>
                                                    <TabsContent value="output" className="mt-2">
                                                        <ScrollArea className="h-64 w-full rounded border border-gray-800 bg-black p-3">
                                                            <div className="font-mono text-xs space-y-1">
                                                                {exploitLogs[selectedTarget.id]?.map((log, index) => (
                                                                    <div
                                                                        key={index}
                                                                        className={`${log.includes("SUCCESS")
                                                                            ? "text-green-400"
                                                                            : log.includes("FAILED")
                                                                                ? "text-red-400"
                                                                                : "text-gray-300"
                                                                            }`}
                                                                    >
                                                                        {log}
                                                                    </div>
                                                                )) || <div className="text-gray-500">No output available</div>}
                                                            </div>
                                                        </ScrollArea>
                                                    </TabsContent>
                                                    <TabsContent value="shell" className="mt-2">
                                                        <ScrollArea className="h-64 w-full rounded border border-gray-800 bg-black p-3">
                                                            <div className="font-mono text-xs space-y-1">
                                                                {selectedTarget.shellAccess ? (
                                                                    <>
                                                                        <div className="text-green-400">C:\Windows\system32&gt; whoami</div>
                                                                        <div className="text-white">nt authority\system</div>
                                                                        <div className="text-green-400">C:\Windows\system32&gt; hostname</div>
                                                                        <div className="text-white">{selectedTarget.hostname.split(".")[0]}</div>
                                                                        <div className="text-green-400">C:\Windows\system32&gt; ipconfig</div>
                                                                        <div className="text-white">
                                                                            Windows IP Configuration
                                                                            <br />
                                                                            Ethernet adapter Local Area Connection:
                                                                            <br />
                                                                            &nbsp;&nbsp;IPv4 Address: {selectedTarget.hostIp}
                                                                        </div>
                                                                        <div className="text-green-400 animate-pulse">C:\Windows\system32&gt; █</div>
                                                                    </>
                                                                ) : (
                                                                    <div className="text-gray-500">No shell access available</div>
                                                                )}
                                                            </div>
                                                        </ScrollArea>
                                                    </TabsContent>
                                                </Tabs>

                                                {selectedTarget.shellAccess && (
                                                    <Dialog>
                                                        <DialogTrigger asChild>
                                                            <Button className="w-full bg-green-600 hover:bg-green-700">
                                                                <Terminal className="w-4 h-4 mr-2" />
                                                                Open Live Shell
                                                            </Button>
                                                        </DialogTrigger>
                                                        <DialogContent className="bg-gray-900 border-gray-800 max-w-4xl">
                                                            <DialogHeader>
                                                                <DialogTitle className="text-white">
                                                                    Live Shell - {selectedTarget.hostIp} ({selectedTarget.privilegesGained})
                                                                </DialogTitle>
                                                            </DialogHeader>
                                                            <ScrollArea className="h-96 w-full rounded border border-gray-800 bg-black p-4">
                                                                <div className="font-mono text-sm space-y-1">
                                                                    <div className="text-green-400">Microsoft Windows [Version 10.0.17763.1637]</div>
                                                                    <div className="text-green-400">(c) 2018 Microsoft Corporation. All rights reserved.</div>
                                                                    <div className="text-white">
                                                                        <br />
                                                                    </div>
                                                                    <div className="text-green-400">C:\Windows\system32&gt; dir</div>
                                                                    <div className="text-white">
                                                                        Volume in drive C has no label.
                                                                        <br />
                                                                        Volume Serial Number is 1234-5678
                                                                        <br />
                                                                        <br />
                                                                        Directory of C:\Windows\system32
                                                                        <br />
                                                                        <br />
                                                                        01/15/2024 12:30 PM &lt;DIR&gt; .
                                                                        <br />
                                                                        01/15/2024 12:30 PM &lt;DIR&gt; ..
                                                                        <br />
                                                                        01/15/2024 12:30 PM 1,234,567 cmd.exe
                                                                        <br />
                                                                        01/15/2024 12:30 PM 2,345,678 powershell.exe
                                                                    </div>
                                                                    <div className="text-green-400 animate-pulse">C:\Windows\system32&gt; █</div>
                                                                </div>
                                                            </ScrollArea>
                                                        </DialogContent>
                                                    </Dialog>
                                                )}
                                            </div>
                                        ) : (
                                            <div className="text-center text-gray-400 py-8">
                                                <Terminal className="w-12 h-12 mx-auto mb-4 text-gray-600" />
                                                <p>Select an exploit target to view results</p>
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            </div>
                        </div>

                        {/* Access Graph Summary */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <Network className="w-5 h-5 text-purple-500" />
                                    Access Summary
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <Card className="bg-gray-800 border-gray-700">
                                        <CardContent className="p-4">
                                            <div className="flex items-center gap-3">
                                                <Terminal className="w-8 h-8 text-green-500" />
                                                <div>
                                                    <div className="text-2xl font-bold text-white">{shellAccess}</div>
                                                    <div className="text-sm text-gray-300">Shell Access Gained</div>
                                                </div>
                                            </div>
                                            {shellAccess > 0 && (
                                                <div className="mt-3">
                                                    <Badge className="bg-green-600 text-white">
                                                        <CheckCircle className="w-3 h-3 mr-1" />
                                                        Active Sessions
                                                    </Badge>
                                                </div>
                                            )}
                                        </CardContent>
                                    </Card>

                                    <Card className="bg-gray-800 border-gray-700">
                                        <CardContent className="p-4">
                                            <div className="flex items-center gap-3">
                                                <Key className="w-8 h-8 text-blue-500" />
                                                <div>
                                                    <div className="text-2xl font-bold text-white">{credentialsDumped}</div>
                                                    <div className="text-sm text-gray-300">Credentials Dumped</div>
                                                </div>
                                            </div>
                                            {credentialsDumped > 0 && (
                                                <div className="mt-3">
                                                    <Badge className="bg-blue-600 text-white">
                                                        <Database className="w-3 h-3 mr-1" />
                                                        Hash Database
                                                    </Badge>
                                                </div>
                                            )}
                                        </CardContent>
                                    </Card>

                                    <Card className="bg-gray-800 border-gray-700">
                                        <CardContent className="p-4">
                                            <div className="flex items-center gap-3">
                                                <Users className="w-8 h-8 text-purple-500" />
                                                <div>
                                                    <div className="text-2xl font-bold text-white">{lateralMovement}</div>
                                                    <div className="text-sm text-gray-300">Lateral Movement</div>
                                                </div>
                                            </div>
                                            {lateralMovement > 0 && (
                                                <div className="mt-3">
                                                    <Badge className="bg-purple-600 text-white">
                                                        <Crown className="w-3 h-3 mr-1" />
                                                        Domain Access
                                                    </Badge>
                                                </div>
                                            )}
                                        </CardContent>
                                    </Card>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Bottom CTA */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardContent className="p-4">
                                <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-4">
                                        <div className="text-sm text-gray-300">
                                            {successfulExploits.length} successful exploits • {shellAccess} active shells
                                        </div>
                                        {successfulExploits.length > 0 && (
                                            <Badge className="bg-green-600 text-white">
                                                <CheckCircle className="w-3 h-3 mr-1" />
                                                Exploitation Complete
                                            </Badge>
                                        )}
                                    </div>
                                    <Button
                                        onClick={handleProceed}
                                        disabled={successfulExploits.length === 0}
                                        className="bg-green-600 hover:bg-green-700"
                                    >
                                        <ArrowRight className="w-4 h-4 mr-2" />
                                        Proceed to Post-Exploitation
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    </div>
            }
        </>
    )
}
