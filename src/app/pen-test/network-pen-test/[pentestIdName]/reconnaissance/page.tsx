import { RenderAppBreadcrumb } from "@/components/app-breadcrumb";
import { arp_scan_raw, nmap_ping_raw, nmap_raw } from "./components/ReconnaissanceDummyData";
import NetworkReconnaissancePanel from "./components/NetworkReconnaissancePanel";

export interface NmapEachServicePortResult {
    hostIp: string
    mac: string
    vendor: string
    os: string
    cpe: string
    selected: boolean
    ports: Array<{
        port: number
        protocol: string
        service: string
        version: string
    }>
}

const extractIpAndMac = (arpScanOutput: string) => {
    const results = [];

    // Regex to match: IP \t MAC
    const regex = /(\b\d{1,3}(?:\.\d{1,3}){3}\b)\s+([0-9a-fA-F:]{17})/g;
    let match;

    while ((match = regex.exec(arpScanOutput)) !== null) {
        results.push({
            ip: match[1],
            mac: match[2].toUpperCase()
        });
    }

    return results;
}

const parseNmapOutput = (nmapOutput: string) => {
    const lines = nmapOutput.split("\n");
    const result = [];

    let currentHost = null;

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();

        if (line.startsWith("Nmap scan report for")) {
            // Extract the host IP
            const match = line.match(/Nmap scan report for ([\d.]+)/);
            if (match) currentHost = match[1];
        }

        if (line.startsWith("MAC Address:")) {
            // Extract MAC and vendor
            const macMatch = line.match(/MAC Address: ([0-9A-F:]+) \((.+?)\)/i);
            if (macMatch && currentHost) {
                result.push({
                    host: currentHost,
                    mac: macMatch[1],
                    vendor: macMatch[2]
                });
                currentHost = null; // reset for next entry
            }
        }
    }

    return result;
}

const parseNmapDetailedOutput = (nmapOutput: string) => {
    const result: {
        hostIp: string;
        mac: string;
        vendor: string;
        os: string;
        cpe: string;
        selected: boolean;
        ports: Array<{
            port: number;
            protocol: string;
            service: string;
            version: string;
        }>;
    } = {
        hostIp: "",
        mac: "",
        vendor: "",
        os: "",
        cpe: "",
        selected: true,
        ports: []
    };

    const lines = nmapOutput.split("\n");

    for (let line of lines) {
        line = line.trim();

        // Extract host IP
        if (line.startsWith("Nmap scan report for")) {
            const match = line.match(/Nmap scan report for ([\d.]+)/);
            if (match) result.hostIp = match[1];
        }

        // Extract MAC address and vendor
        else if (line.startsWith("MAC Address:")) {
            const match = line.match(/MAC Address: ([0-9A-F:]+) \((.+?)\)/i);
            if (match) {
                result.mac = match[1];
                result.vendor = match[2];
            }
        }

        // Extract OS
        else if (line.includes("Service Info:")) {
            const osMatch = line.match(/OS:\s*([^;]+)/);
            if (osMatch) result.os = osMatch[1].trim();

            const cpeMatch = line.match(/CPE:\s*(cpe:[^;\s]+)/);
            if (cpeMatch) result.cpe = cpeMatch[1].trim();
        }

        // Extract open ports and services
        else if (line.match(/^\d+\/tcp\s+open\s+/)) {
            const portMatch = line.match(/^(\d+)\/(tcp)\s+open\s+(\S+)(\s+(.*))?/);
            if (portMatch) {
                result.ports.push({
                    port: parseInt(portMatch[1]),
                    protocol: portMatch[2],
                    service: portMatch[3],
                    version: portMatch[5] ? portMatch[5].trim() : ""
                });
            }
        }
    }

    return result;
}

export default async function Reconnaissance({
    params,
}: {
    params: Promise<{ pentestIdName: string, pentestId: string }>;
}) {
    const pentestIdName = (await params).pentestIdName;
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");

    const parsedArpScan = extractIpAndMac(arp_scan_raw);
    console.log("Parsed ARP Scan Results: ", parsedArpScan);

    const parsedNmapPing = parseNmapOutput(nmap_ping_raw);
    console.log("Nmap Ping Scan Results: ", parsedNmapPing);

    const parsedNmapServiceRow: NmapEachServicePortResult[] = [parseNmapDetailedOutput(nmap_raw)];
    console.log("Nmap Service Row Results: ", parsedNmapServiceRow)

    return (
        <>
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 0,
                    title: "Penetration Testing",
                    href: "/pen-test",
                }}
            />
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 1,
                    title: "Network Penetration Testing",
                    href: "/pen-test/network-pen-test",
                }}
            />
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 2,
                    title: pentestName,
                }}
            />
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 3,
                    title: "Reconnaissance",
                    href: `/pen-test/network-pen-test/${pentestIdName}/reconnaissance`,
                }}
            />

            <div className='h-full overflow-auto pb-3'>
                <NetworkReconnaissancePanel
                    pentestIdName={pentestIdName}
                    arpScanResults={parsedArpScan}
                    nmapPingResults={parsedNmapPing}
                    nmapEachServicePortResultsAll={parsedNmapServiceRow} />
            </div>
        </>
    )
}
