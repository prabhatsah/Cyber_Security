"use client"
import { Drawer, DrawerBody, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, DrawerTrigger } from "@/components/Drawer";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

import { Badge } from "@/components/Badge";
import { useNetworkPentestContext } from "../../components/NetworkPentestContext";
import GlobalLoader from "@/components/GlobalLoader";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import NetworkReconnaissanceWidget from "./NetworkReconnaissanceWidget";



function KV({
    value,
    valueTitle,
    label,
}: {
    value: string | React.ReactNode
    valueTitle?: string
    label: string
}) {
    valueTitle = !valueTitle ? (value?.toString() ?? "N/A") : valueTitle;

    return (
        <div className="relative max-w-full overflow-hidden text-ellipsis whitespace-nowrap">
            <div className="text-sm font-semibold text-foreground truncate" title={valueTitle}>{value ?? "N/A"}</div>
            <div className="text-xs text-muted-foreground truncate" title={label}>{label}</div>
        </div>
    )
}


export default function DrawerForPentest({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const { pentestData, pentestDataLoading, error, setPentestId } = useNetworkPentestContext()

    useEffect(() => {
        if (typeof pentestId === "string") {
            setPentestId(pentestId)
        }
    }, [pentestId]);


    const getAggressivenessColor = (aggressiveness: string): "default" | "neutral" | "success" | "error" | "warning" | undefined => {
        switch (aggressiveness) {
            case "Aggressive":
                return "error"
            // case "High":
            //     return "error"
            case "Normal":
                return "warning"
            case "Stealthy":
                return "success"
            default:
                return "default"
        }
    }

    if (pentestDataLoading) {
        return <GlobalLoader />
    }
    return (
        <Drawer>
            <DrawerTrigger asChild>
                <Button className="bg-gradient-to-r from-blue-600 to-indigo-600 " >Open Pentest Data</Button>
            </DrawerTrigger>
            <DrawerContent className="sm:max-w-4xl"
                onInteractOutside={(e) => e.preventDefault()}
                onEscapeKeyDown={(e) => e.preventDefault()}>
                <DrawerBody>
                    <Card className="border  shadow-md">
                        <CardHeader>
                            <CardTitle className="text-lg">Pentest Object Overview</CardTitle>
                            <CardDescription>All relevant fields from the provided pentest object</CardDescription>
                        </CardHeader>
                        <CardContent>

                            {/* <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-6"> */}
                            <div className="grid grid-cols-1 gap-x-8 gap-y-6">
                                <NetworkReconnaissanceWidget cardTitle="Basic Information">
                                    <KV value={pentestData?.pentest_id} label="Pentest ID" />
                                    <KV value={pentestData?.pentest_name} label="Pentest Name" />
                                    <KV value={pentestData?.client_name} label="Client" />
                                    <KV value={pentestData?.pentest_description} label="Description" />
                                </NetworkReconnaissanceWidget>
                                <NetworkReconnaissanceWidget cardTitle="Pentest Scope">
                                    <KV
                                        value={
                                            <Badge variant={getAggressivenessColor(pentestData?.aggressiveness || "Normal")} className="px-2 py-0.5 text-xs mb-1">
                                                {pentestData?.aggressiveness}
                                            </Badge>
                                        }
                                        valueTitle={pentestData?.aggressiveness}
                                        label="Aggressiveness"
                                    />
                                    <KV value={`${pentestData?.progress}%`} label="Progress" />
                                    <KV value={pentestData?.scope_type} label="Scope Type" />

                                    {pentestData?.scope_type === "Array of IPs" && <KV value={(pentestData?.ip_addresses || []).join(", ")} label="IP Addresses" />}
                                    {pentestData?.scope_type === "IP Range" &&
                                        <>
                                            <KV value={pentestData?.start_ip} label="Start IP" />
                                            <KV value={pentestData?.end_ip} label="End IP" />
                                        </>
                                    }
                                    {pentestData?.scope_type === "CIDR Network Range" && <KV value={pentestData?.cidr_range} label="CIDR Range" />}
                                    {pentestData?.scope_type === "Host Name" && <KV value={pentestData?.hostname} label="Hostname" />}

                                </NetworkReconnaissanceWidget>
                                <NetworkReconnaissanceWidget cardTitle="Credentials & Access">
                                    <KV value={pentestData?.hasValidCredentials ? "Yes" : "No"} label="Valid Credentials" />
                                    <KV value={pentestData?.credentials_details || "N/A"} label="Credentials Details" />

                                </NetworkReconnaissanceWidget>
                                <NetworkReconnaissanceWidget cardTitle="Probe & Network Information">


                                    <KV value={pentestData?.agent_ip || "192.168.3.35"} label="Agent IP" />
                                    <KV value={pentestData?.subnet_mask || "192.168.3.250"} label="Subnet Mask" />
                                    <KV value={pentestData?.default_gateway || "192.168.3.250"} label="Default Gateway" />
                                    <KV value={pentestData?.probe_id || "fae9d00f-bc18-4017-901a-109eddc35cf1"} label="Agent ID" />
                                    <KV value={pentestData?.probe_name || "Cyber Security - Sayan"} label="Agent Name" />
                                    <KV value={pentestData?.probe_machine_hostname || "KERLPTP-47"} label="Machine Hostname" />
                                    <KV value={pentestData?.probe_machine_ip_address || "169.254.88.177"} label="Machine IP" />
                                    <KV value={pentestData?.probe_machine_os || "Windows"} label="OS" />
                                    <KV
                                        value={pentestData?.created_by_id || "be7a0ece-f3d8-4c5b-84dc-52c32c4adff4"}
                                        label="Created By ID"
                                    />
                                    <KV value={pentestData?.created_by_login || "K2211089"} label="Created By Login" />
                                    <KV
                                        value={
                                            pentestData?.created_on
                                                ? new Date(pentestData.created_on).toLocaleString()
                                                : "2025-09-25T10:43:43.597Z"
                                        }
                                        label="Created On"
                                    />

                                </NetworkReconnaissanceWidget>
                                <NetworkReconnaissanceWidget cardTitle="Additional Information">
                                    <KV value={(pentestData as any)?.additional_info || "N/A"} label="Additional Info" />
                                </NetworkReconnaissanceWidget>


                                {/* <KV value={pentestData?.pentest_id || "KER-NETP-250925001"} label="Pentest ID" />
                                    <KV
                                        value={pentestData?.pentest_name || "Demo Network Penetration Test N1 - 2025"}
                                        label="Pentest Name"
                                    />
                                    <KV value={pentestData?.client_name || "S2 Cyber Security"} label="Client" />
                                    <KV
                                        value={pentestData?.pentest_description || "Demo Network Penetration Test N1 - 2025"}
                                        label="Description"
                                    /> */}
                                {/* <KV
                                        value={
                                            <Badge variant={getAggressivenessColor(pentestData?.aggressiveness || "Normal")} className="px-3 py-1.5 text-xs mb-1">
                                                {pentestData?.aggressiveness || "Normal"}
                                            </Badge>
                                        }
                                        label="Aggressiveness"
                                    />
                                    <KV
                                        value={typeof pentestData?.progress === "number" ? `${pentestData.progress}%` : "10%"}
                                        label="Progress"
                                    />
                                    <KV value={pentestData?.scope_type || "CIDR Network Range"} label="Scope Type" />
                                    <KV value={pentestData?.cidr_range || "192.168.3.0/24"} label="CIDR Range" />
                                    <KV value={pentestData?.hostname || "N/A"} label="Hostname" />
                                    <KV value={(pentestData?.ip_addresses || []).join(", ") || "N/A"} label="IP Addresses" />
                                    <KV value={pentestData?.start_ip || "N/A"} label="Start IP" />
                                    <KV value={pentestData?.end_ip || "N/A"} label="End IP" />
                                    <KV value={pentestData?.agent_ip || "192.168.3.35"} label="Agent IP" />
                                    <KV value={pentestData?.subnet_mask || "192.168.3.250"} label="Subnet Mask" />
                                    <KV value={pentestData?.default_gateway || "192.168.3.250"} label="Default Gateway" />
                                    <KV value={pentestData?.probe_id || "fae9d00f-bc18-4017-901a-109eddc35cf1"} label="Agent ID" />
                                    <KV value={pentestData?.probe_name || "Cyber Security - Sayan"} label="Agent Name" />
                                    <KV value={pentestData?.probe_machine_hostname || "KERLPTP-47"} label="Machine Hostname" />
                                    <KV value={pentestData?.probe_machine_ip_address || "169.254.88.177"} label="Machine IP" />
                                    <KV value={pentestData?.probe_machine_os || "Windows"} label="OS" />
                                    <KV
                                        value={pentestData?.created_by_id || "be7a0ece-f3d8-4c5b-84dc-52c32c4adff4"}
                                        label="Created By ID"
                                    />
                                    <KV value={pentestData?.created_by_login || "K2211089"} label="Created By Login" />
                                    <KV
                                        value={
                                            pentestData?.created_on
                                                ? new Date(pentestData.created_on).toLocaleString()
                                                : "2025-09-25T10:43:43.597Z"
                                        }
                                        label="Created On"
                                    /> */}

                            </div>

                        </CardContent>
                    </Card>
                </DrawerBody>
                <DrawerClose asChild>
                    <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        aria-label="Close"
                        className="absolute right-2 top-2 h-8 w-8"
                    >
                        {"✕"}
                        <span className="sr-only">{"Close"}</span>
                    </Button>
                </DrawerClose>
            </DrawerContent>
        </Drawer>
    );
}