
"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Skeleton } from "@/components/ui/skeleton"
import { Play, Network, Activity, Globe, Loader2, Shield, CheckSquare, Square, Monitor, RefreshCw } from "lucide-react"
import { Checkbox } from "@/components/ui/checkbox"
import { useRouter, usePathname } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"
import { NmapEachServicePortResult } from "../page"
import { ProgressBar } from "@/components/ui/progress"

// Dummy data from requirements
const arpScanResults = [
    { ip: "192.168.1.40", mac: "24:43:E2:3D:AC:8F" },
    { ip: "192.168.1.44", mac: "2C:3B:70:6C:28:29" },
    { ip: "192.168.1.31", mac: "14:13:33:52:44:C1" },
    { ip: "192.168.1.14", mac: "14:13:33:52:44:7D" },
    { ip: "192.168.1.22", mac: "E4:0D:36:87:0E:C4" },
    { ip: "192.168.1.5", mac: "7C:70:DB:47:4D:89" },
    { ip: "192.168.1.3", mac: "20:0B:74:1C:16:81" },
]

const nmapPingResults = [
    { host: "192.168.1.4", mac: "02:F3:20:81:31:C4", vendor: "Unknown" },
    { host: "192.168.1.7", mac: "B2:45:04:C2:16:A0", vendor: "Unknown" },
    { host: "192.168.1.14", mac: "14:13:33:52:44:7D", vendor: "AzureWave Technology" },
    { host: "192.168.1.31", mac: "14:13:33:52:44:C1", vendor: "AzureWave Technology" },
    { host: "192.168.1.34", mac: "B4:8C:9D:54:6A:89", vendor: "AzureWave Technology" },
    { host: "192.168.1.35", mac: "B4:8C:9D:37:85:35", vendor: "AzureWave Technology" },
    { host: "192.168.1.36", mac: "2C:3B:70:5E:56:99", vendor: "AzureWave Technology" },
    { host: "192.168.1.37", mac: "B4:8C:9D:54:C3:25", vendor: "AzureWave Technology" },
]

const nmapEachServicePortResultsAll = [
    {
        hostIp: "192.168.1.3",
        mac: "20:0B:74:1C:16:81",
        vendor: "Raspberry Pi Foundation",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH 8.4" },
            { port: 80, protocol: "tcp", service: "http", version: "Apache httpd 2.4.46" },
        ],
    },
    {
        hostIp: "192.168.1.4",
        mac: "02:F3:20:81:31:C4",
        vendor: "Unknown",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 21, protocol: "tcp", service: "ftp", version: "vsftpd 3.0.3" },
            { port: 8080, protocol: "tcp", service: "http-proxy", version: "nginx 1.18.0" },
        ],
    },
    {
        hostIp: "192.168.1.5",
        mac: "7C:70:DB:47:4D:89",
        vendor: "Dell Inc.",
        os: "Windows",
        cpe: "cpe:/o:microsoft:windows",
        selected: true,
        ports: [
            { port: 135, protocol: "tcp", service: "msrpc", version: "Microsoft Windows RPC" },
            { port: 445, protocol: "tcp", service: "microsoft-ds", version: "Windows SMB" },
        ],
    },
    {
        hostIp: "192.168.1.7",
        mac: "B2:45:04:C2:16:A0",
        vendor: "Unknown",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 53, protocol: "udp", service: "domain", version: "BIND 9.16" },
            { port: 443, protocol: "tcp", service: "https", version: "nginx 1.20.2" },
        ],
    },
    {
        hostIp: "192.168.1.10",
        mac: "D0:65:78:BF:CD:18",
        vendor: "Intel Corporate",
        os: "Windows",
        cpe: "cpe:/o:microsoft:windows",
        selected: true,
        ports: [
            { port: 135, protocol: "tcp", service: "msrpc", version: "Microsoft Windows RPC" },
            { port: 139, protocol: "tcp", service: "netbios-ssn", version: "Microsoft Windows netbios-ssn" },
        ],
    },
    {
        hostIp: "192.168.1.14",
        mac: "14:13:33:52:44:7D",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 23, protocol: "tcp", service: "telnet", version: "BusyBox telnetd" },
            { port: 8080, protocol: "tcp", service: "http", version: "lighttpd 1.4.55" },
        ],
    },
    {
        hostIp: "192.168.1.22",
        mac: "E4:0D:36:87:0E:C4",
        vendor: "HP Inc.",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 80, protocol: "tcp", service: "http", version: "Embedded Web Server" },
            { port: 9100, protocol: "tcp", service: "jetdirect", version: "HP JetDirect" },
        ],
    },
    {
        hostIp: "192.168.1.31",
        mac: "14:13:33:52:44:C1",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 8080, protocol: "tcp", service: "http", version: "nginx 1.14.0" },
            { port: 554, protocol: "tcp", service: "rtsp", version: "Live555 RTSP" },
        ],
    },
    {
        hostIp: "192.168.1.34",
        mac: "B4:8C:9D:54:6A:89",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 554, protocol: "tcp", service: "rtsp", version: "Live555 RTSP" },
            { port: 443, protocol: "tcp", service: "https", version: "nginx 1.18.0" },
        ],
    },
    {
        hostIp: "192.168.1.35",
        mac: "B4:8C:9D:37:85:35",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 80, protocol: "tcp", service: "http", version: "lighttpd 1.4.59" },
            { port: 21, protocol: "tcp", service: "ftp", version: "Pure-FTPd" },
        ],
    },
    {
        hostIp: "192.168.1.36",
        mac: "2C:3B:70:5E:56:99",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH 7.9" },
            { port: 8888, protocol: "tcp", service: "http-alt", version: "Node.js Express" },
        ],
    },
    {
        hostIp: "192.168.1.37",
        mac: "B4:8C:9D:54:C3:25",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 443, protocol: "tcp", service: "https", version: "nginx 1.16.1" },
            { port: 554, protocol: "tcp", service: "rtsp", version: "Live555 RTSP" },
        ],
    },
    {
        hostIp: "192.168.1.40",
        mac: "24:43:E2:3D:AC:8F",
        vendor: "Apple Inc.",
        os: "macOS",
        cpe: "cpe:/o:apple:mac_os_x",
        selected: true,
        ports: [
            { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH_8.1" },
            { port: 548, protocol: "tcp", service: "afp", version: "Apple Filing Protocol" },
        ],
    },
    {
        hostIp: "192.168.1.44",
        mac: "2C:3B:70:6C:28:29",
        vendor: "AzureWave Technology",
        os: "Linux",
        cpe: "cpe:/o:linux:linux_kernel",
        selected: true,
        ports: [
            { port: 80, protocol: "tcp", service: "http", version: "lighttpd 1.4.54" },
            { port: 21, protocol: "tcp", service: "ftp", version: "vsftpd 3.0.3" },
        ],
    },
];

type ScanStage = "idle" | "stage1" | "stage2" | "stage3" | "completed"

interface HostData {
    hostIp: string
    mac: string
    vendor?: string
    os?: string
    cpe?: string
    selected: boolean
    ports?: Array<{
        port: number
        protocol: string
        service: string
        version: string
    }>
}

interface NetworkReconnaissancePanelProps {
    pentestIdName: string;
    arpScanResults: Array<{
        ip: string;
        mac: string;
    }>;
    nmapPingResults: Array<{
        host: string;
        mac: string;
        vendor: string;
    }>;
    nmapEachServicePortResultsAll: NmapEachServicePortResult[]
}

export default function NetworkReconnaissancePanel({ pentestIdName, arpScanResults, nmapPingResults, nmapEachServicePortResultsAll }: NetworkReconnaissancePanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [isLoading, setIsLoading] = useState(false);
    const [scanStage, setScanStage] = useState<ScanStage>("idle")
    const [progress, setProgress] = useState(0)
    const [currentStage, setCurrentStage] = useState("")
    const [hostsFound, setHostsFound] = useState(0)
    const [activeHosts, setActiveHosts] = useState(0)
    const [openPorts, setOpenPorts] = useState(0)
    const [hostData, setHostData] = useState<HostData[]>([])
    const [loadingHosts, setLoadingHosts] = useState<string[]>([])
    const scrollRef = useRef<HTMLDivElement>(null)

    // Auto-scroll to bottom when new data is added
    useEffect(() => {
        if (scrollRef.current) {
            scrollRef.current.scrollTop = scrollRef.current.scrollHeight
        }
    }, [hostData, loadingHosts])

    const startScan = async () => {
        setScanStage("stage1")
        setProgress(10)
        setCurrentStage("Fetching IPs and MAC addresses...")
        setHostData([])
        setLoadingHosts([])
        setHostsFound(0)
        setActiveHosts(0)
        setOpenPorts(0)

        // Stage 1: Fetch IPs and MAC addresses
        await new Promise((resolve) => setTimeout(resolve, 2000))

        const stage1Data = arpScanResults.map((item) => ({
            hostIp: item.ip,
            mac: item.mac,
            selected: true
        }))

        setHostData(stage1Data)
        setHostsFound(stage1Data.length)
        setProgress(33)
        setScanStage("stage2")
        setCurrentStage("Searching for additional devices...")

        // Stage 2: Search for additional devices
        await new Promise((resolve) => setTimeout(resolve, 2000))

        // Merge with ping results, avoiding duplicates
        const existingIPs = new Set(stage1Data.map((h) => h.hostIp))
        const newHosts = nmapPingResults
            .filter((item) => !existingIPs.has(item.host))
            .map((item) => ({
                hostIp: item.host,
                mac: item.mac,
                vendor: item.vendor,
                selected: true,
            }))

        const stage2Data = [...stage1Data, ...newHosts]
        setHostData(stage2Data)
        setHostsFound(stage2Data.length)
        setActiveHosts(stage2Data.length)
        setProgress(66)
        setScanStage("stage3")
        setCurrentStage("Gathering open port information...")

        // Stage 3: Gather port information incrementally
        await new Promise((resolve) => setTimeout(resolve, 1000))

        let totalPorts = 0
        for (const portData of nmapEachServicePortResultsAll) {
            setLoadingHosts((prev) => [...prev, portData.hostIp])

            await new Promise((resolve) => setTimeout(resolve, 800))

            setHostData((prev) =>
                prev.map((host) => {
                    if (host.hostIp === portData.hostIp) {
                        totalPorts += portData.ports.length
                        return {
                            ...host,
                            vendor: portData.vendor,
                            os: portData.os,
                            cpe: portData.cpe,
                            ports: portData.ports,
                        }
                    }
                    return host
                }),
            )

            setLoadingHosts((prev) => prev.filter((ip) => ip !== portData.hostIp))
            setOpenPorts(totalPorts)
        }

        setProgress(100)
        setScanStage("completed")
        setCurrentStage("Network Discovery")
    }

    const resetScan = () => {
        setScanStage("idle")
        setProgress(0)
        setCurrentStage("")
        setHostData([])
        setLoadingHosts([])
        setHostsFound(0)
        setActiveHosts(0)
        setOpenPorts(0)
    }

    const getUniqueVendors = () => {
        const vendors = new Set(hostData.filter((h) => h.vendor && h.vendor !== "Unknown").map((h) => h.vendor))
        return vendors.size
    }

    const toggleHostSelection = (ip: string) => {
        setHostData((prev) => prev.map((host) => (host.hostIp === ip ? { ...host, selected: !host.selected } : host)))
    }

    const selectAllHosts = () => {
        setHostData((prev) => prev.map((host) => ({ ...host, selected: true })))
    }

    const deselectAllHosts = () => {
        setHostData((prev) => prev.map((host) => ({ ...host, selected: false })))
    }

    const selectedCount = hostData.filter((host) => host.selected).length


    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/host-confirmation`);
    }

    if (isLoading) {
        return <GlobalLoader />
    }

    if (scanStage === "idle") {
        return (
            <div className="space-y-6 mt-4">
                {/* <div className="flex items-center gap-4">
                    <Network className="h-7 w-7 text-blue-500" />
                    <h2 className="text-2xl font-semibold">Network Reconnaissance</h2>
                </div> */}

                <Card className="border-dashed border-2 border-muted">
                    <CardContent className="flex flex-col items-center justify-center py-12 text-center">
                        <div className="rounded-full bg-blue-50 dark:bg-blue-950 p-4 mb-4">
                            <Shield className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                        </div>
                        <CardTitle className="text-xl mb-2">Ready to Initiate Penetration Testing</CardTitle>
                        <CardDescription className="mb-6 max-w-md">
                            Click the button below to initiate a comprehensive network reconnaissance scan. This will discover active
                            hosts, gather device information, and identify open ports.
                        </CardDescription>
                        <Button onClick={startScan} className="bg-blue-500 hover:bg-blue-600 text-white px-8 py-2.5 rounded-md font-medium">
                            <Play className="h-4 w-4" />
                            Initiate Penetration Test
                        </Button>
                    </CardContent>
                </Card>
            </div>
        )
    }

    return (
        <div className="space-y-6 mt-4">
            {/* Combined Scan Progress & Summary Card */}
            {scanStage !== ("idle" as ScanStage) && (
                <Card className="bg-gray-50 dark:bg-gray-900 border">
                    <CardHeader className="p-0 px-6 pt-6 pb-4">
                        <div className="flex justify-between items-center">
                            <div className="flex items-center gap-3">
                                <CardTitle className="text-lg">Scan Progress</CardTitle>
                                <Badge variant={progress < 100 ? "default" : "secondary"}>{progress}%</Badge>
                            </div>

                            {scanStage === "completed" ? (
                                <div className="flex items-center gap-3">
                                    <Button onClick={startScan} className="bg-blue-500 hover:bg-blue-600 text-white py-0 px-2 h-8">
                                        <RefreshCw className="h-4 w-4" />
                                        Re-Discover Hosts
                                    </Button>
                                    <Button onClick={handleProceed} disabled={selectedCount === 0} className="bg-green-600 hover:bg-green-700 py-0 px-2 h-8 text-white">
                                        <Play className="w-4 h-4" />
                                        Proceed to Host Confirmation
                                    </Button>
                                </div>
                            ) : ""}
                        </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {/* Summary Widgets - Only show when completed */}
                        {scanStage === "completed" && (
                            <div className="grid grid-cols-3 gap-4 mb-4">
                                <div className=" border rounded-lg p-3">
                                    <div className="flex items-center gap-2">
                                        <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center">
                                            <Network className="h-4 w-4 text-blue-500" />
                                        </div>
                                        <div>
                                            <div className="text-xl font-bold text-foreground">{hostsFound}</div>
                                            <div className="text-xs text-muted-foreground">Network Hosts</div>
                                        </div>
                                    </div>
                                </div>

                                <div className=" border rounded-lg p-3">
                                    <div className="flex items-center gap-2">
                                        <div className="w-8 h-8 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center">
                                            <Activity className="h-4 w-4 text-green-500" />
                                        </div>
                                        <div>
                                            <div className="text-xl font-bold text-foreground">{getUniqueVendors()}</div>
                                            <div className="text-xs text-muted-foreground">Identified Vendors</div>
                                        </div>
                                    </div>
                                </div>

                                <div className=" border rounded-lg p-3">
                                    <div className="flex items-center gap-2">
                                        <div className="w-8 h-8 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center">
                                            <Globe className="h-4 w-4 text-orange-500" />
                                        </div>
                                        <div>
                                            <div className="text-xl font-bold text-foreground">{openPorts}</div>
                                            <div className="text-xs text-muted-foreground">Open Ports</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Progress Bar and Stats */}
                        <div className="">
                            <ProgressBar value={progress} className="w-full" />

                            <div className="flex items-center justify-between text-sm mt-3">
                                <div className="flex items-center gap-2">
                                    <span className="text-muted-foreground">Current Stage:</span>
                                    <span className="font-medium text-foreground">{currentStage}</span>
                                </div>
                                <div className="flex items-center gap-6">
                                    <div className="flex items-center gap-2">
                                        <span className="text-muted-foreground">Hosts Found:</span>
                                        <span className="font-medium text-foreground">{hostsFound}</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span className="text-muted-foreground">Active Hosts:</span>
                                        <span className="font-medium text-foreground">{activeHosts}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </CardContent>
                </Card>
            )}

            {/* Network Reconnaissance Results */}
            <Card className="bg-gray-50 dark:bg-gray-900 border">
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div className="flex items-center gap-2">
                            <Network className="h-6 w-6 text-green-500" />
                            <CardTitle className="text-xl">{`Discovered Hosts (${nmapEachServicePortResultsAll.length})`}</CardTitle>
                        </div>
                        <div className="flex items-center gap-2">
                            {scanStage === "completed" && (
                                <div className="text-sm ">
                                    [{selectedCount} of {hostData.length} hosts selected for enumeration]
                                </div>
                            )}
                            <Button size="sm" variant="outline" onClick={selectAllHosts} className="border  bg-transparent">
                                <CheckSquare className="w-4 h-4 mr-1" />
                                Select All
                            </Button>
                            <Button size="sm" variant="outline" onClick={deselectAllHosts} className="border  bg-transparent">
                                <Square className="w-4 h-4 mr-1" />
                                Deselect All
                            </Button>
                        </div>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="space-y-6">
                        <div className="space-y-4" ref={scrollRef} style={{ maxHeight: "600px", overflowY: "auto" }}>
                            {hostData.length === 0 && scanStage !== ("idle" as ScanStage) && (
                                <div className="flex items-center justify-center py-8">
                                    <Loader2 className="h-6 w-6 animate-spin text-blue-500 mr-2" />
                                    <span className="text-muted-foreground">Scanning network...</span>
                                </div>
                            )}

                            <Accordion type="multiple" className="w-full">
                                {hostData.map((host, index) => (
                                    <div className="flex items-center gap-3 mb-2" key={`host-accordion-${index}`}>
                                        <Checkbox checked={host.selected} onCheckedChange={() => toggleHostSelection(host.hostIp)} />

                                        <AccordionItem key={host.hostIp} value={host.hostIp} className="flex-1 border rounded-lg">
                                            <AccordionTrigger className="px-4 py-3 hover:no-underline">
                                                <div className="flex items-center justify-between w-full mr-4">
                                                    <div className="flex items-center gap-3">
                                                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                                        <span className="font-mono text-sm w-24 ">{host.hostIp}</span>
                                                        <Badge variant="default" className="text-xs w-32 text-white">
                                                            {host.mac}
                                                        </Badge>
                                                        {host.vendor && (
                                                            <Badge variant="default" className="text-xs">
                                                                {host.vendor}
                                                            </Badge>
                                                        )}
                                                    </div>
                                                    {host.os && (
                                                        <div className="flex items-center gap-3">
                                                            <Badge variant="default" className="text-xs">
                                                                {host.os}
                                                            </Badge>
                                                            {host.cpe && (
                                                                <Badge variant="default" className="text-xs w-40">
                                                                    {host.cpe}
                                                                </Badge>
                                                            )}
                                                        </div>
                                                    )}
                                                    {loadingHosts.includes(host.hostIp) && <Loader2 className="h-4 w-4 animate-spin text-blue-500" />}
                                                </div>
                                            </AccordionTrigger>
                                            <AccordionContent className="px-4 pb-4">
                                                {!host.ports ? (
                                                    <div className="text-sm text-muted-foreground">
                                                        {loadingHosts.includes(host.hostIp)
                                                            ? "Gathering port information..."
                                                            : (scanStage === "completed" ?
                                                                "Error fetching port information!" : "Scan in progress. More details will be available soon.")}
                                                    </div>
                                                ) : (
                                                    <div className="space-y-3">
                                                        {/* {host.os && (
                                                    <div className="flex items-center gap-2 text-sm">
                                                        <span className="text-muted-foreground">OS:</span>
                                                        <span className="font-medium">{host.os}</span>
                                                        {host.cpe && (
                                                            <Badge variant="neutral" className="text-xs">
                                                                {host.cpe}
                                                            </Badge>
                                                        )}
                                                    </div>
                                                )} */}

                                                        <div>
                                                            <h4 className="text-sm font-medium mb-2">Open Ports</h4>
                                                            <div className="border rounded-lg overflow-hidden">
                                                                <table className="w-full text-sm">
                                                                    <thead className="bg-gray-200 dark:bg-gray-800">
                                                                        <tr>
                                                                            <th className="px-3 py-2 text-left">Port</th>
                                                                            <th className="px-3 py-2 text-left">Protocol</th>
                                                                            <th className="px-3 py-2 text-left">Service</th>
                                                                            <th className="px-3 py-2 text-left">Version</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        {host.ports.map((port, portIndex) => (
                                                                            <tr key={portIndex} className="border-t">
                                                                                <td className="px-3 py-2 font-mono">{port.port}</td>
                                                                                <td className="px-3 py-2">{port.protocol}</td>
                                                                                <td className="px-3 py-2">{port.service}</td>
                                                                                <td className="px-3 py-2 text-muted-foreground">{port.version}</td>
                                                                            </tr>
                                                                        ))}
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                )}
                                            </AccordionContent>
                                        </AccordionItem>
                                    </div>
                                ))}
                            </Accordion>

                            {/* Loading skeletons for new hosts being processed */}
                            {loadingHosts
                                .filter((ip) => !hostData.find((h) => h.hostIp === ip))
                                .map((ip) => (
                                    <div key={ip} className="border rounded-lg p-4">
                                        <div className="flex items-center gap-3 mb-2">
                                            <Skeleton className="w-2 h-2 rounded-full" />
                                            <Skeleton className="h-4 w-24" />
                                            <Skeleton className="h-4 w-32" />
                                        </div>
                                        <Skeleton className="h-3 w-48" />
                                    </div>
                                ))}
                        </div>

                        {/* {scanStage === "completed" && (
                            <div className="text-sm text-gray-300">
                                {selectedCount} of {hostData.length} hosts selected for enumeration
                            </div>
                        )} */}
                    </div>
                </CardContent>
            </Card>
        </div>
    )
}