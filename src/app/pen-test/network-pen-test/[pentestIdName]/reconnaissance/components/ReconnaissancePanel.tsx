"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, Play, CheckSquare, Square, Network, Monitor } from "lucide-react"
import { ProgressBar } from "@/components/ui/progress"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"
import { Button } from "@/components/Button"



interface DiscoveredHost {
    ip: string
    mac: string
    osGuess: string
    openPorts: number
    selected: boolean
    status: string
}

interface ReconnaissancePanelProps {
    pentestIdName: string
}

export default function ReconnaissancePanel({ pentestIdName }: ReconnaissancePanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [targetRange, setTargetRange] = useState("192.168.0.0/16")
    const [selectedTool, setSelectedTool] = useState("")
    const [isScanning, setIsScanning] = useState(false)
    const [scanProgress, setScanProgress] = useState(0)
    const [discoveredHosts, setDiscoveredHosts] = useState<DiscoveredHost[]>([])
    const [showResults, setShowResults] = useState(false)
    const [isLoading, setIsLoading] = useState(false)

    const mockHosts: DiscoveredHost[] = [
        {
            ip: "192.168.1.1",
            mac: "00:1B:44:11:3A:B7",
            osGuess: "Linux 3.2 - 4.9",
            openPorts: 3,
            selected: true,
            status: "Active",
        },
        {
            ip: "192.168.1.10",
            mac: "00:50:56:C0:00:08",
            osGuess: "Windows Server 2019",
            openPorts: 8,
            selected: true,
            status: "Active",
        },
        {
            ip: "192.168.1.15",
            mac: "00:0C:29:52:52:50",
            osGuess: "Windows 10",
            openPorts: 5,
            selected: true,
            status: "Active",
        },
        {
            ip: "192.168.1.20",
            mac: "08:00:27:D4:2F:A8",
            osGuess: "Ubuntu Linux",
            openPorts: 2,
            selected: false,
            status: "Active",
        },
        {
            ip: "192.168.1.25",
            mac: "52:54:00:12:34:56",
            osGuess: "CentOS 7",
            openPorts: 4,
            selected: true,
            status: "Active",
        },
    ]

    const startReconnaissance = async () => {
        setIsScanning(true)
        setScanProgress(0)
        setShowResults(false)

        // Simulate scanning progress
        const interval = setInterval(() => {
            setScanProgress((prev) => {
                if (prev >= 100) {
                    clearInterval(interval)
                    setIsScanning(false)
                    setDiscoveredHosts(mockHosts)
                    setShowResults(true)
                    return 100
                }
                return prev + 10
            })
        }, 500)
    }

    const toggleHostSelection = (ip: string) => {
        setDiscoveredHosts((prev) => prev.map((host) => (host.ip === ip ? { ...host, selected: !host.selected } : host)))
    }

    const selectAllHosts = () => {
        setDiscoveredHosts((prev) => prev.map((host) => ({ ...host, selected: true })))
    }

    const deselectAllHosts = () => {
        setDiscoveredHosts((prev) => prev.map((host) => ({ ...host, selected: false })))
    }

    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/host-confirmation`);
    }

    const selectedCount = discoveredHosts.filter((host) => host.selected).length

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        <Card className=" border">
                            <CardHeader>
                                <CardTitle className=" flex items-center gap-2">
                                    <Search className="w-5 h-5 text-blue-500" />
                                    Network Reconnaissance
                                </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <Label htmlFor="target-range" className="">
                                            Target IP Range/Subnet
                                        </Label>
                                        <Input
                                            id="target-range"
                                            placeholder="192.168.0.0/16"
                                            value={targetRange}
                                            onChange={(e) => setTargetRange(e.target.value)}
                                            className=" border"
                                        />
                                    </div>
                                    <div>
                                        <Label className="">Reconnaissance Tool</Label>
                                        <Select value={selectedTool} onValueChange={setSelectedTool}>
                                            <SelectTrigger className=" border">
                                                <SelectValue placeholder="Select scanning tool" />
                                            </SelectTrigger>
                                            <SelectContent className=" border">
                                                <SelectItem value="nmap">Nmap (Comprehensive)</SelectItem>
                                                <SelectItem value="masscan">Masscan (Fast)</SelectItem>
                                                <SelectItem value="arp">ARP Scan (Local Network)</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>
                                </div>

                                <Button
                                    onClick={startReconnaissance}
                                    disabled={!selectedTool || !targetRange || isScanning}
                                    className="w-full "
                                >

                                    <Play className="w-4 h-4 mr-2" />
                                    {isScanning ? "Scanning..." : "Start Reconnaissance"}
                                </Button>

                                {isScanning && (
                                    <div className="space-y-2">
                                        <div className="flex justify-between text-sm ">
                                            <span>Scanning progress</span>
                                            <span>{scanProgress}%</span>
                                        </div>
                                        <ProgressBar value={scanProgress} className="w-full" />
                                    </div>
                                )}
                            </CardContent>
                        </Card>

                        {showResults && (
                            <Card className=" border">
                                <CardHeader>
                                    <div className="flex items-center justify-between">
                                        <CardTitle className=" flex items-center gap-2">
                                            <Network className="w-5 h-5 text-green-500" />
                                            Discovered Hosts ({discoveredHosts.length})
                                        </CardTitle>
                                        <div className="flex gap-2">
                                            <Button
                                                size="sm"
                                                variant="outline"
                                                onClick={selectAllHosts}
                                                className="border bg-transparent"
                                            >
                                                <CheckSquare className="w-4 h-4 mr-1" />
                                                Select All
                                            </Button>
                                            <Button
                                                size="sm"
                                                variant="outline"
                                                onClick={deselectAllHosts}
                                                className="border bg-transparent"
                                            >
                                                <Square className="w-4 h-4 mr-1" />
                                                Deselect All
                                            </Button>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent>
                                    <div className="rounded-md border ">
                                        <Table>
                                            <TableHeader>
                                                <TableRow className="border">
                                                    <TableHead className="">Select</TableHead>
                                                    <TableHead className="">IP Address</TableHead>
                                                    <TableHead className="">MAC Address</TableHead>
                                                    <TableHead className="">OS Guess</TableHead>
                                                    <TableHead className="">Open Ports</TableHead>
                                                    <TableHead className="">Status</TableHead>
                                                </TableRow>
                                            </TableHeader>
                                            <TableBody>
                                                {discoveredHosts.map((host) => (
                                                    <TableRow key={host.ip} className="border">
                                                        <TableCell>
                                                            <Checkbox checked={host.selected} onCheckedChange={() => toggleHostSelection(host.ip)} />
                                                        </TableCell>
                                                        <TableCell className="font-mono">{host.ip}</TableCell>
                                                        <TableCell className=" font-mono">{host.mac}</TableCell>
                                                        <TableCell className="">{host.osGuess}</TableCell>
                                                        <TableCell>
                                                            <Badge variant="secondary" className="bg-blue-600 ">
                                                                {host.openPorts} ports
                                                            </Badge>
                                                        </TableCell>
                                                        <TableCell>
                                                            <Badge variant="secondary" className="bg-green-600 ">
                                                                {host.status}
                                                            </Badge>
                                                        </TableCell>
                                                    </TableRow>
                                                ))}
                                            </TableBody>
                                        </Table>
                                    </div>

                                    <div className="flex items-center justify-between mt-4">
                                        <div className="text-sm ">
                                            {selectedCount} of {discoveredHosts.length} hosts selected for enumeration
                                        </div>
                                        <Button onClick={handleProceed} disabled={selectedCount === 0} className="bg-green-600 hover:bg-green-700">
                                            <Monitor className="w-4 h-4 mr-2" />
                                            Proceed to Host Confirmation
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>
                        )}
                    </div>
            }
        </>
    )
}
