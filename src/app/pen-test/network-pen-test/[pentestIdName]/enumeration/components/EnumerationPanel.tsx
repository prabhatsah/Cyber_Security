"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { ProgressBar } from "@/components/ui/progress"
import {
    List,
    Server,
    Database,
    Shield,
    Network,
    Eye,
    Play,
    CheckCircle,
    ArrowRight,
    Terminal,
    Users,
    HardDrive,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface ConfirmedHost {
    ip: string
    hostname: string
    osDetected: string
    openPorts: string[]
    role: string
    enabled: boolean
    services: string[]
    enumerated: boolean
}

interface EnumerationPanelProps {
    pentestIdName: string
}

export function EnumerationPanel({ pentestIdName }: EnumerationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [hosts, setHosts] = useState<ConfirmedHost[]>([
        {
            ip: "192.168.1.1",
            hostname: "gateway.local",
            osDetected: "Linux 3.2 - 4.9",
            openPorts: ["22", "80", "443"],
            role: "Unknown",
            enabled: true,
            services: ["SSH", "HTTP", "HTTPS"],
            enumerated: false,
        },
        {
            ip: "192.168.1.10",
            hostname: "dc01.domain.local",
            osDetected: "Windows Server 2019",
            openPorts: ["53", "88", "135", "389", "445", "3389"],
            role: "Unknown",
            enabled: true,
            services: ["DNS", "Kerberos", "RPC", "LDAP", "SMB", "RDP"],
            enumerated: false,
        },
        {
            ip: "192.168.1.15",
            hostname: "workstation-01",
            osDetected: "Windows 10 Pro",
            openPorts: ["135", "445", "3389"],
            role: "Unknown",
            enabled: true,
            services: ["RPC", "SMB", "RDP"],
            enumerated: false,
        },
        {
            ip: "192.168.1.25",
            hostname: "db-server",
            osDetected: "CentOS 7",
            openPorts: ["22", "3306", "80"],
            role: "Unknown",
            enabled: true,
            services: ["SSH", "MySQL", "HTTP"],
            enumerated: false,
        },
    ])

    const [selectedTools, setSelectedTools] = useState<string[]>([])
    const [isEnumerating, setIsEnumerating] = useState(false)
    const [enumerationProgress, setEnumerationProgress] = useState(0)
    const [selectedHost, setSelectedHost] = useState<string | null>(null)
    const [isLoading, setIsLoading] = useState(false)

    const tools = [
        { id: "enum4linux", name: "Enum4linux", description: "SMB/NetBIOS enumeration" },
        { id: "smbclient", name: "SMBclient", description: "SMB share enumeration" },
        { id: "ldapsearch", name: "LDAPsearch", description: "LDAP directory enumeration" },
        { id: "snmpwalk", name: "SNMPwalk", description: "SNMP information gathering" },
    ]

    const roleOptions = [
        "Unknown",
        "Domain Controller",
        "Database Server",
        "Web Server",
        "File Server",
        "Workstation",
        "Gateway/Router",
        "Print Server",
    ]

    const toggleHostEnabled = (ip: string) => {
        setHosts((prev) => prev.map((host) => (host.ip === ip ? { ...host, enabled: !host.enabled } : host)))
    }

    const updateHostRole = (ip: string, role: string) => {
        setHosts((prev) => prev.map((host) => (host.ip === ip ? { ...host, role } : host)))
    }

    const toggleTool = (toolId: string) => {
        setSelectedTools((prev) => (prev.includes(toolId) ? prev.filter((id) => id !== toolId) : [...prev, toolId]))
    }

    const startEnumeration = async () => {
        setIsEnumerating(true)
        setEnumerationProgress(0)

        // Simulate enumeration progress
        const interval = setInterval(() => {
            setEnumerationProgress((prev) => {
                if (prev >= 100) {
                    clearInterval(interval)
                    setIsEnumerating(false)
                    // Mark all enabled hosts as enumerated
                    setHosts((prev) => prev.map((host) => (host.enabled ? { ...host, enumerated: true } : host)))
                    return 100
                }
                return prev + 5
            })
        }, 400)
    }

    const getServiceIcon = (service: string) => {
        switch (service.toLowerCase()) {
            case "ssh":
                return <Terminal className="w-3 h-3" />
            case "rdp":
                return <Network className="w-3 h-3" />
            case "smb":
                return <HardDrive className="w-3 h-3" />
            case "ldap":
                return <Users className="w-3 h-3" />
            case "mysql":
            case "mssql":
                return <Database className="w-3 h-3" />
            default:
                return <Shield className="w-3 h-3" />
        }
    }

    const getRoleIcon = (role: string) => {
        switch (role) {
            case "Domain Controller":
                return <Users className="w-4 h-4 text-purple-500" />
            case "Database Server":
                return <Database className="w-4 h-4 text-blue-500" />
            case "Web Server":
                return <Server className="w-4 h-4 text-green-500" />
            case "File Server":
                return <HardDrive className="w-4 h-4 text-orange-500" />
            default:
                return <Server className="w-4 h-4 text-gray-500" />
        }
    }

    const enabledHosts = hosts.filter((host) => host.enabled)
    const enumeratedHosts = hosts.filter((host) => host.enumerated)

    const mockEnumerationLog = `
[2024-01-15 11:15:01] Starting enumeration on ${selectedHost}
[2024-01-15 11:15:02] Running enum4linux against target...
[2024-01-15 11:15:03] Attempting to get domain SID...
[2024-01-15 11:15:04] Domain Name: DOMAIN
[2024-01-15 11:15:05] Domain SID: S-1-5-21-1234567890-1234567890-1234567890
[2024-01-15 11:15:06] Enumerating users via RID cycling...
[2024-01-15 11:15:07] Found user: Administrator (RID: 500)
[2024-01-15 11:15:08] Found user: Guest (RID: 501)
[2024-01-15 11:15:09] Found user: krbtgt (RID: 502)
[2024-01-15 11:15:10] Found user: john.doe (RID: 1001)
[2024-01-15 11:15:11] Found user: jane.smith (RID: 1002)
[2024-01-15 11:15:12] Enumerating groups...
[2024-01-15 11:15:13] Found group: Domain Admins (RID: 512)
[2024-01-15 11:15:14] Found group: Domain Users (RID: 513)
[2024-01-15 11:15:15] SMB share enumeration complete
[2024-01-15 11:15:16] Found shares: ADMIN$, C$, IPC$, SYSVOL, NETLOGON
[2024-01-15 11:15:17] Enumeration completed successfully
  `.trim()



    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/vulnerability-assessment`);
    }

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        {/* Confirmed Hosts Panel */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <List className="w-5 h-5 text-blue-500" />
                                    Confirmed Hosts for Enumeration
                                </CardTitle>
                                <p className="text-gray-400 text-sm">
                                    The following hosts will be scanned for services and detailed information
                                </p>
                            </CardHeader>
                            <CardContent>
                                <div className="rounded-md border border-gray-800">
                                    <Table>
                                        <TableHeader>
                                            <TableRow className="border-gray-800">
                                                <TableHead className="text-gray-300">Enable</TableHead>
                                                <TableHead className="text-gray-300">IP Address</TableHead>
                                                <TableHead className="text-gray-300">Hostname</TableHead>
                                                <TableHead className="text-gray-300">OS Detected</TableHead>
                                                <TableHead className="text-gray-300">Open Ports</TableHead>
                                                <TableHead className="text-gray-300">Role</TableHead>
                                                <TableHead className="text-gray-300">Status</TableHead>
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            {hosts.map((host) => (
                                                <TableRow key={host.ip} className="border-gray-800">
                                                    <TableCell>
                                                        <Checkbox checked={host.enabled} onCheckedChange={() => toggleHostEnabled(host.ip)} />
                                                    </TableCell>
                                                    <TableCell className="text-white font-mono">{host.ip}</TableCell>
                                                    <TableCell className="text-gray-300">{host.hostname}</TableCell>
                                                    <TableCell className="text-gray-300">{host.osDetected}</TableCell>
                                                    <TableCell>
                                                        <div className="flex flex-wrap gap-1">
                                                            {host.openPorts.slice(0, 4).map((port) => (
                                                                <Badge key={port} variant="outline" className="text-xs border-gray-700 text-gray-300">
                                                                    {port}
                                                                </Badge>
                                                            ))}
                                                            {host.openPorts.length > 4 && (
                                                                <Badge variant="outline" className="text-xs border-gray-700 text-gray-300">
                                                                    +{host.openPorts.length - 4}
                                                                </Badge>
                                                            )}
                                                        </div>
                                                    </TableCell>
                                                    <TableCell>
                                                        <Select value={host.role} onValueChange={(value) => updateHostRole(host.ip, value)}>
                                                            <SelectTrigger className="w-40 bg-gray-800 border-gray-700 text-white">
                                                                <SelectValue />
                                                            </SelectTrigger>
                                                            <SelectContent className="bg-gray-800 border-gray-700">
                                                                {roleOptions.map((role) => (
                                                                    <SelectItem key={role} value={role}>
                                                                        <div className="flex items-center gap-2">
                                                                            {getRoleIcon(role)}
                                                                            {role}
                                                                        </div>
                                                                    </SelectItem>
                                                                ))}
                                                            </SelectContent>
                                                        </Select>
                                                    </TableCell>
                                                    <TableCell>
                                                        {host.enumerated ? (
                                                            <Badge className="bg-green-600 text-white">
                                                                <CheckCircle className="w-3 h-3 mr-1" />
                                                                Complete
                                                            </Badge>
                                                        ) : host.enabled ? (
                                                            <Badge variant="secondary" className="bg-blue-600 text-white">
                                                                Ready
                                                            </Badge>
                                                        ) : (
                                                            <Badge variant="secondary" className="bg-gray-600 text-white">
                                                                Disabled
                                                            </Badge>
                                                        )}
                                                    </TableCell>
                                                </TableRow>
                                            ))}
                                        </TableBody>
                                    </Table>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Enumeration Tool Panel */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <CardTitle className="text-white flex items-center gap-2">
                                    <Shield className="w-5 h-5 text-purple-500" />
                                    Enumeration Tools
                                </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div>
                                    <p className="text-gray-300 text-sm mb-3">Select enumeration tools to run:</p>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                        {tools.map((tool) => (
                                            <div
                                                key={tool.id}
                                                className={`p-3 rounded-lg border cursor-pointer transition-colors ${selectedTools.includes(tool.id)
                                                    ? "border-blue-500 bg-blue-600/20"
                                                    : "border-gray-700 bg-gray-800 hover:border-gray-600"
                                                    }`}
                                                onClick={() => toggleTool(tool.id)}
                                            >
                                                <div className="flex items-center gap-2">
                                                    <Checkbox checked={selectedTools.includes(tool.id)} aria-readonly />
                                                    <div>
                                                        <div className="text-white font-medium">{tool.name}</div>
                                                        <div className="text-gray-400 text-sm">{tool.description}</div>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                <div className="flex items-center gap-4">
                                    <Select defaultValue="batch">
                                        <SelectTrigger className="w-48 bg-gray-800 border-gray-700 text-white">
                                            <SelectValue />
                                        </SelectTrigger>
                                        <SelectContent className="bg-gray-800 border-gray-700">
                                            <SelectItem value="batch">Run on all hosts</SelectItem>
                                            <SelectItem value="individual">Run per host</SelectItem>
                                        </SelectContent>
                                    </Select>

                                    <Button
                                        onClick={startEnumeration}
                                        disabled={selectedTools.length === 0 || enabledHosts.length === 0 || isEnumerating}
                                        className="bg-blue-600 hover:bg-blue-700"
                                    >
                                        <Play className="w-4 h-4 mr-2" />
                                        {isEnumerating ? "Running Enumeration..." : "Run Enumeration"}
                                    </Button>
                                </div>

                                {isEnumerating && (
                                    <div className="space-y-2">
                                        <div className="flex justify-between text-sm text-gray-300">
                                            <span>Enumeration progress</span>
                                            <span>{enumerationProgress}%</span>
                                        </div>
                                        <ProgressBar value={enumerationProgress} className="w-full" />
                                    </div>
                                )}
                            </CardContent>
                        </Card>

                        {/* Service Enumeration Summary */}
                        {
                            (enumeratedHosts.length !== enabledHosts.length || enabledHosts.length === 0) ? "" :
                                <Card className="bg-gray-900 border-gray-800">
                                    <CardHeader>
                                        <CardTitle className="text-white flex items-center gap-2">
                                            <Server className="w-5 h-5 text-green-500" />
                                            Service Enumeration Summary
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                            {enabledHosts.map((host) => (
                                                <Card key={host.ip} className="bg-gray-800 border-gray-700">
                                                    <CardHeader className="pb-3">
                                                        <div className="flex items-center justify-between">
                                                            <div className="flex items-center gap-2">
                                                                {getRoleIcon(host.role)}
                                                                <div>
                                                                    <div className="text-white font-medium">{host.ip}</div>
                                                                    <div className="text-gray-400 text-sm">{host.hostname}</div>
                                                                </div>
                                                            </div>
                                                            {host.enumerated && (
                                                                <Badge className="bg-green-600 text-white">
                                                                    <CheckCircle className="w-3 h-3 mr-1" />
                                                                    Done
                                                                </Badge>
                                                            )}
                                                        </div>
                                                    </CardHeader>
                                                    <CardContent className="space-y-3">
                                                        <div>
                                                            <p className="text-sm text-gray-400 mb-2">Detected Services:</p>
                                                            <div className="flex flex-wrap gap-1">
                                                                {host.services.map((service) => (
                                                                    <Badge key={service} variant="outline" className="text-xs border-gray-600 text-gray-300">
                                                                        {getServiceIcon(service)}
                                                                        <span className="ml-1">{service}</span>
                                                                    </Badge>
                                                                ))}
                                                            </div>
                                                        </div>

                                                        <div>
                                                            <p className="text-sm text-gray-400 mb-2">OS Fingerprint:</p>
                                                            <Badge variant="secondary" className="bg-blue-600 text-white">
                                                                {host.osDetected}
                                                            </Badge>
                                                        </div>

                                                        <Dialog>
                                                            <DialogTrigger asChild>
                                                                <Button
                                                                    size="sm"
                                                                    variant="outline"
                                                                    className="w-full border-gray-700 text-gray-300 bg-transparent"
                                                                    onClick={() => setSelectedHost(host.ip)}
                                                                >
                                                                    <Eye className="w-4 h-4 mr-2" />
                                                                    View Enumeration Log
                                                                </Button>
                                                            </DialogTrigger>
                                                            <DialogContent className="bg-gray-900 border-gray-800 max-w-4xl">
                                                                <DialogHeader>
                                                                    <DialogTitle className="text-white">Enumeration Log: {host.ip}</DialogTitle>
                                                                </DialogHeader>
                                                                <ScrollArea className="h-96 w-full rounded border border-gray-800 bg-black p-4">
                                                                    <div className="font-mono text-sm text-green-400 whitespace-pre-line">{mockEnumerationLog}</div>
                                                                </ScrollArea>
                                                            </DialogContent>
                                                        </Dialog>
                                                    </CardContent>
                                                </Card>
                                            ))}
                                        </div>

                                        <div className="flex items-center justify-between pt-4 border-t border-gray-800">
                                            <div className="text-sm text-gray-300">
                                                {enumeratedHosts.length} of {enabledHosts.length} hosts enumerated
                                            </div>
                                            <Button
                                                onClick={handleProceed}
                                                disabled={enumeratedHosts.length !== enabledHosts.length || enabledHosts.length === 0}
                                                className="bg-green-600 hover:bg-green-700"
                                            >
                                                <ArrowRight className="w-4 h-4 mr-2" />
                                                Proceed to Vulnerability Assessment
                                            </Button>
                                        </div>
                                    </CardContent>
                                </Card>
                        }
                    </div>}
        </>
    )
}
