"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/Badge"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Checkbox } from "@/components/ui/checkbox"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
    List,
    Server,
    Database,
    Shield,
    Network,
    Terminal,
    Users,
    HardDrive,
    CheckSquare,
    Square,
    RefreshCw,
    Globe,
    Lock,
    Monitor,
    Activity,
    Play,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"
import {
    adServerWithCredResp,
    adServerWithoutCredResp23,
    adServerWithoutCredResp35,
    adServerWithoutCredResp169,
    nonAdServerResp,
    parseEnum4LinuxGeneric,
} from "./EnumerationDummyData"
import { Enum4LinuxADResult, Enum4LinuxGenericResult } from "@/app/NetworkPentestType"

interface ConfirmedHost {
    ip: string
    hostname: string
    osDetected: string
    openPorts: string[]
    role: string
    enabled: boolean
    services: string[]
    enumerated: boolean
}

interface EnumerationPanelProps {
    pentestIdName: string
}

interface HostData {
    hostIp: string
    macAddress: string
    vendor?: string
    os?: string
    cpe?: string
    selected: boolean
    ports: Array<{
        port: number
        protocol: string
        service: string
        version: string
    }>
    enumData?: Enum4LinuxGenericResult | Enum4LinuxADResult;
}

export function EnumerationPanel({ pentestIdName }: EnumerationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_")
    const router = useRouter()
    const pathname = usePathname()

    const [hosts, setHosts] = useState<ConfirmedHost[]>([
        {
            ip: "192.168.1.1",
            hostname: "gateway.local",
            osDetected: "Linux 3.2 - 4.9",
            openPorts: ["22", "80", "443"],
            role: "Unknown",
            enabled: true,
            services: ["SSH", "HTTP", "HTTPS"],
            enumerated: false,
        },
        {
            ip: "192.168.1.10",
            hostname: "dc01.domain.local",
            osDetected: "Windows Server 2019",
            openPorts: ["53", "88", "135", "389", "445", "3389"],
            role: "Unknown",
            enabled: true,
            services: ["DNS", "Kerberos", "RPC", "LDAP", "SMB", "RDP"],
            enumerated: false,
        },
        {
            ip: "192.168.1.15",
            hostname: "workstation-01",
            osDetected: "Windows 10 Pro",
            openPorts: ["135", "445", "3389"],
            role: "Unknown",
            enabled: true,
            services: ["RPC", "SMB", "RDP"],
            enumerated: false,
        },
        {
            ip: "192.168.1.25",
            hostname: "db-server",
            osDetected: "CentOS 7",
            openPorts: ["22", "3306", "80"],
            role: "Unknown",
            enabled: true,
            services: ["SSH", "MySQL", "HTTP"],
            enumerated: false,
        },
    ])

    const [selectedTools, setSelectedTools] = useState<string[]>([])
    const [isEnumerating, setIsEnumerating] = useState(false)
    const [enumerationProgress, setEnumerationProgress] = useState(0)
    const [selectedHost, setSelectedHost] = useState<string | null>(null)
    const [isLoading, setIsLoading] = useState(false)

    const [hostData, setHostData] = useState<HostData[]>([
        {
            hostIp: "192.168.3.100",
            macAddress: "8C:EC:4B:AE:EB:7F",
            vendor: "Dell Inc.",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            selected: true,
            ports: [
                { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH 8.4" },
                { port: 80, protocol: "tcp", service: "http", version: "Apache httpd 2.4.46" },
                { port: 389, protocol: "tcp", service: "ldap", version: "Microsoft Windows Active Directory LDAP" },
                { port: 445, protocol: "tcp", service: "microsoft-ds", version: "Windows SMB" },
            ],
        },
        {
            hostIp: "192.168.3.169",
            macAddress: "F0:2F:74:46:74:64",
            vendor: "Dell Inc.",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            selected: true,
            ports: [
                { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH 8.4" },
                { port: 80, protocol: "tcp", service: "http", version: "Apache httpd 2.4.46" },
                { port: 445, protocol: "tcp", service: "microsoft-ds", version: "Windows SMB" },
                { port: 139, protocol: "tcp", service: "netbios-ssn", version: "Microsoft Windows netbios-ssn" },
            ],
        },
        {
            hostIp: "192.168.3.35",
            macAddress: "AB:2D:84:46:74:17",
            vendor: "Intel Corporate",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            selected: true,
            ports: [
                { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH 8.4" },
                { port: 80, protocol: "tcp", service: "http", version: "Apache httpd 2.4.46" },
                { port: 445, protocol: "tcp", service: "microsoft-ds", version: "Windows SMB" },
            ],
        },
        {
            hostIp: "192.168.3.23",
            macAddress: "CD:2W:65:46:74:07",
            vendor: "Intel Corporate",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            selected: true,
            ports: [
                { port: 80, protocol: "tcp", service: "http", version: "Apache httpd 2.4.46" },
                { port: 139, protocol: "tcp", service: "netbios-ssn", version: "Microsoft Windows netbios-ssn" },
            ],
        },
        {
            hostIp: "192.168.3.167",
            macAddress: "58:11:22:E7:90:07",
            vendor: "Dell Inc.",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            selected: true,
            ports: [
                { port: 22, protocol: "tcp", service: "ssh", version: "OpenSSH 8.4" },
                { port: 80, protocol: "tcp", service: "http", version: "Apache httpd 2.4.46" },
            ],
        },
    ])

    const tools = [
        { id: "enum4linux", name: "Enum4linux", description: "SMB/NetBIOS enumeration" },
        { id: "smbclient", name: "SMBclient", description: "SMB share enumeration" },
        { id: "ldapsearch", name: "LDAPsearch", description: "LDAP directory enumeration" },
        { id: "snmpwalk", name: "SNMPwalk", description: "SNMP information gathering" },
    ]

    const roleOptions = [
        "Unknown",
        "Domain Controller",
        "Database Server",
        "Web Server",
        "File Server",
        "Workstation",
        "Gateway/Router",
        "Print Server",
    ]

    const toggleHostEnabled = (ip: string) => {
        setHosts((prev) => prev.map((host) => (host.ip === ip ? { ...host, enabled: !host.enabled } : host)))
    }

    const updateHostRole = (ip: string, role: string) => {
        setHosts((prev) => prev.map((host) => (host.ip === ip ? { ...host, role } : host)))
    }

    const toggleTool = (toolId: string) => {
        setSelectedTools((prev) => (prev.includes(toolId) ? prev.filter((id) => id !== toolId) : [...prev, toolId]))
    }

    const startEnumeration = async () => {
        setIsEnumerating(true)
        setEnumerationProgress(0)

        // Simulate enumeration progress
        const interval = setInterval(() => {
            setEnumerationProgress((prev) => {
                if (prev >= 100) {
                    clearInterval(interval)
                    setIsEnumerating(false)
                    // Mark all enabled hosts as enumerated
                    setHosts((prev) => prev.map((host) => (host.enabled ? { ...host, enumerated: true } : host)))
                    return 100
                }
                return prev + 5
            })
        }, 400)
    }

    const getServiceIcon = (service: string) => {
        switch (service.toLowerCase()) {
            case "ssh":
                return <Terminal className="w-3 h-3" />
            case "rdp":
                return <Network className="w-3 h-3" />
            case "smb":
                return <HardDrive className="w-3 h-3" />
            case "ldap":
                return <Users className="w-3 h-3" />
            case "mysql":
            case "mssql":
                return <Database className="w-3 h-3" />
            default:
                return <Shield className="w-3 h-3" />
        }
    }

    const getRoleIcon = (role: string) => {
        switch (role) {
            case "Domain Controller":
                return <Users className="w-4 h-4 text-purple-500" />
            case "Database Server":
                return <Database className="w-4 h-4 text-blue-500" />
            case "Web Server":
                return <Server className="w-4 h-4 text-green-500" />
            case "File Server":
                return <HardDrive className="w-4 h-4 text-orange-500" />
            default:
                return <Server className="w-4 h-4 text-gray-500" />
        }
    }

    const enabledHosts = hosts.filter((host) => host.enabled)
    const enumeratedHosts = hosts.filter((host) => host.enumerated)

    const mockEnumerationLog = `
[2024-01-15 11:15:01] Starting enumeration on ${selectedHost}
[2024-01-15 11:15:02] Running enum4linux against target...
[2024-01-15 11:15:03] Attempting to get domain SID...
[2024-01-15 11:15:04] Domain Name: DOMAIN
[2024-01-15 11:15:05] Domain SID: S-1-5-21-1234567890-1234567890-1234567890
[2024-01-15 11:15:06] Enumerating users via RID cycling...
[2024-01-15 11:15:07] Found user: Administrator (RID: 500)
[2024-01-15 11:15:08] Found user: Guest (RID: 501)
[2024-01-15 11:15:09] Found user: krbtgt (RID: 502)
[2024-01-15 11:15:10] Found user: john.doe (RID: 1001)
[2024-01-15 11:15:11] Found user: jane.smith (RID: 1002)
[2024-01-15 11:15:12] Enumerating groups...
[2024-01-15 11:15:13] Found group: Domain Admins (RID: 512)
[2024-01-15 11:15:14] Found group: Domain Users (RID: 513)
[2024-01-15 11:15:15] SMB share enumeration complete
[2024-01-15 11:15:16] Found shares: ADMIN$, C$, IPC$, SYSVOL, NETLOGON
[2024-01-15 11:15:17] Enumeration completed successfully
  `.trim()

    useEffect(() => { }, [])

    const toggleHostSelection = (ip: string) => {
        setHostData((prev) => prev.map((host) => (host.hostIp === ip ? { ...host, selected: !host.selected } : host)))
    }

    const selectAllHosts = () => {
        setHostData((prev) => prev.map((host) => ({ ...host, selected: true })))
    }

    const deselectAllHosts = () => {
        setHostData((prev) => prev.map((host) => ({ ...host, selected: false })))
    }

    const handleProceed = () => {
        setIsLoading(true)
        router.push(`/pen-test/network-pen-test/${pentestIdName}/vulnerability-assessment`)
    }

    const [hasEnumerated, setHasEnumerated] = useState(false)
    const [isStartingEnumeration, setIsStartingEnumeration] = useState(false) // Added state for 1-second loader

    const startScan = async () => {
        setIsStartingEnumeration(true);

        await new Promise((resolve) => setTimeout(resolve, 2000));

        const respForAdWithCred = parseEnum4LinuxGeneric(adServerWithCredResp)
        const respForAdWithoutCred169 = parseEnum4LinuxGeneric(adServerWithoutCredResp169)
        const respForAdWithoutCred35 = parseEnum4LinuxGeneric(adServerWithoutCredResp35)
        const respForAdWithoutCred23 = parseEnum4LinuxGeneric(adServerWithoutCredResp23)
        const respForNonAd = parseEnum4LinuxGeneric(nonAdServerResp)

        setHostData((prevHostData) => {
            const updatedData = prevHostData.map((eachHostData) => {
                if (eachHostData.hostIp === respForAdWithCred.target) {
                    return { ...eachHostData, enumData: respForAdWithCred }
                }
                if (eachHostData.hostIp === respForAdWithoutCred169.target) {
                    return { ...eachHostData, enumData: respForAdWithoutCred169 }
                }
                if (eachHostData.hostIp === respForAdWithoutCred35.target) {
                    return { ...eachHostData, enumData: respForAdWithoutCred35 }
                }
                if (eachHostData.hostIp === respForAdWithoutCred23.target) {
                    return { ...eachHostData, enumData: respForAdWithoutCred23 }
                }
                if (eachHostData.hostIp === respForNonAd.target) {
                    return { ...eachHostData, enumData: respForNonAd }
                }
                return eachHostData
            })

            console.log("New Host Data: ", updatedData)

            return updatedData
        });

        setIsStartingEnumeration(false);
        setHasEnumerated(true);
    }

    const hasActiveDirectoryServices = (host: HostData) => {
        return host.enumData?.services.ldap || host.enumData?.services.ldaps
    }

    return (
        <>
            {isLoading ? (
                <GlobalLoader />
            ) : (
                <div className="space-y-6">
                    {/* Confirmed Hosts Panel */}
                    <Card className="">
                        <CardHeader>
                            <div className="flex justify-between items-end">
                                <div className="flex flex-col gap-1">
                                    <CardTitle className="flex items-center gap-2">
                                        <List className="w-5 h-5 text-blue-500" />
                                        Confirmed Hosts for Enumeration
                                    </CardTitle>
                                    <p className="text-sm">The following hosts will be scanned for services and detailed information</p>
                                </div>

                                <div className="flex gap-2">
                                    <Button size="sm" variant="outline" onClick={selectAllHosts} className="border  bg-transparent">
                                        <CheckSquare className="w-4 h-4 mr-1" />
                                        Select All
                                    </Button>
                                    <Button size="sm" variant="outline" onClick={deselectAllHosts} className="border  bg-transparent">
                                        <Square className="w-4 h-4 mr-1" />
                                        Deselect All
                                    </Button>
                                    <Button
                                        onClick={startScan}
                                        className="bg-blue-500 hover:bg-blue-600 text-white py-0 px-2 h-8"
                                        disabled={isStartingEnumeration} // Disable button during loading
                                    >
                                        {hasEnumerated ? (
                                            <RefreshCw className="h-4 w-4" />
                                        ) : (
                                            <Play className="h-4 w-4" />
                                        )}
                                        {hasEnumerated ? "Re-initiate Enumeration" : "Initiate Enumeration"}
                                    </Button>
                                </div>
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-6">
                                <div className="space-y-4" style={{ maxHeight: "30rem", overflowY: "auto" }}>
                                    <Accordion type="multiple" className="w-full">
                                        {hostData.map((host, index) => (
                                            <div className="flex gap-3 mb-2" key={`host-accordion-${index}`}>
                                                <div className="pt-2">
                                                    <Checkbox checked={host.selected} onCheckedChange={() => toggleHostSelection(host.hostIp)} />
                                                </div>

                                                <AccordionItem key={host.hostIp} value={host.hostIp} className="flex-1 border rounded-lg">
                                                    <AccordionTrigger className="px-4 py-3 hover:no-underline">
                                                        <div className="flex items-center justify-between w-full mr-4">
                                                            <div className="flex items-center gap-3">
                                                                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                                                <span className="font-mono text-sm w-24">{host.hostIp}</span>
                                                                <Badge variant="default" className="text-xs w-32 text-white">
                                                                    {host.macAddress}
                                                                </Badge>
                                                                {host.vendor && (
                                                                    <Badge variant="default" className="text-xs">
                                                                        {host.vendor}
                                                                    </Badge>
                                                                )}
                                                                {hasEnumerated && hasActiveDirectoryServices(host) && (
                                                                    <Badge variant="error" className="text-xs">
                                                                        Domain Controller
                                                                    </Badge>
                                                                )}
                                                                {hasEnumerated && !hasActiveDirectoryServices(host) &&
                                                                    !(host.enumData?.workgroupOrDomain.includes("WORK") || host.enumData?.workgroupOrDomain.includes("WORKGROUP")) && (
                                                                        <Badge variant="warning" className="text-xs">
                                                                            Domain Member
                                                                        </Badge>
                                                                    )}
                                                            </div>
                                                            {host.os && (
                                                                <div className="flex items-center gap-3">
                                                                    <Badge variant="default" className="text-xs">
                                                                        {host.os}
                                                                    </Badge>
                                                                </div>
                                                            )}
                                                        </div>
                                                    </AccordionTrigger>
                                                    <AccordionContent className="px-4 pb-4">
                                                        <Tabs defaultValue="ports" className="w-full">
                                                            <TabsList className="grid w-full grid-cols-4">
                                                                <TabsTrigger value="ports" className="text-xs">
                                                                    <Network className="w-3 h-3 mr-1" />
                                                                    Ports
                                                                </TabsTrigger>
                                                                <TabsTrigger
                                                                    value="services"
                                                                    className="text-xs"
                                                                    disabled={!hasEnumerated || !host.enumData}
                                                                >
                                                                    <Activity className="w-3 h-3 mr-1" />
                                                                    Services
                                                                </TabsTrigger>
                                                                <TabsTrigger
                                                                    value="netbios"
                                                                    className="text-xs"
                                                                    disabled={!hasEnumerated || !host.enumData}
                                                                >
                                                                    <Globe className="w-3 h-3 mr-1" />
                                                                    NetBIOS
                                                                </TabsTrigger>
                                                                <TabsTrigger
                                                                    value="system"
                                                                    className="text-xs"
                                                                    disabled={!hasEnumerated || !host.enumData}
                                                                >
                                                                    <Monitor className="w-3 h-3 mr-1" />
                                                                    System
                                                                </TabsTrigger>
                                                            </TabsList>

                                                            <TabsContent value="ports" className="mt-3">
                                                                <div className="border rounded-lg overflow-hidden">
                                                                    <table className="w-full text-xs">
                                                                        <thead className="bg-muted">
                                                                            <tr>
                                                                                <th className="px-2 py-1 text-left">Port</th>
                                                                                <th className="px-2 py-1 text-left">Protocol</th>
                                                                                <th className="px-2 py-1 text-left">Service</th>
                                                                                <th className="px-2 py-1 text-left">Version</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody>
                                                                            {host.ports.map((port, portIndex) => (
                                                                                <tr key={portIndex} className="border-t">
                                                                                    <td className="px-2 py-1 font-mono">{port.port}</td>
                                                                                    <td className="px-2 py-1">
                                                                                        <Badge variant="neutral" className="text-xs">
                                                                                            {port.protocol}
                                                                                        </Badge>
                                                                                    </td>
                                                                                    <td className="px-2 py-1">{port.service}</td>
                                                                                    <td className="px-2 py-1 text-muted-foreground">{port.version}</td>
                                                                                </tr>
                                                                            ))}
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                            </TabsContent>

                                                            {host.enumData && hasEnumerated && (
                                                                <>
                                                                    <TabsContent value="services" className="mt-3">
                                                                        <div className="space-y-3">
                                                                            <div className="grid grid-cols-2 gap-2">
                                                                                <div className="flex items-center gap-2 p-2 border rounded">
                                                                                    <Users className="w-4 h-4" />
                                                                                    <span className="text-xs">LDAP</span>
                                                                                    <Badge
                                                                                        variant={host.enumData.services.ldap ? "default" : "neutral"}
                                                                                        className="text-xs ml-auto"
                                                                                    >
                                                                                        {host.enumData.services.ldap ? "Active" : "Inactive"}
                                                                                    </Badge>
                                                                                </div>
                                                                                <div className="flex items-center gap-2 p-2 border rounded">
                                                                                    <Lock className="w-4 h-4" />
                                                                                    <span className="text-xs">LDAPS</span>
                                                                                    <Badge
                                                                                        variant={host.enumData.services.ldaps ? "default" : "neutral"}
                                                                                        className="text-xs ml-auto"
                                                                                    >
                                                                                        {host.enumData.services.ldaps ? "Active" : "Inactive"}
                                                                                    </Badge>
                                                                                </div>
                                                                                <div className="flex items-center gap-2 p-2 border rounded">
                                                                                    <HardDrive className="w-4 h-4" />
                                                                                    <span className="text-xs">SMB 445</span>
                                                                                    <Badge
                                                                                        variant={host.enumData.services.smb445 ? "default" : "neutral"}
                                                                                        className="text-xs ml-auto"
                                                                                    >
                                                                                        {host.enumData.services.smb445 ? "Active" : "Inactive"}
                                                                                    </Badge>
                                                                                </div>
                                                                                <div className="flex items-center gap-2 p-2 border rounded">
                                                                                    <Network className="w-4 h-4" />
                                                                                    <span className="text-xs">SMB 139</span>
                                                                                    <Badge
                                                                                        variant={host.enumData.services.smb139 ? "default" : "neutral"}
                                                                                        className="text-xs ml-auto"
                                                                                    >
                                                                                        {host.enumData.services.smb139 ? "Active" : "Inactive"}
                                                                                    </Badge>
                                                                                </div>
                                                                            </div>

                                                                            <div className="p-3 bg-muted rounded-lg">
                                                                                <h5 className="text-xs font-medium mb-2">SMB Configuration</h5>
                                                                                <div className="grid grid-cols-2 gap-2 text-xs">
                                                                                    <div>
                                                                                        Preferred:{" "}
                                                                                        <Badge variant="neutral" className="text-xs">
                                                                                            {host.enumData.smbDialects.preferredDialect}
                                                                                        </Badge>
                                                                                    </div>
                                                                                    <div>
                                                                                        Signing:{" "}
                                                                                        <Badge
                                                                                            variant={
                                                                                                host.enumData.smbDialects.smbSigningRequired
                                                                                                    ? "error"
                                                                                                    : "neutral"
                                                                                            }
                                                                                            className="text-xs"
                                                                                        >
                                                                                            {host.enumData.smbDialects.smbSigningRequired ? "Required" : "Optional"}
                                                                                        </Badge>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </TabsContent>

                                                                    <TabsContent value="netbios" className="mt-3">
                                                                        <div className="space-y-3">
                                                                            <div className="grid grid-cols-2 gap-2 text-xs">
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">Computer Name</div>
                                                                                    <div className="text-muted-foreground">
                                                                                        {host.enumData.netbiosComputerName}
                                                                                    </div>
                                                                                </div>
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">Domain/Workgroup</div>
                                                                                    <div className="text-muted-foreground">{host.enumData.workgroupOrDomain}</div>
                                                                                </div>
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">FQDN</div>
                                                                                    <div className="text-muted-foreground">{host.enumData.fqdn}</div>
                                                                                </div>
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">DNS Domain</div>
                                                                                    <div className="text-muted-foreground">{host.enumData.dnsDomain}</div>
                                                                                </div>
                                                                            </div>

                                                                            <div className="border rounded-lg overflow-hidden">
                                                                                <div className="bg-muted px-2 py-1 text-xs font-medium">NetBIOS Names</div>
                                                                                <div className="max-h-24 overflow-y-auto">
                                                                                    {host.enumData.netbiosNames.map((name, idx) => (
                                                                                        <div
                                                                                            key={idx}
                                                                                            className="flex items-center justify-between px-2 py-1 border-t text-xs"
                                                                                        >
                                                                                            <span className="font-mono">{name.name}</span>
                                                                                            <div className="flex gap-1">
                                                                                                <Badge variant="neutral" className="text-xs">
                                                                                                    {name.hex}
                                                                                                </Badge>
                                                                                                <Badge
                                                                                                    variant={name.active ? "default" : "neutral"}
                                                                                                    className="text-xs"
                                                                                                >
                                                                                                    {name.active ? "Active" : "Inactive"}
                                                                                                </Badge>
                                                                                            </div>
                                                                                        </div>
                                                                                    ))}
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </TabsContent>

                                                                    <TabsContent value="system" className="mt-3">
                                                                        <div className="space-y-3">
                                                                            <div className="grid grid-cols-2 gap-2 text-xs">
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">Operating System</div>
                                                                                    <div className="text-muted-foreground">{host.enumData.osInfo.os}</div>
                                                                                </div>
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">Version</div>
                                                                                    <div className="text-muted-foreground">{host.enumData.osInfo.version}</div>
                                                                                </div>
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">Build</div>
                                                                                    <div className="text-muted-foreground">{host.enumData.osInfo.build}</div>
                                                                                </div>
                                                                                <div className="p-2 border rounded">
                                                                                    <div className="font-medium">Server Type</div>
                                                                                    <div className="text-muted-foreground">
                                                                                        {host.enumData.osInfo.serverType || "Workstation"}
                                                                                    </div>
                                                                                </div>
                                                                            </div>

                                                                            <div className="p-3 bg-muted rounded-lg">
                                                                                <h5 className="text-xs font-medium mb-2">RPC Sessions</h5>
                                                                                <div className="grid grid-cols-3 gap-2 text-xs">
                                                                                    <div className="text-center">
                                                                                        <div>Null Session</div>
                                                                                        <Badge
                                                                                            variant={
                                                                                                host.enumData.rpcSessions?.nullSession ? "error" : "neutral"
                                                                                            }
                                                                                            className="text-xs"
                                                                                        >
                                                                                            {host.enumData.rpcSessions?.nullSession ?
                                                                                                host.enumData.rpcSessions.nullSession.username : "N/A"}
                                                                                        </Badge>
                                                                                    </div>
                                                                                    <div className="text-center">
                                                                                        <div>Auth Session</div>
                                                                                        <Badge variant="warning" className="text-xs">
                                                                                            {host.enumData.rpcSessions?.authenticatedSession ?
                                                                                                host.enumData.rpcSessions.authenticatedSession.username : "N/A"}
                                                                                        </Badge>
                                                                                    </div>
                                                                                    <div className="text-center">
                                                                                        <div>Guest Session</div>
                                                                                        <Badge
                                                                                            variant={
                                                                                                host.enumData.rpcSessions?.guestSession
                                                                                                    ? "warning"
                                                                                                    : "neutral"
                                                                                            }
                                                                                            className="text-xs"
                                                                                        >
                                                                                            {host.enumData.rpcSessions?.guestSession ?
                                                                                                host.enumData.rpcSessions.guestSession.username : "N/A"}
                                                                                        </Badge>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </TabsContent>
                                                                </>
                                                            )}
                                                        </Tabs>
                                                    </AccordionContent>
                                                </AccordionItem>
                                            </div>
                                        ))}
                                    </Accordion>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                </div>
            )}
        </>
    )
}
