"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Separator } from "@/components/ui/separator"
import {
    Users,
    Key,
    Network,
    FileText,
    Download,
    Eye,
    Crown,
    Shield,
    Terminal,
    Database,
    Server,
    Monitor,
    Copy,
    ImageIcon,
    Folder,
    ExternalLink,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface AccessEntry {
    hostIp: string
    hostname: string
    accessType: "RDP" | "Shell" | "WinRM" | "SSH"
    privilegeLevel: "SYSTEM" | "Administrator" | "Domain Admin" | "User" | "Service"
    actionsPerformed: string[]
    timestamp: string
    duration: string
}

interface CredentialEntry {
    username: string
    domain: string
    ntlmHash: string
    lmHash?: string
    rid: string
    type: "User" | "Computer" | "Service"
}

interface EvidenceItem {
    id: string
    type: "Screenshot" | "Log" | "Command" | "File"
    title: string
    description: string
    timestamp: string
    size?: string
    host: string
}

interface PostExploitationPanelProps {
    pentestIdName: string
}

export function PostExploitationPanel({ pentestIdName }: PostExploitationPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [selectedCredTab, setSelectedCredTab] = useState("ntlm")
    const [selectedEvidence, setSelectedEvidence] = useState<EvidenceItem | null>(null)
    const [isLoading, setIsLoading] = useState(false)

    const accessEntries: AccessEntry[] = [
        {
            hostIp: "192.168.1.10",
            hostname: "dc01.domain.local",
            accessType: "Shell",
            privilegeLevel: "SYSTEM",
            actionsPerformed: ["Credential Dump", "Domain Enumeration", "Lateral Movement"],
            timestamp: "2024-01-15 12:30:15",
            duration: "45m 23s",
        },
        {
            hostIp: "192.168.1.10",
            hostname: "dc01.domain.local",
            accessType: "RDP",
            privilegeLevel: "Domain Admin",
            actionsPerformed: ["BloodHound Collection", "GPO Enumeration", "Trust Relationships"],
            timestamp: "2024-01-15 13:15:42",
            duration: "32m 18s",
        },
        {
            hostIp: "192.168.1.15",
            hostname: "workstation-01",
            accessType: "Shell",
            privilegeLevel: "User",
            actionsPerformed: ["Local Enumeration", "Privilege Escalation", "Token Impersonation"],
            timestamp: "2024-01-15 14:02:33",
            duration: "28m 45s",
        },
        {
            hostIp: "192.168.1.25",
            hostname: "db-server",
            accessType: "SSH",
            privilegeLevel: "Administrator",
            actionsPerformed: ["Database Enumeration", "File System Access", "Log Analysis"],
            timestamp: "2024-01-15 14:35:12",
            duration: "19m 56s",
        },
    ]

    const credentials: CredentialEntry[] = [
        {
            username: "Administrator",
            domain: "DOMAIN",
            ntlmHash: "31d6cfe0d16ae931b73c59d7e0c089c0",
            lmHash: "aad3b435b51404eeaad3b435b51404ee",
            rid: "500",
            type: "User",
        },
        {
            username: "krbtgt",
            domain: "DOMAIN",
            ntlmHash: "209c6174da490caeb422f3fa5a7ae634",
            lmHash: "aad3b435b51404eeaad3b435b51404ee",
            rid: "502",
            type: "Service",
        },
        {
            username: "john.doe",
            domain: "DOMAIN",
            ntlmHash: "b4b9b02e6f09a9bd760f388b67351e2b",
            lmHash: "aad3b435b51404eeaad3b435b51404ee",
            rid: "1001",
            type: "User",
        },
        {
            username: "jane.smith",
            domain: "DOMAIN",
            ntlmHash: "8846f7eaee8fb117ad06bdd830b7586c",
            lmHash: "aad3b435b51404eeaad3b435b51404ee",
            rid: "1002",
            type: "User",
        },
        {
            username: "DC01$",
            domain: "DOMAIN",
            ntlmHash: "a87f3a337d73085c45f9416be5787d86",
            lmHash: "aad3b435b51404eeaad3b435b51404ee",
            rid: "1000",
            type: "Computer",
        },
    ]

    const evidenceItems: EvidenceItem[] = [
        {
            id: "1",
            type: "Screenshot",
            title: "Domain Admin Desktop Access",
            description: "Screenshot showing successful RDP access to DC01 with Domain Admin privileges",
            timestamp: "2024-01-15 13:15:42",
            size: "2.4 MB",
            host: "192.168.1.10",
        },
        {
            id: "2",
            type: "Log",
            title: "Mimikatz Credential Dump",
            description: "Complete output from Mimikatz sekurlsa::logonpasswords command",
            timestamp: "2024-01-15 12:45:18",
            size: "156 KB",
            host: "192.168.1.10",
        },
        {
            id: "3",
            type: "Command",
            title: "BloodHound Data Collection",
            description: "PowerShell commands used for Active Directory enumeration",
            timestamp: "2024-01-15 13:22:15",
            size: "45 KB",
            host: "192.168.1.10",
        },
        {
            id: "4",
            type: "File",
            title: "SAM Database Dump",
            description: "Extracted SAM database containing local user hashes",
            timestamp: "2024-01-15 12:38:29",
            size: "892 KB",
            host: "192.168.1.15",
        },
        {
            id: "5",
            type: "Screenshot",
            title: "Database Server Access",
            description: "Terminal showing root access to MySQL database server",
            timestamp: "2024-01-15 14:35:12",
            size: "1.8 MB",
            host: "192.168.1.25",
        },
    ]

    const getPrivilegeColor = (privilege: string) => {
        switch (privilege) {
            case "SYSTEM":
            case "Domain Admin":
                return "bg-red-600"
            case "Administrator":
                return "bg-orange-600"
            case "User":
                return "bg-blue-600"
            case "Service":
                return "bg-purple-600"
            default:
                return "bg-gray-600"
        }
    }

    const getAccessTypeIcon = (type: string) => {
        switch (type) {
            case "RDP":
                return <Monitor className="w-4 h-4" />
            case "Shell":
                return <Terminal className="w-4 h-4" />
            case "SSH":
                return <Server className="w-4 h-4" />
            case "WinRM":
                return <Network className="w-4 h-4" />
            default:
                return <Shield className="w-4 h-4" />
        }
    }

    const getEvidenceIcon = (type: string) => {
        switch (type) {
            case "Screenshot":
                return <ImageIcon className="w-4 h-4 text-blue-500" />
            case "Log":
                return <FileText className="w-4 h-4 text-green-500" />
            case "Command":
                return <Terminal className="w-4 h-4 text-purple-500" />
            case "File":
                return <Folder className="w-4 h-4 text-orange-500" />
            default:
                return <FileText className="w-4 h-4" />
        }
    }

    const copyToClipboard = (text: string) => {
        navigator.clipboard.writeText(text)
    }

    const lsaSecrets = [
        "DPAPI_SYSTEM: 01000000d08c9ddf0115d1118c7a00c04fc297eb01000000",
        "NL$KM: 8a4b9c2d1e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b",
        "DefaultPassword: P@ssw0rd123!",
        "$MACHINE.ACC: domain\\DC01$:aes256-cts-hmac-sha1-96:a1b2c3d4e5f6...",
    ]

    const samEntries = [
        "Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::",
        "Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::",
        "DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::",
        "WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::",
    ]

    const dumpLogs = [
        "[2024-01-15 12:45:18] Starting Mimikatz credential extraction",
        "[2024-01-15 12:45:19] Privilege::debug OK",
        "[2024-01-15 12:45:20] Token::elevate OK",
        "[2024-01-15 12:45:21] sekurlsa::logonpasswords",
        "[2024-01-15 12:45:22] Authentication Id : 0 ; 996 (00000000:000003e4)",
        "[2024-01-15 12:45:23] Session           : Service from 0",
        "[2024-01-15 12:45:24] User Name         : DC01$",
        "[2024-01-15 12:45:25] Domain            : DOMAIN",
        "[2024-01-15 12:45:26] Logon Server      : (null)",
        "[2024-01-15 12:45:27] Logon Time        : 1/15/2024 8:30:15 AM",
        "[2024-01-15 12:45:28] SID               : S-1-5-20",
        "[2024-01-15 12:45:29] msv :",
        "[2024-01-15 12:45:30] [00000003] Primary",
        "[2024-01-15 12:45:31] * Username : DC01$",
        "[2024-01-15 12:45:32] * Domain   : DOMAIN",
        "[2024-01-15 12:45:33] * NTLM     : a87f3a337d73085c45f9416be5787d86",
        "[2024-01-15 12:45:34] * SHA1     : da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "[2024-01-15 12:45:35] Credential extraction completed successfully",
    ]

    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/report-generation`);
    }

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        {/* Header */}
                        <Card className=" border">
                            <CardHeader>
                                <CardTitle className=" flex items-center gap-2">
                                    <Users className="w-5 h-5 text-purple-500" />
                                    Post-Exploitation Analysis
                                </CardTitle>
                                <p className="400 text-sm">
                                    Comprehensive analysis of compromised systems and extracted intelligence
                                </p>
                            </CardHeader>
                        </Card>

                        {/* Access Summary Table */}
                        <Card className=" border">
                            <CardHeader>
                                <CardTitle className="e flex items-center gap-2">
                                    <Crown className="w-5 h-5 text-orange-500" />
                                    Access Summary
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="rounded-md border">
                                    <Table>
                                        <TableHeader>
                                            <TableRow className="border">
                                                <TableHead className="">Host</TableHead>
                                                <TableHead className="">Access Type</TableHead>
                                                <TableHead className="">Privilege Level</TableHead>
                                                <TableHead className="">Actions Performed</TableHead>
                                                <TableHead className="">Duration</TableHead>
                                                <TableHead className="">Timestamp</TableHead>
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            {accessEntries.map((entry, index) => (
                                                <TableRow key={index} className="border">
                                                    <TableCell>
                                                        <div>
                                                            <div className=" font-mono">{entry.hostIp}</div>
                                                            <div className="400 text-xs">{entry.hostname}</div>
                                                        </div>
                                                    </TableCell>
                                                    <TableCell>
                                                        <div className="flex items-center gap-2">
                                                            {getAccessTypeIcon(entry.accessType)}
                                                            <Badge variant="outline" className="border ">
                                                                {entry.accessType}
                                                            </Badge>
                                                        </div>
                                                    </TableCell>
                                                    <TableCell>
                                                        <Badge className={`${getPrivilegeColor(entry.privilegeLevel)} `}>
                                                            {entry.privilegeLevel}
                                                        </Badge>
                                                    </TableCell>
                                                    <TableCell>
                                                        <div className="flex flex-wrap gap-1">
                                                            {entry.actionsPerformed.slice(0, 2).map((action, idx) => (
                                                                <Badge key={idx} variant="secondary" className="text-xs bg-blue-600 ">
                                                                    {action}
                                                                </Badge>
                                                            ))}
                                                            {entry.actionsPerformed.length > 2 && (
                                                                <Badge variant="secondary" className="text-xs ">
                                                                    +{entry.actionsPerformed.length - 2}
                                                                </Badge>
                                                            )}
                                                        </div>
                                                    </TableCell>
                                                    <TableCell className=" font-mono">{entry.duration}</TableCell>
                                                    <TableCell className=" font-mono text-sm">{entry.timestamp}</TableCell>
                                                </TableRow>
                                            ))}
                                        </TableBody>
                                    </Table>
                                </div>
                            </CardContent>
                        </Card>

                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            {/* Credential Dump Panel */}
                            <Card className=" border">
                                <CardHeader>
                                    <CardTitle className=" flex items-center gap-2">
                                        <Key className="w-5 h-5 text-blue-500" />
                                        Credential Intelligence
                                    </CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <Tabs value={selectedCredTab} onValueChange={setSelectedCredTab}>
                                        <TabsList className="grid w-full grid-cols-4">
                                            <TabsTrigger value="ntlm" className=" ">
                                                NTLM Hashes
                                            </TabsTrigger>
                                            <TabsTrigger value="lsa" className=" ">
                                                LSA Secrets
                                            </TabsTrigger>
                                            <TabsTrigger value="sam" className=" ">
                                                SAM
                                            </TabsTrigger>
                                            <TabsTrigger value="logs" className=" ">
                                                Dump Logs
                                            </TabsTrigger>
                                        </TabsList>

                                        <TabsContent value="ntlm" className="mt-4">
                                            <ScrollArea className="h-64 w-full rounded border   p-4">
                                                <div className="space-y-3">
                                                    {credentials.map((cred, index) => (
                                                        <div key={index} className="space-y-2 p-3  rounded border 0">
                                                            <div className="flex items-center justify-between">
                                                                <div className="flex items-center gap-2">
                                                                    <span className=" font-medium">
                                                                        {cred.domain}\{cred.username}
                                                                    </span>
                                                                    <Badge
                                                                        variant="outline"
                                                                        className={`text-xs ${cred.type === "User"
                                                                            ? "border-blue-600 text-blue-400"
                                                                            : cred.type === "Computer"
                                                                                ? "border-green-600 text-green-400"
                                                                                : "border-purple-600 text-purple-400"
                                                                            }`}
                                                                    >
                                                                        {cred.type}
                                                                    </Badge>
                                                                </div>
                                                                <Button
                                                                    size="sm"
                                                                    variant="ghost"
                                                                    onClick={() =>
                                                                        copyToClipboard(`${cred.username}:${cred.rid}:${cred.lmHash}:${cred.ntlmHash}:::`)
                                                                    }
                                                                    className="400 "
                                                                >
                                                                    <Copy className="w-3 h-3" />
                                                                </Button>
                                                            </div>
                                                            <div className="text-xs space-y-1">
                                                                <div className="400">
                                                                    RID: <span className=" font-mono">{cred.rid}</span>
                                                                </div>
                                                                <div className="400">
                                                                    NTLM: <span className=" font-mono">{cred.ntlmHash}</span>
                                                                </div>
                                                                {cred.lmHash && (
                                                                    <div className="400">
                                                                        LM: <span className=" font-mono">{cred.lmHash}</span>
                                                                    </div>
                                                                )}
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </ScrollArea>
                                        </TabsContent>

                                        <TabsContent value="lsa" className="mt-4">
                                            <ScrollArea className="h-64 w-full rounded border  p-4">
                                                <div className="font-mono text-sm space-y-2">
                                                    {lsaSecrets.map((secret, index) => (
                                                        <div key={index} className="text-green-400 break-all">
                                                            {secret}
                                                        </div>
                                                    ))}
                                                </div>
                                            </ScrollArea>
                                        </TabsContent>

                                        <TabsContent value="sam" className="mt-4">
                                            <ScrollArea className="h-64 w-full rounded border p-4">
                                                <div className="font-mono text-sm space-y-1">
                                                    {samEntries.map((entry, index) => (
                                                        <div key={index} className="text-yellow-400 break-all">
                                                            {entry}
                                                        </div>
                                                    ))}
                                                </div>
                                            </ScrollArea>
                                        </TabsContent>

                                        <TabsContent value="logs" className="mt-4">
                                            <ScrollArea className="h-64 w-full rounded border  p-4">
                                                <div className="font-mono text-sm space-y-1">
                                                    {dumpLogs.map((log, index) => (
                                                        <div key={index} className="">
                                                            {log}
                                                        </div>
                                                    ))}
                                                </div>
                                            </ScrollArea>
                                        </TabsContent>
                                    </Tabs>

                                    <div className="flex justify-end mt-4">
                                        <Button
                                            size="sm"
                                            variant="outline"
                                            className="border bg-transparent"
                                        >
                                            <Download className="w-4 h-4 mr-2" />
                                            Export All Credentials
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>

                            {/* Lateral Movement Map */}
                            <Card className=" border">
                                <CardHeader>
                                    <CardTitle className=" flex items-center gap-2">
                                        <Network className="w-5 h-5 text-green-500" />
                                        Lateral Movement Map
                                    </CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div className="h-64  rounded border  p-4 relative overflow-hidden">
                                        {/* Mock BloodHound-style graph */}
                                        <div className="absolute inset-0 p-4">
                                            {/* Domain Controller */}
                                            <div className="absolute top-4 left-1/2 transform -translate-x-1/2">
                                                <div className="bg-red-600 rounded-full w-12 h-12 flex items-center justify-center">
                                                    <Crown className="w-6 h-6 " />
                                                </div>
                                                <div className="text-xs  text-center mt-1">DC01</div>
                                                <div className="text-xs text-red-400 text-center">Compromised</div>
                                            </div>

                                            {/* Database Server */}
                                            <div className="absolute bottom-4 left-8">
                                                <div className="bg-orange-600 rounded-full w-10 h-10 flex items-center justify-center">
                                                    <Database className="w-5 h-5 " />
                                                </div>
                                                <div className="text-xs  text-center mt-1">DB-SRV</div>
                                                <div className="text-xs text-orange-400 text-center">Compromised</div>
                                            </div>

                                            {/* Workstation */}
                                            <div className="absolute bottom-4 right-8">
                                                <div className="bg-blue-600 rounded-full w-10 h-10 flex items-center justify-center">
                                                    <Monitor className="w-5 h-5 " />
                                                </div>
                                                <div className="text-xs  text-center mt-1">WS-01</div>
                                                <div className="text-xs text-blue-400 text-center">Compromised</div>
                                            </div>

                                            {/* File Server */}
                                            <div className="absolute top-16 right-4">
                                                <div className=" rounded-full w-10 h-10 flex items-center justify-center">
                                                    <Server className="w-5 h-5 " />
                                                </div>
                                                <div className="text-xs  text-center mt-1">FILE-SRV</div>
                                                <div className="text-xs 400 text-center">Accessible</div>
                                            </div>

                                            {/* Attack paths */}
                                            <svg className="absolute inset-0 w-full h-full pointer-events-none">
                                                {/* DC to DB */}
                                                <line x1="50%" y1="25%" x2="15%" y2="75%" stroke="#ef4444" strokeWidth="2" strokeDasharray="5,5" />
                                                {/* DC to WS */}
                                                <line x1="50%" y1="25%" x2="85%" y2="75%" stroke="#ef4444" strokeWidth="2" strokeDasharray="5,5" />
                                                {/* DC to File Server */}
                                                <line x1="50%" y1="25%" x2="85%" y2="35%" stroke="#6b7280" strokeWidth="2" strokeDasharray="2,2" />
                                            </svg>
                                        </div>
                                    </div>

                                    <div className="mt-4 space-y-2">
                                        <div className="flex items-center gap-2 text-sm">
                                            <div className="w-3 h-3 bg-red-600 rounded-full"></div>
                                            <span className="">Compromised (Domain Admin)</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-sm">
                                            <div className="w-3 h-3 bg-orange-600 rounded-full"></div>
                                            <span className="">Compromised (Local Admin)</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-sm">
                                            <div className="w-3 h-3 bg-gray-600 rounded-full"></div>
                                            <span className="">Accessible via Credentials</span>
                                        </div>
                                    </div>

                                    <div className="flex justify-end mt-4">
                                        <Button
                                            size="sm"
                                            variant="outline"
                                            className="border bg-transparent"
                                        >
                                            <ExternalLink className="w-4 h-4 mr-2" />
                                            Open in BloodHound
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        {/* Evidence Cards */}
                        <Card className=" border">
                            <CardHeader>
                                <CardTitle className=" flex items-center gap-2">
                                    <FileText className="w-5 h-5 text-yellow-500" />
                                    Evidence Collection
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                    {evidenceItems.map((item) => (
                                        <Card key={item.id} className=" border">
                                            <CardContent className="p-4">
                                                <div className="flex items-start gap-3">
                                                    {getEvidenceIcon(item.type)}
                                                    <div className="flex-1 min-w-0">
                                                        <div className="font-medium text-sm truncate">{item.title}</div>
                                                        <div className="400 text-xs mt-1 line-clamp-2">{item.description}</div>
                                                        <div className="flex items-center gap-2 mt-2">
                                                            <Badge variant="outline" className="text-xs border 400">
                                                                {item.host}
                                                            </Badge>
                                                            {item.size && (
                                                                <Badge variant="outline" className="text-xs border">
                                                                    {item.size}
                                                                </Badge>
                                                            )}
                                                        </div>
                                                        <div className="500 text-xs mt-1">{item.timestamp}</div>
                                                    </div>
                                                </div>
                                                <Separator className="my-3 " />
                                                <div className="flex gap-2">
                                                    <Dialog>
                                                        <DialogTrigger asChild>
                                                            <Button
                                                                size="sm"
                                                                variant="outline"
                                                                className="flex-1 border bg-transparent"
                                                                onClick={() => setSelectedEvidence(item)}
                                                            >
                                                                <Eye className="w-3 h-3 mr-1" />
                                                                View
                                                            </Button>
                                                        </DialogTrigger>
                                                        <DialogContent className=" border max-w-4xl">
                                                            <DialogHeader>
                                                                <DialogTitle className=" flex items-center gap-2">
                                                                    {getEvidenceIcon(item.type)}
                                                                    {item.title}
                                                                </DialogTitle>
                                                            </DialogHeader>
                                                            <div className="space-y-4">
                                                                <div className="">{item.description}</div>
                                                                <div className="grid grid-cols-2 gap-4 text-sm">
                                                                    <div>
                                                                        <span className="400">Host:</span>
                                                                        <span className=" ml-2">{item.host}</span>
                                                                    </div>
                                                                    <div>
                                                                        <span className="400">Timestamp:</span>
                                                                        <span className=" ml-2">{item.timestamp}</span>
                                                                    </div>
                                                                    {item.size && (
                                                                        <div>
                                                                            <span className="400">Size:</span>
                                                                            <span className=" ml-2">{item.size}</span>
                                                                        </div>
                                                                    )}
                                                                    <div>
                                                                        <span className="400">Type:</span>
                                                                        <span className=" ml-2">{item.type}</span>
                                                                    </div>
                                                                </div>
                                                                <ScrollArea className="h-64 w-full rounded border  p-4">
                                                                    <div className="font-mono text-sm text-green-400">
                                                                        {item.type === "Screenshot" && (
                                                                            <div className="text-center 400">
                                                                                [Screenshot Preview Would Appear Here]
                                                                                <br />
                                                                                <br />
                                                                                Domain Admin Desktop - Windows Server 2019
                                                                                <br />
                                                                                Resolution: 1920x1080
                                                                                <br />
                                                                                Captured: {item.timestamp}
                                                                            </div>
                                                                        )}
                                                                        {item.type === "Log" && (
                                                                            <div>
                                                                                {dumpLogs.slice(0, 10).map((log, idx) => (
                                                                                    <div key={idx}>{log}</div>
                                                                                ))}
                                                                            </div>
                                                                        )}
                                                                        {item.type === "Command" && (
                                                                            <div>
                                                                                <div>PS C:\&gt; Import-Module .\SharpHound.ps1</div>
                                                                                <div>PS C:\&gt; Invoke-BloodHound -CollectionMethod All</div>
                                                                                <div>PS C:\&gt; Get-DomainUser | Select-Object name,samaccountname</div>
                                                                                <div>PS C:\&gt; Get-DomainComputer | Select-Object name,operatingsystem</div>
                                                                            </div>
                                                                        )}
                                                                        {item.type === "File" && (
                                                                            <div>
                                                                                <div>SAM Database Export</div>
                                                                                <div>================</div>
                                                                                <div>
                                                                                    Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
                                                                                </div>
                                                                                <div>
                                                                                    Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
                                                                                </div>
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                </ScrollArea>
                                                            </div>
                                                        </DialogContent>
                                                    </Dialog>
                                                    <Button
                                                        size="sm"
                                                        variant="outline"
                                                        className="border bg-transparent"
                                                    >
                                                        <Download className="w-3 h-3" />
                                                    </Button>
                                                </div>
                                            </CardContent>
                                        </Card>
                                    ))}
                                </div>
                            </CardContent>
                        </Card>

                        {/* Bottom CTA */}
                        <Card className="border">
                            <CardContent className="p-4">
                                <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-4">
                                        <div className="text-sm ">
                                            {accessEntries.length} compromised systems • {credentials.length} credentials extracted •{" "}
                                            {evidenceItems.length} evidence items collected
                                        </div>
                                        <Badge className="bg-green-600 ">
                                            <Crown className="w-3 h-3 mr-1" />
                                            Domain Compromised
                                        </Badge>
                                    </div>
                                    <Button onClick={handleProceed} className="bg-blue-600 hover:bg-blue-700">
                                        <FileText className="w-4 h-4 mr-2" />
                                        Generate Final Report
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    </div>
            }
        </>
    )
}
