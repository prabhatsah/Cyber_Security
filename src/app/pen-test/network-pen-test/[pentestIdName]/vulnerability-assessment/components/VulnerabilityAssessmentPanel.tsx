"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/Badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { ProgressBar } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import {
    Bug,
    RefreshCw,
    Play,
    ShieldAlert,
    Network,
    Activity,
    Globe,
    BugPlay,
    Skull,
    ShieldX,
    CheckSquare,
    Square,
    Loader2,
    CheckCircle,
    XCircle,
    CircleX,
    AlertTriangle,
    ExternalLink,
    Plus,
    CirclePlus,
    Minus,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import LoaderWithoutBackdrop from "@/components/LoaderWithoutBackdrop"
import { formatVulScanData, vulScanData } from "./VulScanDummyData"

interface Host {
    hostIp: string
    macAddress: string
    vendor: string
    os: string
    cpe: string
    role: string
}

interface Vulnerability {
    cveId: string
    severity: "Critical" | "High" | "Medium" | "Low" | "Info" | "N/A"
    port: string
    protocol: string
    exploitable: boolean
    affectedService: string
    description: string
    cvss: number | "N/A"
    references: string[]
    queuedForExploitation: boolean
}

interface VulnerabilityAssessmentPanelProps {
    pentestIdName: string;
}

type ScanStage = "idle" | "isScanning" | "completed"

export function VulnerabilityAssessmentPanel({ pentestIdName }: VulnerabilityAssessmentPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [isFirstScan, setIsFirstScan] = useState(true);
    const [selectedHost, setSelectedHost] = useState<string>("")
    const [scanProgress, setScanProgress] = useState(0)
    const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
    const [sortBy, setSortBy] = useState<"severity" | "cvss" | "exploitable">("severity")
    const [isLoading, setIsLoading] = useState(false)
    const [scanStage, setScanStage] = useState<ScanStage>("idle");

    const hosts: Host[] = [
        {
            hostIp: "45.33.32.156",
            macAddress: "8C:EC:4B:AE:EB:7F",
            vendor: "Dell Inc.",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            role: "Domain Controller",
        },
        {
            hostIp: "45.33.32.156:22",
            macAddress: "F0:2F:74:46:74:64",
            vendor: "Dell Inc.",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            role: "Domain Member",
        },
        {
            hostIp: "156.32.33.45.in-addr.arpa",
            macAddress: "AB:2D:84:46:74:17",
            vendor: "Intel Corporate",
            os: "Windows",
            cpe: "cpe:/o:microsoft:windows",
            role: "Workstation",
        },
        // {
        //     hostIp: "192.168.3.23",
        //     macAddress: "CD:2W:65:46:74:07",
        //     vendor: "Intel Corporate",
        //     os: "Windows",
        //     cpe: "cpe:/o:microsoft:windows",
        //     role: "Database Server",
        // },
        // {
        //     hostIp: "192.168.3.167",
        //     macAddress: "58:11:22:E7:90:07",
        //     vendor: "Dell Inc.",
        //     os: "Windows",
        //     cpe: "cpe:/o:microsoft:windows",
        //     role: "Database Server",
        // },
    ];

    const formattedVulnerabilities = formatVulScanData(vulScanData)
    const [vulnerabilities, setVulnerabilities] = useState<Record<string, Vulnerability[]>>(formattedVulnerabilities);

    const getSeverityColor = (severity: string): "default" | "neutral" | "success" | "error" | "warning" | undefined => {
        switch (severity) {
            case "Critical":
                return "error"
            case "High":
                return "error"
            case "Medium":
                return "warning"
            case "Low":
                return "success"
            default:
                return "default"
        }
    }

    console.log("New DS: ", formatVulScanData(vulScanData));

    const sortVulnerabilities = (vulns: Vulnerability[]) => {
        return [...vulns].sort((a, b) => {
            switch (sortBy) {
                case "severity": {
                    const severityOrder: Record<string, number> = {
                        Critical: 4,
                        High: 3,
                        Medium: 2,
                        Low: 1,
                        Info: 0,
                        "N/A": -1,
                    };
                    return severityOrder[b.severity] - severityOrder[a.severity];
                }
                case "cvss": {
                    const cvssValue = (val: number | "N/A") =>
                        typeof val === "number" ? val : -1;
                    return cvssValue(b.cvss) - cvssValue(a.cvss);
                }
                case "exploitable":
                    return Number(b.exploitable) - Number(a.exploitable);
                default:
                    return 0;
            }
        });

    }

    const startVulnerabilityAssessment = async () => {
        setScanProgress(0)
        setScanStage("isScanning")

        const interval = setInterval(() => {
            setScanProgress((prev) => {
                if (prev >= 100) {
                    clearInterval(interval)
                    setIsFirstScan(false)
                    setScanStage("completed")
                    return 100
                }
                return prev + 5
            })
        }, 300);
    }

    const totalVulns = Object.values(vulnerabilities).flat().length
    const queuedVulns = Object.values(vulnerabilities).flat().filter(v => v.queuedForExploitation).length;

    const queueAllVulns = () => {
        setVulnerabilities(prev => {
            const next: Record<string, Vulnerability[]> = {};

            for (const host in prev) {
                const list = prev[host];
                next[host] = list.map(v => {
                    // if (!v.exploitable) return { ...v };
                    return { ...v, queuedForExploitation: true };
                });
            }

            return next;
        });
    };

    const deQueueAllVulns = () => {
        setVulnerabilities(prev => {
            const next: Record<string, Vulnerability[]> = {};

            for (const host in prev) {
                const list = prev[host];
                next[host] = list.map(v => {
                    // if (onlyExploitable && !v.exploitable) return { ...v };
                    return { ...v, queuedForExploitation: false };
                });
            }

            return next;
        });
    };

    const toggleQueueStatus = (host: string, index: number) => {
        setVulnerabilities(prev => ({
            ...prev,
            [host]: prev[host].map((v, i) =>
                i === index
                    ? { ...v, queuedForExploitation: !v.queuedForExploitation }
                    : v
            ),
        }));
    };


    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/exploitation`);
    }

    if (scanStage === "idle") {
        return (
            <>
                <div className="space-y-6 mt-4">
                    <Card className="border-dashed border-2 border-muted">
                        <CardContent className="flex flex-col items-center justify-center py-12 text-center">
                            <div className="rounded-full bg-blue-50 dark:bg-blue-950 p-4 mb-4">
                                <ShieldAlert className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                            </div>
                            <CardTitle className="text-xl mb-2">Ready to Perform Vulnerability Assessment</CardTitle>
                            <CardDescription className="mb-6 max-w-md">
                                Click the button below to start a vulnerability assessment. This will scan discovered hosts and services for known vulnerabilities,
                                misconfigurations, and weak credentials â€” then prioritize findings and provide remediation guidance.
                            </CardDescription>
                            <Button onClick={startVulnerabilityAssessment} className="bg-blue-500 hover:bg-blue-600 text-white px-8 py-2.5 rounded-md font-medium">
                                <Play className="h-4 w-4" />
                                Initiate Vulnerability Assessment
                            </Button>
                        </CardContent>
                    </Card>
                </div>
            </>
        )
    }

    return (
        <>
            <div className="space-y-6 mt-4">
                {/* Combined Scan Progress & Summary Card */}
                {scanStage !== ("idle" as ScanStage) && (
                    <Card className="bg-gray-50 dark:bg-gray-900 border">
                        <CardHeader className="p-0 px-6 pt-6 pb-4">
                            <div className="flex justify-between items-center">
                                <div className="flex items-center gap-3">
                                    <CardTitle className="text-lg">Scan Progress</CardTitle>
                                    <Badge variant={scanProgress < 100 ? "default" : "success"}>{scanProgress}%</Badge>
                                </div>

                                {scanStage === "completed" ? (
                                    <div className="flex items-center gap-3">
                                        <Button onClick={startVulnerabilityAssessment} className="bg-blue-500 hover:bg-blue-600 text-white py-0 px-2 h-8">
                                            <RefreshCw className="h-4 w-4" />
                                            Re-Initiate Vulnerability Assessment
                                        </Button>
                                        <Button onClick={handleProceed} disabled={queuedVulns === 0} className="bg-green-600 hover:bg-green-700 py-0 px-2 h-8 text-white">
                                            <Play className="w-4 h-4" />
                                            Proceed to Exploitation
                                        </Button>
                                    </div>
                                ) : ""}
                            </div>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            {/* Summary Widgets - Only show when completed */}
                            {scanStage === "completed" && (
                                <div className="grid grid-cols-5 gap-3 mb-4">
                                    <div className=" border rounded-lg p-3">
                                        <div className="flex items-center gap-2">
                                            <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center">
                                                <Network className="h-4 w-4 text-blue-500" />
                                            </div>
                                            <div>
                                                <div className="text-xl font-bold text-foreground">
                                                    {hosts.length}
                                                </div>
                                                <div className="text-xs text-muted-foreground">Total Host(s)</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className=" border rounded-lg p-3">
                                        <div className="flex items-center gap-2">
                                            <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center">
                                                <Bug className="h-4 w-4 text-blue-500" />
                                            </div>
                                            <div>
                                                <div className="text-xl font-bold text-foreground">
                                                    {totalVulns}
                                                </div>
                                                <div className="text-xs text-muted-foreground">Total Vulnerabilities</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className=" border rounded-lg p-3">
                                        <div className="flex items-center gap-2">
                                            <div className="w-8 h-8 bg-red-100 dark:bg-red-900/20 rounded-lg flex items-center justify-center">
                                                <Skull className="h-4 w-4 text-red-500" />
                                            </div>
                                            <div>
                                                <div className="text-xl font-bold text-foreground">
                                                    {
                                                        Object.values(vulnerabilities)
                                                            .flat()
                                                            .filter((v) => v.severity === "Critical").length
                                                    }
                                                </div>
                                                <div className="text-xs text-muted-foreground">Critical Vulnerabilities</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className=" border rounded-lg p-3">
                                        <div className="flex items-center gap-2">
                                            <div className="w-8 h-8 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center">
                                                <ShieldX className="h-4 w-4 text-orange-500" />
                                            </div>
                                            <div>
                                                <div className="text-xl font-bold text-foreground">
                                                    {
                                                        Object.values(vulnerabilities)
                                                            .flat()
                                                            .filter((v) => v.severity === "High").length
                                                    }
                                                </div>
                                                <div className="text-xs text-muted-foreground">High Vulnerabilities</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className=" border rounded-lg p-3">
                                        <div className="flex items-center gap-2">
                                            <div className="w-8 h-8 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg flex items-center justify-center">
                                                <BugPlay className="h-4 w-4 text-yellow-500" />
                                            </div>
                                            <div>
                                                <div className="text-xl font-bold text-foreground">
                                                    {
                                                        Object.values(vulnerabilities)
                                                            .flat()
                                                            .filter((v) => v.exploitable).length
                                                    }
                                                </div>
                                                <div className="text-xs text-muted-foreground">Exploitable Vulnerabilities</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}

                            {/* Progress Bar and Stats */}
                            <div className="">
                                <ProgressBar value={scanProgress} className="w-full" />

                                <div className="flex items-center justify-between text-sm mt-3">
                                    <div className="flex items-center gap-2">
                                        <span className="text-muted-foreground">Total Hosts:</span>
                                        <span className="font-medium text-foreground">{hosts.length}</span>
                                    </div>
                                    <div className="flex items-center gap-6">
                                        <div className="flex items-center gap-2">
                                            <span className="text-muted-foreground">Total Vulnerabilities:</span>
                                            <span className="font-medium text-foreground">{scanStage === "completed" ? totalVulns : "N/A"}</span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <span className="text-muted-foreground">Queued for Exploitation:</span>
                                            <span className="font-medium text-foreground">{scanStage === "completed" ? queuedVulns : "N/A"}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                )}



                {/* Vulnerability Assessment Results */}
                {scanStage !== "completed" ? <LoaderWithoutBackdrop /> :
                    <div className="">
                        <Card className="bg-gray-50 dark:bg-gray-900 border">
                            <CardHeader>
                                <div className="flex justify-between items-center">
                                    <div className="flex items-center gap-2">
                                        <Bug className="h-6 w-6 text-red-500" />
                                        <CardTitle className="text-xl">{`Vulnerabilities Identified (${totalVulns})`}</CardTitle>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        {scanStage === "completed" && (
                                            <div className="text-sm ">
                                                [{queuedVulns} of {totalVulns} queued for Exploitation]
                                            </div>
                                        )}
                                        <Button size="sm" variant="outline" onClick={queueAllVulns} className="border  bg-transparent">
                                            <CheckSquare className="w-4 h-4 mr-1" />
                                            Select All
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={deQueueAllVulns} className="border  bg-transparent">
                                            <Square className="w-4 h-4 mr-1" />
                                            Deselect All
                                        </Button>
                                    </div>
                                </div>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-6">
                                    <div className="space-y-4" style={{ maxHeight: "600px", overflowY: "auto" }}>
                                        {hosts.length === 0 && scanStage !== ("idle" as ScanStage) && (
                                            <div className="flex items-center justify-center py-8">
                                                <Loader2 className="h-6 w-6 animate-spin text-blue-500 mr-2" />
                                                <span className="text-muted-foreground">Scanning network...</span>
                                            </div>
                                        )}

                                        <Accordion type="multiple" className="w-full">
                                            {hosts.map((host, hostIndex) => {
                                                const sortedVulns = sortVulnerabilities(vulnerabilities[host.hostIp]);

                                                return (
                                                    <div className="flex items-center gap-3 mb-2" key={`host-accordion-${hostIndex}`}>
                                                        {/* <Checkbox checked={host.selected} onCheckedChange={() => toggleHostSelection(host.hostIp)} /> */}

                                                        <AccordionItem key={host.hostIp} value={host.hostIp} className="flex-1 border rounded-lg">
                                                            <AccordionTrigger className="px-4 py-3 hover:no-underline">
                                                                <div className="flex items-center justify-between w-full mr-4">
                                                                    <div className="flex items-center gap-3">
                                                                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                                                        <span className="font-mono text-sm w-52 text-left">{host.hostIp}</span>
                                                                        <Badge variant="default" className="text-xs w-32 text-white">
                                                                            {host.macAddress}
                                                                        </Badge>
                                                                        {host.vendor && (
                                                                            <Badge variant="default" className="text-xs">
                                                                                {host.vendor}
                                                                            </Badge>
                                                                        )}
                                                                    </div>
                                                                    {host.os && (
                                                                        <div className="flex items-center gap-3">
                                                                            <Badge variant="default" className="text-xs">
                                                                                {host.os}
                                                                            </Badge>
                                                                            {host.cpe && (
                                                                                <Badge variant="default" className="text-xs w-40">
                                                                                    {host.cpe}
                                                                                </Badge>
                                                                            )}
                                                                        </div>
                                                                    )}
                                                                    {/* {loadingHosts.includes(host.hostIp) && <Loader2 className="h-4 w-4 animate-spin text-blue-500" />} */}
                                                                </div>
                                                            </AccordionTrigger>
                                                            <AccordionContent className="px-4 pb-4">
                                                                <div className="rounded-md border ">
                                                                    <Table>
                                                                        <TableHeader>
                                                                            <TableRow className="">
                                                                                <TableHead className="">CVE ID</TableHead>
                                                                                <TableHead className="">Severity</TableHead>
                                                                                <TableHead className="">CVSS</TableHead>
                                                                                <TableHead className="">Port</TableHead>
                                                                                <TableHead className="">Protocol</TableHead>
                                                                                <TableHead className="">Exploitable</TableHead>
                                                                                <TableHead className="">Service</TableHead>
                                                                                <TableHead className="">Actions</TableHead>
                                                                            </TableRow>
                                                                        </TableHeader>
                                                                        <TableBody>
                                                                            {sortedVulns.map((vuln, vulnIndex) => {
                                                                                return (
                                                                                    <TableRow key={`${vuln.cveId}_${hostIndex}_${vulnIndex}`} className="border hover:bg-gray-800/50">
                                                                                        <TableCell>
                                                                                            <Dialog>
                                                                                                <DialogTrigger asChild>
                                                                                                    <Button
                                                                                                        variant="link"
                                                                                                        className="text-blue-400 hover:text-blue-300 p-0 h-auto font-mono"
                                                                                                        onClick={() => setSelectedVulnerability(vuln)}
                                                                                                    >
                                                                                                        {vuln.cveId}
                                                                                                    </Button>
                                                                                                </DialogTrigger>
                                                                                                <DialogContent className=" border max-w-4xl">
                                                                                                    <DialogHeader>
                                                                                                        <DialogTitle className=" flex items-center gap-2">
                                                                                                            <AlertTriangle className="w-5 h-5 text-red-500" />
                                                                                                            {vuln.cveId} - Vulnerability Details
                                                                                                        </DialogTitle>
                                                                                                    </DialogHeader>
                                                                                                    <div className="space-y-4">
                                                                                                        <div className="grid grid-cols-2 gap-4">
                                                                                                            <div>
                                                                                                                <label className=" text-sm">Severity</label>
                                                                                                                <div>
                                                                                                                    <Badge variant={getSeverityColor(vuln.severity)}>
                                                                                                                        {vuln.severity}
                                                                                                                    </Badge>
                                                                                                                </div>
                                                                                                            </div>
                                                                                                            <div>
                                                                                                                <label className=" text-sm">CVSS Score</label>
                                                                                                                <div className=" font-bold text-lg">{vuln.cvss}</div>
                                                                                                            </div>
                                                                                                        </div>
                                                                                                        <div>
                                                                                                            <label className=" text-sm">Description</label>
                                                                                                            <p className="">{vuln.description}</p>
                                                                                                        </div>
                                                                                                        <div>
                                                                                                            <label className=" text-sm">Affected Service</label>
                                                                                                            <p className="">
                                                                                                                {vuln.affectedService} (Port {vuln.port}/{vuln.protocol})
                                                                                                            </p>
                                                                                                        </div>
                                                                                                        <div>
                                                                                                            <label className=" text-sm">References</label>
                                                                                                            <div className="space-y-1">
                                                                                                                {vuln.references.map((ref, index) => (
                                                                                                                    <div key={index} className="flex items-center gap-2">
                                                                                                                        <ExternalLink className="w-4 h-4 text-blue-400" />
                                                                                                                        <a
                                                                                                                            href={ref}
                                                                                                                            target="_blank"
                                                                                                                            rel="noopener noreferrer"
                                                                                                                            className="text-blue-400 hover:text-blue-300 text-sm"
                                                                                                                        >
                                                                                                                            {ref}
                                                                                                                        </a>
                                                                                                                    </div>
                                                                                                                ))}
                                                                                                            </div>
                                                                                                        </div>
                                                                                                        <Separator className="" />
                                                                                                        <div className="flex justify-end gap-2">
                                                                                                            <Button
                                                                                                                onClick={() => toggleQueueStatus(selectedHost, vulnIndex)}
                                                                                                                className="bg-green-600 hover:bg-green-700"
                                                                                                            >
                                                                                                                <Plus className="w-4 h-4" />
                                                                                                                Add to Exploitation Queue
                                                                                                            </Button>
                                                                                                        </div>
                                                                                                    </div>
                                                                                                </DialogContent>
                                                                                            </Dialog>
                                                                                        </TableCell>
                                                                                        <TableCell>
                                                                                            <Badge variant={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                                                                                        </TableCell>
                                                                                        <TableCell className=" font-bold">{vuln.cvss}</TableCell>
                                                                                        <TableCell className=" font-mono">{vuln.port}</TableCell>
                                                                                        <TableCell className="">{vuln.protocol}</TableCell>
                                                                                        <TableCell>
                                                                                            {vuln.exploitable ? (
                                                                                                <Badge className="bg-red-600 ">
                                                                                                    <CheckCircle className="w-3 h-3 mr-1" />
                                                                                                    Yes
                                                                                                </Badge>
                                                                                            ) : (
                                                                                                <Badge className="bg-gray-600 ">
                                                                                                    <XCircle className="w-3 h-3 mr-1" />
                                                                                                    No
                                                                                                </Badge>
                                                                                            )}
                                                                                        </TableCell>
                                                                                        <TableCell className="">{vuln.affectedService}</TableCell>
                                                                                        <TableCell>
                                                                                            <div className="flex gap-1">
                                                                                                <Button
                                                                                                    size="sm"
                                                                                                    onClick={() => toggleQueueStatus(host.hostIp, vulnIndex)}
                                                                                                    className={`${vuln.queuedForExploitation ? "bg-red-600 hover:bg-red-700" :
                                                                                                        "bg-green-600 hover:bg-green-700"}`}
                                                                                                >
                                                                                                    {vuln.queuedForExploitation ?
                                                                                                        <>
                                                                                                            <Minus className="w-3 h-3" />
                                                                                                            <span className="text-xs">Remove from Exploitation Queue</span>
                                                                                                        </> :
                                                                                                        <>
                                                                                                            <Plus className="w-3 h-3" />
                                                                                                            <span className="text-xs">Add to Exploitation Queue</span>
                                                                                                        </>
                                                                                                    }

                                                                                                </Button>
                                                                                            </div>
                                                                                        </TableCell>
                                                                                    </TableRow>
                                                                                )
                                                                            })}
                                                                        </TableBody>
                                                                    </Table>
                                                                </div>
                                                            </AccordionContent>
                                                        </AccordionItem>
                                                    </div>
                                                )
                                            })}
                                        </Accordion>
                                    </div>

                                    {/* {scanStage === "completed" && (
                            <div className="text-sm text-gray-300">
                                {selectedCount} of {hostData.length} hosts selected for enumeration
                            </div>
                        )} */}
                                </div>
                            </CardContent>
                        </Card>
                    </div>
                }
            </div>
        </>
    )
}



















// {
//         "192.168.3.100": [
//             {
//                 cveId: "CVE-2021-44228",
//                 severity: "Critical",
//                 port: "8080",
//                 protocol: "TCP",
//                 exploitable: true,
//                 affectedService: "Apache Log4j",
//                 description: "Apache Log4j2 Remote Code Execution Vulnerability",
//                 cvss: 10.0,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-44228", "https://www.exploit-db.com/exploits/50592"],
//                 queuedForExploitation: false,
//             },
//             {
//                 cveId: "CVE-2020-1472",
//                 severity: "Critical",
//                 port: "445",
//                 protocol: "TCP",
//                 exploitable: true,
//                 affectedService: "Netlogon",
//                 description: "Netlogon Elevation of Privilege Vulnerability (Zerologon)",
//                 cvss: 9.8,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2020-1472", "https://www.exploit-db.com/exploits/48506"],
//                 queuedForExploitation: false,
//             },
//             {
//                 cveId: "CVE-2021-34527",
//                 severity: "High",
//                 port: "445",
//                 protocol: "TCP",
//                 exploitable: true,
//                 affectedService: "Print Spooler",
//                 description: "Windows Print Spooler Remote Code Execution (PrintNightmare)",
//                 cvss: 8.8,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-34527"],
//                 queuedForExploitation: false,
//             },
//             {
//                 cveId: "CVE-2020-0796",
//                 severity: "High",
//                 port: "445",
//                 protocol: "TCP",
//                 exploitable: false,
//                 affectedService: "SMBv3",
//                 description: "SMBv3 Remote Code Execution Vulnerability (SMBGhost)",
//                 cvss: 8.1,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2020-0796"],
//                 queuedForExploitation: false,
//             },
//         ],
//         "192.168.3.169": [
//             {
//                 cveId: "CVE-2019-0708",
//                 severity: "Critical",
//                 port: "3389",
//                 protocol: "TCP",
//                 exploitable: true,
//                 affectedService: "Remote Desktop Services",
//                 description: "Remote Desktop Services Remote Code Execution (BlueKeep)",
//                 cvss: 9.8,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2019-0708"],
//                 queuedForExploitation: false,
//             },
//             {
//                 cveId: "CVE-2020-0796",
//                 severity: "High",
//                 port: "445",
//                 protocol: "TCP",
//                 exploitable: false,
//                 affectedService: "SMBv3",
//                 description: "SMBv3 Remote Code Execution Vulnerability (SMBGhost)",
//                 cvss: 8.1,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2020-0796"],
//                 queuedForExploitation: false
//             },
//         ],
//         "192.168.3.35": [
//             {
//                 cveId: "CVE-2021-44228",
//                 severity: "Critical",
//                 port: "8080",
//                 protocol: "TCP",
//                 exploitable: true,
//                 affectedService: "Apache Log4j",
//                 description: "Apache Log4j2 Remote Code Execution Vulnerability",
//                 cvss: 10.0,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-44228"],
//                 queuedForExploitation: false,
//             },
//             {
//                 cveId: "CVE-2019-11043",
//                 severity: "High",
//                 port: "80",
//                 protocol: "TCP",
//                 exploitable: true,
//                 affectedService: "PHP-FPM",
//                 description: "PHP-FPM Remote Code Execution",
//                 cvss: 8.1,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2019-11043"],
//                 queuedForExploitation: false,
//             },
//         ],
//         "192.168.3.23": [
//             {
//                 cveId: "CVE-2018-10933",
//                 severity: "Medium",
//                 port: "22",
//                 protocol: "TCP",
//                 exploitable: false,
//                 affectedService: "OpenSSH",
//                 description: "OpenSSH Username Enumeration",
//                 cvss: 5.3,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2018-10933"],
//                 queuedForExploitation: false,
//             },
//         ],
//         "192.168.3.167": [
//             {
//                 cveId: "CVE-2018-10933",
//                 severity: "Medium",
//                 port: "22",
//                 protocol: "TCP",
//                 exploitable: false,
//                 affectedService: "OpenSSH",
//                 description: "OpenSSH Username Enumeration",
//                 cvss: 5.3,
//                 references: ["https://nvd.nist.gov/vuln/detail/CVE-2018-10933"],
//                 queuedForExploitation: false,
//             },
//         ],
//     }
