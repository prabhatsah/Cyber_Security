"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { ProgressBar } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import {
    Shield,
    AlertTriangle,
    Bug,
    Flag,
    EyeOff,
    Eye,
    ArrowRight,
    ExternalLink,
    Plus,
    RefreshCw,
    CheckCircle,
    XCircle,
    Info,
    Server,
    Database,
    Users,
} from "lucide-react"
import { usePathname, useRouter } from "next/navigation"
import GlobalLoader from "@/components/GlobalLoader"

interface Host {
    ip: string
    hostname: string
    os: string
    role: string
    vulnerabilityCount: number
}

interface Vulnerability {
    cveId: string
    severity: "Critical" | "High" | "Medium" | "Low"
    port: string
    protocol: string
    exploitable: boolean
    affectedService: string
    description: string
    cvss: number
    references: string[]
    status: "New" | "Flagged" | "Ignored" | "Queued for Exploitation"
}

interface VulnerabilityAssessmentPanelProps {
    pentestIdName: string;
}

export function VulnerabilityAssessmentPanel({ pentestIdName }: VulnerabilityAssessmentPanelProps) {
    const [pentestId, pentestName] = decodeURIComponent(pentestIdName).split("_");
    const router = useRouter();
    const pathname = usePathname();

    const [isFirstScan, setIsFirstScan] = useState(true);
    const [selectedHost, setSelectedHost] = useState<string>("")
    const [isScanning, setIsScanning] = useState(false)
    const [scanProgress, setScanProgress] = useState(0)
    const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
    const [sortBy, setSortBy] = useState<"severity" | "cvss" | "exploitable">("severity")
    const [isLoading, setIsLoading] = useState(false)

    const hosts: Host[] = [
        {
            ip: "192.168.1.1",
            hostname: "gateway.local",
            os: "Linux 3.2 - 4.9",
            role: "Gateway/Router",
            vulnerabilityCount: 3,
        },
        {
            ip: "192.168.1.10",
            hostname: "dc01.domain.local",
            os: "Windows Server 2019",
            role: "Domain Controller",
            vulnerabilityCount: 8,
        },
        {
            ip: "192.168.1.15",
            hostname: "workstation-01",
            os: "Windows 10 Pro",
            role: "Workstation",
            vulnerabilityCount: 5,
        },
        {
            ip: "192.168.1.25",
            hostname: "db-server",
            os: "CentOS 7",
            role: "Database Server",
            vulnerabilityCount: 6,
        },
    ]

    const vulnerabilities: Record<string, Vulnerability[]> = {
        "192.168.1.10": [
            {
                cveId: "CVE-2021-44228",
                severity: "Critical",
                port: "8080",
                protocol: "TCP",
                exploitable: true,
                affectedService: "Apache Log4j",
                description: "Apache Log4j2 Remote Code Execution Vulnerability",
                cvss: 10.0,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-44228", "https://www.exploit-db.com/exploits/50592"],
                status: "New",
            },
            {
                cveId: "CVE-2020-1472",
                severity: "Critical",
                port: "445",
                protocol: "TCP",
                exploitable: true,
                affectedService: "Netlogon",
                description: "Netlogon Elevation of Privilege Vulnerability (Zerologon)",
                cvss: 9.8,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2020-1472", "https://www.exploit-db.com/exploits/48506"],
                status: "New",
            },
            {
                cveId: "CVE-2021-34527",
                severity: "High",
                port: "445",
                protocol: "TCP",
                exploitable: true,
                affectedService: "Print Spooler",
                description: "Windows Print Spooler Remote Code Execution (PrintNightmare)",
                cvss: 8.8,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-34527"],
                status: "New",
            },
            {
                cveId: "CVE-2020-0796",
                severity: "High",
                port: "445",
                protocol: "TCP",
                exploitable: false,
                affectedService: "SMBv3",
                description: "SMBv3 Remote Code Execution Vulnerability (SMBGhost)",
                cvss: 8.1,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2020-0796"],
                status: "New",
            },
        ],
        "192.168.1.15": [
            {
                cveId: "CVE-2019-0708",
                severity: "Critical",
                port: "3389",
                protocol: "TCP",
                exploitable: true,
                affectedService: "Remote Desktop Services",
                description: "Remote Desktop Services Remote Code Execution (BlueKeep)",
                cvss: 9.8,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2019-0708"],
                status: "New",
            },
            {
                cveId: "CVE-2020-0796",
                severity: "High",
                port: "445",
                protocol: "TCP",
                exploitable: false,
                affectedService: "SMBv3",
                description: "SMBv3 Remote Code Execution Vulnerability (SMBGhost)",
                cvss: 8.1,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2020-0796"],
                status: "New",
            },
        ],
        "192.168.1.25": [
            {
                cveId: "CVE-2021-44228",
                severity: "Critical",
                port: "8080",
                protocol: "TCP",
                exploitable: true,
                affectedService: "Apache Log4j",
                description: "Apache Log4j2 Remote Code Execution Vulnerability",
                cvss: 10.0,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-44228"],
                status: "New",
            },
            {
                cveId: "CVE-2019-11043",
                severity: "High",
                port: "80",
                protocol: "TCP",
                exploitable: true,
                affectedService: "PHP-FPM",
                description: "PHP-FPM Remote Code Execution",
                cvss: 8.1,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2019-11043"],
                status: "New",
            },
        ],
        "192.168.1.1": [
            {
                cveId: "CVE-2018-10933",
                severity: "Medium",
                port: "22",
                protocol: "TCP",
                exploitable: false,
                affectedService: "OpenSSH",
                description: "OpenSSH Username Enumeration",
                cvss: 5.3,
                references: ["https://nvd.nist.gov/vuln/detail/CVE-2018-10933"],
                status: "New",
            },
        ],
    }

    const [vulnStatuses, setVulnStatuses] = useState<Record<string, Record<string, Vulnerability["status"]>>>({})

    const scanTools = [
        { name: "Nuclei", icon: "🧬", active: true },
        { name: "Nessus Essentials", icon: "🛡️", active: true },
        { name: "OpenVAS", icon: "🔍", active: false },
        { name: "Nikto", icon: "🕷️", active: true },
    ]

    const getSeverityColor = (severity: string) => {
        switch (severity) {
            case "Critical":
                return "bg-red-600 hover:bg-red-700"
            case "High":
                return "bg-orange-600 hover:bg-orange-700"
            case "Medium":
                return "bg-yellow-600 hover:bg-yellow-700"
            case "Low":
                return "bg-green-600 hover:bg-green-700"
            default:
                return "bg-gray-600 hover:bg-gray-700"
        }
    }

    const getHostIcon = (role: string) => {
        switch (role) {
            case "Domain Controller":
                return <Users className="w-4 h-4 text-purple-500" />
            case "Database Server":
                return <Database className="w-4 h-4 text-blue-500" />
            default:
                return <Server className="w-4 h-4 text-gray-500" />
        }
    }

    const updateVulnerabilityStatus = (hostIp: string, cveId: string, status: Vulnerability["status"]) => {
        setVulnStatuses((prev) => ({
            ...prev,
            [hostIp]: {
                ...prev[hostIp],
                [cveId]: status,
            },
        }))
    }

    const getVulnerabilityStatus = (hostIp: string, cveId: string): Vulnerability["status"] => {
        return vulnStatuses[hostIp]?.[cveId] || "New"
    }

    const sortVulnerabilities = (vulns: Vulnerability[]) => {
        return [...vulns].sort((a, b) => {
            switch (sortBy) {
                case "severity":
                    const severityOrder = { Critical: 4, High: 3, Medium: 2, Low: 1 }
                    return severityOrder[b.severity] - severityOrder[a.severity]
                case "cvss":
                    return b.cvss - a.cvss
                case "exploitable":
                    return Number(b.exploitable) - Number(a.exploitable)
                default:
                    return 0
            }
        })
    }

    const startVulnerabilityAssessment = async () => {
        setIsScanning(true)
        setScanProgress(0)

        const interval = setInterval(() => {
            setScanProgress((prev) => {
                if (prev >= 100) {
                    clearInterval(interval)
                    setIsScanning(false)
                    setIsFirstScan(false)
                    return 100
                }
                return prev + 5
            })
        }, 300);
    }

    const selectedHostData = hosts.find((h) => h.ip === selectedHost)
    const selectedHostVulns = selectedHost ? vulnerabilities[selectedHost] || [] : []
    const sortedVulns = sortVulnerabilities(selectedHostVulns)

    const totalVulns = Object.values(vulnerabilities).flat().length
    const queuedVulns = Object.entries(vulnStatuses).flatMap(([hostIp, statuses]) =>
        Object.entries(statuses).filter(([_, status]) => status === "Queued for Exploitation"),
    ).length


    const handleProceed = () => {
        setIsLoading(true);
        router.push(`/pen-test/network-pen-test/${pentestIdName}/exploitation`);
    }

    return (
        <>
            {
                isLoading ? <GlobalLoader /> :
                    <div className="space-y-6">
                        {/* Header with Host Selector */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardHeader>
                                <div className="flex items-center justify-between">
                                    <CardTitle className="text-white flex items-center gap-2">
                                        <Shield className="w-5 h-5 text-blue-500" />
                                        Vulnerability Assessment
                                    </CardTitle>
                                    <div className="flex items-center gap-4">
                                        <div className="text-sm text-gray-300">
                                            Total Vulnerabilities: <span className="text-white font-semibold">{totalVulns}</span>
                                        </div>
                                        <div className="text-sm text-gray-300">
                                            Queued for Exploitation: <span className="text-orange-400 font-semibold">{queuedVulns}</span>
                                        </div>
                                    </div>
                                </div>
                            </CardHeader>
                            <CardContent>
                                <div className={`flex flex-col gap-4 ${!isFirstScan && "mb-6"}`}>

                                    {/* Scan Tools Panel */}
                                    <div className="flex items-center gap-6">
                                        <div className="flex-1">
                                            <label className="text-gray-300 text-sm font-medium mb-2 block">Scan Tools Used:</label>
                                            <div className="flex gap-3 justify-between">
                                                {scanTools.map((tool) => (
                                                    <div key={tool.name} className="flex gap-2">
                                                        <span className="text-2xl">{tool.icon}</span>
                                                        <div className="flex-1">
                                                            <div className="text-white text-sm">{tool.name}</div>
                                                            <Badge
                                                                variant="outline"
                                                                className={`text-xs ${tool.active ? "border-green-600 text-green-400" : "border-gray-600 text-gray-400"
                                                                    }`}
                                                            >
                                                                {tool.active ? "Active" : "Inactive"}
                                                            </Badge>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <Button
                                                onClick={startVulnerabilityAssessment}
                                                disabled={isScanning}
                                                className="bg-blue-600 hover:bg-blue-700 mt-4"
                                                size="sm"
                                            >
                                                <RefreshCw className="w-4 h-4" />
                                                {isFirstScan && !isScanning ? "Run Assessment" :
                                                    (isFirstScan && isScanning ? "Running" :
                                                        (!isFirstScan && isScanning ? "Re-Running..." : "Re-Run Assessment")
                                                    )
                                                }
                                            </Button>
                                        </div>
                                    </div>

                                    {isScanning && (
                                        <div className="">
                                            <div className="flex justify-between text-sm text-gray-300">
                                                <span>Scanning progress</span>
                                                <span>{scanProgress}%</span>
                                            </div>
                                            <ProgressBar value={scanProgress} className="w-full" />
                                        </div>
                                    )}
                                </div>

                                {!isFirstScan && (
                                    <div className="flex items-center gap-4">
                                        <div className="flex-1">
                                            <label className="text-gray-300 text-sm font-medium mb-2 block">Select Host to Analyze:</label>
                                            <Select value={selectedHost} onValueChange={setSelectedHost}>
                                                <SelectTrigger className="bg-gray-800 border-gray-700 text-white">
                                                    <SelectValue placeholder="Choose a host to view vulnerabilities" />
                                                </SelectTrigger>
                                                <SelectContent className="bg-gray-800 border-gray-700">
                                                    {hosts.map((host) => (
                                                        <SelectItem key={host.ip} value={host.ip}>
                                                            <div className="flex items-center gap-2">
                                                                {getHostIcon(host.role)}
                                                                <div>
                                                                    <div className="font-medium">{host.ip}</div>
                                                                    <div className="text-xs text-gray-400">
                                                                        {host.hostname} • {host.os} • {host.vulnerabilityCount} vulnerabilities
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </SelectItem>
                                                    ))}
                                                </SelectContent>
                                            </Select>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <label className="text-gray-300 text-sm font-medium">Sort by:</label>
                                            <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>
                                                <SelectTrigger className="w-32 bg-gray-800 border-gray-700 text-white">
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent className="bg-gray-800 border-gray-700">
                                                    <SelectItem value="severity">Severity</SelectItem>
                                                    <SelectItem value="cvss">CVSS Score</SelectItem>
                                                    <SelectItem value="exploitable">Exploitable</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </div>
                                    </div>
                                )}
                            </CardContent>
                        </Card>

                        {/* Main Content Area */}
                        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                            {/* Vulnerability List */}
                            <div className={isFirstScan ? "lg:col-span-4" : "lg:col-span-3"}>
                                {selectedHost ? (
                                    <Card className="bg-gray-900 border-gray-800">
                                        <CardHeader>
                                            <CardTitle className="text-white flex items-center gap-2">
                                                <Bug className="w-5 h-5 text-red-500" />
                                                Vulnerabilities for {selectedHostData?.hostname} ({selectedHost})
                                            </CardTitle>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="rounded-md border border-gray-800">
                                                <Table>
                                                    <TableHeader>
                                                        <TableRow className="border-gray-800">
                                                            <TableHead className="text-gray-300">CVE ID</TableHead>
                                                            <TableHead className="text-gray-300">Severity</TableHead>
                                                            <TableHead className="text-gray-300">CVSS</TableHead>
                                                            <TableHead className="text-gray-300">Port</TableHead>
                                                            <TableHead className="text-gray-300">Protocol</TableHead>
                                                            <TableHead className="text-gray-300">Exploitable</TableHead>
                                                            <TableHead className="text-gray-300">Service</TableHead>
                                                            <TableHead className="text-gray-300">Status</TableHead>
                                                            <TableHead className="text-gray-300">Actions</TableHead>
                                                        </TableRow>
                                                    </TableHeader>
                                                    <TableBody>
                                                        {sortedVulns.map((vuln) => {
                                                            const status = getVulnerabilityStatus(selectedHost, vuln.cveId)
                                                            return (
                                                                <TableRow key={vuln.cveId} className="border-gray-800 hover:bg-gray-800/50">
                                                                    <TableCell>
                                                                        <Dialog>
                                                                            <DialogTrigger asChild>
                                                                                <Button
                                                                                    variant="link"
                                                                                    className="text-blue-400 hover:text-blue-300 p-0 h-auto font-mono"
                                                                                    onClick={() => setSelectedVulnerability(vuln)}
                                                                                >
                                                                                    {vuln.cveId}
                                                                                </Button>
                                                                            </DialogTrigger>
                                                                            <DialogContent className="bg-gray-900 border-gray-800 max-w-4xl">
                                                                                <DialogHeader>
                                                                                    <DialogTitle className="text-white flex items-center gap-2">
                                                                                        <AlertTriangle className="w-5 h-5 text-red-500" />
                                                                                        {vuln.cveId} - Vulnerability Details
                                                                                    </DialogTitle>
                                                                                </DialogHeader>
                                                                                <div className="space-y-4">
                                                                                    <div className="grid grid-cols-2 gap-4">
                                                                                        <div>
                                                                                            <label className="text-gray-400 text-sm">Severity</label>
                                                                                            <div>
                                                                                                <Badge className={`${getSeverityColor(vuln.severity)} text-white`}>
                                                                                                    {vuln.severity}
                                                                                                </Badge>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div>
                                                                                            <label className="text-gray-400 text-sm">CVSS Score</label>
                                                                                            <div className="text-white font-bold text-lg">{vuln.cvss}</div>
                                                                                        </div>
                                                                                    </div>
                                                                                    <div>
                                                                                        <label className="text-gray-400 text-sm">Description</label>
                                                                                        <p className="text-gray-300">{vuln.description}</p>
                                                                                    </div>
                                                                                    <div>
                                                                                        <label className="text-gray-400 text-sm">Affected Service</label>
                                                                                        <p className="text-white">
                                                                                            {vuln.affectedService} (Port {vuln.port}/{vuln.protocol})
                                                                                        </p>
                                                                                    </div>
                                                                                    <div>
                                                                                        <label className="text-gray-400 text-sm">References</label>
                                                                                        <div className="space-y-1">
                                                                                            {vuln.references.map((ref, index) => (
                                                                                                <div key={index} className="flex items-center gap-2">
                                                                                                    <ExternalLink className="w-4 h-4 text-blue-400" />
                                                                                                    <a
                                                                                                        href={ref}
                                                                                                        target="_blank"
                                                                                                        rel="noopener noreferrer"
                                                                                                        className="text-blue-400 hover:text-blue-300 text-sm"
                                                                                                    >
                                                                                                        {ref}
                                                                                                    </a>
                                                                                                </div>
                                                                                            ))}
                                                                                        </div>
                                                                                    </div>
                                                                                    <Separator className="bg-gray-800" />
                                                                                    <div className="flex justify-end gap-2">
                                                                                        <Button
                                                                                            onClick={() =>
                                                                                                updateVulnerabilityStatus(selectedHost, vuln.cveId, "Queued for Exploitation")
                                                                                            }
                                                                                            className="bg-orange-600 hover:bg-orange-700"
                                                                                        >
                                                                                            <Plus className="w-4 h-4 mr-2" />
                                                                                            Add to Exploitation Queue
                                                                                        </Button>
                                                                                    </div>
                                                                                </div>
                                                                            </DialogContent>
                                                                        </Dialog>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <Badge className={`${getSeverityColor(vuln.severity)} text-white`}>{vuln.severity}</Badge>
                                                                    </TableCell>
                                                                    <TableCell className="text-white font-bold">{vuln.cvss}</TableCell>
                                                                    <TableCell className="text-gray-300 font-mono">{vuln.port}</TableCell>
                                                                    <TableCell className="text-gray-300">{vuln.protocol}</TableCell>
                                                                    <TableCell>
                                                                        {vuln.exploitable ? (
                                                                            <Badge className="bg-red-600 text-white">
                                                                                <CheckCircle className="w-3 h-3 mr-1" />
                                                                                Yes
                                                                            </Badge>
                                                                        ) : (
                                                                            <Badge className="bg-gray-600 text-white">
                                                                                <XCircle className="w-3 h-3 mr-1" />
                                                                                No
                                                                            </Badge>
                                                                        )}
                                                                    </TableCell>
                                                                    <TableCell className="text-gray-300">{vuln.affectedService}</TableCell>
                                                                    <TableCell>
                                                                        <Badge
                                                                            variant="outline"
                                                                            className={`text-xs ${status === "Queued for Exploitation"
                                                                                ? "border-orange-600 text-orange-400"
                                                                                : status === "Flagged"
                                                                                    ? "border-yellow-600 text-yellow-400"
                                                                                    : status === "Ignored"
                                                                                        ? "border-gray-600 text-gray-400"
                                                                                        : "border-blue-600 text-blue-400"
                                                                                }`}
                                                                        >
                                                                            {status}
                                                                        </Badge>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <div className="flex gap-1">
                                                                            <Button
                                                                                size="sm"
                                                                                variant="outline"
                                                                                onClick={() => updateVulnerabilityStatus(selectedHost, vuln.cveId, "Flagged")}
                                                                                className="border-gray-700 text-gray-300 hover:text-white"
                                                                                title="Flag vulnerability"
                                                                            >
                                                                                <Flag className="w-3 h-3" />
                                                                            </Button>
                                                                            <Button
                                                                                size="sm"
                                                                                variant="outline"
                                                                                onClick={() => updateVulnerabilityStatus(selectedHost, vuln.cveId, "Ignored")}
                                                                                className="border-gray-700 text-gray-300 hover:text-white"
                                                                                title="Ignore vulnerability"
                                                                            >
                                                                                <EyeOff className="w-3 h-3" />
                                                                            </Button>
                                                                            <Button
                                                                                size="sm"
                                                                                variant="outline"
                                                                                onClick={() => setSelectedVulnerability(vuln)}
                                                                                className="border-gray-700 text-gray-300 hover:text-white"
                                                                                title="View details"
                                                                            >
                                                                                <Eye className="w-3 h-3" />
                                                                            </Button>
                                                                        </div>
                                                                    </TableCell>
                                                                </TableRow>
                                                            )
                                                        })}
                                                    </TableBody>
                                                </Table>
                                            </div>
                                        </CardContent>
                                    </Card>
                                ) : (
                                    <Card className="bg-gray-900 border-gray-800">
                                        <CardContent className="flex items-center justify-center h-64">
                                            <div className="text-center">
                                                <Info className="w-12 h-12 text-gray-500 mx-auto mb-4" />
                                                <p className="text-gray-400">Select a host from the dropdown to view vulnerabilities</p>
                                            </div>
                                        </CardContent>
                                    </Card>
                                )}
                            </div>

                            {/* Actions Panel */}
                            {
                                !isFirstScan && (
                                    <div className="lg:col-span-1 space-y-4">
                                        {/* Summary Stats */}
                                        <Card className="bg-gray-900 border-gray-800">
                                            <CardHeader>
                                                <CardTitle className="text-white text-sm">Assessment Summary</CardTitle>
                                            </CardHeader>
                                            <CardContent className="space-y-3">
                                                <div className="flex justify-between">
                                                    <span className="text-gray-400 text-sm">Total Hosts</span>
                                                    <span className="text-white font-semibold">{hosts.length}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-400 text-sm">Total Vulnerabilities</span>
                                                    <span className="text-white font-semibold">{totalVulns}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-400 text-sm">Critical</span>
                                                    <span className="text-red-400 font-semibold">
                                                        {
                                                            Object.values(vulnerabilities)
                                                                .flat()
                                                                .filter((v) => v.severity === "Critical").length
                                                        }
                                                    </span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-400 text-sm">High</span>
                                                    <span className="text-orange-400 font-semibold">
                                                        {
                                                            Object.values(vulnerabilities)
                                                                .flat()
                                                                .filter((v) => v.severity === "High").length
                                                        }
                                                    </span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-400 text-sm">Exploitable</span>
                                                    <span className="text-red-400 font-semibold">
                                                        {
                                                            Object.values(vulnerabilities)
                                                                .flat()
                                                                .filter((v) => v.exploitable).length
                                                        }
                                                    </span>
                                                </div>
                                            </CardContent>
                                        </Card>
                                    </div>
                                )
                            }
                        </div>

                        {/* Bottom CTA */}
                        <Card className="bg-gray-900 border-gray-800">
                            <CardContent className="p-4">
                                <div className="flex items-center justify-between">
                                    <div className="text-sm text-gray-300">{queuedVulns} vulnerabilities queued for exploitation phase</div>
                                    <Button onClick={handleProceed} disabled={queuedVulns === 0} className="bg-green-600 hover:bg-green-700">
                                        <ArrowRight className="w-4 h-4 mr-2" />
                                        Proceed to Exploitation
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    </div>
            }
        </>
    )
}
