import { Input } from "@/components/Input";
import { ChangeEvent, useMemo, useState } from "react";
import { Button } from "@/components/Button";
import { format } from "date-fns";
import { updateDataObject } from "@/utils/api";
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService";
import { IpInput } from "@/components/IpInput";
import { Dialog, DialogPanel, Select, SelectItem, Textarea } from "@tremor/react";
import { Building2 } from "lucide-react";
import { getFormattedTimeZones } from "./FetchAllFormattedTimeZones";
import { RiCloseLine } from "@remixicon/react";
import { addPentestEntry } from "../../components/apis/configurePentestDataHandler";
import { BasicDetails } from "./type";


// interface FormData {
//     webAppName: string;
//     pentestName: string;
//     pentestDescription: string;
//     scope: 'Internal' | 'External' | 'Both';
//     testingType: 'Black Box' | 'White Box' | 'Gray Box';
//     startDate: string;
//     endDate: string;
//     timeZone: string;
//     priorityLevel: 'Low' | 'Medium' | 'High';
//     securityLevel: 'Low' | 'Medium' | 'High';
// }
interface ErrorState {
    [key: string]: string;
}

export default function PenTestConfigFormModal({
    isFormModalOpen,
    onClose,
}: {
    isFormModalOpen: boolean;
    onClose: () => void;
}) {
    const timeZones: string[] = useMemo(() => getFormattedTimeZones(), []);

    // Error states and other feedback
    const [errors, setErrors] = useState<ErrorState>({});

    // Standard input handler
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLTextAreaElement>
    ) => {
        const { name, value } = e.target;
        setErrors({});
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const [formData, setFormData] = useState({
        webApp: '',
        pentestName: '',
        pentestDescription: '',
        scope: '',
        testingType: '',
        startDate: '',
        endDate: '',
        timeZone: '',
        priorityLevel: '',
        securityLevel: '',
    });


    // Validate form
    const validateForm = (): boolean => {
        const newErrors: ErrorState = {};

        if (!formData.webApp.trim()) {
            newErrors.webApp = "Web Application must be specified!";
        }

        if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Penetration Test Name must be at least 3 characters long. Please provide a valide Penetration Test Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }

        if (!formData.scope) {
            newErrors.scope = "Please select a Scope!";
        }

        if (!formData.testingType.trim()) {
            newErrors.testingType = "Please select Testing Type!";
        }

        if (!formData.startDate.trim()) {
            newErrors.startDate = "Start Date must be specified. Please provide a Start Date!";
        }

        if (!formData.endDate.trim()) {
            newErrors.endDate = "End Date must be specified. Please provide a End Date!";
        }

        if (!formData.timeZone) {
            newErrors.timeZone = "Time Zone must be specified. Please provide a Time Zone!";
        }

        if (!formData.priorityLevel) {
            newErrors.priorityLevel = "Priority Level must be specified. Please provide a Priority Level!";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    async function handleFormSave(event: React.FormEvent) {
        event.preventDefault();

        if (!validateForm()) return;

        const loggedInUserDetails = await getLoggedInUserProfile();
        const createdBy = {
            userId: loggedInUserDetails.USER_ID,
            userName: loggedInUserDetails.USER_NAME,
        }

        const pentestId = crypto.randomUUID();
        const basicDetails: BasicDetails = {
            pentestId: pentestId,
            webApp: formData.webApp,
            pentestName: formData.pentestName,
            pentestDescription: formData.pentestDescription,
            scope: formData.scope,
            testingType: formData.testingType,
            startDate: formData.startDate,
            endDate: formData.endDate,
            timeZone: formData.timeZone,
            priorityLevel: formData.priorityLevel,
            securityLevel: formData.securityLevel,
            createdOn: format(new Date(), "yyyy-MMM-dd HH:mm:ss"),
            createdBy: createdBy,
        };

        addPentestEntry(pentestId, "web_app", basicDetails);
        handleClose();
    };

    const handleClose = () => {
        setFormData({
            webApp: '',
            pentestName: '',
            pentestDescription: '',
            scope: '',
            testingType: '',
            startDate: '',
            endDate: '',
            timeZone: '',
            priorityLevel: '',
            securityLevel: '',
        });
        setErrors({});

        onClose();
    };

    return (
        <>
            <Dialog open={isFormModalOpen} onClose={onClose} static={true}>
                <DialogPanel className="overflow-visible rounded-md p-0 sm:max-w-5xl">
                    <form action="#" method="POST">
                        {/* <div className="border-b border-tremor-border px-6 py-4 dark:border-dark-tremor-border">
                            <div className="flex items-center gap-3">
                                <Building2 className="h-6 w-6 text-blue-600" />
                                <h3 className="font-medium text-widget-title">Configure PenTest</h3>
                            </div>
                        </div> */}


                        <div className="absolute right-0 top-0 pr-3 pt-3">
                            <button
                                type="button"
                                className="rounded-sm p-2 text-tremor-content-subtle hover:bg-tremor-background-subtle hover:text-tremor-content dark:text-dark-tremor-content-subtle hover:dark:bg-dark-tremor-background-subtle hover:dark:text-tremor-content"
                                onClick={() => handleClose()}
                                aria-label="Close"
                            >
                                <RiCloseLine className="size-5 shrink-0" aria-hidden={true} />
                            </button>
                        </div>
                        <div className="border-b border-tremor-border px-6 py-4 dark:border-dark-tremor-border">
                            <h3 className="font-medium text-tremor-content-strong dark:text-dark-tremor-content-strong">
                                Configure Penetration Test
                            </h3>
                        </div>

                        <div className="max-h-[80vh] overflow-y-auto p-6">
                            {/* Main Form */}
                            <div className="space-y-6">
                                {/* Basic Information */}
                                <div className="space-y-4">
                                    <h2 className="text-lg font-medium text-widgetHeader">Basic Information</h2>

                                    <div className="space-y-4">
                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label htmlFor="webApp" className="text-sm font-medium text-widget-mainHeader">Web Application <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <Input
                                                        id="webApp"
                                                        name="webApp"
                                                        value={formData.webApp}
                                                        className={
                                                            errors.webApp
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onChange={handleInputChange}
                                                        placeholder="Enter Web Application"
                                                    />

                                                    {errors.webApp ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.webApp}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>


                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label htmlFor="pentestName" className="text-sm font-medium text-widget-mainHeader">Penetration Test Name <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <Input
                                                        id="pentestName"
                                                        name="pentestName"
                                                        value={formData.pentestName}
                                                        className={
                                                            errors.pentestName
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onChange={handleInputChange}
                                                        placeholder="Enter Penetration Test Name"
                                                    />

                                                    {errors.pentestName ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.pentestName}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>


                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label htmlFor="pentestDescription" className="text-sm font-medium text-widget-mainHeader">Penetration Test Description <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <Textarea
                                                        rows={3}
                                                        id="pentestDescription"
                                                        name="pentestDescription"
                                                        value={formData.pentestDescription}
                                                        className={
                                                            errors.pentestDescription
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onChange={handleInputChange}
                                                        placeholder="Enter Penetration Test Description"
                                                    />

                                                    {errors.pentestName ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.pentestName}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>

                                {/* Test Parameters */}
                                <div className="space-y-4">
                                    <h2 className="text-lg font-medium text-widgetHeader">Test Parameters</h2>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <div className="flex flex-col space-y-3 px-3">
                                                <label className="text-sm font-medium text-widget-mainHeader mb-2">Scope <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <div className="flex justify-between">
                                                        {['Internal', 'External', 'Both'].map((option) => (
                                                            <div key={option} className="flex items-center space-x-2">
                                                                <Input
                                                                    type="radio"
                                                                    value={option}
                                                                    name="scope"
                                                                    id={`scope_${option}`}
                                                                    checked={formData.scope === option}
                                                                    className={errors.scope
                                                                        ? "border border-red-500 rounded-md"
                                                                        : ""}
                                                                    onChange={handleInputChange}
                                                                />
                                                                <label htmlFor={`scope_${option}`} className="text-sm font-medium text-widget-secondaryheader">{option}</label>
                                                            </div>
                                                        ))}
                                                    </div>

                                                    {errors.scope ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.scope}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>

                                        <div>
                                            <div className="flex flex-col space-y-3 px-3">
                                                <label className="text-sm font-medium text-widget-mainHeader mb-2">Type of Testing <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <div className="flex justify-between">
                                                        {['Black Box', 'White Box', 'Gray Box'].map((option) => (
                                                            <div key={option} className="flex items-center space-x-2">
                                                                <Input
                                                                    type="radio"
                                                                    value={option}
                                                                    name="testingType"
                                                                    id={`testingType_${option}`}
                                                                    checked={formData.testingType === option}
                                                                    className={errors.scope
                                                                        ? "border border-red-500 rounded-md"
                                                                        : ""}
                                                                    onChange={handleInputChange}
                                                                />
                                                                <label htmlFor={`testingType_${option}`} className="text-sm font-medium text-widget-secondaryheader whitespace-nowrap">{option}</label>
                                                            </div>
                                                        ))}
                                                    </div>


                                                    {errors.testingType ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.testingType}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Timeline */}
                                <div className="space-y-4">
                                    <h2 className="text-lg font-medium text-widgetHeader">Timeline</h2>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label htmlFor="startDate" className="text-sm font-medium text-widget-mainHeader">Start Date <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <Input
                                                        id="startDate"
                                                        name="startDate"
                                                        type="datetime-local"
                                                        value={formData.startDate}
                                                        className={
                                                            errors.startDate
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onChange={handleInputChange}
                                                    />

                                                    {errors.startDate ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.startDate}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>


                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label className="text-sm font-medium text-widget-mainHeader">End Date <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <Input
                                                        id="endDate"
                                                        name="endDate"
                                                        type="datetime-local"
                                                        value={formData.endDate}
                                                        className={
                                                            errors.endDate
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onChange={handleInputChange}
                                                    />

                                                    {errors.endDate ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.endDate}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                    <div>
                                        <div className="flex flex-col space-y-3">
                                            <label className="text-sm font-medium text-widget-mainHeader">Time Zone <span className="text-red-500">*</span></label>

                                            <div className="flex flex-col gap-1">
                                                <Select
                                                    id="timeZone"
                                                    name="timeZone"
                                                    value={formData.timeZone}
                                                    className={
                                                        errors.timeZone
                                                            ? "w-full border border-red-500 rounded-md"
                                                            : "w-full"
                                                    }
                                                    onValueChange={(val) => {
                                                        setFormData((prev) => ({ ...prev, timeZone: val }))
                                                    }}
                                                >
                                                    {timeZones.map((eachTimeZone) => (
                                                        <SelectItem key={eachTimeZone} value={eachTimeZone}>
                                                            {eachTimeZone}
                                                        </SelectItem>
                                                    ))}
                                                </Select>

                                                {errors.timeZone ? (
                                                    <p className="text-xs text-red-500">
                                                        {errors.timeZone}
                                                    </p>
                                                ) : undefined}
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Levels */}
                                <div className="space-y-4">
                                    <h2 className="text-lg font-medium text-widgetHeader">Levels</h2>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label htmlFor="priorityLevel" className="text-sm font-medium text-widget-mainHeader">Priority Level <span className="text-red-500">*</span></label>

                                                <div className="flex flex-col gap-1">
                                                    <Select
                                                        id="priorityLevel"
                                                        name="priorityLevel"
                                                        value={formData.priorityLevel}
                                                        className={
                                                            errors.priorityLevel
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onValueChange={(val) => {
                                                            setFormData((prev) => ({ ...prev, priorityLevel: val }))
                                                        }}
                                                    >
                                                        <SelectItem value="Low">Low</SelectItem>
                                                        <SelectItem value="Medium">Medium</SelectItem>
                                                        <SelectItem value="High">High</SelectItem>
                                                    </Select>

                                                    {errors.priorityLevel ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.priorityLevel}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>


                                        <div>
                                            <div className="flex flex-col space-y-3">
                                                <label htmlFor="securityLevel" className="text-sm font-medium text-widget-mainHeader">Security Level (Optional)</label>

                                                <div className="flex flex-col gap-1">
                                                    <Select
                                                        id="securityLevel"
                                                        name="securityLevel"
                                                        value={formData.securityLevel}
                                                        className={
                                                            errors.securityLevel
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onValueChange={(val) => {
                                                            setFormData((prev) => ({ ...prev, securityLevel: val }))
                                                        }}
                                                    >
                                                        <SelectItem value="Low">Low</SelectItem>
                                                        <SelectItem value="Medium">Medium</SelectItem>
                                                        <SelectItem value="High">High</SelectItem>
                                                    </Select>

                                                    {errors.securityLevel ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.securityLevel}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="border-b border-tremor-border px-6 py-4 dark:border-dark-tremor-border">
                            <div className="flex justify-end gap-3">
                                <Button className="" variant="secondary" onClick={onClose}>
                                    Cancel
                                </Button>
                                <Button className="" variant="primary" onClick={handleFormSave}>
                                    Save Configuration
                                </Button>
                            </div>
                        </div>
                    </form>
                </DialogPanel>
            </Dialog>
        </>
    );
}
