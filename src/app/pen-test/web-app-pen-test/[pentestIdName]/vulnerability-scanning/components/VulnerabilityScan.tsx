// "use client";

// import { useEffect, useState } from "react";
// import { FaFire, FaSpider } from "react-icons/fa6";

// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/Tabs";
// import { usePolling } from "@/app/scans/WebApi/hooks/usePolling";
// import Dashboard from "@/app/scans/WebApi/components/dashboard";
// import ActiveScan from "@/app/scans/WebApi/components/ActiveScan";
// import SpiderScan from "@/app/scans/WebApi/components/SpiderScan";
// import { LuRefreshCw } from "react-icons/lu";
// import { GiElectric } from "react-icons/gi";
// import { usePentestContext } from "../../components/PentestContext";


// // const apiUrl = "https://ikoncloud-uat.keross.com/cyber-security/api/webApi/ZAP";
// const apiUrl = process.env.NEXT_PUBLIC_API_URL || "/api/webApi/ZAP";

// export default function VulnerabilityScan({
//   pentestIdName,
// }: {
//   pentestIdName: string;
// }) {

//   const [data, setData] = useState(null);
//   const [openTabs, setOpenTabs] = useState(false);

//   const [pentestId, pentestNameInUrl] = pentestIdName.split("_");

//   // const pathname = usePathname();
//   // const parts = pathname.split('/');
//   // const pentestId = parts[parts.length - 2].split('_')[0];

//   const { pentestData, loading, error, setPentestId } = usePentestContext();

//   useEffect(() => {
//     if (typeof pentestId === 'string') {
//       setPentestId(pentestId);
//     }
//   }, [pentestId]);

//   // const query = pentestData?.basicDetails?.webApp ? "https://" + pentestData?.basicDetails?.webApp : "";

//   const {
//     isScanning,
//     spiderProgress,
//     foundURI,
//     scanDetails,
//     messages,
//     startScan,
//   } = usePolling(apiUrl, pentestData?.basicDetails?.target ? pentestData?.basicDetails?.target : "", setOpenTabs, setData);

//   if (loading) return <div>Loading Pentest Data...</div>;
//   if (error) return <div>{error}</div>;
//   if (!pentestData) return <div>No data found.</div>;

//   console.log(pentestId);
//   console.log(pentestData);
//   console.log(data);

//   return (
//     <>
//       <div className="flex justify-end mb-5">
//         <button
//           onClick={startScan}
//           disabled={isScanning}
//           className={`flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg ${isScanning ? "opacity-50 cursor-not-allowed" : ""
//             }`}
//         >
//           {isScanning ? (
//             <span className="animate-spin"><LuRefreshCw /></span>
//           ) : (
//             <GiElectric size={20} style={{ transform: 'rotate(15deg)' }} />
//           )}

//           {isScanning ? "Scanning..." : "Start Scan"}

//         </button>
//       </div>

//       {openTabs && <Tabs defaultValue="tab1">
//         <TabsList variant="solid" >
//           <TabsTrigger value="tab1" className="gap-1.5 flex ">
//             <FaSpider className="-ml-1 size-4" aria-hidden="true" />
//             Spider
//           </TabsTrigger>
//           <TabsTrigger value="tab2" className="gap-1.5 flex ">
//             <FaFire className="-ml-1 size-4" aria-hidden="true" />
//             Active Scan
//           </TabsTrigger>
//         </TabsList>
//         <div className="mt-4">
//           <TabsContent value="tab1">
//             <div>
//               <SpiderScan progress={spiderProgress} foundURI={foundURI} />
//             </div>
//           </TabsContent>
//           <TabsContent value="tab2">
//             <div>
//               <ActiveScan
//                 progress={scanDetails.activeProgress}
//                 newAlerts={scanDetails.newAlerts}
//                 numRequests={scanDetails.numRequests}
//                 messages={messages}
//               />
//             </div>
//           </TabsContent>
//         </div>
//       </Tabs>}

//       {data && <Dashboard _data={data} />}
//     </>
//   )
// }

"use client";

import { useEffect, useState } from "react";
import { usePentestContext } from "../../components/PentestContext";
import { Button } from "@/components/Button";
import { ScanLine } from "lucide-react";
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService";
import StartScan from "@/utils/generic-start-scan";
import { useScanNotification } from "@/contexts/ScanNotificationContext";
import Dashboard from "@/app/scans/WebApi/components/dashboard";

const apiUrl = "https://ikoncloud-uat.keross.com/cyber-security/api/webApi/ZAP";

export default function VulnerabilityScan({
  pentestIdName,
}: {
  pentestIdName: string;
}) {

  const [isScanning, setIsScanning] = useState(false);
  const { setScanNotificationData } = useScanNotification();
  const [pentestId, pentestNameInUrl] = pentestIdName.split("_");

  const { pentestData, loading, error, setPentestId } = usePentestContext();

  useEffect(() => {
    if (typeof pentestId === 'string') {
      setPentestId(pentestId);
    }
  }, [pentestId]);

  if (loading) return <div>Loading Pentest Data...</div>;
  if (error) return <div>{error}</div>;
  if (!pentestData) return <div>No data found.</div>;

  // const query = pentestData?.basicDetails?.target ? "https://" + pentestData?.basicDetails?.target : "";
  const query = pentestData?.basicDetails?.target;
  const zapData = pentestData.scanData.zap;


  console.log(pentestId);
  console.log(pentestData);

  async function initiateVulnerabilityScan() {
    setIsScanning(true);

    console.log("Passive recon initiated...");
    const userId = (await getLoggedInUserProfile()).USER_ID;
    const webApp = pentestData && pentestData.basicDetails ? pentestData.basicDetails.target : "";
    console.log(userId, webApp, pentestId);

    const target = query.replace(/\/+$/, "")

    const resp = await StartScan(userId, "zap", target, pentestId, new Date().toISOString());

    const data = {
      scanId: resp.scan_id,
      tool: resp.tool,
      target: resp.target,
      startTime: resp.start_time,
      endTime: "",
      status: resp.status,
      pentestId: resp.pentestid,
    }

    console.log("Vulnerability Scan Initiated:", data);
    setScanNotificationData((prevScanNotificationData) => {
      if (data) return [...prevScanNotificationData, data];

      return [...prevScanNotificationData];
    });
    setIsScanning(false);
    console.log(data);
  }

  return (
    <>
      <div className="flex justify-end">
        {
          isScanning ? <Button isLoading>Scanning</Button> : <Button onClick={initiateVulnerabilityScan} variant="primary" className="flex items-center gap-2">
            <ScanLine className="h-5 w-5" />

            Start Scan
          </Button>
        }
      </div>
      {zapData && <Dashboard _data={zapData} />}
    </>
  )
}