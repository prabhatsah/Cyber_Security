"use client";

import { useEffect, useState } from "react";
import { FaFire, FaSpider } from "react-icons/fa6";

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/Tabs";
import { usePolling } from "@/app/scans/webApi/hooks/usePolling";
import Dashboard from "@/app/scans/webApi/dashboard";
import ActiveScan from "@/app/scans/webApi/components/ActiveScan";
import SpiderScan from "@/app/scans/webApi/components/SpiderScan";
import { LuRefreshCw } from "react-icons/lu";
import { GiElectric } from "react-icons/gi";
import { usePentestContext } from "../../components/PentestContext";


const apiUrl = process.env.NEXT_PUBLIC_API_URL || "/api/webApi/ZAP";

export default function VulnerabilityScan({
  pentestIdName,
}: {
  pentestIdName: string;
}) {

  const [data, setData] = useState(null);
  const [openTabs, setOpenTabs] = useState(false);

  const [pentestId, pentestNameInUrl] = pentestIdName.split("_");

  // const pathname = usePathname();
  // const parts = pathname.split('/');
  // const pentestId = parts[parts.length - 2].split('_')[0];

  const { pentestData, loading, error, setPentestId } = usePentestContext();

  useEffect(() => {
    if (typeof pentestId === 'string') {
      setPentestId(pentestId);
    }
  }, [pentestId]);

  const {
    isScanning,
    spiderProgress,
    activeProgress,
    foundURI,
    newAlerts,
    numRequests,
    messages,
    startScan,
  } = usePolling(apiUrl, "keross.com", setOpenTabs, setData);

  if (loading) return <div>Loading Pentest Data...</div>;
  if (error) return <div>{error}</div>;
  if (!pentestData) return <div>No data found.</div>;

  console.log(pentestId);
  console.log(pentestData);

  return (
    <>
      <button
        onClick={startScan}
        disabled={isScanning}
        className={`flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg ${isScanning ? "opacity-50 cursor-not-allowed" : ""
          }`}
      >
        {isScanning ? (
          <span className="animate-spin"><LuRefreshCw /></span>
        ) : (
          <GiElectric size={20} style={{ transform: 'rotate(15deg)' }} />
        )}

        {isScanning ? "Scanning..." : "Start Scan"}

      </button>

      {openTabs && <Tabs defaultValue="tab1">
        <TabsList variant="solid" >
          <TabsTrigger value="tab1" className="gap-1.5 flex ">
            <FaSpider className="-ml-1 size-4" aria-hidden="true" />
            Spider
          </TabsTrigger>
          <TabsTrigger value="tab2" className="gap-1.5 flex ">
            <FaFire className="-ml-1 size-4" aria-hidden="true" />
            Active Scan
          </TabsTrigger>
        </TabsList>
        <div className="mt-4">
          <TabsContent value="tab1">
            <div>
              <SpiderScan progress={spiderProgress} foundURI={foundURI} />
            </div>
          </TabsContent>
          <TabsContent value="tab2">
            <div>
              <ActiveScan
                progress={activeProgress}
                newAlerts={newAlerts}
                numRequests={numRequests}
                messages={messages}
              />
            </div>
          </TabsContent>
        </div>
      </Tabs>}

      {data && <Dashboard _data={data} />}
    </>
  )
}