import React, { useMemo } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import {
    BarChart,
    Bar,
    LineChart,
    Line,
    PieChart,
    Pie,
    Cell,
    XAxis,
    YAxis,
    Tooltip,
    Legend,
    ResponsiveContainer,
} from 'recharts';
import { CircleSmall } from "lucide-react";

interface RawEntry { source: string; data: { summary: string } }
interface DashboardProps { data: RawEntry[] }
const COLORS = ['#4f46e5', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];

interface Port {
    ip: string;
    port: number;
    protocol: string;
    service: string;
}

interface PortsSectionProps {
    ports: Port[];
    summary: string;
}

interface TechSuggestion {
    name: string;
    factor: 'high' | 'medium' | 'low' | string;
    percentage: number;
}


function parseJson(block: string) {
    try { return JSON.parse(block.replace(/```json\n?|```/g, '').trim()); }
    catch { return {}; }
}

export default function Dashboard({ data }: DashboardProps) {
    const { amass, nmap, whatweb, recMap } = useMemo(() => {
        const bySource = Object.fromEntries(data.map(d => [d.source, parseJson(d.data.summary)]));
        const recMap: Record<string, string[]> = {};
        data.forEach(({ source, data: d }) => {
            const parsed = parseJson(d.summary);
            recMap[source] = (parsed.summary || []);//.map(r => r.summary);
        });
        return { amass: bySource['amass'], nmap: bySource['nmap'], whatweb: bySource['whatweb'], recMap };
    }, [data]);

    // Row 1: Amass metrics
    const amassCounts = useMemo(() => [
        { name: 'Sub-domains', count: amass['domains']['sub-domain']?.length || 0 },
        { name: 'Mail-servers', count: amass['domains']['mail-server']?.length || 0 },
        { name: 'Name-servers', count: amass['domains']['name-server']?.length || 0 },
        { name: 'Networks', count: amass['domains']['networks']?.length || 0 },
    ], [amass]);
    const amassLines = recMap["amass"].split("\n").map(line => line.trim()).filter(line => line.length > 0);
    const icons = [<CircleSmall color="#d1e91c" strokeWidth={1.75} />];

    // // Row 2: Nmap line data
    const nmapData = useMemo(() => {
        const ports = nmap.ports || [];
        return (ports as any[]).map(p => ({
            port: p.port,
            ip: p.ip,
            protocol: p.protocol,
            service: p.service,
            value: 1,           // constant height
        })).sort((a, b) => a.port - b.port);
    }, [nmap]);

    const counts = nmapData.reduce<Record<string, number>>((acc, p) => {
        acc[p.port] = (acc[p.port] || 0) + 1;
        return acc;
    }, {});

    const nmapLines = recMap["nmap"].split("\n").map(line => line.trim()).filter(line => line.length > 0);


    // Row 3: Whatweb pie data
    // const techData = useMemo(() => {
    //     const techs: string[] = whatweb.technologies || [];
    //     const counts: Record<string, number> = {};
    //     techs.forEach(t => { counts[t] = (counts[t] || 0) + 1; });
    //     return Object.entries(counts).map(([name, value]) => ({ name, value }));
    // }, [whatweb]);

    // const techSuggestionData: TechSuggestion[] =
    //     Object.fromEntries(
    //         data.map(d => [d.source, parseJson(d.data.summary)])
    //     )['whatweb']['recommendations']
    //         .map((r: any) => ({
    //             name: r.recommendation,
    //             factor: (r.risk_factor || '').toLowerCase(),
    //             percentage: Number(r.percentage) || 0,
    //         }))
    //         .sort((a, b) => {
    //             const order: Record<string, number> = { high: 0, medium: 1, low: 2 };
    //             const fa = order[a.factor] ?? 3;
    //             const fb = order[b.factor] ?? 3;
    //             if (fa !== fb) return fa - fb;
    //             return b.percentage - a.percentage;
    //         });

    return (
        <div className="space-y-8 p-6">
            {/* Row 1: Sub-domains & Recommendations  */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Metrics Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Domains: Type Counts</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <BarChart data={amassCounts} margin={{ top: 10, right: 30, bottom: 5, left: 0 }}>
                                <XAxis dataKey="name" />
                                <YAxis />
                                <Tooltip />
                                <Bar dataKey="count" fill={COLORS[0]} />
                            </BarChart>
                        </ResponsiveContainer>
                    </CardContent>
                </Card>

                {/* Recommendations Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Domain Analysis</h3>
                    </CardHeader>
                    <CardContent>
                        <div className="max-h-64 overflow-y-auto grid gap-4 p-2">
                            {amassLines.map((line, idx) => (
                                <div
                                    key={idx}
                                    className={`flex items-start rounded-lg bg-[${COLORS[idx % COLORS.length]}] 
                                    hover:scale-[1.02] transition-transform ease-in-out duration-200`}
                                >
                                    <div className="mr-3 text-white">{icons[idx % icons.length]}</div>
                                    <p className="text-lg leading-snug" style={{ color: COLORS[idx % COLORS.length] }}>
                                        {line}
                                    </p>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* Row 2: Ports & Recommendations */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Ports Table */}
                <Card className="shadow-lg rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Open Ports Table</h3>
                    </CardHeader>
                    <CardContent>
                        <table className="w-full table-auto border-collapse text-left table-striped">
                            <thead>
                                <tr>
                                    <th className="border-b px-4 py-2">IP</th>
                                    <th className="border-b px-4 py-2">Port</th>
                                    <th className="border-b px-4 py-2">Protocol</th>
                                    <th className="border-b px-4 py-2">Service</th>
                                </tr>
                            </thead>
                            <tbody>
                                {nmapData.map((p, idx) => (
                                    <tr key={idx} className="odd:bg-gray-10">
                                        <td className="px-4 py-2">{p.ip}</td>
                                        <td className="px-4 py-2">{p.port}</td>
                                        <td className="px-4 py-2">{p.protocol}</td>
                                        <td className="px-4 py-2">{p.service}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </CardContent>
                </Card>

                <Card className="shadow-lg rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Port Analysis</h3>
                    </CardHeader>
                    <CardContent>
                        <div className="max-h-64 overflow-y-auto grid gap-4 p-2">
                            {nmapLines.map((line, idx) => (
                                <div
                                    key={idx}
                                    className={`flex items-start rounded-lg bg-[${COLORS[idx % COLORS.length]}] 
                                    hover:scale-[1.02] transition-transform ease-in-out duration-200`}
                                >
                                    <div className="mr-3 text-white">{icons[idx % icons.length]}</div>
                                    <p className="text-lg leading-snug" style={{ color: COLORS[idx % COLORS.length] }}>
                                        {line}
                                    </p>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* Row 3: Technologies & Recommendations */}
            {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Technologies: Used</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <PieChart>
                                <Pie data={techData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
                                    {techData.map((_, i) => <Cell key={i} fill={COLORS[(i + 3) % COLORS.length]} />)}
                                </Pie>
                                <Tooltip />
                                <Legend />
                            </PieChart>
                        </ResponsiveContainer>
                    </CardContent>
                </Card>
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Technical Security: Recommendations</h3></CardHeader>
                    <CardContent className="flex flex-wrap gap-2">
                        {techSuggestionData.map((rec, idx) => {
                            let bgClass = '';
                            switch (rec.factor) {
                                case 'high':
                                    bgClass = 'bg-red-500';
                                    break;
                                case 'medium':
                                    bgClass = 'bg-yellow-400';
                                    break;
                                case 'low':
                                    bgClass = 'bg-green-500';
                                    break;
                                default:
                                    bgClass = 'bg-gray-300';
                            }
                            return (
                                <span
                                    key={idx}
                                    className={`${bgClass} text-white text-sm font-medium px-3 py-1 rounded-full`}
                                >
                                    {rec.name}
                                </span>
                            );
                        })}
                    </CardContent>
                </Card>
            </div> */}
        </div>
    );
}
