import React, { useMemo } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import {
    BarChart,
    Bar,
    XAxis,
    YAxis,
    Tooltip,
    Legend,
    ResponsiveContainer,
} from 'recharts';
import { CircleSmall } from "lucide-react";
import { TagCloud } from 'react-tagcloud';

interface RawEntry { source: string; data: { summary: string } }
interface DashboardProps { data: RawEntry[] }
const COLORS = [
  '#EF476F',  // Vivid Pink
  '#FFD166',  // Bright Amber
  '#06D6A0',  // Fresh Mint
  '#FF6F61',  // Deep Sky
  '#00B4D8'   // Rich Navy
];

interface Port {
    ip: string;
    port: number;
    protocol: string;
    service: string;
}

interface PortsSectionProps {
    ports: Port[];
    summary: string;
}


function parseJson(block: string) {
    try { return JSON.parse(block.replace(/```json\n?|```/g, '').trim()); }
    catch { return {}; }
}

export default function Dashboard({ data }: DashboardProps) {
    const { amass, nmap, whatweb, recMap } = useMemo(() => {
        const bySource = Object.fromEntries(data.map(d => [d.source, parseJson(d.data.summary)]));
        const recMap: Record<string, string[]> = {};
        data.forEach(({ source, data: d }) => {
            const parsed = parseJson(d.summary);
            recMap[source] = (parsed.summary || []);//.map(r => r.summary);
        });
        return { amass: bySource['amass'], nmap: bySource['nmap'], whatweb: bySource['whatweb'], recMap };
    }, [data]);

    // Row 1: Amass metrics
    const amassCounts = useMemo(() => {
        if (!amass['domains']['sub-domain'].length || !amass['domains']['mail-server'].length || !amass['domains']['name-server'].length || !amass['domains']['networks'].length) return [];

        return [
            { name: 'Sub-domains', count: amass['domains']['sub-domain']?.length || 0 },
            { name: 'Mail-servers', count: amass['domains']['mail-server']?.length || 0 },
            { name: 'Name-servers', count: amass['domains']['name-server']?.length || 0 },
            { name: 'Networks', count: amass['domains']['networks']?.length || 0 },
        ];
    }, [amass]);
    const amassLines = recMap["amass"].split("\n").map(line => line.trim()).filter(line => line.length > 0);
    const icons = [<CircleSmall color="#d1e91c" strokeWidth={1.75} />];

    // // Row 2: Nmap line data
    const nmapData = useMemo(() => {
        const ports = nmap.ports || [];
        return (ports as any[]).map(p => ({
            port: p.port,
            ip: p.ip,
            protocol: p.protocol,
            service: p.service,
            value: 1,           // constant height
        })).sort((a, b) => a.port - b.port);
    }, [nmap]);

    const counts = nmapData.reduce<Record<string, number>>((acc, p) => {
        acc[p.port] = (acc[p.port] || 0) + 1;
        return acc;
    }, {});

    const nmapLines = recMap["nmap"].split("\n").map(line => line.trim()).filter(line => line.length > 0);


    // Row 3: Whatweb pie data
    // 1) Build a single array of tech names + one "Email :" entry
    const whatwebTech: string[] = useMemo(() => {
        // Destructure out the two arrays
        const techs = whatweb.technologies.technologies ?? [];
        const emails = whatweb.technologies.emails ?? [];

        // If there are any emails, join them into one string
        const emailEntry = emails.length
            ? `Email : ${emails.join(', ')}`
            : undefined;

        // Return [ ...techs, emailEntry ] if emailEntry exists; else just techs
        return emailEntry ? [...techs, emailEntry] : techs;
    }, [
        // Re-run this memo when either array changes
        whatweb.technologies.technologies,
        whatweb.technologies.emails,
    ]);

    // 2) Your existing techData logic, receiving whatwebTech unchanged:
    const techData = useMemo(() => {
        const counts: Record<string, number> = {};
        whatwebTech.forEach(t => {
            counts[t] = (counts[t] || 0) + 1;
        });
        return Object.entries(counts).map(([name, value]) => ({ name, value }));
    }, [whatwebTech]);

    const webLines = recMap["whatweb"].split("\n").map(line => line.trim()).filter(line => line.length > 0);
    const webTech = techData.map(t => ({ value: t, count: 1 })).map(item => ({
        value: item.value.name,
        count: item.count
    }));

    return (
        <div className="space-y-8 p-6">
            {/* Row 1: Sub-domains & Recommendations  */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Metrics Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader><h3 className="text-xl font-semibold">Domains: Type Counts</h3></CardHeader>
                    <CardContent>
                        {nmapData && nmapData.length > 0 ? (
                            <ResponsiveContainer width="100%" height={200}>
                                <BarChart data={amassCounts} margin={{ top: 10, right: 30, bottom: 5, left: 0 }}>
                                    <XAxis dataKey="name" />
                                    <YAxis />
                                    <Tooltip />
                                    <Bar dataKey="count" fill={COLORS[0]} />
                                </BarChart>
                            </ResponsiveContainer>
                        ) : (
                            <div className="flex items-center justify-center h-full text-white text-sm italic">
                                No Domains found to display yet!
                            </div>
                        )}

                    </CardContent>
                </Card>

                {/* Recommendations Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Domain Analysis</h3>
                    </CardHeader>
                    <CardContent>
                        <div className="max-h-64 overflow-y-auto grid gap-4 p-2">
                            {amassLines.map((line, idx) => (
                                <div
                                    key={idx}
                                    className={`flex items-start rounded-lg bg-[${COLORS[idx % COLORS.length]}] 
                                    hover:scale-[1.02] transition-transform ease-in-out duration-200`}
                                >
                                    <div className="mr-3 text-white">{icons[idx % icons.length]}</div>
                                    <p className="text-lg leading-snug" style={{ color: COLORS[idx % COLORS.length] }}>
                                        {line}
                                    </p>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* Row 2: Ports & Recommendations */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="shadow-lg rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Open Ports Table</h3>
                    </CardHeader>
                    <CardContent>
                        <table className="w-full table-auto border-collapse text-left table-striped">
                            <thead>
                                <tr className="bg-gray-800 text-white">
                                    <th className="border-b px-4 py-2">IP</th>
                                    <th className="border-b px-4 py-2">Port</th>
                                    <th className="border-b px-4 py-2">Protocol</th>
                                    <th className="border-b px-4 py-2">Service</th>
                                </tr>
                            </thead>
                            <tbody>
                                {nmapData && nmapData.length > 0 ? (
                                    nmapData.map((p, idx) => (
                                        <tr key={idx} className="transition-colors duration-200 hover:bg-white" style={{ backgroundColor: idx % 2 === 1 ? '#808080' : 'transparent' }}>
                                            <td className="px-4 py-2">{p.ip}</td>
                                            <td className="px-4 py-2">{p.port}</td>
                                            <td className="px-4 py-2">{p.protocol}</td>
                                            <td className="px-4 py-2">{p.service}</td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td
                                            className="px-4 py-6 text-center text-white text-sm italic"
                                            colSpan={4}
                                        >
                                            No ports found to display yet!
                                        </td>
                                    </tr>
                                )}
                            </tbody>

                        </table>
                    </CardContent>
                </Card>

                <Card className="shadow-lg rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Port Analysis</h3>
                    </CardHeader>
                    <CardContent>
                        <div className="max-h-64 overflow-y-auto grid gap-4 p-2">
                            {nmapLines.map((line, idx) => (
                                <div
                                    key={idx}
                                    className={`flex items-start rounded-lg bg-[${COLORS[idx % COLORS.length]}] 
                                    hover:scale-[1.02] transition-transform ease-in-out duration-200`}
                                >
                                    <div className="mr-3 text-white">{icons[idx % icons.length]}</div>
                                    <p className="text-lg leading-snug" style={{ color: COLORS[idx % COLORS.length] }}>
                                        {line}
                                    </p>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* Row 3: Technologies & Recommendations */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="shadow rounded-lg">
                    <CardHeader><h3 className="text-xl font-semibold">Technologies: Used</h3></CardHeader>
                    <CardContent>
                        <TagCloud
                            minSize={5}
                            maxSize={25}
                            tags={webTech}
                            renderer={(tag, size, color, idx) => (
                                <span
                                    key={`${tag.value}-${idx}`}
                                    style={{
                                        fontSize: size,
                                        margin: '6px',
                                        padding: '6px 12px',
                                        borderRadius: '30px',
                                        backgroundColor: color,
                                        color: '#ffffff',
                                        boxShadow: '0 2px 6px rgba(0,0,0,0.15)',
                                        display: 'inline-block',
                                        cursor: 'pointer',
                                        transition: 'transform 0.2s ease, box-shadow 0.2s ease',
                                        lineHeight: 1.2,
                                        textShadow: '0 1px 2px rgba(0,0,0,0.2)',
                                    }}
                                    onMouseEnter={e => {
                                        e.currentTarget.style.transform = 'scale(1.1)';
                                        e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.25)';
                                    }}
                                    onMouseLeave={e => {
                                        e.currentTarget.style.transform = 'scale(1)';
                                        e.currentTarget.style.boxShadow = '0 2px 6px rgba(0,0,0,0.15)';
                                    }}
                                >
                                    {tag.value}
                                </span>
                            )}
                        />

                    </CardContent>

                </Card>
                <Card className="shadow rounded-lg">
                    <CardHeader>
                        <h3 className="text-xl font-semibold">Tech Used:</h3>
                    </CardHeader>
                    <CardContent>
                        <div className="max-h-64 overflow-y-auto grid gap-4 p-2">
                            {webLines.map((line, idx) => (
                                <div
                                    key={idx}
                                    className={`flex items-start rounded-lg bg-[${COLORS[idx % COLORS.length]}] 
                                    hover:scale-[1.02] transition-transform ease-in-out duration-200`}
                                >
                                    <div className="mr-3 text-white">{icons[idx % icons.length]}</div>
                                    <p className="text-lg leading-snug" style={{ color: COLORS[idx % COLORS.length] }}>
                                        {line}
                                    </p>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
