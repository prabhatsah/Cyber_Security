import React, { useMemo } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';

interface RawEntry { source: string; data: { summary: string } }
interface DashboardProps { data: RawEntry[] }
const COLORS = ['#4f46e5', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];

function parseJson(block: string) {
  try { return JSON.parse(block.replace(/```json\n?|```/g, '').trim()); }
  catch { return {}; }
}

export default function Dashboard({ data }: DashboardProps) {
  const { amass, nmap, whatweb, recMap } = useMemo(() => {
    const bySource = Object.fromEntries(data.map(d => [d.source, parseJson(d.data.summary)]));
    const recMap: Record<string, string[]> = {};
    data.forEach(({ source, data: d }) => {
      recMap[source] = parseJson(d.summary).recommendations || [];
    });
    return { amass: bySource['amass'], nmap: bySource['nmap'], whatweb: bySource['whatweb'], recMap };
  }, [data]);

  // Row 1: Amass metrics
  const amassCounts = useMemo(() => [
    { name: 'Sub-domains', count: amass['domains'][0]['sub-domain']?.length || 0 },
    { name: 'Mail-servers', count: amass['domains'][0]['mail-server']?.length || 0 },
    { name: 'Name-servers', count: amass['domains'][0]['name-server']?.length || 0 },
    { name: 'Networks', count: amass['domains'][0]['networks']?.length || 0 },
  ], [amass]);

  // Row 2: Nmap line data
  const nmapData = useMemo(() => {
    const ports = nmap.ports || [];
    // count per port
    const counts: Record<number, number> = {};
    ports.forEach((p: any) => { counts[p.port] = (counts[p.port] || 0) + 1; });
    return Object.entries(counts).map(([port, cnt]) => ({ port: Number(port), count: cnt })).sort((a, b) => a.port - b.port);
  }, [nmap]);

  // Row 3: Whatweb pie data
  const techData = useMemo(() => {
    const techs: string[] = whatweb.technologies || [];
    const counts: Record<string, number> = {};
    techs.forEach(t => { counts[t] = (counts[t] || 0) + 1; });
    return Object.entries(counts).map(([name, value]) => ({ name, value }));
  }, [whatweb]);

  return (
    <div className="space-y-8 p-6">
      {/* Row 1: Sub-domains & Recommendations */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="shadow rounded-lg">
          <CardHeader><h3>Domains: Type Counts</h3></CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={amassCounts} margin={{ top: 10, right: 30, bottom: 5, left: 0 }}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill={COLORS[0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="shadow rounded-lg">
          <CardHeader><h3>Domain Security: Recommendations</h3></CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie data={recMap['amass'].map(r => ({ name: r, value: 1 }))}
                     dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={50} outerRadius={80} label>
                  {recMap['amass'].map((_, i) => <Cell key={i} fill={COLORS[(i+1)%COLORS.length]} />)}
                </Pie>
                <Tooltip />
                <Legend layout="vertical" verticalAlign="middle" align="right" />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Row 2: Ports & Recommendations */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="shadow rounded-lg">
          <CardHeader><h3>Open Ports: Counts</h3></CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={nmapData} margin={{ top: 10, right: 30, bottom: 5, left: 0 }}>
                <XAxis dataKey="port" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="count" stroke={COLORS[1]} strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="shadow rounded-lg">
          <CardHeader><h3>Ports Security: Recommendations</h3></CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie data={recMap['nmap'].map(r => ({ name: r, value: 1 }))}
                     dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={30} outerRadius={70} label>
                  {recMap['nmap'].map((_, i) => <Cell key={i} fill={COLORS[(i+2)%COLORS.length]} />)}
                </Pie>
                <Tooltip />
                <Legend layout="vertical" verticalAlign="middle" align="right" />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Row 3: Technologies & Recommendations */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="shadow rounded-lg">
          <CardHeader><h3>Technologies: Used</h3></CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie data={techData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
                  {techData.map((_, i) => <Cell key={i} fill={COLORS[(i+3)%COLORS.length]} />)}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="shadow rounded-lg">
          <CardHeader><h3>Technical Security: Recommendations</h3></CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie data={recMap['whatweb'].map(r => ({ name: r, value: 1 }))}
                     dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={30} outerRadius={70} label>
                  {recMap['whatweb'].map((_, i) => <Cell key={i} fill={COLORS[(i+4)%COLORS.length]} />)}
                </Pie>
                <Tooltip />
                <Legend layout="vertical" verticalAlign="middle" align="right" />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
