import React, { useMemo } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import {
    BarChart,
    Bar,
    LineChart,
    Line,
    PieChart,
    Pie,
    Cell,
    XAxis,
    YAxis,
    Tooltip,
    Legend,
    ResponsiveContainer,
} from 'recharts';

interface RawEntry { source: string; data: { summary: string } }
interface DashboardProps { data: RawEntry[] }
const COLORS = ['#4f46e5', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];
interface ChartData {
    name: string;
    value: number;
};

interface TechSuggestion {
    name: string;
    factor: 'high' | 'medium' | 'low' | string;
    percentage: number;
}


function parseJson(block: string) {
    try { return JSON.parse(block.replace(/```json\n?|```/g, '').trim()); }
    catch { return {}; }
}

export default function Dashboard({ data }: DashboardProps) {
    const { amass, nmap, whatweb, recMap } = useMemo(() => {
        const bySource = Object.fromEntries(data.map(d => [d.source, parseJson(d.data.summary)]));
        const recMap: Record<string, string[]> = {};
        data.forEach(({ source, data: d }) => {
            const parsed = parseJson(d.summary);
            recMap[source] = (parsed.recommendations || []).map(r => r.recommendation);
        });
        return { amass: bySource['amass'], nmap: bySource['nmap'], whatweb: bySource['whatweb'], recMap };
    }, [data]);

    // Row 1: Amass metrics
    const amassCounts = useMemo(() => [
        { name: 'Sub-domains', count: amass['domains']['sub-domain']?.length || 0 },
        { name: 'Mail-servers', count: amass['domains']['mail-server']?.length || 0 },
        { name: 'Name-servers', count: amass['domains']['name-server']?.length || 0 },
        { name: 'Networks', count: amass['domains']['networks']?.length || 0 },
    ], [amass]);
    const chartData: ChartData[] = Object.fromEntries(data.map(d => [d.source, parseJson(d.data.summary)]))["amass"]["recommendations"].map(r => ({
        name: r.recommendation,
        value: r.percentage
    }));


    // // Row 2: Nmap line data
    const nmapData = useMemo(() => {
        const ports = nmap.ports || [];
        return (ports as any[]).map(p => ({
            port: p.port,
            ip: p.ip,
            protocol: p.protocol,
            service: p.service,
            value: 1,           // constant height
        })).sort((a, b) => a.port - b.port);
    }, [nmap]);


    // Row 3: Whatweb pie data
    const techData = useMemo(() => {
        const techs: string[] = whatweb.technologies || [];
        const counts: Record<string, number> = {};
        techs.forEach(t => { counts[t] = (counts[t] || 0) + 1; });
        return Object.entries(counts).map(([name, value]) => ({ name, value }));
    }, [whatweb]);

    const techSuggestionData: TechSuggestion[] =
        Object.fromEntries(
            data.map(d => [d.source, parseJson(d.data.summary)])
        )['whatweb']['recommendations']
            .map((r: any) => ({
                name: r.recommendation,
                factor: (r.risk_factor || '').toLowerCase(),
                percentage: Number(r.percentage) || 0,
            }))
            .sort((a, b) => {
                const order: Record<string, number> = { high: 0, medium: 1, low: 2 };
                const fa = order[a.factor] ?? 3;
                const fb = order[b.factor] ?? 3;
                if (fa !== fb) return fa - fb;
                return b.percentage - a.percentage;
            });

    return (
        <div className="space-y-8 p-6">
            {/* Row 1: Sub-domains & Recommendations  */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Metrics Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Domains: Type Counts</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <BarChart data={amassCounts} margin={{ top: 10, right: 30, bottom: 5, left: 0 }}>
                                <XAxis dataKey="name" />
                                <YAxis />
                                <Tooltip />
                                <Bar dataKey="count" fill={COLORS[0]} />
                            </BarChart>
                        </ResponsiveContainer>
                    </CardContent>
                </Card>

                {/* Risk Pie Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Domain Security: Risk %</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <PieChart width={400} height={200}>
                                <Pie
                                    dataKey="value"
                                    startAngle={180}
                                    endAngle={0}
                                    data={chartData}
                                    cx="50%"
                                    cy="90%"
                                    outerRadius={150}
                                    label
                                >
                                    {chartData.map((entry, index) => (
                                        <Cell
                                            key={`cell-${index}`}
                                            fill={COLORS[index % COLORS.length]}
                                        />
                                    ))}
                                </Pie>
                                <Tooltip />
                                {/* <Legend verticalAlign="bottom" /> */}
                            </PieChart>
                        </ResponsiveContainer>
                    </CardContent>
                </Card>

                {/* Recommendations Column */}
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Recommendations</h3></CardHeader>
                    <CardContent className="space-y-2">
                        {chartData.map((entry, index) => (
                            <p key={index} className="text-lg" style={{ color: COLORS[index % COLORS.length] }}>
                                {entry.name}
                            </p>
                        ))}
                    </CardContent>
                </Card>
            </div>

            {/* Row 2: Ports & Recommendations */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Open Ports: Counts</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <BarChart data={nmapData}>
                                <XAxis dataKey="port" />
                                <YAxis />
                                <Tooltip
                                    formatter={(_, __, { payload }) => (
                                        <div style={{ textAlign: 'left' }}>
                                            <div><strong>IP:</strong> {payload.ip}</div>
                                            <div><strong>Protocol:</strong> {payload.protocol}</div>
                                            <div><strong>Service:</strong> {payload.service}</div>
                                        </div>
                                    )}
                                />
                                <Bar dataKey="value" fill="#10b981" />
                            </BarChart>
                        </ResponsiveContainer>


                    </CardContent>
                </Card>
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Ports Security: Recommendations</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <PieChart>
                                <Pie data={recMap['nmap'].map(r => ({ name: r, value: 1 }))}
                                    dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={30} outerRadius={70} label>
                                    {recMap['nmap'].map((_, i) => <Cell key={i} fill={COLORS[(i + 2) % COLORS.length]} />)}
                                </Pie>
                                {/* <Tooltip /> */}
                                <Legend layout="vertical" verticalAlign="middle" align="right" />
                            </PieChart>
                        </ResponsiveContainer>
                    </CardContent>
                </Card>
            </div>

            {/* Row 3: Technologies & Recommendations */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Technologies: Used</h3></CardHeader>
                    <CardContent>
                        <ResponsiveContainer width="100%" height={200}>
                            <PieChart>
                                <Pie data={techData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
                                    {techData.map((_, i) => <Cell key={i} fill={COLORS[(i + 3) % COLORS.length]} />)}
                                </Pie>
                                <Tooltip />
                                <Legend />
                            </PieChart>
                        </ResponsiveContainer>
                    </CardContent>
                </Card>
                <Card className="shadow rounded-lg">
                    <CardHeader><h3>Technical Security: Recommendations</h3></CardHeader>
                    <CardContent className="flex flex-wrap gap-2">
                        {techSuggestionData.map((rec, idx) => {
                            let bgClass = '';
                            switch (rec.factor) {
                                case 'high':
                                    bgClass = 'bg-red-500';
                                    break;
                                case 'medium':
                                    bgClass = 'bg-yellow-400';
                                    break;
                                case 'low':
                                    bgClass = 'bg-green-500';
                                    break;
                                default:
                                    bgClass = 'bg-gray-300';
                            }
                            return (
                                <span
                                    key={idx}
                                    className={`${bgClass} text-white text-sm font-medium px-3 py-1 rounded-full`}
                                >
                                    {rec.name}
                                </span>
                            );
                        })}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
