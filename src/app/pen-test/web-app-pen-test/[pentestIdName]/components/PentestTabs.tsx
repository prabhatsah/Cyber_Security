'use client';

import React, { useEffect, useState } from 'react';
import { Card } from '@tremor/react';
import { usePathname, useRouter } from 'next/navigation';
import { Bot, Download, RefreshCw, Play, ScanLine } from 'lucide-react';
import GlobalLoader from '@/components/GlobalLoader';
import AIAnalysisModal from './AIAnalysisModal';
import { usePentestContext } from './PentestContext';
import { PDFReport } from './ai-report-download/PDFReport';
import { toast } from '@/lib/toast';
import html2canvas from 'html2canvas';
import { pdf } from '@react-pdf/renderer';

export default function PentestTabs({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const router = useRouter();
    const pathname = usePathname();
    const [loadingTab, setLoadingTab] = useState<string | null>("Planning");
    const [chatOpen, setChatOpen] = useState(false);
    const [showAIReportRefreshButton, setShowAIReportRefreshButton] = useState(false);
    const [showVulnScanRefreshButton, setShowVulnScanRefreshButton] = useState(false);
    const [showAIReportDownloadButton, setShowAIReportDownloadButton] = useState(false);
    const [showStartScanButton, setShowStartScanButton] = useState(false);

    const [pdfGenerated, setPdfGenerated] = useState<string | null>(null);

    const { pentestData, loading, error, setPentestId } = usePentestContext();

    // Auto-reset loading state when route changes
    useEffect(() => {
        setLoadingTab(null);
    }, [pathname]);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    // Check if current route is AI Report tab or Vulnerability Scanning tab
    useEffect(() => {
        const isAIReportTab = pathname.includes('ai-report');
        const isVulnerabilityScanningTab = pathname.includes('vulnerability-scanning');

        // AI Report tab buttons
        setShowAIReportRefreshButton(isAIReportTab);
        setShowAIReportDownloadButton(isAIReportTab);

        // Vulnerability Scanning tab buttons
        setShowVulnScanRefreshButton(isVulnerabilityScanningTab);
        setShowStartScanButton(isVulnerabilityScanningTab);
    }, [pathname]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const isReconComplete = !pentestData.basicDetails.progress || pentestData.basicDetails.progress >= 40;
    const isVulScanComplete = !pentestData.basicDetails.progress || pentestData.basicDetails.progress >= 60;

    const tabData = [
        { pentestState: 'Planning', href: `/pen-test/web-app-pen-test/${pentestIdName}/planning` },
        { pentestState: 'Reconnaissance', href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/` },
        { pentestState: 'Vulnerability Scanning', href: `/pen-test/web-app-pen-test/${pentestIdName}/vulnerability-scanning` },
        { pentestState: 'Exploitation', href: `/pen-test/web-app-pen-test/${pentestIdName}/exploitation` },
        { pentestState: 'Post Exploitation', href: `/pen-test/web-app-pen-test/${pentestIdName}/post-exploitation` },
        { pentestState: 'AI Report', href: `/pen-test/web-app-pen-test/${pentestIdName}/ai-report` },
    ];

    const handleTabClick = async (href: string, pentestState: string) => {
        if (pathname === href) return;

        setLoadingTab(pentestState);
        router.push(href);
    };

    const handleAIReportRefresh = () => {
        // Add your AI Report refresh logic here
        console.log('Refreshing AI Report...');
        window.location.reload();
    };

    const handleVulnScanRefresh = () => {
        // Add your Vulnerability Scanning refresh logic here
        console.log('Refreshing Vulnerability Scan data...');
        // You can implement specific refresh logic for vulnerability scanning
        // For example: refetch scan results, update scan status, etc.
        window.location.reload();
    };

    const handleAIReportDownload = async () => {
        setPdfGenerated('in progress');


        const reportData = [
            { metric: "Visitors", value: "1200" },
            { metric: "Bounce Rate", value: "43%" },
            { metric: "Conversion", value: "5.1%" },
        ];

        // const chartNode = document.getElementById("chart-to-export");

        // if (!chartNode) {
        //     console.log("Chart element not found in DOM.");
        //     toast.push("Chart element not found in DOM!", "error");
        //     setPdfGenerated('error');
        //     return;
        // }

        const chartDivDarkModeClasses: Array<string> = [];
        /*chartNode.classList.forEach(eachClass => {
            eachClass.includes('dark:') ? chartDivDarkModeClasses.push(eachClass) : undefined;
        });

        chartDivDarkModeClasses.forEach(eachDarkModeClass => {
            chartNode.classList.remove(eachDarkModeClass);
        });*/

        try {
            /*const canvas = await html2canvas(chartNode, {
                scale: 2,
                backgroundColor: "#ffffff",
                useCORS: true,
            });

            const chartDataUrl = canvas.toDataURL("image/png");*/

            const doc = (
                <PDFReport
                    data={reportData}
                    chartImage="/keross-logo-large.jpg"
                    logoImage="/keross-logo-large.jpg"
                />
            );

            const blob = await pdf(doc).toBlob();

            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "AI Report having Title and Contents.pdf";
            link.click();

            /*chartDivDarkModeClasses.forEach(eachDarkModeClass => {
                chartNode.classList.add(eachDarkModeClass);
            });*/

            setPdfGenerated('completed');
        } catch (err) {
            console.error("Error generating PDF:", err);
            toast.push("Error generating PDF!", "error");
            setPdfGenerated('error');
        }
    };

    const handleStartScan = () => {
        // Add your start scan logic here
        console.log('Start Vulnerability Scan');
        // You can implement vulnerability scanning logic here
    };



    return (
        <>
            <Card className="bg-tremor-background-muted p-0 dark:bg-dark-tremor-background-muted">
                <nav className="flex px-4 gap-3 items-center">
                    {tabData.map((eachTab, index) => {
                        const eachTabUpdated = eachTab.pentestState.split(" ").map((part, index) => index === 0 ? part.toLowerCase() : part).join("");
                        const pathNameArray = pathname.split("/");
                        let isActive = false;

                        for (let i = 0; i < pathNameArray.length; i++) {
                            let eachRoute = pathNameArray[i];
                            let eachRouteUpdated = eachRoute.split("-").map((part, index) => index === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1)).join("");

                            if (eachRouteUpdated === eachTabUpdated) {
                                isActive = true;
                                break;
                            }
                        }

                        if (loadingTab === eachTab.pentestState) {
                            return <GlobalLoader key={eachTab.pentestState} />
                        }

                        let disabled = false;
                        if (!isReconComplete && !isVulScanComplete) {
                            disabled = eachTab.pentestState !== 'Planning' && eachTab.pentestState !== 'Reconnaissance';
                        }
                        /*if (isReconComplete && !isVulScanComplete) {
                            disabled = eachTab.pentestState !== 'Planning' && eachTab.pentestState !== 'Reconnaissance' && eachTab.pentestState !== 'Vulnerability Scanning';
                        }*/

                        return (
                            <button
                                key={eachTab.pentestState}
                                onClick={() => handleTabClick(eachTab.href, eachTab.pentestState)}
                                className={`p-2.5 font-medium flex gap-2 items-center ${isActive ? 'border-b-2 border-blue-500 text-blue-600' : 'hover:border-gray-300'}
                                            ${disabled ? 'text-gray-400 cursor-not-allowed opacity-50 hover:border-transparent' : 'cursor-pointer'}`}
                                disabled={disabled}
                            >
                                <span>{index + 1}.</span>
                                {eachTab.pentestState === "Exploitation" ? "PoC/Exploitation" : eachTab.pentestState}
                            </button>
                        );
                    })}

                    <div className="ml-auto flex gap-2">
                        {showAIReportRefreshButton && (
                            <button
                                onClick={handleAIReportRefresh}
                                className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                                aria-label="Refresh AI Report"
                                title="Refresh Report"
                            >
                                <RefreshCw className="h-4 w-4" />
                            </button>
                        )}

                        {showVulnScanRefreshButton && (
                            <button
                                onClick={handleVulnScanRefresh}
                                className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                                aria-label="Refresh Vulnerability Scan"
                                title="Refresh Scan Data"
                            >
                                <RefreshCw className="h-4 w-4" />
                            </button>
                        )}

                        {showStartScanButton && (
                            <button
                                onClick={handleStartScan}
                                className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                                aria-label="Start Vulnerability Scan"
                                title="Start Scan"
                            >
                                <ScanLine className="h-4 w-4" />
                            </button>
                        )}

                        {showAIReportDownloadButton && (
                            pdfGenerated === 'in progress' ? (
                                <GlobalLoader />
                            ) : (
                                <button
                                    onClick={handleAIReportDownload}
                                    className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                                    aria-label="Download AI Report"
                                    title="Download Report"
                                >
                                    <Download className="h-4 w-4" />
                                </button>
                            )
                        )}

                        {/* <button
                            onClick={() => setChatOpen(true)}
                            className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                            aria-label="Open chat assistant"
                            title="Chat Assistant"
                        >
                            <Bot className="h-5 w-5" />
                        </button> */}
                    </div>
                </nav>
            </Card>

            <AIAnalysisModal open={chatOpen} onOpenChange={setChatOpen} />
        </>
    );
}