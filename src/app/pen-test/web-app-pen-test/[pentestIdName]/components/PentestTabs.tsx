'use client';

import React, { useEffect, useState } from 'react';
import { Card } from '@tremor/react';
import { usePathname, useRouter } from 'next/navigation';
import { Bot, RefreshCw } from 'lucide-react';
import GlobalLoader from '@/components/GlobalLoader';
import AIAnalysisModal from './AIAnalysisModal';
import { usePentestContext } from './PentestContext';

export default function PentestTabs({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const router = useRouter();
    const pathname = usePathname();
    const [loadingTab, setLoadingTab] = useState<string | null>("Planning");
    const [chatOpen, setChatOpen] = useState(false);
    const [showRefreshButton, setShowRefreshButton] = useState(false);
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    // Auto-reset loading state when route changes
    useEffect(() => {
        setLoadingTab(null);
    }, [pathname]);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    // Check if current route is AI Report tab
    useEffect(() => {
        const isAIReportTab = pathname.includes('ai-report');
        setShowRefreshButton(isAIReportTab);
    }, [pathname]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const isReconComplete = !pentestData.basicDetails.progress || pentestData.basicDetails.progress >= 40;
    const isVulScanComplete = !pentestData.basicDetails.progress || pentestData.basicDetails.progress >= 60;

    const tabData = [
        { pentestState: 'Planning', href: `/pen-test/web-app-pen-test/${pentestIdName}/planning` },
        { pentestState: 'Reconnaissance', href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/` },
        { pentestState: 'Vulnerability Scanning', href: `/pen-test/web-app-pen-test/${pentestIdName}/vulnerability-scanning` },
        { pentestState: 'Exploitation', href: `/pen-test/web-app-pen-test/${pentestIdName}/exploitation` },
        { pentestState: 'Post Exploitation', href: `/pen-test/web-app-pen-test/${pentestIdName}/post-exploitation` },
        { pentestState: 'AI Report', href: `/pen-test/web-app-pen-test/${pentestIdName}/ai-report` },
    ];

    const handleTabClick = async (href: string, pentestState: string) => {
        if (pathname === href) return;

        setLoadingTab(pentestState);
        router.push(href);
    };

    const handleRefresh = () => {
        // Add your refresh logic here
        window.location.reload();
    };

    return (
        <>
            <Card className="bg-tremor-background-muted p-0 dark:bg-dark-tremor-background-muted">
                <nav className="flex px-4 gap-3 items-center">
                    {tabData.map((eachTab, index) => {
                        const eachTabUpdated = eachTab.pentestState.split(" ").map((part, index) => index === 0 ? part.toLowerCase() : part).join("");
                        const pathNameArray = pathname.split("/");
                        let isActive = false;

                        for (let i = 0; i < pathNameArray.length; i++) {
                            let eachRoute = pathNameArray[i];
                            let eachRouteUpdated = eachRoute.split("-").map((part, index) => index === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1)).join("");

                            if (eachRouteUpdated === eachTabUpdated) {
                                isActive = true;
                                break;
                            }
                        }

                        if (loadingTab === eachTab.pentestState) {
                            return <GlobalLoader key={eachTab.pentestState} />
                        }

                        let disabled = false;
                        if (!isReconComplete && !isVulScanComplete) {
                            disabled = eachTab.pentestState !== 'Planning' && eachTab.pentestState !== 'Reconnaissance';
                        }
                        /*if (isReconComplete && !isVulScanComplete) {
                            disabled = eachTab.pentestState !== 'Planning' && eachTab.pentestState !== 'Reconnaissance' && eachTab.pentestState !== 'Vulnerability Scanning';
                        }*/

                        return (
                            <button
                                key={eachTab.pentestState}
                                onClick={() => handleTabClick(eachTab.href, eachTab.pentestState)}
                                className={`p-2.5 font-medium flex gap-2 items-center ${isActive ? 'border-b-2 border-blue-500 text-blue-600' : 'hover:border-gray-300'}
                                            ${disabled ? 'text-gray-400 cursor-not-allowed opacity-50 hover:border-transparent' : 'cursor-pointer'}`}
                                disabled={disabled}
                            >
                                <span>{index + 1}.</span>
                                {eachTab.pentestState === "Exploitation" ? "PoC/Exploitation" : eachTab.pentestState}
                            </button>
                        );
                    })}

                    <div className="ml-auto flex gap-2">
                        {showRefreshButton && (
                            <button
                                onClick={handleRefresh}
                                className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                                aria-label="Refresh page"
                                title="Refresh"
                            >
                                <RefreshCw className="h-5 w-5" />
                            </button>
                        )}

                        {/* <button
                            onClick={() => setChatOpen(true)}
                            className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200 flex items-center justify-center"
                            aria-label="Open chat assistant"
                            title="Chat Assistant"
                        >
                            <Bot className="h-5 w-5" />
                        </button> */}
                    </div>
                </nav>
            </Card>

            <AIAnalysisModal open={chatOpen} onOpenChange={setChatOpen} />
        </>
    );
}