'use client';

import React, { useEffect, useState } from 'react';
import { Card } from '@tremor/react';
import { usePathname, useRouter } from 'next/navigation';
import { Loader2 } from 'lucide-react';

export default function PentestTabs({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const router = useRouter();
    const pathname = usePathname();
    const [loadingTab, setLoadingTab] = useState<string | null>("Planning");

    const tabData = [
        { pentestState: 'Planning', href: `/pen-test/web-app-pen-test/${pentestIdName}/planning` },
        { pentestState: 'Reconnaissance', href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/overview` },
        { pentestState: 'Vulnerability Scanning', href: `/pen-test/web-app-pen-test/${pentestIdName}/vulnerability-scanning` },
        { pentestState: 'Exploitation', href: `/pen-test/web-app-pen-test/${pentestIdName}/exploitation` },
        { pentestState: 'Post Exploitation', href: `/pen-test/web-app-pen-test/${pentestIdName}/post-exploitation` },
        { pentestState: 'AI Analysis', href: `/pen-test/web-app-pen-test/${pentestIdName}/ai-analysis` },
    ];

    const handleTabClick = async (href: string, pentestState: string) => {
        setLoadingTab(pentestState);
        router.push(href);
    };

    // Auto-reset loading state when route changes
    useEffect(() => {
        setLoadingTab(null);
    }, [pathname]);

    return (
        <Card className="bg-tremor-background-muted p-0 dark:bg-dark-tremor-background-muted">
            <nav className="flex px-4 gap-3">
                {tabData.map((eachTab, index) => {
                    // const isActive = pathname.includes(eachTab.pentestState.toLowerCase().replace(/\s+/g, '-'));
                    // const isActive = pathname.startsWith(eachTab.href);
                    // const updatedPathName = pathname.replace(/-/g, '');
                    // const eachTabNameToMatchRoute = eachTab.pentestState.toLowerCase().replace(/\s+/g, '');
                    // const isActive = updatedPathName.includes(eachTabNameToMatchRoute);
                    const eachTabUpdated = eachTab.pentestState.split(" ").map((part, index) => index === 0 ? part.toLowerCase() : part).join("");
                    const pathNameArray = pathname.split("/");
                    let isActive = false;

                    for (let i = 0; i < pathNameArray.length; i++) {
                        let eachRoute = pathNameArray[i];
                        let eachRouteUpdated = eachRoute.split("-").map((part, index) => index === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1)).join("");

                        if (eachRouteUpdated === eachTabUpdated) {
                            isActive = true;
                            break;
                        }
                    }

                    const isLoading = loadingTab === eachTab.pentestState;

                    return (
                        <button
                            key={eachTab.pentestState}
                            onClick={() => handleTabClick(eachTab.href, eachTab.pentestState)}
                            className={`p-2.5 font-medium flex gap-2 items-center ${isActive
                                ? 'border-b-2 border-blue-500 text-blue-600'
                                : 'hover:border-gray-300'
                                } ${isLoading ? 'opacity-60 pointer-events-none' : ''}`}
                        >
                            <span>{index + 1}.</span>
                            {isLoading ? (
                                <span className="flex items-center gap-1">
                                    <Loader2 className="w-4 h-4 animate-spin" />
                                    Loading...
                                </span>
                            ) : (
                                eachTab.pentestState
                            )}
                        </button>
                    );
                })}
            </nav>
        </Card>
    );
}
