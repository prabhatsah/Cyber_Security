'use client';

import React, { useEffect, useState } from 'react';
import { Card } from '@tremor/react';
import { usePathname, useRouter } from 'next/navigation';
import { Bot, Download, RefreshCw, Play, ScanLine, CheckCircle, Circle, Lock } from 'lucide-react';
import GlobalLoader from '@/components/GlobalLoader';
import AIAnalysisModal from './AIAnalysisModal';
import { usePentestContext } from './PentestContext';

import * as api from "@/utils/api";
import { fetchData } from '@/utils/api';

import { PDFReport } from './ai-report-download/PDFReport';
import { toast } from '@/lib/toast';
import html2canvas from 'html2canvas';
import { pdf } from '@react-pdf/renderer';
import { VulnerabilityImage } from '../../components/type';
import { getLoggedInUserProfile } from '@/ikon/utils/api/loginService';
import StartScan from '@/utils/generic-start-scan';
import { useScanNotification } from '@/contexts/ScanNotificationContext';
import { RiLoader2Fill } from '@remixicon/react';
import SpeedometerChart from './ai-report-download/SpeedometerChart';
import { format } from 'date-fns';

interface WorkflowStep {
    id: number;
    name: string;
    completed: boolean;
    current: boolean;
    locked: boolean;
    href: string;
}

export default function PentestTabs({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const router = useRouter();
    const pathname = usePathname();
    const [loadingTab, setLoadingTab] = useState<string | null>("Planning");
    const [currentStepId, setCurrentStepId] = useState<number>(1);
    const [chatOpen, setChatOpen] = useState(false);
    const [showAIReportRefreshButton, setShowAIReportRefreshButton] = useState(false);
    const [showVulnScanRefreshButton, setShowVulnScanRefreshButton] = useState(false);
    const [showAIReportDownloadButton, setShowAIReportDownloadButton] = useState(false);
    const [showStartScanButton, setShowStartScanButton] = useState(false);
    const [vulnerabilityScanTab, setVulnerabilityScanTab] = useState(false);
    const { setScanNotificationData } = useScanNotification();
    const [isScanning, setIsScanning] = useState(false);

    const [pdfGenerated, setPdfGenerated] = useState<string | null>(null);
    const [speedometerImg, setSpeedometerImg] = useState<string | null>(null);
    const [update, setUpdate] = useState<string | null>(null);

    const { pentestData, loading, error, setPentestId } = usePentestContext();
    const [refreshFlag, setRefreshFlag] = useState(false);

    const workflowSteps: WorkflowStep[] = [
        { id: 1, name: 'Planning', completed: false, current: true, locked: false, href: `/pen-test/web-app-pen-test/${pentestIdName}/planning` },
        { id: 2, name: 'Reconnaissance', completed: false, current: false, locked: false, href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/` },
        { id: 3, name: 'Vulnerability Scanning', completed: false, current: false, locked: true, href: `/pen-test/web-app-pen-test/${pentestIdName}/vulnerability-scanning` },
        { id: 4, name: 'Exploitation', completed: false, current: false, locked: true, href: `/pen-test/web-app-pen-test/${pentestIdName}/exploitation` },
        { id: 5, name: 'Post Exploitation', completed: false, current: false, locked: true, href: `/pen-test/web-app-pen-test/${pentestIdName}/post-exploitation` },
        { id: 6, name: 'AI Report', completed: false, current: false, locked: true, href: `/pen-test/web-app-pen-test/${pentestIdName}/ai-report` },
    ];

    useEffect(() => {
        const savedProgress = parseInt(localStorage.getItem(`pentest-progress-${pentestId}`) || "1");

        const formatStepName = (name: string) =>
            name.split(" ").map((part, i) => (i === 0 ? part.toLowerCase() : part)).join("");

        const toCamelCase = (segment: string) =>
            segment.split("-").map((part, i) => (i === 0 ? part : part[0].toUpperCase() + part.slice(1))).join("");

        const currentStep = workflowSteps.find(step =>
            pathname.split("/").some(segment => toCamelCase(segment) === formatStepName(step.name))
        );

        const detectedStepId = Math.max(savedProgress, currentStep?.id || 1);

        setCurrentStepId(detectedStepId);
        setLoadingTab(null);
    }, [pathname]);

    useEffect(() => {
        localStorage.setItem(`pentest-progress-${pentestId}`, currentStepId.toString());
    }, [currentStepId]);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    useEffect(() => {
        const isAIReportTab = pathname.includes('ai-report');
        const isVulnerabilityScanningTab = pathname.includes('vulnerability-scanning');

        // AI Report tab buttons
        setShowAIReportRefreshButton(isAIReportTab);
        setShowAIReportDownloadButton(isAIReportTab);

        // Vulnerability Scanning tab buttons
        setVulnerabilityScanTab(isVulnerabilityScanningTab);
        setShowVulnScanRefreshButton(isVulnerabilityScanningTab);
        setShowStartScanButton(isVulnerabilityScanningTab);
    }, [pathname]);

    const fetchAIReportData = async (pentestData: Record<string, any>): Promise<Record<string, any>> => {
        const scanData = pentestData?.scanData ?? {};

        const payload = {
            scanData,
            sources: ["amass", "nmap", "whatweb", "theHarvester"],
            userId: "default",
        };

        const res = await fetch("https://ikoncloud-uat.keross.com/cstools/AiReport", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
        });

        if (!res.ok) {
            throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }

        const updatedLLMResponse = await res.json();
        console.log("Data came from AI scan: ", updatedLLMResponse);

        const fetchedDBData = await fetchData('pentest_data', 'last_scan_on', [{ column: 'pentestid', value: pentestId }], null);

        if (fetchedDBData && fetchedDBData.data && fetchedDBData.data.length > 0) {
            var dbData = fetchedDBData.data[0];
            dbData.ai_report = updatedLLMResponse
            if (dbData.data.isDataUpdated) {
                dbData.data.isDataUpdated = false;
            } else {
                dbData.data["isDataUpdated"] = false;
            }

        }

        if (updatedLLMResponse && updatedLLMResponse['amass'] && Object.keys(updatedLLMResponse['amass']).length >= 12) {
            const updateStatus = await api.updateColumnGeneralised(
                "penetration_testing_history",
                "ai_report",
                updatedLLMResponse,
                "pentestid",
                pentestId,
                true,
                "ai_report_data"
            );
            console.log("AI Report updated in database: ", updateStatus);
        }

        if (updatedLLMResponse && updatedLLMResponse['amass'] && Object.keys(updatedLLMResponse['amass']).length >= 12) {
            const updateStatus = await api.updateColumnGeneralised(
                "penetration_testing_history",
                "data",
                fetchedDBData.data[0].data,
                "pentestid",
                pentestId,
                true,
                null
            );
            console.log("AI Report updated in database: ", updateStatus);
        }
        // return updatedLLMResponse;
    };

    useEffect(() => {
        if (!pentestData) return;
        const lastUpdate = pentestData?.scanDataLastUpdatation || "";
        if (!lastUpdate) return;
        if (!refreshFlag) {
            setRefreshFlag(true);
        }
    }, [pentestData, refreshFlag]);

    useEffect(() => {
        if (!speedometerImg) return;
        handleAIReportDownload(speedometerImg);
    }, [speedometerImg]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const isReconComplete = !pentestData.basicDetails.progress || pentestData.basicDetails.progress >= 40;
    const isVulScanComplete = !pentestData.basicDetails.progress || pentestData.basicDetails.progress >= 60;

    const getStepStatus = (step: WorkflowStep, index: number) => {
        let disabled = false;
        if (!isReconComplete && !isVulScanComplete) {
            disabled = step.name !== 'Planning' && step.name !== 'Reconnaissance';
        }

        if (index + 1 < currentStepId) return { ...step, completed: true, current: false, locked: disabled };
        if (index + 1 === currentStepId) return { ...step, completed: false, current: true, locked: disabled };
        return { ...step, completed: false, current: false, locked: disabled };
    };

    const handleTabClick = async (href: string, stepName: string, stepId: number) => {
        if (pathname === href) return;

        setLoadingTab(stepName);
        setCurrentStepId(stepId);
        router.push(href);
    };

    const handleRefresh = async () => {
        try {
            setUpdate('in progress');
            await fetchAIReportData(pentestData)
            console.log("Refreshing AI Report data...");
            window.location.reload();
        } catch (err) {
            console.error(err)
            setUpdate('error');
        } finally {
            // window.location.reload(); 
        }
    }

    const handleVulnScanRefresh = () => {
        // Add your Vulnerability Scanning refresh logic here
        console.log('Refreshing Vulnerability Scan data...');
        // You can implement specific refresh logic for vulnerability scanning
        // For example: refetch scan results, update scan status, etc.
        window.location.reload();
    };

    const handleAIReportDownload = async (riskAssessmentChartImg: string) => {
        try {
            const vulnerabilityImageResponse = await fetchData("vulnerabilities_images", "id", [{ column: "pentestid", value: pentestId }], null);
            const vulnerabilityImageData: VulnerabilityImage[] = vulnerabilityImageResponse?.data ?? [];
            let vulnerabilityImageObj: Record<string, VulnerabilityImage[]> = {};
            vulnerabilityImageData.forEach(eachImageData => {
                if (!vulnerabilityImageObj[eachImageData.cweid]) {
                    vulnerabilityImageObj[eachImageData.cweid] = [];
                }
                vulnerabilityImageObj[eachImageData.cweid].push(eachImageData);
            });

            const doc = (<PDFReport
                key={pentestId}
                pentestData={pentestData}
                vulnerabilityImageObj={vulnerabilityImageObj}
                riskAssessmentChartImg={riskAssessmentChartImg}
            />);

            const blob = await pdf(doc).toBlob();

            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            const pdfName = pentestData.basicDetails.pentestName + "_" + format(pentestData.basicDetails.startDate, "yyyy") + "_Penetration Testing Report.pdf";
            link.download = pdfName;
            link.click();

            setPdfGenerated('completed');
        } catch (err) {
            console.error("Error generating PDF:", err);
            toast.push("Error generating PDF!", "error");
            setPdfGenerated('error');
        }
    };

    const handleStartScan = () => {
        // Add your start scan logic here
        console.log('Start Vulnerability Scan');
        // You can implement vulnerability scanning logic here
    };

    const handleVulnerabilityScan = async () => {
        setIsScanning(true);
        const userId = (await getLoggedInUserProfile()).USER_ID;
        const webApp = pentestData && pentestData.basicDetails ? pentestData.basicDetails.target : "";
        console.log(userId, webApp, pentestId);

        const target = pentestData?.basicDetails?.target.replace(/\/+$/, "");

        const resp = await StartScan(userId, "zap", target, pentestId, new Date().toISOString());

        const data = {
            scanId: resp.scan_id,
            tool: resp.tool,
            target: resp.target,
            startTime: resp.start_time,
            endTime: "",
            status: resp.status,
            pentestId: resp.pentestid,
        }

        console.log("Vulnerability Scan Initiated:", data);
        setScanNotificationData((prevScanNotificationData) => {
            if (data) return [...prevScanNotificationData, data];

            return [...prevScanNotificationData];
        });
        setIsScanning(false);
        toast.push("Vulnerability Scanning Started...", "loading");
        console.log(data);
    }

    return (
        <>
            <Card className="bg-tremor-background-muted p-0 dark:bg-dark-tremor-background-muted">
                <div className="border rounded-lg p-4">
                    <div className="flex items-center justify-between">
                        {workflowSteps.map((step, index) => {
                            const stepStatus = getStepStatus(step, index);
                            //const stepStatus = step;
                            if (loadingTab === step.name) return <GlobalLoader key={step.id} />;

                            return (
                                <div key={step.id} className="flex items-center">
                                    <div className="flex gap-2 items-center">
                                        <button
                                            onClick={() => !stepStatus.locked && handleTabClick(step.href, step.name, step.id)}
                                            disabled={stepStatus.locked}
                                            className={`flex items-center justify-center w-10 h-10 rounded-full border-2 transition-colors ${stepStatus.completed
                                                ? "bg-green-600 border-green-600 "
                                                : stepStatus.current
                                                    ? "bg-blue-600 border-blue-600 "
                                                    : stepStatus.locked
                                                        ? "border  cursor-not-allowed"
                                                        : "border  hover:border-gray-500"
                                                }`}
                                        >
                                            {stepStatus.completed ? <CheckCircle className="w-5 h-5" /> : stepStatus.locked ? <Lock className="w-4 h-4" /> : <Circle className="w-5 h-5" />}
                                        </button>
                                        <span className={`text-xs font-medium text-center ${stepStatus.current ? "text-blue-600" : stepStatus.completed ? "text-green-600" : stepStatus.locked ? "text-gray-400" : "text-gray-600"
                                            }`}>
                                            {step.name}
                                        </span>
                                    </div>
                                    {index < workflowSteps.length - 1 && (
                                        <div className={`w-16 h-0.5 mx-4 transition-colors duration-300 ${stepStatus.completed ? "bg-green-600" : ""}`} />
                                    )}
                                </div>
                            );
                        })}

                        <div className="ml-auto flex gap-2">
                            {showAIReportRefreshButton && (
                                update === 'in progress' ? (
                                    <GlobalLoader />
                                ) : (
                                    <button
                                        onClick={handleRefresh}
                                        className={`p-2.5 rounded-full bg-blue-500 hover:bg-blue-600  transition-colors duration-200 flex items-center justify-center ${!refreshFlag ? 'hidden' : ''}`}
                                        aria-label="Refresh page"
                                        title="Re-Analyze Report"
                                    >
                                        <RefreshCw className="h-4 w-4" />
                                    </button>
                                )
                            )}

                            {
                                vulnerabilityScanTab ? pentestData.scanData.zap ? <button
                                    onClick={handleVulnerabilityScan}
                                    className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600  transition-colors duration-200 flex items-center justify-center"
                                    aria-label="Refresh Vulnerability Scan"
                                    title="Refresh Scan Data"
                                >
                                    {
                                        isScanning ? <RiLoader2Fill
                                            className="size-4 shrink-0 animate-spin"
                                            aria-hidden="true"
                                        /> : <RefreshCw className="h-4 w-4" />
                                    }
                                </button> : <button
                                    onClick={handleVulnerabilityScan}
                                    className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600  transition-colors duration-200 flex items-center justify-center"
                                    aria-label="Start Vulnerability Scan"
                                    title="Start Scan"
                                >
                                    {
                                        isScanning ? <RiLoader2Fill
                                            className="size-4 shrink-0 animate-spin"
                                            aria-hidden="true"
                                        /> : <ScanLine className="h-4 w-4" />
                                    }
                                </button> : null
                            }

                            {/* AI Report LOGIC STARTS */}
                            {pdfGenerated === 'in progress' && !speedometerImg && (
                                <div style={{ position: 'absolute', left: '-9999px', top: '-9999px' }} id="speedometer-container">
                                    <SpeedometerChart
                                        effectivenessLevel={pentestData.aiReport.test_apprecitation_level.level || "Adequate"}
                                        onImageReady={(imgUrl) => {
                                            setSpeedometerImg(imgUrl);
                                        }}
                                    />
                                </div>
                            )}

                            {showAIReportDownloadButton && (
                                pdfGenerated === 'in progress' ? (
                                    <GlobalLoader />
                                ) : (
                                    <button
                                        onClick={() => {
                                            setSpeedometerImg(null); // reset before generating new one
                                            setPdfGenerated("in progress");
                                        }}
                                        className="p-2.5 rounded-full bg-blue-500 hover:bg-blue-600  transition-colors duration-200 flex items-center justify-center"
                                        aria-label="Download AI Report"
                                        title="Download Report"
                                    >
                                        <Download className="h-4 w-4" />
                                    </button>
                                )
                            )}
                            {/* AI Report LOGIC ENDS */}
                        </div>
                    </div>
                </div>
            </Card>

            <AIAnalysisModal open={chatOpen} onOpenChange={setChatOpen} />
        </>
    );
}