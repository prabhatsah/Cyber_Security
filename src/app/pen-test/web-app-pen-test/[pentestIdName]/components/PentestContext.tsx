// app/context/PentestContext.tsx
'use client';

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { fetchData } from '@/utils/api';
import { PenTestDefault, PenTestModified } from '../../components/type';

interface PentestContextType {
    pentestData: PenTestModified | null;
    loading: boolean;
    error: string | null;
    setPentestId: (id: string) => void;
}

const PentestContext = createContext<PentestContextType | undefined>(undefined);

export const PentestProvider = ({ children }: { children: ReactNode }) => {
    const [pentestId, setPentestId] = useState<string>('');
    const [pentestData, setPentestData] = useState<PenTestModified | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!pentestId) return;

        const fetchPentestData = async () => {
            setLoading(true);
            setError(null);
            try {
                const fetched = await fetchData('configured_pentest', 'id', [{ column: 'pentestid', value: pentestId }], null);
                const data: PenTestDefault[] = fetched?.data ?? [];

                if (data.length > 0) {
                    const formatted: PenTestModified = {
                        userId: data[0].userid,
                        pentestId: data[0].pentestid,
                        pentestType: data[0].pentest_type,
                        basicDetails: { ...data[0].basic_details },
                        reconnaissance: data[0].reconnaissance,
                        vulnerabilityScanning: data[0].vulnerability_scanning,
                        exploitation: data[0].exploitation,
                        postExploitation: data[0].post_exploitation,
                        aiAnalysis: data[0].ai_analysis,
                        lastUpdated: data[0].last_updated,
                    };
                    setPentestData(formatted);
                }
            } catch (err: any) {
                setError('Failed to fetch pentest data');
            } finally {
                setLoading(false);
            }
        };

        fetchPentestData();
    }, [pentestId]);

    return (
        <PentestContext.Provider value={{ pentestData, loading, error, setPentestId }}>
            {children}
        </PentestContext.Provider>
    );
};

export const usePentestContext = () => {
    const context = useContext(PentestContext);
    if (!context) throw new Error('usePentestContext must be used within PentestProvider');
    return context;
};
