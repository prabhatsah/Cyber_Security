import React from 'react';
import {
    Page,
    Text,
    View,
    StyleSheet,
    Image,
} from '@react-pdf/renderer';
import { owaspTopTenList, RiskLevel } from './PDFReport';
import { ZapAlert } from '../../../components/type';

const styles = StyleSheet.create({
    page: {
        padding: 50,
        fontSize: 11,
        fontFamily: 'Helvetica',
        backgroundColor: '#fff',
        position: 'relative',
        color: '#242425',
    },
    backgroundImage: {
        position: 'absolute',
        top: '20%',
        width: 500,
        opacity: 0.08,
    },
    title: {
        fontSize: 60,
        marginBottom: 15,
        fontWeight: 'medium',
        textAlign: 'left',
        color: '#343335',
    },
    section: {
        marginBottom: 16,
    },
    itemRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginTop: 8,
    },
    subItemRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginTop: 8,
    },
    level1: {
        paddingLeft: 12,
        color: '#343335',
    },
    level2: {
        paddingLeft: 24,
        color: '#545355',
    },
    level3: {
        paddingLeft: 36,
        color: '#7e7e7f',
    },
});

interface TOCItem {
    title: string;
    page: number;
    subItems?: TOCItem[];
}


const renderTOCItems = (items: TOCItem[], level = 0) => {
    return items.map((item, index) => {
        const indentStyle =
            level === 0
                ? styles.itemRow
                : [styles.subItemRow, styles[`level${level}` as keyof typeof styles]];

        return (
            <View key={`${level}-${index}`}>
                <View style={indentStyle}>
                    <Text>{item.title}</Text>
                    <Text>{item.page}</Text>
                </View>
                {item.subItems && renderTOCItems(item.subItems, level + 1)}
            </View>
        );
    });
};

export interface ContentsPageProps {
    companyLogoSrc: string;
    owaspTopTenObj: Record<string, {
        priorityCountObj: Record<RiskLevel, number>,
        alertsArray: ZapAlert[],
    }>;
    presentPageCounter: number;
}

const ContentsPage: React.FC<ContentsPageProps> = ({ companyLogoSrc, owaspTopTenObj, presentPageCounter }) => {
    const vulAssessContent = owaspTopTenList
        .filter(vulName => owaspTopTenObj[vulName])
        .map(vulName => {
            const eachVulAlertsArray = owaspTopTenObj[vulName]['alertsArray'];

            const finalContentObj = { title: vulName, page: presentPageCounter++ };
            const eachAlertContent = eachVulAlertsArray.map((eachAlert, alertIndex) => {
                const alertPageNumber = presentPageCounter;
                presentPageCounter = presentPageCounter + 2;
                return {
                    title: (alertIndex + 1) + ".0 " + eachAlert.alert,
                    page: alertPageNumber
                }
            });
            return {
                ...finalContentObj,
                subItems: eachAlertContent
            }
        });

    const tableOfContents = [
        {
            title: 'Executive Summary', page: 1,
            subItems: [
                { title: 'Context of the Mandate', page: 2 },
                { title: 'Our Penetration Testing Approach', page: 2 },
                { title: 'Web Application Penetration', page: 3 },
                { title: 'Summary of Findings & Recommendations', page: 4 },
                { title: 'Conclusion & Next Steps', page: 5 },
            ]
        },
        {
            title: 'Web Application Penetration Testing', page: 6,
            subItems: [
                { title: 'Objective', page: 7 },
                { title: 'Scope', page: 7 },
                {
                    title: 'Target Enumeration', page: 8,
                    subItems: [
                        { title: 'Domain Enumeration', page: 9 },
                        { title: 'Network Overview', page: 9 },
                        { title: 'Ports Summary', page: 9 },
                    ]
                },
                {
                    title: 'Vulnerability Assessment', page: 10,
                    subItems: vulAssessContent
                },
            ]
        },
        {
            title: 'Appendix', page: presentPageCounter++,
            subItems: [
                { title: 'Appendix A: Testing Methodology', page: presentPageCounter++ },
                { title: 'Appendix B: Target Enumeration', page: presentPageCounter++ },
                { title: 'Appendix C: Vulnerability Scoring', page: presentPageCounter++ },
                { title: 'Appendix D: Test Appreciation Levels', page: ++presentPageCounter },
            ]
        },
    ];

    return (
        <Page style={styles.page}>
            {/* Background watermark */}
            <Image style={styles.backgroundImage} src={companyLogoSrc} />

            {/* Heading */}
            <Text style={styles.title}>Contents</Text>

            {/* Render TOC items */}
            <View style={styles.section}>
                {renderTOCItems(tableOfContents)}
            </View>
        </Page>
    )
};

export default ContentsPage;
