import React from 'react';
import {
    Text,
    View,
    Image,
    StyleSheet,
} from '@react-pdf/renderer';
import WaterMarkedPage from './WaterMarkedPage';
import { RiskLevel } from './PDFReport';

const styles = StyleSheet.create({
    pageContent: {
        flexDirection: 'column',
        justifyContent: 'space-between',
        color: '#5b5a5c',
        height: '100%',
    },
    contentSection: {
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'space-between',
    },
    header: {
        fontSize: 36,
        lineHeight: 1,
        marginBottom: 20,
    },
    subHeader: {
        fontSize: 18,
    },
    priorityRow: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 16,
        paddingBottom: 10,
        borderBottom: '1pt solid #d1d5db',
    },
    badge: {
        width: 40,
        height: 40,
        borderRadius: 8,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 16,
        textAlign: 'center',
    },
    badgeText: {
        fontSize: 20,
        color: '#fff',
        marginTop: -5,
    },
    priorityText: {
        fontSize: 14,
    },
    priorityTable: {
        marginBottom: 15,
        color: '#545355'
    },
    priorityTableHeader: {
        flexDirection: 'row',
        alignItems: 'center',
        fontSize: 8,
        textDecoration: 'underline',
        paddingVertical: 8,
        paddingHorizontal: 10,
        lineHeight: 0
    },
    priorityTableDataRow: {
        flexDirection: 'row',
        alignItems: 'center',
        fontSize: 7,
        color: '#545355',
        paddingVertical: 0,
        paddingHorizontal: 10,
        marginBottom: 0,
        lineHeight: 0,
    },
    legendBox: {
        width: 10,
        height: 10,
        marginRight: 4,
        marginBottom: 0
    },
    pageNumber: {
        justifySelf: 'flex-end',
        alignSelf: 'flex-end',
        fontSize: 10,
        color: '#aaa',
    },
});

const priorities = [
    { color: '#e31d1a', label: 'Critical', count: 0, number: '1', cvssScore: '9.0 - 10.0' },
    { color: '#faa439', label: 'High', count: 0, number: '2', cvssScore: '7.0 - 8.9' },
    { color: '#ffd85f', label: 'Medium', count: 0, number: '3', cvssScore: '4.0 - 6.9' },
    { color: '#54bb5f', label: 'Low', count: 2, number: '4', cvssScore: '0.1 - 3.9' },
    { color: '#3462ba', label: 'Information', count: 0, number: '5', cvssScore: '0.0' },
];

const priorityDescriptions: Record<string, string> = {
    Critical: 'Requires immediate attention',
    High: 'Requires action in a reasonable timeframe',
    Medium: 'Requires short term action',
    Low: 'Need to be fixed but risk is minimal',
    Information: 'Does not represent a risk',
};

interface OwaspEachVulIntroPageProps {
    companyLogoSrc: string;
    vulName: string;
    priorityCountObj: Record<RiskLevel, number>;
    pageNumber: number;
}

const OwaspEachVulIntroPage: React.FC<OwaspEachVulIntroPageProps> = ({ companyLogoSrc, vulName, priorityCountObj, pageNumber }) => (
    <WaterMarkedPage companyLogoSrc={companyLogoSrc} sectionHeader="Web Application Penetration Testing" backgroundColor="#e3e4df">
        <View style={styles.pageContent}>

            <View style={styles.contentSection}>

                <View>
                    <Text style={styles.header}>{vulName}</Text>
                    <Text style={styles.subHeader}>Risk Level Summary</Text>
                </View>

                <View>
                    {priorities.map((item, idx) => {
                        const eachPriorityCount = priorityCountObj[item.label as keyof object];
                        return (
                            <View key={idx} style={styles.priorityRow}>
                                <View style={[styles.badge, { backgroundColor: item.color }]}>
                                    <Text style={styles.badgeText}>{item.number}</Text>
                                </View>
                                <Text style={styles.priorityText}>
                                    {item.label} - {eachPriorityCount} Issue{eachPriorityCount !== 1 ? 's' : ''}
                                </Text>
                            </View>
                        )
                    })}
                </View>


                <View style={styles.priorityTable}>
                    <View style={styles.priorityTableHeader}>
                        <Text style={{ width: '20%' }}>Severity</Text>
                        <Text style={{ width: '20%' }}>Score</Text>
                        <Text style={{ width: '60%' }}>Description</Text>
                    </View>


                    {priorities.map((eachPriority, index) => {
                        return (
                            <View key={`threat-metric-${index}`} style={styles.priorityTableDataRow}>
                                <View style={{ width: '20%', flexDirection: 'row', alignItems: 'center' }}>
                                    <View style={[styles.legendBox, { backgroundColor: eachPriority.color }]} />
                                    <Text style={{ fontWeight: 'bold' }}>{eachPriority.label}</Text>
                                </View>
                                <Text style={{ width: '20%' }}>{eachPriority.cvssScore}</Text>
                                <Text style={{ width: '60%' }}>{priorityDescriptions[eachPriority.label]}</Text>
                            </View>
                        )
                    })}
                </View>
            </View>


            <Text style={styles.pageNumber}>{pageNumber}</Text>
        </View>
    </WaterMarkedPage>
);

export default OwaspEachVulIntroPage;
