import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  Image,
} from '@react-pdf/renderer';
import ContentsPage from './ContentsPage';
import CoverPage from './CoverPage';
import CompanyIntroPage from './CompanyIntroPage';
import GenericContentHeaderPage from './GenericContentHeaderPage';
import ContextAndApproachPage from './ContextAndApproachPage';
import MandatePhasePage from './MandatePhasePage';
import PenTestPage1 from './PenTestPage1';
import PenTestRecommendationPage from './PenTestRecommendationPage';
import PenTestConclusionPage from './PenTestConclusionPage';
import TestingIntroPage from './TestingIntroPage';
import PenTestObjScopePage from './PenTestObjScopePage';
import ReconnaissancePage from './ReconnaissancePage';
import OwaspEachVulIntroPage from './OwaspEachVulIntroPage';
import { PenTestModified, VulnerabilityImage, ZapAlert } from '../../../components/type';
import OwaspEachVulAlertDescriptionPage from './OwaspEachVulAlertDescriptionPage';
import React from 'react';
import OwaspEachVulAlertPicturePage from './OwaspEachVulAlertPicturePage';
import TargetEnumerationPage from './TargetEnumerationPage';

let companyFullLogoUrl = process.env.NEXT_PUBLIC_BASE_PATH || `http://localhost:${process.env.NEXT_PUBLIC_PORT || 3000}`;
companyFullLogoUrl += "/cyber-security/assets/images/company-full-logo.png";

let companyLogoUrl = process.env.NEXT_PUBLIC_BASE_PATH || `http://localhost:${process.env.NEXT_PUBLIC_PORT || 3000}`;
companyLogoUrl += "/cyber-security/assets/images/company-logo.png";

export type RiskLevel = 'Critical' | 'High' | 'Medium' | 'Low' | 'Information';
const riskCodeVsDesc: Record<string, RiskLevel> = {
  "0": "Information",
  "1": "Low",
  "2": "Medium",
  "3": "High",
  "4": "Critical",
};

const owaspTopTenList: string[] = [
  "A01:2021 - Broken Access Control",
  "A02:2021 - Cryptographic Failures",
  "A03:2021 - Injection",
  "A04:2021 - Insecure Design",
  "A05:2021 - Security Misconfiguration",
  "A06:2021 - Vulnerable and Outdated Components",
  "A07:2021 - Identification and Authentication Failures",
  "A08:2021 - Software and Data Integrity Failures",
  "A09:2021 - Security Logging and Monitoring Failures",
  "A10:2021 - Server-Side Request Forgery (SSRF)",
  "Uncategorized",
];


interface PDFReportProps {
  pentestData: PenTestModified,
  vulnerabilityImageObj: Record<string, VulnerabilityImage[]>,
}

export const PDFReport: React.FC<PDFReportProps> = ({ pentestData, vulnerabilityImageObj }) => {
  const tableOfContents = [
    {
      title: 'Executive Summary', page: 1,
      subItems: [
        { title: 'Context of the Mandate', page: 2 },
        { title: 'Our Testing Approach', page: 2 },
        {
          title: 'Phases of the Mandate', page: 3,
          subItems: [
            { title: 'Web Application', page: 4 },
          ]
        },
        { title: 'Summary of Findings & Recommendations', page: 5 },
        { title: 'Conclusion & Next Steps', page: 7 },
      ]
    },
    {
      title: 'Web Application Penetration Testing', page: 8,
      subItems: [
        { title: 'Objective', page: 9 },
        { title: 'Scope', page: 9 },
        { title: 'Attack Scenario', page: 10 },
        { title: 'Cleanup', page: 19 },
        {
          title: 'Missing Security Controls', page: 20,
          subItems: [
            { title: '1.1 Missing HTTP Strict Transport Security (HSTS)', page: 21 },
            { title: '1.1 Inadequate Dependency Management Process ', page: 23 },
          ]
        },
        {
          title: 'Vulnerabilities & Recommendations', page: 25,
          subItems: [
            { title: '1.3 User Enumeration', page: 26 },
            { title: '1.4 Information Disclosure', page: 29 },
            { title: '1.5 Multiple Cryptographic Weaknesses (TLS)', page: 31 },
            { title: '1.6 Detailed Error Message', page: 34 },
          ]
        }
      ]
    },
    {
      title: 'Appendix', page: 36,
      subItems: [
        { title: 'Appendix 1 - Testing Methodology', page: 37 },
        { title: 'Appendix 2 - Assessment of Security Control Mechanisms', page: 38 },
        { title: 'Appendix 3 - Vulnerability Scoring', page: 39 },
        { title: 'Appendix 4 - Test Appreciation Levels', page: 41 },
      ]
    },
  ];

  const zapAlertsArray: ZapAlert[] = pentestData.scanData.zap?.alerts ?? [];
  let owaspTopTenObj: Record<string, {
    priorityCountObj: Record<RiskLevel, number>,
    alertsArray: ZapAlert[],
  }> = {};

  zapAlertsArray.forEach(eachAlert => {
    if (!owaspTopTenObj[eachAlert.owasp_title]) {
      owaspTopTenObj[eachAlert.owasp_title] = {
        priorityCountObj: {
          'Critical': 0,
          'High': 0,
          'Medium': 0,
          'Low': 0,
          'Information': 0,
        },
        alertsArray: [],
      }
    }
    owaspTopTenObj[eachAlert.owasp_title]['priorityCountObj'][riskCodeVsDesc[eachAlert.riskcode]] += 1;
    owaspTopTenObj[eachAlert.owasp_title]['alertsArray'].push(eachAlert);
  });

  let dynamicPageNumber = 10;
  return (
    <Document>
      <CoverPage companyFullLogoSrc={companyFullLogoUrl} companyLogoSrc={companyLogoUrl} />
      <CompanyIntroPage companyFullLogoSrc={companyFullLogoUrl} companyLogoSrc={companyLogoUrl} />
      <ContentsPage contents={tableOfContents} companyLogoSrc={companyLogoUrl} />
      <GenericContentHeaderPage companyLogoSrc={companyLogoUrl} pageTitle='Executive Summary' />
      <ContextAndApproachPage companyLogoSrc={companyLogoUrl} />
      <MandatePhasePage companyLogoSrc={companyLogoUrl} />
      <PenTestPage1 companyLogoSrc={companyLogoUrl} />
      <PenTestRecommendationPage companyLogoSrc={companyLogoUrl} />
      <PenTestConclusionPage companyLogoSrc={companyLogoUrl} />
      <TestingIntroPage companyLogoSrc={companyLogoUrl} />
      <PenTestObjScopePage companyLogoSrc={companyLogoUrl} />
      {/* <ReconnaissancePage companyLogoSrc={companyLogoUrl} aiReportData={pentestData.aiReport} /> */}
      <TargetEnumerationPage companyLogoSrc={companyLogoUrl} aiReportData={pentestData.aiReport} />
      {owaspTopTenList
        .filter(vulName => owaspTopTenObj[vulName])
        .map(vulName => {
          const eachVulAlertsArray = owaspTopTenObj[vulName]['alertsArray'];
          return (
            <React.Fragment key={vulName}>
              <OwaspEachVulIntroPage
                companyLogoSrc={companyLogoUrl}
                vulName={vulName === "Uncategorized" ? "Additional Vulnerabilities" : vulName}
                priorityCountObj={owaspTopTenObj[vulName]['priorityCountObj']}
                pageNumber={dynamicPageNumber++}
              />

              {eachVulAlertsArray.map((eachAlert, alertIndex) => {
                return (
                  <React.Fragment key={`${vulName}-alert-${alertIndex}`}>
                    <OwaspEachVulAlertDescriptionPage
                      key={`${vulName}-alert-${alertIndex}-des`}
                      companyLogoSrc={companyLogoUrl}
                      alertIndex={alertIndex + 1}
                      alertData={eachAlert}
                      pageNumber={dynamicPageNumber++}
                    />
                    <OwaspEachVulAlertPicturePage
                      key={`${vulName}-alert-${alertIndex}-pic`}
                      companyLogoSrc={companyLogoUrl}
                      alertIndex={alertIndex + 1}
                      alertInstances={eachAlert.instances}
                      alertImgData={vulnerabilityImageObj[eachAlert.cweid] ?? []}
                      pageNumber={dynamicPageNumber++}
                    />
                  </React.Fragment>
                )
              })}
            </React.Fragment>
          );
        })}
      <GenericContentHeaderPage companyLogoSrc={companyLogoUrl} pageTitle='Appendix' />
    </Document>
  )
};
