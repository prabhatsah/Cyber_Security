import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  Image,
} from '@react-pdf/renderer';
import ContentsPage from './ContentsPage';
import CoverPage from './CoverPage';
import CompanyIntroPage from './CompanyIntroPage';
import GenericContentHeaderPage from './GenericContentHeaderPage';
import ExecSummaryContextAndApproachPage from './ExecSummaryContextAndApproachPage';
import MandatePhasePage from './MandatePhasePage';
import ExecSummaryRiskAssessmentPage from './ExecSummaryRiskAssessmentPage';
import ExecSummaryRecommendationPage from './ExecSummaryRecommendationPage';
import ExecSummaryConclusionPage from './ExecSummaryConclusionPage';
import GenericTestingIntroPage from './GenericTestingIntroPage';
import PenTestObjScopePage from './PenTestObjScopePage';
import OwaspEachVulIntroPage from './OwaspEachVulIntroPage';
import { PenTestModified, VulnerabilityImage, ZapAlert } from '../../../components/type';
import OwaspEachVulAlertDescriptionPage from './OwaspEachVulAlertDescriptionPage';
import React, { useRef } from 'react';
import OwaspEachVulAlertPicturePage from './OwaspEachVulAlertPicturePage';
import TargetEnumerationPage from './TargetEnumerationPage';

let companyFullLogoUrl = process.env.NEXT_PUBLIC_BASE_PATH || `http://localhost:${process.env.NEXT_PUBLIC_PORT || 3000}`;
companyFullLogoUrl += "/cyber-security/assets/images/company-full-logo.png";

let companyLogoUrl = process.env.NEXT_PUBLIC_BASE_PATH || `http://localhost:${process.env.NEXT_PUBLIC_PORT || 3000}`;
companyLogoUrl += "/cyber-security/assets/images/company-logo.png";

export type RiskLevel = 'Critical' | 'High' | 'Medium' | 'Low' | 'Information';
const riskCodeVsDesc: Record<string, RiskLevel> = {
  "0": "Information",
  "1": "Low",
  "2": "Medium",
  "3": "High",
  "4": "Critical",
};

const owaspTopTenList: string[] = [
  "A01:2021 - Broken Access Control",
  "A02:2021 - Cryptographic Failures",
  "A03:2021 - Injection",
  "A04:2021 - Insecure Design",
  "A05:2021 - Security Misconfiguration",
  "A06:2021 - Vulnerable and Outdated Components",
  "A07:2021 - Identification and Authentication Failures",
  "A08:2021 - Software and Data Integrity Failures",
  "A09:2021 - Security Logging and Monitoring Failures",
  "A10:2021 - Server-Side Request Forgery (SSRF)",
  "Uncategorized",
];


interface PDFReportProps {
  pentestData: PenTestModified,
  vulnerabilityImageObj: Record<string, VulnerabilityImage[]>,
  riskAssessmentChartImg: string;
}

export const PDFReport: React.FC<PDFReportProps> = ({ pentestData, vulnerabilityImageObj, riskAssessmentChartImg }) => {
  const zapAlertsArray: ZapAlert[] = pentestData.scanData.zap?.alerts ?? [];
  let owaspTopTenObj: Record<string, {
    priorityCountObj: Record<RiskLevel, number>,
    alertsArray: ZapAlert[],
  }> = {};

  zapAlertsArray.forEach(eachAlert => {
    if (!owaspTopTenObj[eachAlert.owasp_title]) {
      owaspTopTenObj[eachAlert.owasp_title] = {
        priorityCountObj: {
          'Critical': 0,
          'High': 0,
          'Medium': 0,
          'Low': 0,
          'Information': 0,
        },
        alertsArray: [],
      }
    }
    owaspTopTenObj[eachAlert.owasp_title]['priorityCountObj'][riskCodeVsDesc[eachAlert.riskcode]] += 1;
    owaspTopTenObj[eachAlert.owasp_title]['alertsArray'].push(eachAlert);
  });

  let vulContentCounter = 11;
  const vulAssessContent = owaspTopTenList
    .filter(vulName => owaspTopTenObj[vulName])
    .map(vulName => {
      const eachVulAlertsArray = owaspTopTenObj[vulName]['alertsArray'];

      const finalContentObj = { title: vulName, page: vulContentCounter++ };
      const eachAlertContent = eachVulAlertsArray.map((eachAlert, alertIndex) => {
        const alertPageNumber = vulContentCounter;
        vulContentCounter = vulContentCounter + 2;
        return {
          title: (alertIndex + 1) + ".0 " + eachAlert.alert,
          page: alertPageNumber
        }
      });
      return {
        ...finalContentObj,
        subItems: eachAlertContent
      }
    });

  const tableOfContents = [
    {
      title: 'Executive Summary', page: 1,
      subItems: [
        { title: 'Context of the Mandate', page: 2 },
        { title: 'Our Penetration Testing Approach', page: 2 },
        { title: 'Web Application Penetration', page: 3 },
        { title: 'Summary of Findings & Recommendations', page: 4 },
        { title: 'Conclusion & Next Steps', page: 5 },
      ]
    },
    {
      title: 'Web Application Penetration Testing', page: 6,
      subItems: [
        { title: 'Objective', page: 7 },
        { title: 'Scope', page: 7 },
        {
          title: 'Target Enumeration', page: 8,
          subItems: [
            { title: 'Domain Enumeration', page: 9 },
            { title: 'Network Overview', page: 9 },
            { title: 'Ports Summary', page: 9 },
          ]
        },
        {
          title: 'Vulnerability Assessment', page: 10,
          subItems: vulAssessContent
        },
      ]
    },
    {
      title: 'Appendix', page: 36,
      subItems: [
        { title: 'Appendix 1 - Testing Methodology', page: 37 },
        { title: 'Appendix 2 - Assessment of Security Control Mechanisms', page: 38 },
        { title: 'Appendix 3 - Vulnerability Scoring', page: 40 },
        { title: 'Appendix 4 - Test Appreciation Levels', page: 41 },
      ]
    },
  ];

  const targetEnumerationDes = "Involves the identification of domains, IP addresses, network structure, and open ports related to the target. This phase establishes a foundational understanding of the attack surface within the defined scope and timeline of the engagement."

  const vulnerabilityAssesssmentDes = "Involves identifying and validating security weaknesses in the target application by simulating real-world attack scenarios. This includes testing for vulnerabilities primarily based on the OWASP Top 10 framework, using both automated tools and manual exploitation techniques to assess the application's security posture."

  let dynamicPageNumber = 11;
  const globalImageCounterRef = useRef(1);
  return (
    <Document>
      <CoverPage companyFullLogoSrc={companyFullLogoUrl} companyLogoSrc={companyLogoUrl} />
      <CompanyIntroPage companyFullLogoSrc={companyFullLogoUrl} companyLogoSrc={companyLogoUrl} pentestBasicDetails={pentestData.basicDetails} />
      <ContentsPage contents={tableOfContents} companyLogoSrc={companyLogoUrl} />
      <GenericContentHeaderPage companyLogoSrc={companyLogoUrl} pageTitle='Executive Summary' />
      <ExecSummaryContextAndApproachPage companyLogoSrc={companyLogoUrl} pentestBasicDetails={pentestData.basicDetails} />
      <ExecSummaryRiskAssessmentPage
        companyLogoSrc={companyLogoUrl}
        riskAssessmentObj={pentestData.aiReport.test_apprecitation_level}
        riskAssessmentChartImg={riskAssessmentChartImg}
      />
      <ExecSummaryRecommendationPage companyLogoSrc={companyLogoUrl} zapAlerts={pentestData.scanData.zap?.alerts ?? []} />
      <ExecSummaryConclusionPage companyLogoSrc={companyLogoUrl} />
      <GenericContentHeaderPage companyLogoSrc={companyLogoUrl} pageTitle='Web Application Penetration Testing' fontSize={35} leftPanelWidth='60%' rightPanelWidth='40%' />
      <PenTestObjScopePage companyLogoSrc={companyLogoUrl} pentestBasicDetails={pentestData.basicDetails} />
      <GenericTestingIntroPage companyLogoSrc={companyLogoUrl} serialNo={1} testTitle='Target Enumeration' testDescription={targetEnumerationDes} pageNumber={8} />
      <TargetEnumerationPage companyLogoSrc={companyLogoUrl} aiReportData={pentestData.aiReport} />
      <GenericTestingIntroPage companyLogoSrc={companyLogoUrl} serialNo={2} testTitle={'Vulnerability' + '\n' + 'Assessment'} testDescription={vulnerabilityAssesssmentDes} pageNumber={10} />
      {owaspTopTenList
        .filter(vulName => owaspTopTenObj[vulName])
        .map(vulName => {
          const eachVulAlertsArray = owaspTopTenObj[vulName]['alertsArray'];
          return (
            <React.Fragment key={vulName}>
              <OwaspEachVulIntroPage
                companyLogoSrc={companyLogoUrl}
                vulName={vulName === "Uncategorized" ? "Additional Vulnerabilities" : vulName}
                priorityCountObj={owaspTopTenObj[vulName]['priorityCountObj']}
                pageNumber={dynamicPageNumber++}
              />

              {eachVulAlertsArray.map((eachAlert, alertIndex) => {
                return (
                  <React.Fragment key={`${vulName}-alert-${alertIndex}`}>
                    <OwaspEachVulAlertDescriptionPage
                      key={`${vulName}-alert-${alertIndex}-des`}
                      companyLogoSrc={companyLogoUrl}
                      alertIndex={alertIndex + 1}
                      alertData={eachAlert}
                      pageNumber={dynamicPageNumber++}
                    />
                    <OwaspEachVulAlertPicturePage
                      key={`${vulName}-alert-${alertIndex}-pic`}
                      companyLogoSrc={companyLogoUrl}
                      alertIndex={alertIndex + 1}
                      alertInstances={eachAlert.instances}
                      alertImgData={vulnerabilityImageObj[eachAlert.cweid] ?? []}
                      imageCounterRef={globalImageCounterRef}
                      pageNumber={dynamicPageNumber++}
                    />
                  </React.Fragment>
                )
              })}
            </React.Fragment>
          );
        })}
      <GenericContentHeaderPage companyLogoSrc={companyLogoUrl} pageTitle='Appendix' />
    </Document>
  )
};
