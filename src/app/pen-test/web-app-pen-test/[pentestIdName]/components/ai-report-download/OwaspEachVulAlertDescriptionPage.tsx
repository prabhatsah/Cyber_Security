import React from 'react';
import {
    Page,
    Text,
    View,
    StyleSheet,
    Image,
} from '@react-pdf/renderer';
import WaterMarkedPage from './WaterMarkedPage';
import { ZapAlert } from '../../../components/type';

const styles = StyleSheet.create({
    mainSection: {
        height: '100%',
        flexDirection: 'row',
        justifyContent: 'space-between',
        color: '#2e2d2e',
    },
    heading: {
        fontSize: 20,
        marginBottom: 15,
        lineHeight: 1.2,
    },
    table: {
        marginBottom: 20,
        borderWidth: 1,
        borderColor: '#d1d5db',
    },
    metaRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: '#f3f4f6',
        fontSize: 8.5,
        paddingTop: 8,
        paddingBottom: 1,
        paddingHorizontal: 10,
    },
    metaLabel: {
        fontWeight: 'bold',
        textTransform: 'uppercase',
        marginRight: 4,
    },
    metaValue: {
        fontWeight: 'normal',
    },
    metaValueCritical: {
        color: '#b91c1c',
        fontWeight: 'bold',
    },
    dataRow: {
        flexDirection: 'row',
        alignItems: 'center',
        fontSize: 11,
        borderTopWidth: 1,
        borderColor: '#d1d5db',
    },
    dataLabel: {
        width: '35%',
        fontWeight: 'bold',
        borderRightWidth: 1,
        borderRightColor: '#d1d5db',
        paddingTop: 15,
        paddingBottom: 6,
        paddingHorizontal: 10,
    },
    dataValue: {
        width: '65%',
        paddingTop: 15,
        paddingBottom: 6,
        paddingHorizontal: 10,
    },
    subheading: {
        fontSize: 14,
        fontWeight: 'light',
        color: '#2e2d2e',
        marginBottom: 10,
    },
    normalText: {
        fontSize: 10,
        color: '#7e7e7f',
        marginBottom: 15,
        textAlign: 'justify',
    },
    listItems: {
        fontSize: 10,
        color: '#7e7e7f',
        marginLeft: 10,
        marginBottom: 15
    },
    bulletContainer: {
        flexDirection: 'row',
        gap: 10,
    },
    bulletPoint: {
        color: '#4f46e5',
    },
    Information: {
        color: '#3462ba'
    },
    Low: {
        color: '#43964c'
    },
    Medium: {
        color: '#e6c256'
    },
    High: {
        color: '#faa439'
    },
    Critical: {
        color: '#e31d1a'
    },
    pageNumber: {
        justifySelf: 'flex-end',
        alignSelf: 'flex-end',
        fontSize: 10,
        color: '#aaa',
    },
});

type RiskLevel = 'Critical' | 'High' | 'Medium' | 'Low' | 'Information';
const riskCodeVsDesc: Record<string, RiskLevel> = {
    "0": "Information",
    "1": "Low",
    "2": "Medium",
    "3": "High",
    "4": "Critical",
};

interface OwaspEachVulAlertDescriptionPageProps {
    companyLogoSrc: string;
    alertIndex: number;
    alertData: ZapAlert;
    pageNumber: number;
}

function removePTags(htmlString: string) {
    return htmlString.replace(/<\/?p>/g, "");
}

function extractTextFromPTags(htmlString: string) {
    const matches = htmlString.match(/<p>(.*?)<\/p>/gs); // Use 's' flag to match multi-line content
    return matches ? matches.map((p) => p.replace(/<\/?p>/g, "")) : [];
}

const OwaspEachVulAlertDescriptionPage: React.FC<OwaspEachVulAlertDescriptionPageProps> = ({ companyLogoSrc, alertIndex, alertData, pageNumber }) => (
    <WaterMarkedPage companyLogoSrc={companyLogoSrc} sectionHeader='Web Application Penetration Testing'>
        <View style={styles.mainSection}>
            <View>
                <Text style={styles.heading}>{`${alertIndex}.0 ${alertData.alert}`}</Text>

                <View style={styles.table}>
                    {/* First Row with Gray Background and Smaller Font */}
                    <View style={styles.metaRow}>
                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                            <Text style={styles.metaLabel}>SEVERITY:</Text>
                            <Text style={[styles.metaValueCritical, styles[riskCodeVsDesc[alertData['riskcode']]]]}>
                                {riskCodeVsDesc[alertData['riskcode']].toUpperCase()}
                            </Text>
                        </View>
                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                            <Text style={styles.metaLabel}>CWE-ID:</Text>
                            <Text style={styles.metaValue}>{`CWE-${alertData.cweid}`}</Text>
                        </View>
                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                            <Text style={styles.metaLabel}>CVSS SCORE:</Text>
                            <Text style={styles.metaValue}>{alertData['CVSS V3 Base']}</Text>
                        </View>
                    </View>


                    {/* OWASP TOP 10 Row */}
                    <View style={styles.dataRow}>
                        <Text style={styles.dataLabel}>OWASP TOP 10</Text>
                        <Text style={styles.dataValue}>{alertData.owasp_title}</Text>
                    </View>
                </View>


                <Text style={styles.subheading}>{`${alertIndex}.1 Context`}</Text>
                <Text style={styles.normalText}>{alertData.context}</Text>

                <Text style={styles.subheading}>{`${alertIndex}.2 Analysis`}</Text>
                <Text style={styles.normalText}>{alertData.analysis}</Text>

                <Text style={styles.subheading}>{`${alertIndex}.3 Recommendations`}</Text>
                <Text style={styles.normalText}>{alertData.solution !== "" ? removePTags(alertData.solution) : "No Recommendations Available"}</Text>

                <Text style={styles.subheading}>{`${alertIndex}.4 References`}</Text>
                {alertData.reference.length !== 0 ? (
                    <View style={styles.listItems}>
                        {[...new Set(extractTextFromPTags(alertData.reference))].map((eachReference, referenceIndex) => (
                            <View key={`alert-${alertIndex - 1}-reference-${referenceIndex}`} style={styles.bulletContainer}>
                                <Text style={styles.bulletPoint}>â€¢</Text>
                                <Text>{eachReference}</Text>
                            </View>
                        ))}
                    </View>) :
                    <Text style={styles.normalText}>No References Available</Text>
                }
            </View>

            <Text style={styles.pageNumber}>{pageNumber}</Text>
        </View>
    </WaterMarkedPage >
);

export default OwaspEachVulAlertDescriptionPage;
