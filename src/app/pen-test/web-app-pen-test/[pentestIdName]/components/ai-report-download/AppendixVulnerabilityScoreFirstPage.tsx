import React from 'react';
import {
    Text,
    View,
    Image,
    StyleSheet,
} from '@react-pdf/renderer';
import WaterMarkedPage from './WaterMarkedPage';

const styles = StyleSheet.create({
    pageContent: {
        flexDirection: 'column',
        justifyContent: 'space-between',
        height: '100%',
    },
    heading: {
        fontSize: 30,
        marginBottom: 15,
    },
    activityTitle: {
        fontSize: 14,
        color: '#343335',
        marginBottom: 10,
    },
    paragraph: {
        fontSize: 10,
        color: '#545355',
        marginBottom: 10,
        textAlign: 'justify',
    },
    table: {
        marginBottom: 15,
        borderWidth: 1,
        borderColor: '#d1d5db',
    },
    metaRow: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#cccdc9',
        fontSize: 8.5,
        fontWeight: 'bold',
        color: '#343335',
        textTransform: 'uppercase',
        paddingTop: 8,
        paddingBottom: 1,
        paddingHorizontal: 5,
        opacity: 0.5,
    },
    metaFirstCol: {
        width: '35%',
        opacity: 1,
    },
    metaSecondCol: {
        width: '20%',
        opacity: 1
    },
    metaThirdCol: {
        width: '45%',
        opacity: 1,
    },
    dataRow: {
        flexDirection: 'row',
        // alignItems: 'center',
        fontSize: 10,
        color: '#545355',
        borderTopWidth: 1,
        borderColor: '#d1d5db',
        paddingTop: 8,
        paddingBottom: 1,
        paddingHorizontal: 5,
    },
    dataFirstCol: {
        width: '35%',
    },
    dataSecondCol: {
        width: '20%',
    },
    dataThirdCol: {
        width: '45%',
    },
    pageNumber: {
        justifySelf: 'flex-end',
        alignSelf: 'flex-end',
        fontSize: 10,
        color: '#aaa',
    },
});

interface AppendixVulnerabilityScoreFirstPageProps {
    companyLogoSrc: string;
    pageNumber: number;
}


const baseMetrics = [
    {
        name: "Attack Vector",
        code: "AV",
        description: "Defines how the vulnerability is exploited"
    },
    {
        name: "Attack Complexity",
        code: "AC",
        description: "How complex the attack is to perform."
    },
    {
        name: "Priveleges Required",
        code: "PR",
        description: "Access level needed for exploitation."
    },
    {
        name: "User Interaction",
        code: "UI",
        description: "Whether a user must be involved."
    },
    {
        name: "Confidentiality Impact",
        code: "VC",
        description: "Loss of confidentiality on the vulnerable system."
    },
    {
        name: "Integrity Impact",
        code: "VI",
        description: "Unauthorized data manipulation."
    },
    {
        name: "Availability Impact",
        code: "VA",
        description: "Disruption of service or availability."
    },
    {
        name: "Subsequent System Impacts",
        code: "SC, SI, SA",
        description: "Effect on other dependent systems."
    },
];

const threatMetrics = [
    {
        name: "Exploit Maturity",
        code: "E",
        description: "Whether exploits are publicly available."
    },
    {
        name: "Remediation Level",
        code: "RL",
        description: "Availability and effectiveness of a fix."
    },
    {
        name: "Confidence",
        code: "CR",
        description: "Confidence in the accuracy of the vulnerability details."
    },
];

const environmentalMetrics = [
    {
        name: "Modified Base Metrics",
        code: "MAV, MAC, etc.",
        description: "Adjust base metrics to suit the organization."
    },
    {
        name: "Security Requirements",
        code: "CR, IR,\n AR",
        description: "Set importance of confidentiality, integrity, and availability."
    },
];

const AppendixVulnerabilityScoreFirstPage: React.FC<AppendixVulnerabilityScoreFirstPageProps> = ({ companyLogoSrc, pageNumber }) => (
    <WaterMarkedPage companyLogoSrc={companyLogoSrc} sectionHeader='Report Appendix' backgroundColor='#e3e4df'>
        <View style={styles.pageContent}>
            <View>
                <View style={{ flexDirection: 'row', marginBottom: 15 }}>
                    <Text style={[styles.heading, { fontWeight: 700, marginRight: 4 }]}>Appendix C:</Text>
                    <Text style={styles.heading}>Vulnerability Scoring</Text>
                </View>

                <Text style={styles.paragraph}>
                    Vulnerability severity must be measured consistently to guide remediation efforts and prioritize risk. The Common Vulnerability Scoring System (CVSS) is a standardized framework used globally to assess the impact of security flaws. The latest version, CVSS v4.0, introduces enhanced flexibility, better alignment with threat intelligence, and improved environmental tailoring.
                </Text>

                <Text style={styles.paragraph}>
                    CVSS v4.0 evaluates vulnerabilities based on their technical characteristics, current threat landscape, and the specific environment in which they exist. Scores range from 0.0 to 10.0 and help organizations quantify and compare risk across systems and applications.
                </Text>

                <Text style={styles.activityTitle}>CVSS v4.0 Metric Groups</Text>

                <Text style={[styles.activityTitle, { fontSize: 12, marginBottom: 5 }]}>A. Base Metrics</Text>
                {/* Base Metrics Table */}
                <View style={styles.table}>
                    <View style={styles.metaRow}>
                        <Text style={styles.metaFirstCol}>METRIC</Text>
                        <Text style={styles.metaSecondCol}>CODE</Text>
                        <Text style={styles.metaThirdCol}>DESCRIPTION</Text>
                    </View>


                    {baseMetrics.map((eachMetric, index) => {
                        return (
                            <View key={`base-metric-${index}`} style={styles.dataRow}>
                                <Text style={styles.dataFirstCol}>{eachMetric.name}</Text>
                                <Text style={styles.dataSecondCol}>{eachMetric.code}</Text>
                                <Text style={styles.dataThirdCol}>{eachMetric.description}</Text>
                            </View>
                        )
                    })}
                </View>

                <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
                    <View style={{ width: '46.5%' }}>
                        <Text style={[styles.activityTitle, { fontSize: 12, marginBottom: 5 }]}>B. Threat Metrics</Text>
                        {/* Threat Metrics Table */}
                        <View style={styles.table}>
                            <View style={styles.metaRow}>
                                <Text style={styles.metaFirstCol}>METRIC</Text>
                                <Text style={styles.metaSecondCol}>CODE</Text>
                                <Text style={styles.metaThirdCol}>DESCRIPTION</Text>
                            </View>


                            {threatMetrics.map((eachMetric, index) => {
                                return (
                                    <View key={`threat-metric-${index}`} style={styles.dataRow}>
                                        <Text style={styles.dataFirstCol}>{eachMetric.name}</Text>
                                        <Text style={styles.dataSecondCol}>{eachMetric.code}</Text>
                                        <Text style={styles.dataThirdCol}>{eachMetric.description}</Text>
                                    </View>
                                )
                            })}
                        </View>
                    </View>

                    <View style={{ width: '51.5%' }}>
                        <Text style={[styles.activityTitle, { fontSize: 12, marginBottom: 5 }]}>C. Environmental Metrics</Text>
                        {/* Environmental Metrics Table */}
                        <View style={styles.table}>
                            <View style={styles.metaRow}>
                                <Text style={styles.metaFirstCol}>METRIC</Text>
                                <Text style={styles.metaSecondCol}>CODE</Text>
                                <Text style={styles.metaThirdCol}>DESCRIPTION</Text>
                            </View>


                            {environmentalMetrics.map((eachMetric, index) => {
                                return (
                                    <View key={`base-metric-${index}`} style={styles.dataRow}>
                                        <Text style={styles.dataFirstCol}>{eachMetric.name}</Text>
                                        <Text style={styles.dataSecondCol}>{eachMetric.code}</Text>
                                        <Text style={styles.dataThirdCol}>{eachMetric.description}</Text>
                                    </View>
                                )
                            })}
                        </View>
                    </View>
                </View>

            </View>

            <Text style={styles.pageNumber}>{pageNumber}</Text>
        </View>
    </WaterMarkedPage >
);

export default AppendixVulnerabilityScoreFirstPage;
