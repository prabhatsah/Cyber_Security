import React from 'react';
import { View, Text, StyleSheet } from '@react-pdf/renderer';
import WaterMarkedPage from './WaterMarkedPage';

const styles = StyleSheet.create({
    pageContent: {
        flexDirection: 'row',
        fontSize: 11,
        fontFamily: 'Helvetica',
        color: '#111827',
        height: '100%',
    },
    leftPanel: {
        width: '30%',
        backgroundColor: '#4f46e5',
        justifyContent: 'space-between',
        zIndex: -1111111,
    },
    leftTextContainer: {
        marginTop: 40,
        padding: 10,
    },
    numberBig: {
        position: 'absolute',
        top: 250,
        bottom: 0,
        left: -200,
        fontSize: 540,
        color: '#fff',
        opacity: 0.2,
    },
    leftTitle: {
        fontSize: 18,
        color: '#fff',
        marginBottom: 15,
        lineHeight: 1.5,
    },
    rightPanel: {
        flexDirection: 'column',
        justifyContent: 'space-between',
        paddingTop: 10,
        paddingLeft: 20,
        width: '70%',
        position: 'relative',
    },
    paragraphTitle: {
        fontSize: 10,
        fontWeight: 'bold',
        color: '#7e7e7f',
        textAlign: 'justify',
        lineHeight: 1.5,
    },
    paragraph: {
        fontSize: 10,
        color: '#7e7e7f',
        marginBottom: 15,
        textAlign: 'justify',
    },
    pageNumber: {
        justifySelf: 'flex-end',
        alignSelf: 'flex-end',
        fontSize: 10,
        color: '#aaa',
    },
});

interface PenTestRecommendationPageProps {
    companyLogoSrc: string;
}


const PenTestRecommendationPage: React.FC<PenTestRecommendationPageProps> = ({ companyLogoSrc }) => (
    <WaterMarkedPage companyLogoSrc={companyLogoSrc} >
        <View style={styles.pageContent}>
            {/* Left Panel */}
            <View style={styles.leftPanel}>
                <View style={styles.leftTextContainer}>
                    <Text style={styles.leftTitle}>Summary of Findings & Recommendations</Text>
                </View>
                <Text style={styles.numberBig}>R</Text>
            </View>

            {/* Right Panel */}
            <View style={styles.rightPanel}>
                <View>
                    <Text style={styles.paragraph}>
                        During the execution of this mandate, the team identified several vulnerabilities. This section presents a summary of the findings and recommendations
                        to improve the security posture of the organizationâ€™s tested environments.
                    </Text>

                    <Text style={styles.paragraphTitle}>Missing HTTP Strict Transport Security</Text>
                    <Text style={styles.paragraph}>
                        HTTP Strict Transport Security (HSTS) is a security feature implemented in browsers to locally store the digital certificate of visited HTTPS websites
                        and map them to their respective domain name. Each subsequent visit to a protected website is redirected automatically to HTTPS and triggers a validation
                        of the certificate presented by the Web server against the one that was previously stored. If the certificates do not match, the browser will restrict
                        access to the website, as it is detecting ongoing malicious activity. Browsers will only use this feature if a website sends the HSTS HTTP header.
                    </Text>


                    <Text style={styles.paragraphTitle}>Inadequate Dependency Management Process</Text>
                    <Text style={styles.paragraph}>
                        It is not uncommon during software or web application design to include external libraries in order to avoid rewriting certain features. However, as
                        soon as a new external dependency is added to a project, it becomes essential to have a robust dependency vulnerability management process in place
                        to properly mitigate the risk associated with the discovery of vulnerabilities in the third-party code.
                    </Text>


                    <Text style={styles.paragraphTitle}>Information Disclosure</Text>
                    <Text style={styles.paragraph}>
                        Information disclosure can generally be obtained through error messages, HTTP headers, server responses and other design errors that leak information
                        about the internal IP addresses, technology and versions, or file system paths and files existence. It usually requires erroneous inputs to the
                        application and looks back at response content and headers.
                    </Text>

                    <Text style={styles.paragraphTitle}>User Enumeration</Text>
                    <Text style={styles.paragraph}>
                        User enumeration is usually performed through login portals or any other means by which the existence of a user account can be confirmed. User
                        enumeration increases the chances of compromise since more precise attacks can be conducted after gaining insight into verification methods on the
                        application. Usernames were recovered from a test application, but the application could leak production information depending on how the test
                        environment is configured. It is recommended that applications always behave the same way either when the username or password is wrong by displaying
                        a generic error message.
                    </Text>
                </View>

                <Text style={styles.pageNumber}>5</Text>
            </View>
        </View>
    </WaterMarkedPage>
);

export default PenTestRecommendationPage;
