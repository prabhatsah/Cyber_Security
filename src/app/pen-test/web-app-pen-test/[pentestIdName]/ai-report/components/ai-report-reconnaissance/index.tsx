"use client";

import { useEffect, useState } from "react";
import GlobalLoader from "@/components/GlobalLoader";
import { usePentestContext } from "../../../components/PentestContext";

// AI Report components
import SubdomainReport from "./SubdomainReport";
import NetMapReport from "./NetMapReport";
import MailReport from "./MailReport";
import ReconnaissanceTopWidget from "../ReconnaissanceTopWidget";
import { Cpu, EthernetPort, Network } from "lucide-react";
import WhatwebReport from "./whatwebReport/components/WhatwebReport";

export default function FetchAIReportData({
    pentestIdName, reconData
}: {
    pentestIdName: string;
}) {
    const [pentestId] = pentestIdName.split("_");
    const { pentestData, loading, error, setPentestId } = usePentestContext();
    console.log(reconData);

    const [reconLoading, setReconLoading] = useState(false);
    const [reconError, setReconError] = useState<string | null>(null);
    // const [reconData, setReconData] = useState();
    const [reconData_Domain, setReconData_Domain] = useState({});
    const [reconData_Netmap, setReconData_Netmap] = useState({});
    const [cardData, setcardData] = useState({});
    const [cardDescription, setcardDescription] = useState();
    const [domainDescription, setdomainDescription] = useState();
    const [networkDescription, setnetworkDescription] = useState();
    const [mailMXRecord, setmailMXRecord] = useState();
    const [nsRecord, setnsRecord] = useState();
    const [cNameRecord, setcNameRecord] = useState();
    const [mailMXRecordDescription, setMXDescription] = useState();
    const [nsRecordDescription, setNSDescription] = useState();
    const [cNameRecordDescription, setCNameDescription] = useState();


    useEffect(() => {
        if (pentestId) setPentestId(pentestId);
    }, [pentestId, setPentestId]);

    useEffect(() => {
        const fetchData = () => {
            setReconLoading(true);
            setReconError(null);

            try {
                const results = reconData;
                const report = results;
                // setReconData(report);

                const {
                    executive_summary: { unique_fqdns_count = 0, unique_ips_count = 0, unique_asns_count = 0 } = {},
                    executive_summary_info = "",
                    domains_info = "",
                    domains = [],
                    infrastructure = [],
                    infrastructure_info = "",
                    mx_records = [],
                    mx_records_info = "",
                    name_servers = [],
                    name_servers_info = "",
                    cname_chains = [],
                    cname_chains_info = "",

                } = report;

                setcardDescription(executive_summary_info);
                setdomainDescription(domains_info);
                setnetworkDescription(infrastructure_info);
                setmailMXRecord(mx_records)
                setnsRecord(name_servers)
                setcNameRecord(cname_chains)
                setMXDescription(mx_records_info)
                setNSDescription(name_servers_info)
                setCNameDescription(cname_chains_info)

                setcardData([
                    { title: "Total FQDN Identified", value: unique_fqdns_count, Icon: Network },
                    { title: "Unique IP Addresses", value: unique_ips_count, Icon: EthernetPort },
                    { title: "Key ASNs Involved", value: unique_asns_count, Icon: Cpu },
                ]);

                setReconData_Domain(domains);
                setReconData_Netmap(infrastructure);
            }
            catch (err: any) {
                setReconError(err.message || "Unknown error");
            }
            finally {
                setReconLoading(false);
            }
        };

        if (reconData) {
            fetchData();
        }
    }, [reconData]);

    if (loading) return <GlobalLoader />;
    if (error)
        return <div className="p-6 text-red-600">Error: {error}</div>;
    if (!pentestData)
        return (
            <div> No data found...</div>
        );

    return (
        <>
            {/* <div className="text-lg font-semibold px-6" onClick={handleReconClick}>Hello</div> */}
            {reconLoading && (
                <div className="p-6 text-center">Loading AI analysis...</div>
            )}

            {/* 1) If we’re still fetching, always show the spinner */}
            {reconLoading ? (
                <GlobalLoader />
            ) : (
                <>
                    {/* 2) Once loading is false, check for an error */}
                    {reconError && (
                        <div className="p-6 text-red-600">Error: {reconError}</div>
                    )}

                    {/* 3) If no error and reconData is defined */}
                    {!reconError && reconData ? (
                        <>
                            {Object.keys(reconData).length > 0 ? (
                                <>
                                    {/* a) We have real data, so render the widget + reports */}
                                    <ReconnaissanceTopWidget
                                        reconnaissanceTopWidgetData={cardData}
                                        cardDescription={cardDescription}
                                    />

                                    {reconData_Domain.length > 0 && (
                                        <div className="space-y-6">
                                            <SubdomainReport
                                                domains={reconData_Domain.map(
                                                    ([fqdn, ipAddress, category, notesOrAsnHint]) => ({
                                                        fqdn,
                                                        ipAddress,
                                                        category,
                                                        notes: notesOrAsnHint,
                                                    })
                                                )}
                                                domainDescription={domainDescription}
                                            />

                                            <NetMapReport
                                                networks={reconData_Netmap.map(
                                                    ([netblock, asn, asn_name, hosting]) => ({
                                                        netblock,
                                                        asn,
                                                        asn_name,
                                                        hosting,
                                                    })
                                                )}
                                                networkDescription={networkDescription}
                                            />

                                            <MailReport
                                                mailMXRecord={mailMXRecord}
                                                nsRecord={nsRecord}
                                                cNameRecord={cNameRecord}
                                                mailMXRecordDescription={mailMXRecordDescription}
                                                nsRecordDescription={nsRecordDescription}
                                                cNameRecordDescription={cNameRecordDescription}
                                            />

                                            <WhatwebReport />
                                        </div>
                                    )}
                                </>
                            ) : (
                                /* b) reconData is defined but empty */
                                <p className="text-table-tableDesc italic text-sm">
                                    No records found
                                </p>
                            )}
                        </>
                    ) : (
                        /* 4) reconData is still undefined (fetch hasn’t started yet) */
                        <GlobalLoader />
                    )}
                </>
            )}





        </>
    );
}
