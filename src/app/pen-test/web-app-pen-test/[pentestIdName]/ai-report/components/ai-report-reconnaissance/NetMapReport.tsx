import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeaderCell,
    TableRoot,
    TableRow,
} from "@/components/Table";
import { DonutChart } from "@tremor/react";
import { Icon, Network, TvIcon } from "lucide-react";
import React from "react";

interface NetMap {
    netblock: string;
    asn: string;
    asn_name: string;
    hosting?: string;
}

type SubdomainReportProps = {
    networks: NetMap[];
    networkDescription: String,
};
const color = [
    "bg-red-900",
    "bg-red-500",
    "bg-yellow-500",
    "bg-green-800",
    "bg-blue-600",
];
export default function NetMapReport({ networks, networkDescription }: SubdomainReportProps) {
    const freq: Record<string, number> = {};
    console.log("From Network")
    networks.forEach(net => {
        const cat = net.asn || '-';
        freq[cat] = (freq[cat] || 0) + 1;
    });

    interface NameValue { name: string; value: number; }
    const chartData: NameValue[] = Object.entries(freq).map(
        ([name, value], idx) => {
            const hue = (idx * 47) % 360;
            const color = `hsl(${hue}, 70%, 50%)`;

            return {
                name: "ASN" + name,
                value,
                color,
            };
        }
    );




    return (
        <div className="flex-1 overflow-y-auto">
            <hr></hr>

            <h1 className="m-2 flex gap-2 items-center" style={{ fontFamily: 'Inter' }}><Network className="w-6 h-6" />IP address & Network Infrastructure Analysis</h1>

            <p className="m-2">{networkDescription}</p>
            <div className="flex">

                <div className="lg:w-[80%] w-full max-h-64 overflow-y-auto">
                    {networks.length > 0 ? (
                        <TableRoot>
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableHeaderCell>Netblock</TableHeaderCell>
                                        <TableHeaderCell>ASN</TableHeaderCell>
                                        <TableHeaderCell>ASN Name Hint (Organization)</TableHeaderCell>
                                        <TableHeaderCell>FQDNs hosted within this Netblock</TableHeaderCell>
                                    </TableRow>
                                </TableHead>

                                <TableBody>
                                    {networks.map(({ netblock, asn, asn_name, hosting }, idx) => (
                                        <TableRow key={netblock ?? idx}>
                                            <TableCell>{netblock}</TableCell>
                                            <TableCell>{asn || "-"}</TableCell>
                                            <TableCell>{asn_name || "-"}</TableCell>
                                            <TableCell>{hosting || "-"}</TableCell>
                                        </TableRow>
                                    ))}

                                </TableBody>
                            </Table>
                        </TableRoot>
                    ) : (
                        <p className="text-table-tableDesc italic text-sm">No records found</p>
                    )}

                </div>
                <div className="lg:w-[20%] w-full relative ">
                    {chartData.length > 0 ? (
                        <DonutChart data={chartData} category="value" index="name" className="h-64"
                        />
                    ) : (
                        <p className="text-table-tableDesc italic text-sm">No records found</p>
                    )}

                </div>
            </div>

        </div>
    );
}
