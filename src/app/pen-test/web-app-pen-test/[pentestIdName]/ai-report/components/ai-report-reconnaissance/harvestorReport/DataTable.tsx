import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Search } from 'lucide-react';

interface Column {
  key: string;
  label: string;
  sortable?: boolean;
}

interface DataTableProps {
  data: any[];
  columns: Column[];
  title: string;
}

export const DataTable: React.FC<DataTableProps> = ({ data, columns, title }) => {
  const [sortColumn, setSortColumn] = useState<string>('');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [searchTerm, setSearchTerm] = useState('');

  const handleSort = (columnKey: string) => {
    if (sortColumn === columnKey) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(columnKey);
      setSortDirection('asc');
    }
  };

  const filteredAndSortedData = React.useMemo(() => {
    let filtered = data.filter(item =>
      Object.values(item).some(value =>
        String(value).toLowerCase().includes(searchTerm.toLowerCase())
      )
    );

    if (sortColumn) {
      filtered.sort((a, b) => {
        const aVal = a[sortColumn];
        const bVal = b[sortColumn];
        const modifier = sortDirection === 'asc' ? 1 : -1;
        return aVal < bVal ? -1 * modifier : aVal > bVal ? 1 * modifier : 0;
      });
    }

    return filtered;
  }, [data, searchTerm, sortColumn, sortDirection]);

  const getRiskBadge = (level: string) => {
    const colors = {
      low: 'bg-green-400/20 text-green-400',
      medium: 'bg-yellow-400/20 text-yellow-400',
      high: 'bg-orange-400/20 text-orange-400',
      critical: 'bg-red-400/20 text-red-400'
    };
    return colors[level as keyof typeof colors] || 'bg-gray-400/20 text-gray-400';
  };

  return (
    <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6 h-96 flex flex-col">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-lg font-semibold text-white">{title}</h3>
        <div className="relative">
          <Search className="h-4 w-4 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
          <input
            type="text"
            placeholder="Search..."
            className="bg-gray-700 border border-gray-600 rounded-lg pl-10 pr-4 py-2 text-white text-sm focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <div className="overflow-auto flex-1">
        <table className="w-full">
          <thead className="sticky top-0 bg-gray-800/90 backdrop-blur-sm">
            <tr className="border-b border-gray-700">
              {columns.map(column => (
                <th
                  key={column.key}
                  className={`text-left py-3 px-4 text-gray-400 font-medium text-sm ${
                    column.sortable ? 'cursor-pointer hover:text-white' : ''
                  }`}
                  onClick={() => column.sortable && handleSort(column.key)}
                >
                  <div className="flex items-center gap-1">
                    {column.label}
                    {column.sortable && (
                      <div className="flex flex-col">
                        <ChevronUp className={`h-3 w-3 ${sortColumn === column.key && sortDirection === 'asc' ? 'text-cyan-400' : 'text-gray-600'}`} />
                        <ChevronDown className={`h-3 w-3 -mt-1 ${sortColumn === column.key && sortDirection === 'desc' ? 'text-cyan-400' : 'text-gray-600'}`} />
                      </div>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {filteredAndSortedData.map((item, index) => (
              <tr key={index} className="border-b border-gray-700/50 hover:bg-gray-700/30 transition-colors">
                {columns.map(column => (
                  <td key={column.key} className="py-3 px-4 text-gray-300 text-sm">
                    {column.key === 'riskLevel' ? (
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskBadge(item[column.key])}`}>
                        {item[column.key]}
                      </span>
                    ) : column.key === 'type' ? (
                      <span className="capitalize">{item[column.key]}</span>
                    ) : (
                      <span className="break-all">{String(item[column.key])}</span>
                    )}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <div className="mt-4 text-sm text-gray-400 border-t border-gray-700 pt-4">
        Showing {filteredAndSortedData.length} of {data.length} entries
      </div>
    </div>
  );
};