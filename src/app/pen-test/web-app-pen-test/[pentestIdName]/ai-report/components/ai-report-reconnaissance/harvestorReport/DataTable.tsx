import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Search } from 'lucide-react';
import { Card } from '@tremor/react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeaderCell,
  TableRoot,
  TableRow,
} from "@/components/Table";

interface Column {
  key: string;
  label: string;
  sortable?: boolean;
}

interface DataTableProps {
  data: any[];
  columns: Column[];
  title: string;
}

export const DataTable: React.FC<DataTableProps> = ({ data, columns, title }) => {
  const [sortColumn, setSortColumn] = useState<string>('');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [searchTerm, setSearchTerm] = useState('');

  const handleSort = (columnKey: string) => {
    if (sortColumn === columnKey) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(columnKey);
      setSortDirection('asc');
    }
  };

  const filteredAndSortedData = React.useMemo(() => {
    let filtered = data.filter(item =>
      Object.values(item).some(value =>
        String(value).toLowerCase().includes(searchTerm.toLowerCase())
      )
    );

    if (sortColumn) {
      filtered.sort((a, b) => {
        const aVal = a[sortColumn];
        const bVal = b[sortColumn];
        const modifier = sortDirection === 'asc' ? 1 : -1;
        return aVal < bVal ? -1 * modifier : aVal > bVal ? 1 * modifier : 0;
      });
    }

    return filtered;
  }, [data, searchTerm, sortColumn, sortDirection]);

  const getRiskBadge = (level: string) => {
    const colors = {
      low: 'bg-green-400/20 text-green-400',
      medium: 'bg-yellow-400/20 text-yellow-400',
      high: 'bg-orange-400/20 text-orange-400',
      critical: 'bg-red-400/20 text-red-400'
    };
    return colors[level as keyof typeof colors] || 'bg-gray-400/20 ';
  };

  return (
    <Card className=" p-6">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-xl text-blue-300 font-medium">{title}</h3>

      </div>

      <div className="overflow-y-auto h-64 rounded-lg w-full">
        <TableRoot className="">
          <Table className="table-fixed w-full">
            <TableHead className="">
              <TableRow>
                {columns.map(column => (
                  <TableHeaderCell
                    key={column.key}
                    className={` font-medium w-1/${columns.length} ${column.sortable ? 'cursor-pointer ' : ''}`}
                    onClick={() => column.sortable && handleSort(column.key)}
                  >
                    <div className="flex items-center gap-2">
                      <span className="truncate">{column.label}</span>
                      {column.sortable && (
                        <div className="flex flex-col flex-shrink-0">
                          <ChevronUp className={`h-3 w-3 ${sortColumn === column.key && sortDirection === 'asc' ? 'text-blue-400' : 'text-gray-600'}`} />
                          <ChevronDown className={`h-3 w-3 -mt-1 ${sortColumn === column.key && sortDirection === 'desc' ? 'text-blue-400' : 'text-gray-600'}`} />
                        </div>
                      )}
                    </div>
                  </TableHeaderCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredAndSortedData.map((item, index) => (
                <TableRow key={index} className="">
                  {columns.map(column => (
                    <TableCell key={column.key} className=" w-1/${columns.length}">
                      {column.key === 'riskLevel' ? (
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskBadge(item[column.key])} inline-block`}>
                          {item[column.key]}
                        </span>
                      ) : column.key === 'type' ? (
                        <span className="capitalize text-blue-400 truncate block" title={item[column.key]}>
                          {item[column.key]}
                        </span>
                      ) : (
                        <span className=" truncate block" title={String(item[column.key])}>
                          {String(item[column.key])}
                        </span>
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))}
              {filteredAndSortedData.length === 0 && (
                <TableRow>
                  <TableCell colSpan={columns.length} className="text-center py-8 text-gray-400">
                    No data found
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableRoot>
      </div>

      <div className="mt-4 text-sm  border-t border-gray-600 pt-4">
        Showing {filteredAndSortedData.length} of {data.length} entries
      </div>
    </Card>
  );
};