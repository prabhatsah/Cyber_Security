import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';
import { ServerData, defaultServerData } from './serverData';

interface ServerDataContextType {
  serverData: ServerData;
  refreshData: () => void;
}

const ServerDataContext = createContext<ServerDataContextType>({
  serverData: defaultServerData,
  refreshData: () => {},
});

export const useServerData = () => useContext(ServerDataContext);

interface ServerDataProviderProps {
  children: ReactNode;
}

export const ServerDataProvider: React.FC<ServerDataProviderProps> = ({ children }) => {
  const [serverData, setServerData] = useState<ServerData>(defaultServerData);

  const refreshData = useCallback(() => {
    // In a real application, this would fetch data from an API
    // For this demo, we'll just update the lastChecked time
    setServerData(prev => ({
      ...prev,
      lastChecked: new Date().toLocaleTimeString(),
      // Randomly change status sometimes for demo purposes
      status: Math.random() > 0.8 
        ? Math.random() > 0.5 ? 'warning' : 'error'
        : 'success',
    }));
  }, []);

  return (
    <ServerDataContext.Provider value={{ serverData, refreshData }}>
      {children}
    </ServerDataContext.Provider>
  );
};