import { AlertTriangle, Eye, Globe, Mail, Server } from 'lucide-react';

const iconMap: Record<string, JSX.Element> = {
  ASN:         <Server      className="h-5 w-5 text-red-400 mt-0.5 flex-shrink-0" />,
  URLs:        <Globe       className="h-5 w-5 text-orange-400 mt-0.5 flex-shrink-0" />,
  IPs:         <AlertTriangle className="h-5 w-5 text-yellow-400 mt-0.5 flex-shrink-0" />,
  Emails:      <Mail        className="h-5 w-5 text-green-400 mt-0.5 flex-shrink-0" />,
};

const highPriorityFindings = [
  { ASN:    "Multiple ASNs found indicating diverse hosting" },
  { URLs:   "Multiple Keross-related URLs discovered" },
  { IPs:    "21 unique IP addresses found linked to the domain" },
  { Emails: "Potential sensitive email addresses exposed" },
];

export default function KeyFindings({ highPriorityFindings }: { highPriorityFindings: typeof highPriorityFindings }) {
  return (
    <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6 h-80">
      <h3 className="text-lg font-semibold text-white mb-4">Key Findings</h3>
      <div className="space-y-3 overflow-y-auto h-full pb-8">
        {highPriorityFindings.map((finding, idx) => {
          const [title, description] = Object.entries(finding)[0];
          const icon = iconMap[title.toLowerCase().includes("asn") ? "ASN" : (title.toLowerCase().includes("mail") ? "Emails" : (title.toLowerCase().includes("url") ? "URLs" : "IPs"))] || (
            <AlertTriangle className="h-5 w-5 text-gray-400 mt-0.5 flex-shrink-0" />
          );
          return (
            <div key={idx} className="flex items-start gap-3">
              {icon}
              <div>
                <p className="text-white font-medium">{title ? title.replace(/([A-Z])/g, ' $1').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') : "-"}</p>
                <p className="text-gray-400 text-sm">{description ? String(description) : "-"}</p>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}
