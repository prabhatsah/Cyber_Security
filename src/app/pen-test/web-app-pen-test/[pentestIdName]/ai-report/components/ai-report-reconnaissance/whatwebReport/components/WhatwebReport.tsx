import React, { useEffect, useState } from 'react';
import { Globe } from 'lucide-react';
import StatusCard from './cards/StatusCard';
import ServerLocationCard from './cards/ServerLocationCard';
import WebServerCard from './cards/WebServerCard';
import FrontendTechCard from './cards/FrontendTechCard';
import SecurityProtocolCard from './cards/SecurityProtocolCard';
import ContentOptimizationCard from './cards/ContentOptimizationCard';
import ContentFreshnessCard from './cards/ContentFreshnessCard';
import { useServerData } from './ServerDataContext';
import { Card } from '@tremor/react';

interface DashboardProps {
  whatwebResult: any;
}

const Dashboard: React.FC<DashboardProps> = ({ whatwebResult }) => {
  const { refreshData } = useServerData();

  useEffect(() => {
    refreshData();
    const interval = setInterval(refreshData, 60000);
    return () => clearInterval(interval);
  }, [refreshData]);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-3">
        <StatusCard whatwebResult={whatwebResult} />
      </div>
      <ServerLocationCard whatwebResult={whatwebResult} />
      <WebServerCard whatwebResult={whatwebResult} />
      <FrontendTechCard whatwebResult={whatwebResult} />
      <SecurityProtocolCard whatwebResult={whatwebResult} />
      <ContentOptimizationCard whatwebResult={whatwebResult} />
      <ContentFreshnessCard whatwebResult={whatwebResult} />
    </div>
  );
};

interface WhatwebReportProps {
  reconData: object;
}

const WhatwebReport: React.FC<WhatwebReportProps> = ({ reconData }) => {
  const [whatwebResult, setWhatwebResult] = useState<any>(null);
  const [whatwebLoading, setWhatwebLoading] = useState(false);
  const [whatwebError, setWhatwebError] = useState<string | null>(null);

  // Only run when reconData changes
  useEffect(() => {
    if (!reconData) return;

    setWhatwebLoading(true);
    setWhatwebError(null);
    setWhatwebResult(null);

    try {
      // In this example, reconData already holds the parsed result
      setWhatwebResult(reconData);
    } catch (err: any) {
      setWhatwebError(err.message || "Unknown error");
    } finally {
      setWhatwebLoading(false);
    }
  }, [reconData]);

  // Show loading, error, or dashboard
  if (whatwebLoading) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-300">Loading Whatweb dataâ€¦</p>
      </div>
    );
  }

  if (whatwebError) {
    return (
      <div className="text-center py-8">
        <p className="text-red-500">Error: {whatwebError}</p>
      </div>
    );
  }

  // Only render Dashboard when we have a result
  if (!whatwebResult) {
    return null;
  }

  return (
    <Card className="min-h-screen  flex flex-col">
      {/* <header className="px-6 py-4 shadow-sm">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <h1 className="text-xl font-bold">Keross</h1>
            <span className="text-sm ">Server Monitor</span>
          </div>
        </div>
      </header> */}

      <main className="container mx-auto px-4 md:px-6 flex-1">
        <Dashboard whatwebResult={whatwebResult} />
      </main>
    </Card>
  );
};

export default WhatwebReport;
