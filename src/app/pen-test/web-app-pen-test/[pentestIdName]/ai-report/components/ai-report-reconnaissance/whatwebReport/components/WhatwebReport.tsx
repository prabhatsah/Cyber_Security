import React, { ReactNode, useEffect, useState } from 'react';
import { Globe, Sun, Moon } from 'lucide-react';
import StatusCard from './cards/StatusCard';
import ServerLocationCard from './cards/ServerLocationCard';
import WebServerCard from './cards/WebServerCard';
import FrontendTechCard from './cards/FrontendTechCard';
import SecurityProtocolCard from './cards/SecurityProtocolCard';
import ContentOptimizationCard from './cards/ContentOptimizationCard';
import ContentFreshnessCard from './cards/ContentFreshnessCard';
import { useServerData } from './ServerDataContext';
import { Card } from '@tremor/react';

interface LayoutProps {
  children?: ReactNode;
}

// 1) Helper to strip ```json fences (if present) and safely JSON.parse
function parseJson(block: string): any {
  try {
    return JSON.parse(block.replace(/```json\n?|```/g, "").trim());
  } catch {
    return {};
  }
}

// 2) Async function that sends your “Whatweb” payload to the backend
async function fetchWhatwebReport(): Promise<any> {
  const payload = {
    scanData: `
WhatWeb report for https://www.avmstation.com
Status    : 200 OK
Title     : Advertising Agency in New York : Drive Results with AVM Station
IP        : 34.149.87.45
Country   : UNITED STATES, US

Summary   : Content-Language[en-US], Cookies[ssr-caching], Email[0e6a29e4756740a8a63493e912ba2174@sentry.wixpress.com,2062d0a4929b45348643784b5cb39c36@sentry.wixpress.com,271e9fa3230b4eec94b02bf95780f5f2@sentry.wixpress.com,460ff4620fa44cba8df530afde949785@sentry.wixpress.com,605a7baede844d278b89dc95ae0a9123@sentry-next.wixpress.com,79baaa8e09c746d2b7401643b99792e0@sentry.wixpress.com,8c4075d5481d476e945486754f783364@sentry.io,8eb368c655b84e029ed79ad7a5c1718e@sentry.wixpress.com,9a65e97ebe8141fca0c4fd686f70996b@sentry.wixpress.com,baf30a2b91654c5a840931f0137bed30@sentry.wixpress.com,business@avmstation.com,c183baa23371454f99f417f6616b724d@sentry.wixpress.com,dd0a55ccb8124b9c9d938e3acf41f8aa@sentry.wixpress.com,ed436f5053144538958ad06a5005e99a@sentry.wixpress.com], HTML5, HTTPServer[Pepyaka], MetaGenerator[Wix.com Website Builder], Open-Graph-Protocol[website][avmstation], Script[\,application/json,application/ld+json,text/javascript,text\/javascript,wix/htmlEmbeds], Strict-Transport-Security[max-age=86400], UncommonHeaders[link,html-cacheable,x-content-type-options,x-served-by,server-timing,x-wix-request-id,x-seen-by,glb-x-seen-by,alt-svc], Via-Proxy[1.1 google], X-UA-Compatible[IE=edge]

Detected Plugins:
[ Content-Language ]
	Detect the content-language setting from the HTTP header. 

	String       : en-US

[ Cookies ]
	Display the names of cookies in the HTTP headers. The 
	values are not returned to save on space. 

	String       : ssr-caching

[ Email ]
	Extract email addresses. Find valid email address and 
	syntactically invalid email addresses from mailto: link 
	tags. We match syntactically invalid links containing 
	mailto: to catch anti-spam email addresses, eg. bob at 
	gmail.com. This uses the simplified email regular 
	expression from 
	http://www.regular-expressions.info/email.html for valid 
	email address matching. 

	String       : 0e6a29e4756740a8a63493e912ba2174@sentry.wixpress.com,2062d0a4929b45348643784b5cb39c36@sentry.wixpress.com,271e9fa3230b4eec94b02bf95780f5f2@sentry.wixpress.com,460ff4620fa44cba8df530afde949785@sentry.wixpress.com,605a7baede844d278b89dc95ae0a9123@sentry-next.wixpress.com,79baaa8e09c746d2b7401643b99792e0@sentry.wixpress.com,8c4075d5481d476e945486754f783364@sentry.io,8eb368c655b84e029ed79ad7a5c1718e@sentry.wixpress.com,9a65e97ebe8141fca0c4fd686f70996b@sentry.wixpress.com,baf30a2b91654c5a840931f0137bed30@sentry.wixpress.com,business@avmstation.com,c183baa23371454f99f417f6616b724d@sentry.wixpress.com,dd0a55ccb8124b9c9d938e3acf41f8aa@sentry.wixpress.com,ed436f5053144538958ad06a5005e99a@sentry.wixpress.com
	String       : business@avmstation.com

[ HTML5 ]
	HTML version 5, detected by the doctype declaration 


[ HTTPServer ]
	HTTP server header string. This plugin also attempts to 
	identify the operating system from the server header. 

	String       : Pepyaka (from server string)

[ MetaGenerator ]
	This plugin identifies meta generator tags and extracts its 
	value. 

	String       : Wix.com Website Builder

[ Open-Graph-Protocol ]
	The Open Graph protocol enables you to integrate your Web 
	pages into the social graph. It is currently designed for 
	Web pages representing profiles of real-world things . 
	things like movies, sports teams, celebrities, and 
	restaurants. Including Open Graph tags on your Web page, 
	makes your page equivalent to a Facebook Page. 

	Version      : website
	Account      : avmstation

[ Script ]
	This plugin detects instances of script HTML elements and 
	returns the script language/type. 

	String       : \,application/json,application/ld+json,text/javascript,text\/javascript,wix/htmlEmbeds

[ Strict-Transport-Security ]
	Strict-Transport-Security is an HTTP header that restricts 
	a web browser from accessing a website without the security 
	of the HTTPS protocol. 

	String       : max-age=86400

[ UncommonHeaders ]
	Uncommon HTTP server headers. The blacklist includes all 
	the standard headers and many non standard but common ones. 
	Interesting but fairly common headers should have their own 
	plugins, eg. x-powered-by, server and x-aspnet-version. 
	Info about headers can be found at www.http-stats.com 

	String       : link,html-cacheable,x-content-type-options,x-served-by,server-timing,x-wix-request-id,x-seen-by,glb-x-seen-by,alt-svc (from headers)

[ Via-Proxy ]
	This plugin extracts the proxy server details from the Via 
	param of the HTTP header. 

	String       : 1.1 google

[ X-UA-Compatible ]
	This plugin retrieves the X-UA-Compatible value from the 
	HTTP header and meta http-equiv tag. - More Info: 
	http://msdn.microsoft.com/en-us/library/cc817574.aspx 

	String       : IE=edge

HTTP Headers:
	HTTP/1.1 200 OK
	content-type: text/html; charset=UTF-8
	link: <https://static.parastorage.com/>; rel=preconnect; crossorigin;,<https://static.parastorage.com/>; rel=preconnect;,<https://static.wixstatic.com/>; rel=preconnect; crossorigin;,<https://static.wixstatic.com/>; rel=preconnect;,<https://siteassets.parastorage.com>; rel=preconnect; crossorigin;,
	html-cacheable: true
	etag: W/"b864479f31d11a3cd062d9c7a00638b1"
	content-language: en-US
	strict-transport-security: max-age=86400
	cache-control: public,max-age=0,must-revalidate
	server: Pepyaka
	x-content-type-options: nosniff
	content-encoding: gzip
	accept-ranges: bytes
	age: 348850
	date: Tue, 03 Jun 2025 12:20:18 GMT
	x-served-by: cache-lhr-egll1980035-LHR
	x-cache: HIT
	vary: Accept-Encoding
	server-timing: cache;desc=hit, varnish;desc=hit_hit, dc;desc=fastly_g
	set-cookie: ssr-caching=cache#desc=hit#varnish=hit_hit#dc#desc=fastly_g; max-age=20
	x-wix-request-id: 1748953218.654137703056829982
	x-seen-by: yvSunuo/8ld62ehjr5B7kA==,W1c2/pqHBqplxcWufHCkILxkNjrXdwdgtu6E0yACibU=,GilIRCy+Ky2nI9KZaDKzWLxkNjrXdwdgtu6E0yACibU=,m0j2EEknGIVUW/liY8BLLkGPZE3/vKkXW4v1l84+VaFbeSRVAoMFHdNCF4X0YvQG,2d58ifebGbosy5xc+FRalli4I3ErcPCeJ6G2yUN5vPUFV2WtcAMCS+0CWx/nBYFV8cPNxIYviEVRlSkwsIhChQ==,2UNV7KOq4oGjA5+PKsX47LjLBanRQcx/0ZasyeiEqnsyIvXDwAgQnMaS/gEZIOGh
	via: 1.1 google
	glb-x-seen-by: bS8wRlGzu0Hc+WrYuHB8QIg44yfcdCMJRkBoQ1h6Vjc=
	Alt-Svc: h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
	Connection: close
	Transfer-Encoding: chunked
	
https://www.avmstation.com [200 OK] Content-Language[en-US], Cookies[ssr-caching], Country[UNITED STATES][US], Email[0e6a29e4756740a8a63493e912ba2174@sentry.wixpress.com,2062d0a4929b45348643784b5cb39c36@sentry.wixpress.com,271e9fa3230b4eec94b02bf95780f5f2@sentry.wixpress.com,460ff4620fa44cba8df530afde949785@sentry.wixpress.com,605a7baede844d278b89dc95ae0a9123@sentry-next.wixpress.com,79baaa8e09c746d2b7401643b99792e0@sentry.wixpress.com,8c4075d5481d476e945486754f783364@sentry.io,8eb368c655b84e029ed79ad7a5c1718e@sentry.wixpress.com,9a65e97ebe8141fca0c4fd686f70996b@sentry.wixpress.com,baf30a2b91654c5a840931f0137bed30@sentry.wixpress.com,business@avmstation.com,c183baa23371454f99f417f6616b724d@sentry.wixpress.com,dd0a55ccb8124b9c9d938e3acf41f8aa@sentry.wixpress.com,ed436f5053144538958ad06a5005e99a@sentry.wixpress.com], HTML5, HTTPServer[Pepyaka], IP[34.149.87.45], MetaGenerator[Wix.com Website Builder], Open-Graph-Protocol[website][avmstation], Script[\,application/json,application/ld+json,text/javascript,text\/javascript,wix/htmlEmbeds], Strict-Transport-Security[max-age=86400], Title[Advertising Agency in New York : Drive Results with AVM Station], UncommonHeaders[link,html-cacheable,x-content-type-options,x-served-by,server-timing,x-wix-request-id,x-seen-by,glb-x-seen-by,alt-svc], Via-Proxy[1.1 google], X-UA-Compatible[IE=edge]
`,
    scanType: "Report",
    userId: "default",
  };

  const res = await fetch("http://127.0.0.1:5001/AiReport", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    console.error("Error from backend:", res.statusText);
    throw new Error(`HTTP ${res.status}`);
  }

  const data = await res.json();
  // Assume `data.summary` contains fenced JSON that needs parsing
  const parsedData = parseJson(data.summary);
  console.log("whatweb report data:", parsedData);
  return parsedData;
}

// Update Dashboard to accept whatwebResult as a prop
interface DashboardProps {
  whatwebResult: any;
}

const Dashboard: React.FC<DashboardProps> = ({ whatwebResult }) => {
  const { refreshData } = useServerData();

  useEffect(() => {
    refreshData();
    const interval = setInterval(refreshData, 60000);
    return () => clearInterval(interval);
  }, [refreshData]);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-3">
        <StatusCard whatwebResult={whatwebResult} />
      </div>
      {/* Now Dashboard can reference whatwebResult */}
      <ServerLocationCard whatwebResult={whatwebResult} />
      <WebServerCard whatwebResult={whatwebResult} />
      <FrontendTechCard whatwebResult={whatwebResult} />
      <SecurityProtocolCard whatwebResult={whatwebResult} />
      <ContentOptimizationCard whatwebResult={whatwebResult} />
      <ContentFreshnessCard whatwebResult={whatwebResult} />
    </div>
  );
};

const WhatwebReport: React.FC<LayoutProps> = ({ children }) => {
  // Local state to hold Whatweb results
  const [whatwebResult, setWhatwebResult] = useState<any>(null);
  const [whatwebLoading, setWhatwebLoading] = useState(false);
  const [whatwebError, setWhatwebError] = useState<string | null>(null);

  // Handler for the button click
  const handleRunWhatweb = async () => {
    setWhatwebLoading(true);
    setWhatwebError(null);
    setWhatwebResult(null);

    try {
      const result = await fetchWhatwebReport();
      setWhatwebResult(result);
    } catch (err: any) {
      setWhatwebError(err.message || "Unknown error");
    } finally {
      setWhatwebLoading(false);
    }
  };

  return (
    <Card className="min-h-screen  flex flex-col">
      <header className="px-6 py-4 shadow-sm">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <h1 className="text-xl font-bold">Keross</h1>
            <span className="text-sm ">Server Monitor</span>
          </div>
          {/* Whatweb run button in the header */}
          <button
            onClick={handleRunWhatweb}
            className="px-3 py-1 bg-green-500 hover:bg-green-600 rounded text-sm font-medium"
            disabled={whatwebLoading}
          >
            {whatwebLoading ? "Running Whatweb…" : "Run Whatweb Report"}
          </button>
        </div>
      </header>

      <main className="container mx-auto py-6 px-4 md:px-6 flex-1">
        {/* Pass whatwebResult down into Dashboard */}
        <Dashboard whatwebResult={whatwebResult} />
      </main>
    </Card>
  );
};

export default WhatwebReport;
