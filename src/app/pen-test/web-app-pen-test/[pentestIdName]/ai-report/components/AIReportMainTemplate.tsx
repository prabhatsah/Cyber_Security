"use client";

import { useEffect, useState } from "react";
import html2canvas from "html2canvas";
import { usePentestContext } from "../../components/PentestContext";
import { useScanNotification } from "@/contexts/ScanNotificationContext";
import NoScanConfiguredTemplate from "../../components/NoScanConfiguredTemplate";
import AIReportDashboard from "./AIReportDashboard";
import { PDFReport } from "../components/PDFReport";
import { pdf } from "@react-pdf/renderer";
import { toast } from "@/lib/toast";
import GlobalLoader from "@/components/GlobalLoader";

import FetchAIReportData from "./ai-report-reconnaissance";

import { Cpu, EthernetPort, Network } from "lucide-react";
const reportData = [
  { metric: "Visitors", value: "1200" },
  { metric: "Bounce Rate", value: "43%" },
  { metric: "Conversion", value: "5.1%" },
];

import ReconnaissanceTopWidget from "./ReconnaissanceTopWidget";
export default function AIReportMainTemplate({
  pentestIdName,
}: {
  pentestIdName: string;
}) {
  const [pentestId] = pentestIdName.split("_");
  const [pdfGenerated, setPdfGenerated] = useState<string | null>(null);

  const { pentestData, loading, error, setPentestId } = usePentestContext();

  const [reconLoading, setReconLoading] = useState(false);
  const [reconError, setReconError] = useState<string | null>(null);
  const [reconData, setReconData] = useState();

  useEffect(() => {
    if (typeof pentestId === "string") {
      setPentestId(pentestId);
    }
  }, [pentestId]);

  interface ScanResult {
    source: string;
    data: any;
  }
  function parseJson(block: string) {
    try {
      return JSON.parse(block.replace(/```json\n?|```/g, "").trim());
    } catch {
      return {};
    }
  }
  const fetchAIReportData = async (
    pentestData: Record<string, any>
  ): Promise<ScanResult[]> => {
    const scanData = pentestData?.scanData ?? {};

    const sources: { key: keyof typeof scanData; source: string }[] = [
      { key: "amass", source: "amass" },
    ];

    console.log("AI Report generation started...");

    const fetchPromises = sources.map(async ({ key, source }) => {
      const payload = {
        scanData: scanData[key] || {},
        source,
        userId: "default",
      };

      const res = await fetch(
        "https://ikoncloud-uat.keross.com/cstools/AiReport",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        }
      );

      if (!res.ok) {
        console.error(`Error from ${source}:`, res.statusText);
        throw new Error(`HTTP ${res.status} on ${source}`);
      }

      const data = await res.json();
      console.log("Data came from Report scan: ", data);
      const parsedData = parseJson(data.summary);
      return parsedData;
    });

    const results = await Promise.all(fetchPromises);
    return results;
  };

  useEffect(() => {
    const fetchData = async () => {
      setReconLoading(true);
      setReconError(null);

      try {
        const results = await fetchAIReportData(pentestData);
        const report = results[0];
        setReconData(report);
      }
      catch (err: any) {
        setReconError(err.message || "Unknown error");
      }
      finally {
        setReconLoading(false);
      }
    };

    if (pentestData) {
      fetchData();
    }
  }, [pentestData]);

  if (loading) return <GlobalLoader />;
  if (error) return <div>{error}</div>;
  if (!pentestData) return <div>No data found.</div>;

  const zapData = pentestData.scanData.zap;

  const handleGenerateAndDownloadPDF = async () => {
    setPdfGenerated('in progress');

    const chartNode = document.getElementById("chart-to-export");

    if (!chartNode) {
      console.log("Chart element not found in DOM.");
      toast.push("Chart element not found in DOM!", "error");
      return;
    }

    const chartDivDarkModeClasses: Array<string> = [];
    chartNode.classList.forEach(eachClass => {
      eachClass.includes('dark:') ? chartDivDarkModeClasses.push(eachClass) : undefined;
    });

    chartDivDarkModeClasses.forEach(eachDarkModeClass => {
      chartNode.classList.remove(eachDarkModeClass);
    });

    try {
      const canvas = await html2canvas(chartNode, {
        scale: 2,
        backgroundColor: "#ffffff",
        useCORS: true,
      });

      const chartDataUrl = canvas.toDataURL("image/png");

      const doc = (
        <PDFReport
          data={reportData}
          chartImage={chartDataUrl}
          logoImage="/keross-logo-large.jpg"
        />
      );

      const blob = await pdf(doc).toBlob();

      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "React PDF using HTML2Canvas.pdf";
      link.click();

      chartDivDarkModeClasses.forEach(eachDarkModeClass => {
        chartNode.classList.add(eachDarkModeClass);
      });

      setPdfGenerated('completed');
    } catch (err) {
      console.error("Error generating PDF:", err);
      toast.push("Error generating PDF!", "error");
    }
  };

  let subdomains: Array<string> = [];
  const reconnaissanceTopWidgetData = [
    {
      title: "Sub Domains Discovered",
      value: subdomains.length,
      Icon: Network
    },
    {
      title: "Open Ports Discovered",
      value: subdomains.length,
      Icon: EthernetPort
    },
    {
      title: "Technologies Identified",
      value: subdomains.length,
      Icon: Cpu
    }
  ];


  return (
    pdfGenerated === 'in progress' ? (
      <GlobalLoader />
    ) : (
      <>
        <div className="flex justify-end mb-4">
          <button onClick={handleGenerateAndDownloadPDF} className="px-4 py-2 bg-blue-600 text-white rounded">
            Generate & Download PDF
          </button>
        </div>
        <Accordion type="multiple" className="mt-3 ">

          <AccordionItem value="vulnerability-Scan">
            <AccordionTrigger>
              Vulnerability
            </AccordionTrigger>
            <AccordionContent className="px-6">
              {zapData ? (
                <AIReportDashboard zapData={zapData} />
              ) : (
                <div className="h-full w-full overflow-auto mt-4">
                  <NoScanConfiguredTemplate headerText="Vulnerability Scanning Not Configured Yet"
                    descriptionText="Initiate Scanning Vulnerabilities and View the Scan Results"
                  />
                </div>
              )}

            </AccordionContent>
          </AccordionItem>

        </Accordion>
        <Accordion type="multiple" className="mt-3 ">

          <AccordionItem value="reconnaissance">
            <AccordionTrigger>
              Reconnaissance
            </AccordionTrigger>
            <AccordionContent className="px-6">
              <FetchAIReportData pentestIdName={pentestIdName} reconData={reconData}/>

            </AccordionContent>
          </AccordionItem>

        </Accordion>


      </>
    )
  );
}
