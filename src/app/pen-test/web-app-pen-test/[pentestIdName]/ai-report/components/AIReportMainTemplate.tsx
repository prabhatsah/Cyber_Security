"use client";

import { useEffect, useState } from "react";
import html2canvas from "html2canvas";
import { usePentestContext } from "../../components/PentestContext";
import { useScanNotification } from "@/contexts/ScanNotificationContext";
import NoScanConfiguredTemplate from "../../components/NoScanConfiguredTemplate";
import AIReportDashboard from "./AIReportDashboard";
import { PDFReport } from "../components/PDFReport";
import { pdf } from "@react-pdf/renderer";
import { toast } from "@/lib/toast";
import GlobalLoader from "@/components/GlobalLoader";

const reportData = [
  { metric: "Visitors", value: "1200" },
  { metric: "Bounce Rate", value: "43%" },
  { metric: "Conversion", value: "5.1%" },
];

export default function AIReportMainTemplate({
  pentestIdName,
}: {
  pentestIdName: string;
}) {
  const [pentestId] = pentestIdName.split("_");
  const [pdfGenerated, setPdfGenerated] = useState<string | null>(null);

  const { pentestData, loading, error, setPentestId } = usePentestContext();

  useEffect(() => {
    if (typeof pentestId === "string") {
      setPentestId(pentestId);
    }
  }, [pentestId]);

  if (loading) return <GlobalLoader />;
  if (error) return <div>{error}</div>;
  if (!pentestData) return <div>No data found.</div>;

  const zapData = pentestData.scanData.zap;

  const handleGenerateAndDownloadPDF = async () => {
    setPdfGenerated('in progress');

    const chartNode = document.getElementById("chart-to-export");

    if (!chartNode) {
      console.log("Chart element not found in DOM.");
      toast.push("Chart element not found in DOM!", "error");
      return;
    }

    const chartDivDarkModeClasses: Array<string> = [];
    chartNode.classList.forEach(eachClass => {
      eachClass.includes('dark:') ? chartDivDarkModeClasses.push(eachClass) : undefined;
    });

    chartDivDarkModeClasses.forEach(eachDarkModeClass => {
      chartNode.classList.remove(eachDarkModeClass);
    });

    try {
      const canvas = await html2canvas(chartNode, {
        scale: 2,
        backgroundColor: "#ffffff",
        useCORS: true,
      });

      const chartDataUrl = canvas.toDataURL("image/png");

      const doc = (
        <PDFReport
          data={reportData}
          chartImage={chartDataUrl}
          logoImage="/keross-logo-large.jpg"
        />
      );

      const blob = await pdf(doc).toBlob();

      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "React PDF using HTML2Canvas.pdf";
      link.click();

      chartDivDarkModeClasses.forEach(eachDarkModeClass => {
        chartNode.classList.add(eachDarkModeClass);
      });

      setPdfGenerated('completed');
    } catch (err) {
      console.error("Error generating PDF:", err);
      toast.push("Error generating PDF!", "error");
    }
  };


  return (
    pdfGenerated === 'in progress' ? (
      <GlobalLoader />
    ) : (
      <>
        <div className="flex justify-end mb-4">
          <button onClick={handleGenerateAndDownloadPDF} className="px-4 py-2 bg-blue-600 text-white rounded">
            Generate & Download PDF
          </button>
        </div>

        {zapData ? (
          <AIReportDashboard zapData={zapData} />
        ) : (
          <div className="h-full w-full overflow-auto mt-4">
            <NoScanConfiguredTemplate headerText="Vulnerability Scanning Not Configured Yet"
              descriptionText="Initiate Scanning Vulnerabilities and View the Scan Results"
            />
          </div>
        )}
      </>
    )
  );
}
