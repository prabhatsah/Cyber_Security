import { Card, DonutChart } from "@tremor/react";

import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/Accordion";

import { RiAlertLine, RiLink } from "@remixicon/react";
import { Badge } from "@/components/Badge";
import { ZapData } from "../../../components/type";

const riskCodeVsDesc: Record<string, string> = {
    "0": "Info",
    "1": "Low",
    "2": "Medium",
    "3": "High",
    "4": "Critical",
};

function removePTags(htmlString: string) {
    return htmlString.replace(/<\/?p>/g, "");
}

function extractTextFromPTags(htmlString: string) {
    const matches = htmlString.match(/<p>(.*?)<\/p>/gs); // Use 's' flag to match multi-line content
    return matches ? matches.map((p) => p.replace(/<\/?p>/g, "")) : [];
}

const getBadgeVariant = (value: string) => {
    return value === "Critical" || value === "High"
        ? "error"
        : value === "Medium"
            ? "warning"
            : value === "Low"
                ? "success"
                : "default";
};

const labelClass = "text-sm text-gray-900 font-semibold w-32 flex-shrink-0 dark:text-gray-50";

export default function ExploitationAccordion({ zapData }: { zapData: ZapData }) {
    console.log("Zap Data: ", zapData);

    return (
        <>
            <Card className="p-4 rounded-md">
                <div className="w-full">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-gray-50">
                        Vulnerabilities
                    </h3>
                    <Accordion type="multiple" className="mt-3 ">
                        {zapData.alerts?.map((dataItem) => (
                            <AccordionItem value={dataItem.alertRef} key={dataItem.alertRef}>
                                <AccordionTrigger>
                                    <span className="flex items-center gap-2 h-8">
                                        <RiAlertLine
                                            className={`size-4 ${riskCodeVsDesc[dataItem.riskcode] === "Critical"
                                                ? "text-red-900 dark:text-red-400"
                                                : riskCodeVsDesc[dataItem.riskcode] === "High"
                                                    ? "text-red-900 dark:text-red-400"
                                                    : riskCodeVsDesc[dataItem.riskcode] === "Medium"
                                                        ? "text-yellow-900 dark:text-yellow-400"
                                                        : riskCodeVsDesc[dataItem.riskcode] === "Low"
                                                            ? "text-emerald-900 dark:text-emerald-400"
                                                            : "text-blue-900 dark:text-blue-400"
                                                }`}
                                        />
                                        {dataItem.alert}
                                    </span>
                                </AccordionTrigger>
                                <AccordionContent className="px-6 max-h-80 overflow-auto">
                                    <div className="mt-2 dark:text-gray-400">
                                        {/* Risk & Confidence */}
                                        {[
                                            {
                                                label: "Risk:",
                                                value: riskCodeVsDesc[dataItem.riskcode],
                                            },
                                            {
                                                label: "Confidence:",
                                                value: riskCodeVsDesc[dataItem.confidence],
                                            },
                                        ].map((item, index) => (
                                            <div key={index} className="flex gap-2 mb-2">
                                                <span className={labelClass}>
                                                    {item.label}
                                                </span>
                                                <Badge variant={getBadgeVariant(item.value)}>
                                                    {item.value}
                                                </Badge>
                                            </div>
                                        ))}

                                        {/* Other Info */}
                                        {[
                                            { label: "Instances:", value: dataItem.count },
                                            { label: "CWE Id:", value: dataItem.cweid },
                                            { label: "WASC Id:", value: dataItem.wascid },
                                            { label: "Plugin Id:", value: dataItem.pluginid },
                                        ].map((item, index) => (
                                            <div key={index} className="flex gap-2 mb-2">
                                                <span className={labelClass}>
                                                    {item.label}
                                                </span>
                                                <span>{item.value}</span>
                                            </div>
                                        ))}

                                        {/* Description & Solution */}
                                        {[
                                            {
                                                label: "Description:",
                                                value: removePTags(dataItem.desc),
                                            },
                                            {
                                                label: "Solution:",
                                                value: removePTags(dataItem.solution),
                                            },
                                        ].map((item, index) => (
                                            <div key={index} className="flex gap-2 mb-2">
                                                <span className={labelClass}>
                                                    {item.label}
                                                </span>
                                                <div className="flex-grow">{item.value}</div>
                                            </div>
                                        ))}

                                        {/* Reference List */}
                                        <div className="flex gap-2 mt-2">
                                            <span className={labelClass}>
                                                Reference:
                                            </span>
                                            <ul className="flex-grow list-disc pl-5">
                                                {extractTextFromPTags(dataItem.reference).map(
                                                    (reference, index) => (
                                                        <li key={index} className="mb-1">
                                                            {reference}
                                                        </li>
                                                    )
                                                )}
                                            </ul>
                                        </div>

                                        {/* Instances (Accordion) */}
                                        {dataItem.instances.map((instance) => (
                                            <AccordionItem value={instance.id} key={instance.id}>
                                                <AccordionTrigger>
                                                    <span className="flex items-center gap-2 h-8">
                                                        <RiLink className="size-4 text-blue-500" />
                                                        {instance.uri}
                                                    </span>
                                                </AccordionTrigger>
                                                <AccordionContent className="px-6">
                                                    {[
                                                        { label: "Method:", value: instance.method },
                                                        { label: "Parameter:", value: instance.param },
                                                        { label: "Attack:", value: instance.attack },
                                                        { label: "Evidence:", value: instance.evidence },
                                                    ].map((item, index) => (
                                                        <div key={index} className="flex mt-1 dark:text-gray-400">
                                                            <span className={labelClass}>
                                                                {item.label}
                                                            </span>
                                                            <span>{item.value}</span>
                                                        </div>
                                                    ))}
                                                </AccordionContent>
                                            </AccordionItem>
                                        ))}
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                        ))}
                    </Accordion>
                </div>
            </Card>
        </>
    )
}