import { Card, DonutChart } from "@tremor/react";

import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/Accordion";

import { RiAlertLine, RiLink } from "@remixicon/react";
import { Badge } from "@/components/Badge";
import { ZapAlert, ZapData } from "../../../components/type";

const riskCodeVsDesc: Record<string, string> = {
    "0": "Info",
    "1": "Low",
    "2": "Medium",
    "3": "High",
    "4": "Critical",
};

function removePTags(htmlString: string) {
    return htmlString.replace(/<\/?p>/g, "");
}

function extractTextFromPTags(htmlString: string) {
    const matches = htmlString.match(/<p>(.*?)<\/p>/gs); // Use 's' flag to match multi-line content
    return matches ? matches.map((p) => p.replace(/<\/?p>/g, "")) : [];
}

const getBadgeVariant = (value: string) => {
    return value === "Critical" || value === "High"
        ? "error"
        : value === "Medium"
            ? "warning"
            : value === "Low"
                ? "success"
                : "default";
};

const labelClass = "text-sm text-gray-900 font-semibold w-32 flex-shrink-0 dark:text-gray-50";

const owaspTopTenVulArray: Array<{
    vulId: string;
    vulName: string;
    context: string;
    analysis: string;
    alertsArray: ZapAlert[],
    severity: string;
}> = [
        {
            vulId: "A01:2021",
            vulName: "Broken Access Control",
            context: "Access control determines what actions or resources a user can interact with. It ensures that users can only access the data and functions they are authorized for. When access control is broken or not enforced properly, it allows attackers to bypass restrictions and perform actions as though they have elevated privileges. This includes situations like users accessing others' private data by modifying a user ID in the URL, or regular users gaining admin privileges through client-side manipulation.",
            analysis: "Broken access control is one of the most frequently exploited vulnerabilities in modern web applications due to weak or misconfigured permissions and role management. The absence of proper server-side enforcement and reliance on client-side logic can lead to attackers viewing or altering data they should not access, potentially resulting in data breaches, unauthorized transactions, and total system compromise. Preventing this requires consistent implementation of the principle of least privilege, secure design of access rules, and thorough testing to detect unauthorized access pathways.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A02:2021",
            vulName: "Cryptographic Failures",
            context: "Refers to improper implementation or absence of encryption, such as using weak algorithms or transmitting sensitive data in plaintext.",
            analysis: "Attackers may intercept or manipulate data like passwords, tokens, or financial info. Secure encryption protocols (e.g., TLS 1.2+) and proper key management are vital.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A03:2021",
            vulName: "Injection",
            context: "Happens when untrusted data is interpreted as part of a command or query, such as in SQL, NoSQL, LDAP, or OS command injections.",
            analysis: "A classic and severe vulnerability that allows attackers to execute arbitrary commands, steal data, or even take over servers. Input validation and parameterized queries help prevent it.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A04:2021",
            vulName: "Insecure Design",
            context: "Involves missing or flawed security controls due to poor architectural decisions during the software design phase.",
            analysis: "Unlike implementation flaws, these risks stem from a lack of threat modeling or secure design patterns. Addressing this requires a 'security by design' mindset from the start.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A05:2021",
            vulName: "Security Misconfiguration",
            context: "Occurs when default settings, exposed services, or unnecessary features leave the system vulnerable.",
            analysis: "Common examples include open cloud buckets or verbose error messages. Regular reviews, hardening, and automated configuration scanning are key defenses.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A06:2021",
            vulName: "Vulnerable and Outdated Components",
            context: "Use of outdated libraries, plugins, or frameworks with known vulnerabilities exposes applications to risk.",
            analysis: "Exploits often target known issues in popular components. Frequent updates, SBOMs (Software Bill of Materials), and automated dependency scanners help mitigate this risk.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A07:2021",
            vulName: "Identification and Authentication Failures",
            context: "Involves weak password policies, exposed session tokens, or poor login mechanisms that enable account compromise.",
            analysis: "Attackers can hijack sessions or brute-force credentials. Enforcing MFA, secure session management, and rate limiting is crucial to reducing exposure.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A08:2021",
            vulName: "Software and Data Integrity Failures",
            context: "Happens when applications rely on code or data from untrusted sources, like unsigned updates or compromised third-party tools.",
            analysis: "This paves the way for supply chain attacks. Implementing integrity checks (e.g., digital signatures) and securing CI/CD pipelines is essential.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A09:2021",
            vulName: "Security Logging and Monitoring Failures",
            context: "Refers to the lack of adequate logging, alerting, or response capabilities for detecting and responding to attacks.",
            analysis: "Breaches may go unnoticed without effective monitoring. Implementing centralized logging and alert systems enhances threat detection and response.",
            alertsArray: [],
            severity: "Low"
        },
        {
            vulId: "A10:2021",
            vulName: "Server-Side Request Forgery",
            context: "Occurs when an application fetches a URL from user input and is tricked into sending requests to internal or sensitive endpoints.",
            analysis: "Can be used to access internal cloud metadata, services, or perform port scans. Validate URLs, restrict network access, and avoid open redirects to prevent SSRF.",
            alertsArray: [],
            severity: "Low"
        }
    ];

export default function ExploitationAccordion({ zapData }: { zapData: ZapData }) {
    console.log("Zap Data: ", zapData);

    owaspTopTenVulArray.map((eachVul, index) => {
        let riskcode = "0";
        eachVul['alertsArray'] = zapData.alerts?.slice(index, index + 2);
        eachVul.alertsArray.map(eachAlert => {
            riskcode = parseInt(eachAlert.riskcode) >= parseInt(riskcode) ? eachAlert.riskcode : riskcode;
        });
        eachVul['severity'] = riskCodeVsDesc[riskcode];
    });

    return (
        <>
            <Card className="p-4 rounded-md">
                <div className="w-full">
                    <h3 className="text-2xl font-semibold text-gray-900 dark:text-gray-50">
                        OWASP Top 10
                    </h3>

                    <Accordion type="multiple" className="mt-3 ">
                        {owaspTopTenVulArray.map((eachVul, eachVulIndex) => {
                            const eachVulAlertLength = eachVul.alertsArray.length;
                            const alertInstancesLength = eachVul.alertsArray.reduce((sum, eachAlert) => sum + eachAlert.instances.length, 0);

                            return (
                                <AccordionItem value={eachVul.vulId} key={eachVul.vulId}>
                                    <AccordionTrigger>
                                        {/* <div className="flex items-center justify-between w-full px-2 h-10">
                                            <div className="flex items-center gap-2 w-1/3 min-w-[250px]">
                                                <span className="text-widget-secondaryDesc text-xs">{eachVul.vulId}</span>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{eachVul.severity}</Badge>
                                                <span className="text-widget-mainHeader truncate">{eachVul.vulName}</span>
                                            </div>


                                            <div className="flex items-center gap-2 justify-end w-1/3 min-w-[220px]">
                                                <div className="w-1/3 text-center text-widget-secondaryDesc">
                                                    02-Jun-2025 09:30
                                                </div>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{`${eachVulAlertLength} Issue${eachVulAlertLength > 1 ? 's' : ''}`}</Badge>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{`${alertInstancesLength} Instance${alertInstancesLength > 1 ? 's' : ''}`}</Badge>
                                            </div>
                                        </div> */}
                                        <div className="flex items-center justify-between w-full px-2 h-10">
                                            <div className="flex items-center gap-3">
                                                <span className="text-widget-secondaryDesc text-xs">{eachVul.vulId}</span>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{eachVul.severity}</Badge>
                                                <span className="text-widget-mainHeader text-base">{eachVul.vulName}</span>
                                            </div>
                                            <div className="flex items-center gap-3">
                                                <span className="text-widget-secondaryDesc">02-Jun-2025 09:30</span>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{`${eachVulAlertLength} Issue${eachVulAlertLength > 1 ? 's' : ''}`}</Badge>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{`${alertInstancesLength} Instance${alertInstancesLength > 1 ? 's' : ''}`}</Badge>
                                            </div>
                                        </div>
                                    </AccordionTrigger>
                                    <AccordionContent className="px-4 max-h-[50vh] overflow-auto flex flex-col gap-4">
                                        <Card className="rounded-md p-0">
                                            <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.1</span>
                                                <span className="text-widget-mainHeader text-lg">Context</span>
                                            </div>
                                            <div className="p-4 w-full">
                                                <span className="text-widget-secondaryDesc">{eachVul.context}</span>
                                            </div>
                                        </Card>

                                        <Card className="rounded-md p-0">
                                            <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.2</span>
                                                <span className="text-widget-mainHeader text-lg">Analysis</span>
                                            </div>
                                            <div className="p-4 w-full">
                                                <span className="text-widget-secondaryDesc">{eachVul.analysis}</span>
                                            </div>
                                        </Card>

                                        {eachVulAlertLength > 0 ?
                                            (
                                                <>
                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.3</span>
                                                            <span className="text-widget-mainHeader text-lg">Recommendations</span>
                                                        </div>
                                                        <div className="p-4 w-full">
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {eachVul.alertsArray.map(
                                                                    (eachAlert, index) => (
                                                                        <li key={index} className="mb-1">
                                                                            {removePTags(eachAlert.solution)}
                                                                        </li>
                                                                    )
                                                                )}
                                                            </ul>
                                                        </div>
                                                    </Card>

                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.4</span>
                                                            <span className="text-widget-mainHeader text-lg">References</span>
                                                        </div>
                                                        <div className="p-4 w-full">
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {eachVul.alertsArray.map((eachAlert, alertIndex) =>
                                                                    extractTextFromPTags(eachAlert.reference).map((eachReference, refIndex) => (
                                                                        <li key={`${alertIndex}-${refIndex}`} className="mb-1">
                                                                            {eachReference}
                                                                        </li>
                                                                    ))
                                                                )}
                                                            </ul>
                                                        </div>
                                                    </Card>

                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.5</span>
                                                            <span className="text-widget-mainHeader text-lg">Affected System(s)</span>
                                                        </div>
                                                        <div className="p-4 flex flex-col gap-2 w-full">
                                                            <span className="text-widget-mainDesc">{`The following URL(s) is found vulnerable under ${eachVul.vulName} and should be addressed:`}</span>
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {eachVul.alertsArray.map((eachAlert, alertIndex) =>
                                                                    eachAlert.instances.map((eachInstance, instanceIndex) => (
                                                                        <li key={`${alertIndex}-${instanceIndex}`} className="mb-1">
                                                                            {eachInstance.uri}
                                                                        </li>
                                                                    ))
                                                                )}
                                                            </ul>
                                                        </div>
                                                    </Card>
                                                </>
                                            ) : ""
                                        }
                                    </AccordionContent>
                                </AccordionItem>
                            )
                        })}
                    </Accordion>
                </div>
            </Card >
        </>
    )
}