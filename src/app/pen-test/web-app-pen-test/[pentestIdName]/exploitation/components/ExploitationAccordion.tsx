import { Card, DonutChart } from "@tremor/react";

import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/Accordion";

import { Select, SelectItem } from "@tremor/react";

import { RiAlertLine, RiLink } from "@remixicon/react";
import { Badge } from "@/components/Badge";
import { Upload } from "lucide-react";
import { ZapAlert, ZapData } from "../../../components/type";
import { useEffect, useState } from "react";

const riskCodeVsDesc: Record<string, string> = {
    "0": "Info",
    "1": "Low",
    "2": "Medium",
    "3": "High",
    "4": "Critical",
};

const severityOrder: Record<string, number> = {
    "Critical": 1,
    "High": 2,
    "Medium": 3,
    "Low": 4,
    "Info": 5
};

function removePTags(htmlString: string) {
    return htmlString.replace(/<\/?p>/g, "");
}

function extractTextFromPTags(htmlString: string) {
    const matches = htmlString.match(/<p>(.*?)<\/p>/gs); // Use 's' flag to match multi-line content
    return matches ? matches.map((p) => p.replace(/<\/?p>/g, "")) : [];
}

const getBadgeVariant = (value: string) => {
    return value === "Critical" || value === "High"
        ? "error"
        : value === "Medium"
            ? "warning"
            : value === "Low"
                ? "success"
                : "default";
};

const labelClass = "text-sm text-gray-900 font-semibold w-32 flex-shrink-0 dark:text-gray-50";

export default function ExploitationAccordion({ zapData }: { zapData: ZapData }) {
    const [uploadedFiles, setUploadedFiles] = useState<Record<string, File[]>>({});
    const [filter, setFilter] = useState("Default");

    const owaspTopTenVulArray: Array<{
        vulId: string;
        vulName: string;
        context: string;
        analysis: string;
        alertsArray: ZapAlert[],
        severity: string;
    }> = [
            {
                vulId: "A01:2021",
                vulName: "Broken Access Control",
                context: "Access control determines what actions or resources a user can interact with. It ensures that users can only access the data and functions they are authorized for. When access control is broken or not enforced properly, it allows attackers to bypass restrictions and perform actions as though they have elevated privileges. This includes situations like users accessing others' private data by modifying a user ID in the URL, or regular users gaining admin privileges through client-side manipulation.",
                analysis: "Broken access control is one of the most frequently exploited vulnerabilities in modern web applications due to weak or misconfigured permissions and role management. The absence of proper server-side enforcement and reliance on client-side logic can lead to attackers viewing or altering data they should not access, potentially resulting in data breaches, unauthorized transactions, and total system compromise. Preventing this requires consistent implementation of the principle of least privilege, secure design of access rules, and thorough testing to detect unauthorized access pathways.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A02:2021",
                vulName: "Cryptographic Failures",
                context: "Cryptographic failures involve the incorrect implementation or absence of encryption, leading to the exposure of sensitive information. This includes using outdated algorithms, weak key management, failing to encrypt sensitive data like passwords, credit card numbers, or personal identifiers, and transmitting this data over unencrypted channels. The failure to properly secure data both at rest and in transit can have serious implications.",
                analysis: "When cryptographic practices are flawed, the confidentiality and integrity of data are at risk, often leading to severe regulatory violations, identity theft, and reputational damage. Attackers can intercept or retrieve unencrypted or poorly encrypted data using tools like packet sniffers or by exploiting weak storage mechanisms. Effective countermeasures include using modern encryption standards (like AES and TLS 1.3), proper key management, and avoiding the storage of sensitive data unless absolutely necessary. Encryption must be implemented as a foundational element of application security rather than an afterthought.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A03:2021",
                vulName: "Injection",
                context: "Injection vulnerabilities occur when an application sends untrusted input to a program or interpreter as part of a command or query. The most well-known type is SQL injection, but injection flaws also include NoSQL, command-line, LDAP, and XML injection. These attacks manipulate input to alter the logic or structure of queries or commands executed on the server, often leading to data access, corruption, or system takeover.",
                analysis: "Injection vulnerabilities are among the oldest and most dangerous flaws in web applications, as they allow attackers to directly interfere with backend logic. An attacker can craft malicious input that gets executed by the system — for example, using ' OR '1'='1 in a login field to bypass authentication or using shell commands to manipulate the server. These attacks can lead to data leaks, deletion, and full system compromise. Proper mitigation includes the use of parameterized queries, input validation, escaping untrusted input, and avoiding dynamic code execution based on user data.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A04:2021",
                vulName: "Insecure Design",
                context: "Insecure design refers to systemic weaknesses that originate from flawed application architecture and design decisions, rather than from bad implementation. This includes not considering security during the planning and development phases, lacking threat models, overexposing application features, or failing to define secure defaults. Unlike implementation bugs, these are flaws in how the application fundamentally operates.",
                analysis: "Insecure design creates inherent risks that cannot be easily patched without architectural changes, making them particularly dangerous. These flaws might manifest as insufficient separation of privileges, unrestricted API functionality, or assumptions about how users will interact with a system. Such vulnerabilities often go unnoticed until a breach occurs. Combatting this requires adopting a secure development lifecycle (SDL), performing threat modeling, and incorporating secure design principles early — such as least privilege, fail-safe defaults, and defense in depth — into application architecture.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A05:2021",
                vulName: "Security Misconfiguration",
                context: "Security misconfiguration refers to incorrect or suboptimal configurations of software, frameworks, web servers, databases, or other components that lead to security gaps. Common misconfigurations include default credentials, overly verbose error messages, unnecessary services enabled, or applications running in debug mode in production. These issues often arise due to oversight, lack of hardening procedures, or mismanagement.",
                analysis: "Misconfigurations are widespread and easily exploited by attackers using automated tools to detect open ports, vulnerable headers, and unprotected admin interfaces. These flaws can grant unauthorized access, expose sensitive information, or allow lateral movement within a system. Since they often result from manual error or incomplete setup processes, maintaining secure configurations requires automated deployment tools, hardened templates, and regular reviews of cloud and infrastructure settings to ensure production environments do not expose unnecessary attack surfaces.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A06:2021",
                vulName: "Vulnerable and Outdated Components",
                context: "Modern applications heavily rely on third-party libraries, frameworks, and open-source software. Vulnerable and outdated components refer to using such dependencies without patching or upgrading them when security flaws are publicly disclosed. This can include both frontend and backend packages, container images, and third-party services that are not actively maintained or monitored.",
                analysis: "This vulnerability has become increasingly critical due to the rise in supply chain attacks and the complexity of dependency chains in software. Attackers can exploit known vulnerabilities in these components to bypass application logic, execute code, or exfiltrate data. Since maintaining secure software requires tracking vulnerabilities across a broad ecosystem, developers must use tools for dependency scanning, establish policies for version updates, and integrate security alerts into CI/CD pipelines to respond quickly to disclosed CVEs and zero-day exploits.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A07:2021",
                vulName: "Identification and Authentication Failures",
                context: "This category covers failures in handling user authentication and session management securely. Examples include weak passwords, credential stuffing vulnerabilities, lack of multi-factor authentication, improper session expiration, or predictable login flows. These flaws allow attackers to impersonate legitimate users and gain unauthorized access to accounts and systems.",
                analysis: "Authentication is the gateway to every secure interaction, and failure in this domain can directly result in account takeovers, data breaches, and service abuse. Attackers often exploit these flaws using brute force, social engineering, or exploiting insecure token handling to hijack sessions or impersonate users. To mitigate this, applications must enforce strong password policies, use MFA, implement secure session handling mechanisms, and continuously monitor login behavior for anomalies. Moreover, authentication workflows must be resilient to common attacks like credential reuse and session fixation.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A08:2021",
                vulName: "Software and Data Integrity Failures",
                context: "This vulnerability involves trusting data or software updates without verifying their integrity. It typically affects CI/CD pipelines, software supply chains, or dynamic updates that download code or configurations at runtime. When attackers manipulate these systems, they can inject malicious payloads into otherwise trusted software or processes.",
                analysis: "As development and deployment processes become more automated, the risk of integrity failures has increased significantly. Attackers may exploit insecure update mechanisms, tamper with scripts, or compromise CI/CD tokens to deliver backdoors into applications. High-profile supply chain attacks have shown how even large organizations can fall victim to such vulnerabilities. Ensuring the integrity of software requires code signing, verification of update sources, secure build pipelines, and zero-trust approaches to external code execution.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A09:2021",
                vulName: "Security Logging and Monitoring Failures",
                context: "Security logging and monitoring are crucial for detecting and responding to suspicious behavior, yet many applications fail to implement them properly. This includes insufficient log data, missing critical events (like failed logins or access violations), unmonitored logs, or lack of integration with alerting and response systems.",
                analysis: "Without adequate logging and monitoring, organizations operate in the dark and often remain unaware of breaches until long after damage has occurred. Effective incident response depends on timely detection and actionable logs that provide forensic insights into attack vectors. Logging failures often compound the impact of other vulnerabilities by allowing attackers to operate stealthily. To mitigate this risk, developers should instrument applications with meaningful audit trails, centralize logging, monitor for key indicators of compromise (IoCs), and regularly test detection capabilities through drills and red team exercises.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "A10:2021",
                vulName: "Server-Side Request Forgery (SSRF)",
                context: "SSRF vulnerabilities arise when an application fetches a remote resource based on user-supplied input, but fails to properly validate the destination. This allows attackers to make the server send unauthorized requests to internal systems, cloud metadata services, or other protected resources.",
                analysis: "SSRF is a particularly dangerous vulnerability because it abuses the trust the application has in its own network environment. By exploiting SSRF, attackers can enumerate internal networks, access private APIs, or extract sensitive data such as credentials from cloud metadata endpoints like AWS's 169.254.169.254. These attacks are often a stepping stone in larger exploits, such as pivoting within internal systems. Preventing SSRF requires strict input validation, implementing network segmentation to limit internal access, using URL allowlists, and disabling unnecessary outbound request capabilities from the application.",
                alertsArray: [],
                severity: "Low"
            },
            {
                vulId: "Uncategorized",
                vulName: "Uncategorized",
                context: "",
                analysis: "",
                alertsArray: [],
                severity: "Low"
            }
        ];

    const owaspMap = new Map<string, typeof owaspTopTenVulArray[number]>();

    for (const item of owaspTopTenVulArray) {
        owaspMap.set(item.vulId, item);
    }

    for (const alert of zapData.alerts) {
        // Extract the ID prefix from owasp_title, e.g., "A01:2021" from "A06:2021 - Broken Access Control"
        const matchId = alert.owasp_title.split(" - ")[0].trim();

        // Check if this ID exists in the owaspMap
        const matchedVul = owaspMap.get(matchId);

        if (matchedVul) {
            matchedVul.alertsArray.push(alert);
        }
    }

    owaspTopTenVulArray.map((eachVul) => {
        let riskcode = "0";
        eachVul.alertsArray.map(eachAlert => {
            riskcode = parseInt(eachAlert.riskcode) >= parseInt(riskcode) ? eachAlert.riskcode : riskcode;
        });
        eachVul['severity'] = riskCodeVsDesc[riskcode];
    });


    const handleFileUpload = (vulId: string, files: FileList | null) => {
        if (files) {
            const fileArray = Array.from(files);
            setUploadedFiles(prev => ({
                ...prev,
                [vulId]: [...(prev[vulId] || []), ...fileArray]
            }));
        }
    };

    const removeFile = (vulId: string, fileIndex: number) => {
        setUploadedFiles(prev => ({
            ...prev,
            [vulId]: prev[vulId]?.filter((_, index) => index !== fileIndex) || []
        }));
    };

    if (filter === "Default") {
        owaspTopTenVulArray.sort((a, b) => a.vulId.localeCompare(b.vulId))
    } else if (filter === "High") {
        owaspTopTenVulArray.sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);
    } else if (filter === "Low") {
        owaspTopTenVulArray.sort((a, b) => severityOrder[b.severity] - severityOrder[a.severity]);
    }

    return (
        <>
            <Card className="p-4 rounded-md">
                <div className="w-full">
                    <div className="flex">
                        <h3 className="text-2xl flex-1 font-semibold text-gray-900 dark:text-gray-50">
                            OWASP Top 10
                        </h3>

                        <Select
                            id="securityLevel"
                            name="securityLevel"
                            value={filter}
                            className="w-52"
                            onValueChange={(val) => {
                                setFilter(val)
                            }}
                        >
                            <SelectItem value="Default">Default</SelectItem>
                            <SelectItem value="High">High</SelectItem>
                            <SelectItem value="Low">Low</SelectItem>
                        </Select>
                    </div>

                    <Accordion type="multiple" className="mt-3 ">
                        {owaspTopTenVulArray.map((eachVul, eachVulIndex) => {
                            const eachVulAlertLength = eachVul.alertsArray.length;
                            const alertInstancesLength = eachVul.alertsArray.reduce((sum, eachAlert) => sum + eachAlert.instances.length, 0);

                            return (
                                <AccordionItem value={eachVul.vulId} key={eachVul.vulId}>
                                    <AccordionTrigger>
                                        <div className="flex items-center justify-between w-full px-2 h-10">
                                            <div className="flex items-center gap-3">
                                                <span className="text-widget-secondaryDesc text-xs">{eachVul.vulId}</span>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{eachVul.severity}</Badge>
                                                <span className="text-widget-mainHeader text-base">{eachVul.vulName}</span>
                                            </div>
                                            <div className="flex items-center gap-3">
                                                <span className="text-widget-secondaryDesc">02-Jun-2025 09:30</span>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{`${eachVulAlertLength} Issue${eachVulAlertLength > 1 ? 's' : ''}`}</Badge>
                                                <Badge variant={getBadgeVariant(eachVul.severity)}>{`${alertInstancesLength} Instance${alertInstancesLength > 1 ? 's' : ''}`}</Badge>
                                            </div>
                                        </div>
                                    </AccordionTrigger>
                                    <AccordionContent className="px-4 max-h-[50vh] overflow-auto flex flex-col gap-4">

                                        <Accordion type="multiple" className="mt-3">
                                            {eachVul.alertsArray.map((eachAlert, eachAlertIndex) => {
                                                const alertInstancesLength = eachAlert.instances.length;

                                                return (
                                                    <AccordionItem value={`${eachVul.vulId}-${eachAlertIndex}`} key={`${eachVul.vulId}-${eachAlertIndex}`}>
                                                        <AccordionTrigger>
                                                            <div className="flex items-center justify-between w-full px-2 h-10">
                                                                <div className="flex items-center gap-3">
                                                                    <Badge variant={getBadgeVariant(riskCodeVsDesc[eachAlert.riskcode])}>
                                                                        {riskCodeVsDesc[eachAlert.riskcode]}
                                                                    </Badge>
                                                                    <span className="text-widget-mainHeader text-base">
                                                                        {eachAlert.alert}
                                                                    </span>
                                                                </div>
                                                                <div className="flex items-center gap-3">
                                                                    <span className="text-widget-secondaryDesc">
                                                                        02-Jun-2025 09:30
                                                                    </span>
                                                                    <Badge variant={getBadgeVariant(eachVul.severity)}>
                                                                        {`${alertInstancesLength} Instance${alertInstancesLength > 1 ? "s" : ""
                                                                            }`}
                                                                    </Badge>
                                                                </div>
                                                            </div>
                                                        </AccordionTrigger>
                                                        <AccordionContent className="px-4 max-h-[50vh] overflow-auto flex flex-col gap-4">
                                                            <Card className="rounded-md p-0" >
                                                                <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                                    <span className="text-widget-mainHeader text-lg">{eachAlertIndex + 1}.1</span>
                                                                    <span className="text-widget-mainHeader text-lg">Context</span>
                                                                </div>
                                                                <div className="p-4 w-full">
                                                                    <span className="text-widget-secondaryDesc">{eachAlert.context}</span>
                                                                </div>
                                                            </Card>

                                                            <Card className="rounded-md p-0">
                                                                <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                                    <span className="text-widget-mainHeader text-lg">{eachAlertIndex + 1}.2</span>
                                                                    <span className="text-widget-mainHeader text-lg">Analysis</span>
                                                                </div>
                                                                <div className="p-4 w-full">
                                                                    <span className="text-widget-secondaryDesc">{eachAlert.analysis}</span>
                                                                </div>
                                                            </Card>


                                                            <Card className="rounded-md p-0">
                                                                <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                                    <span className="text-widget-mainHeader text-lg">{eachAlertIndex + 1}.3</span>
                                                                    <span className="text-widget-mainHeader text-lg">Recommendations</span>
                                                                </div>
                                                                <div className="p-4 w-full">
                                                                    <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                        <li key={`${eachVulIndex}-${eachAlertIndex}`} className="mb-1">
                                                                            {removePTags(eachAlert.solution)}
                                                                        </li>
                                                                    </ul>
                                                                </div>
                                                            </Card>


                                                            <Card className="rounded-md p-0">
                                                                <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                                    <span className="text-widget-mainHeader text-lg">{eachAlertIndex + 1}.4</span>
                                                                    <span className="text-widget-mainHeader text-lg">References</span>
                                                                </div>
                                                                <div className="p-4 w-full">
                                                                    <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                        {extractTextFromPTags(eachAlert.reference).map((eachReference, refIndex) => (
                                                                            <li key={`${eachAlertIndex}-${refIndex}`} className="mb-1">
                                                                                {eachReference}
                                                                            </li>
                                                                        ))}
                                                                    </ul>
                                                                </div>
                                                            </Card>

                                                            <Card className="rounded-md p-0">
                                                                <div className="flex items-center justify-between h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                                    <div className="flex items-center gap-3">
                                                                        <span className="text-widget-mainHeader text-lg">{eachAlertIndex + 1}.5</span>
                                                                        <span className="text-widget-mainHeader text-lg">Proof of Concept</span>
                                                                    </div>
                                                                    <div className="flex items-center gap-2">
                                                                        <input
                                                                            type="file"
                                                                            id={`upload-${eachAlert.cweid}`}
                                                                            multiple
                                                                            accept=".png,.jpg,.jpeg,.pdf,.txt,.doc,.docx"
                                                                            onChange={(e) => handleFileUpload(eachAlert.cweid, e.target.files)}
                                                                            className="hidden"
                                                                        />
                                                                        <label
                                                                            htmlFor={`upload-${eachAlert.cweid}`}
                                                                            className="flex items-center gap-2 px-3 py-1.5 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md cursor-pointer transition-colors duration-200"
                                                                        >
                                                                            <Upload className="w-4 h-4" />
                                                                            Upload Evidence
                                                                        </label>
                                                                    </div>
                                                                </div>
                                                                <div className="p-4 flex flex-col gap-4 w-full">
                                                                    <span className="text-widget-mainDesc">{`The following URL(s) is found vulnerable under ${eachAlert.alert} and should be addressed:`}</span>
                                                                    <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                        {[
                                                                            ...new Set(eachAlert.instances.map((eachInstance) => eachInstance.uri)),
                                                                        ].map((uri, index) => (
                                                                            <li key={index} className="mb-1">
                                                                                {uri}
                                                                            </li>
                                                                        ))}
                                                                    </ul>

                                                                    {/* Uploaded Files Display */}
                                                                    {uploadedFiles[eachVul.vulId] && uploadedFiles[eachVul.vulId].length > 0 && (
                                                                        <div className="mt-4">
                                                                            <h4 className="text-widget-mainDesc font-medium mb-2">Uploaded Evidence:</h4>
                                                                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2">
                                                                                {uploadedFiles[eachVul.vulId].map((file, fileIndex) => (
                                                                                    <div key={fileIndex} className="flex items-center justify-between p-2 bg-gray-100 dark:bg-gray-700 rounded-md">
                                                                                        <div className="flex items-center gap-2 flex-1 min-w-0">
                                                                                            <Upload className="w-4 h-4 text-gray-500 flex-shrink-0" />
                                                                                            <span className="text-sm text-widget-secondaryDesc truncate" title={file.name}>
                                                                                                {file.name}
                                                                                            </span>
                                                                                        </div>
                                                                                        <button
                                                                                            onClick={() => removeFile(eachVul.vulId, fileIndex)}
                                                                                            className="ml-2 text-red-500 hover:text-red-700 text-sm flex-shrink-0"
                                                                                            title="Remove file"
                                                                                        >
                                                                                            ×
                                                                                        </button>
                                                                                    </div>
                                                                                ))}
                                                                            </div>
                                                                        </div>
                                                                    )}
                                                                </div>
                                                            </Card>

                                                            <Card className="rounded-md p-0">
                                                                <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                                    <span className="text-widget-mainHeader text-lg">{eachAlertIndex + 1}.6</span>
                                                                    <span className="text-widget-mainHeader text-lg">Affected System(s)</span>
                                                                </div>
                                                                <div className="p-4 flex flex-col gap-2 w-full">
                                                                    <span className="text-widget-mainDesc">{`The following URL(s) is found vulnerable under ${eachAlert.alert} and should be addressed:`}</span>
                                                                    <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                        {[
                                                                            ...new Set(eachAlert.instances.map((eachInstance) => eachInstance.uri)),
                                                                        ].map((uri, index) => (
                                                                            <li key={index} className="mb-1">
                                                                                {uri}
                                                                            </li>
                                                                        ))}
                                                                    </ul>
                                                                </div>
                                                            </Card>
                                                        </AccordionContent>
                                                    </AccordionItem>
                                                );
                                            })}
                                        </Accordion>





                                        {/* 

                                        <Card className="rounded-md p-0" >
                                            <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.1</span>
                                                <span className="text-widget-mainHeader text-lg">Context</span>
                                            </div>
                                            <div className="p-4 w-full">
                                                <span className="text-widget-secondaryDesc">{eachVul.context}</span>
                                            </div>
                                        </Card>

                                        <Card className="rounded-md p-0">
                                            <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.2</span>
                                                <span className="text-widget-mainHeader text-lg">Analysis</span>
                                            </div>
                                            <div className="p-4 w-full">
                                                <span className="text-widget-secondaryDesc">{eachVul.analysis}</span>
                                            </div>
                                        </Card>

                                        {eachVulAlertLength > 0 ?
                                            (
                                                <>
                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.3</span>
                                                            <span className="text-widget-mainHeader text-lg">Recommendations</span>
                                                        </div>
                                                        <div className="p-4 w-full">
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {[
                                                                    ...new Set(
                                                                        eachVul.alertsArray.map((eachAlert) =>
                                                                            removePTags(eachAlert.solution)
                                                                        )
                                                                    ),
                                                                ].map((solution, index) => (
                                                                    <li key={index} className="mb-1">
                                                                        {solution}
                                                                    </li>
                                                                ))}
                                                            </ul>
                                                        </div>
                                                    </Card>


                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.4</span>
                                                            <span className="text-widget-mainHeader text-lg">References</span>
                                                        </div>
                                                        <div className="p-4 w-full">
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {eachVul.alertsArray.map((eachAlert, alertIndex) =>
                                                                    extractTextFromPTags(eachAlert.reference).map((eachReference, refIndex) => (
                                                                        <li key={`${alertIndex}-${refIndex}`} className="mb-1">
                                                                            {eachReference}
                                                                        </li>
                                                                    ))
                                                                )}
                                                            </ul>
                                                        </div>
                                                    </Card>

                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center justify-between h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <div className="flex items-center gap-3">
                                                                <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.5</span>
                                                                <span className="text-widget-mainHeader text-lg">Proof of Concept</span>
                                                            </div>
                                                            <div className="flex items-center gap-2">
                                                                <input
                                                                    type="file"
                                                                    id={`upload-${eachVul.vulId}`}
                                                                    multiple
                                                                    accept=".png,.jpg,.jpeg,.pdf,.txt,.doc,.docx"
                                                                    onChange={(e) => handleFileUpload(eachVul.vulId, e.target.files)}
                                                                    className="hidden"
                                                                />
                                                                <label
                                                                    htmlFor={`upload-${eachVul.vulId}`}
                                                                    className="flex items-center gap-2 px-3 py-1.5 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md cursor-pointer transition-colors duration-200"
                                                                >
                                                                    <Upload className="w-4 h-4" />
                                                                    Upload Evidence
                                                                </label>
                                                            </div>
                                                        </div>
                                                        <div className="p-4 flex flex-col gap-4 w-full">
                                                            <span className="text-widget-mainDesc">{`The following URL(s) is found vulnerable under ${eachVul.vulName} and should be addressed:`}</span>
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {[
                                                                    ...new Set(
                                                                        eachVul.alertsArray.flatMap((eachAlert) =>
                                                                            eachAlert.instances.map((eachInstance) => eachInstance.uri)
                                                                        )
                                                                    ),
                                                                ].map((uri, index) => (
                                                                    <li key={index} className="mb-1">
                                                                        {uri}
                                                                    </li>
                                                                ))}
                                                            </ul>

                                                            {uploadedFiles[eachVul.vulId] && uploadedFiles[eachVul.vulId].length > 0 && (
                                                                <div className="mt-4">
                                                                    <h4 className="text-widget-mainDesc font-medium mb-2">Uploaded Evidence:</h4>
                                                                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2">
                                                                        {uploadedFiles[eachVul.vulId].map((file, fileIndex) => (
                                                                            <div key={fileIndex} className="flex items-center justify-between p-2 bg-gray-100 dark:bg-gray-700 rounded-md">
                                                                                <div className="flex items-center gap-2 flex-1 min-w-0">
                                                                                    <Upload className="w-4 h-4 text-gray-500 flex-shrink-0" />
                                                                                    <span className="text-sm text-widget-secondaryDesc truncate" title={file.name}>
                                                                                        {file.name}
                                                                                    </span>
                                                                                </div>
                                                                                <button
                                                                                    onClick={() => removeFile(eachVul.vulId, fileIndex)}
                                                                                    className="ml-2 text-red-500 hover:text-red-700 text-sm flex-shrink-0"
                                                                                    title="Remove file"
                                                                                >
                                                                                    ×
                                                                                </button>
                                                                            </div>
                                                                        ))}
                                                                    </div>
                                                                </div>
                                                            )}
                                                        </div>
                                                    </Card>

                                                    <Card className="rounded-md p-0">
                                                        <div className="flex items-center gap-3 h-10 px-4 bg-tremor-background dark:bg-dark-tremor-background-subtle w-full rounded-t-md">
                                                            <span className="text-widget-mainHeader text-lg">{eachVulIndex + 1}.6</span>
                                                            <span className="text-widget-mainHeader text-lg">Affected System(s)</span>
                                                        </div>
                                                        <div className="p-4 flex flex-col gap-2 w-full">
                                                            <span className="text-widget-mainDesc">{`The following URL(s) is found vulnerable under ${eachVul.vulName} and should be addressed:`}</span>
                                                            <ul className="flex-grow list-disc pl-5 text-widget-secondaryDesc">
                                                                {[
                                                                    ...new Set(
                                                                        eachVul.alertsArray.flatMap((eachAlert) =>
                                                                            eachAlert.instances.map((eachInstance) => eachInstance.uri)
                                                                        )
                                                                    ),
                                                                ].map((uri, index) => (
                                                                    <li key={index} className="mb-1">
                                                                        {uri}
                                                                    </li>
                                                                ))}
                                                            </ul>
                                                        </div>
                                                    </Card>

                                                </>
                                            ) : ""
                                        } */}
                                    </AccordionContent>
                                </AccordionItem>
                            )
                        })}
                    </Accordion>
                </div>
            </Card >
        </>
    )
}