"use client";

import { usePentestContext } from "../../../components/PentestContext";
import { Button } from "@/components/Button";
import { ScanLine } from "lucide-react";
import StartScan from "@/utils/generic-start-scan";
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService";
import GlobalLoader from "@/components/GlobalLoader";
import { useEffect, useState } from "react";
import { Card, Title } from "@tremor/react";
import { Badge } from "@/components/Badge";

const structureHarvesterOutput = (rawOutput) => {
  const data = {
    emails: [],
    urls: [],
    ips: [],
    hosts: [],
    asns: [],
    errors: [],
    missingApiKeys: [],
  };

  const lines = rawOutput.split('\n');

  let currentSection = null;

  for (let line of lines) {
    line = line.trim();

    // Capture missing API keys
    if (line.includes('Missing API key')) {
      const match = line.match(/Missing API key for (.+?)\./);
      if (match) data.missingApiKeys.push(match[1]);
    }

    // Capture API/Module errors
    if (line.startsWith('An exception has occurred:') || line.includes('captcha')) {
      data.errors.push(line);
    }

    // Detect sections
    if (line.includes('Emails found')) currentSection = 'emails';
    else if (line.includes('Interesting Urls found')) currentSection = 'urls';
    else if (line.includes('IPs found')) currentSection = 'ips';
    else if (line.includes('Hosts found')) currentSection = 'hosts';
    else if (line.includes('ASNS found')) currentSection = 'asns';
    else if (line.includes('No people found')) currentSection = null;

    // Populate values
    else if (currentSection && line && !line.startsWith('[') && !line.startsWith('-')) {
      data[currentSection].push(line);
    }
  }

  return data;
}

export default function PassiveReconnaissanceContent({ pentestIdName }) {

  const [pentestId, pentestName] = pentestIdName.split("_");
  const { pentestData, loading, error, setPentestId } = usePentestContext();
  const [isScanning, setIsScanning] = useState(false);

  useEffect(() => {
    if (typeof pentestId === 'string') {
      setPentestId(pentestId);
    }
  }, [pentestId]);

  if (error) return <div>{error}</div>;
  if (!pentestData && !loading) return <div></div>;
  if (loading || !pentestData) return <GlobalLoader />;

  console.log(pentestData);
  const theHarvesterData = structureHarvesterOutput(pentestData.scanData.theHarvester)

  async function handleInitiatePassiveRecon() {

    setIsScanning(true);

    console.log("Passive recon initiated...");
    const userId = (await getLoggedInUserProfile()).USER_ID;
    const webApp = pentestData && pentestData.basicDetails ? pentestData.basicDetails.target : "";
    console.log(userId, webApp, pentestId);
    const passiveReconnaissanceResult = await StartScan(userId, "theHarvester", webApp, pentestId, new Date().toISOString());
    setIsScanning(false);
    console.log(passiveReconnaissanceResult);
  }

  return <>
    <div className="flex justify-end">
      {
        isScanning ? <Button isLoading>Initiating</Button> : <Button onClick={handleInitiatePassiveRecon} variant="primary" className="flex items-center gap-2">
          <ScanLine className="h-5 w-5" />
          Refresh Passive Reconnaissance
        </Button>
      }
    </div>
    <div className="overflow-y-auto mt-2 h-[calc(100%-30px)]">
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">Hosts</Title>
        <div className="flex flex-wrap gap-2">
          {
            theHarvesterData.hosts.map((item, index) => <Badge key={index} variant="neutral">{item}</Badge>)
          }
        </div>
      </Card>
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">Ips</Title>
        <div className="flex flex-wrap gap-2">
          {
            theHarvesterData.ips.map((item, index) => <Badge key={index} variant="neutral">{item}</Badge>)
          }
        </div>
      </Card>
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">Emails</Title>
        <div className="flex flex-wrap gap-2">
          {
            theHarvesterData.emails.map((item, index) => <Badge key={index} variant="neutral">{item}</Badge>)
          }
        </div>
      </Card>
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">ASNs</Title>
        <div className="flex flex-wrap gap-2">
          {
            theHarvesterData.asns.map((item, index) => <Badge key={index} variant="neutral">{item}</Badge>)
          }
        </div>
      </Card>
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">URLs</Title>
        <ul className="list-disc list-inside">
          {
            theHarvesterData.urls.map((item: string, index: number) => <li key={index} title={item} className="text-gray-400 text-sm mb-2">{item.length > 150 ? `${item.slice(0, 150)}...` : item}</li>)
          }
        </ul>
      </Card>
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">Errors</Title>
        <ul className="list-disc list-inside">
          {
            theHarvesterData.errors.map((item: string, index: number) => <li key={index} title={item} className="text-red-400 text-sm mb-2">{item.length > 150 ? `${item.slice(0, 150)}...` : item}</li>)
          }
        </ul>
      </Card>
      <Card className="flex flex-col gap-3 p-4 rounded-md mb-4">
        <Title className="font-bold text-widget-title text-widgetHeader">Missing Api Keys</Title>
        <div className="flex flex-wrap gap-2">
          {
            theHarvesterData.missingApiKeys.map((item, index) => <Badge key={index} variant="neutral">{item}</Badge>)
          }
        </div>
      </Card>
    </div>
  </>
}