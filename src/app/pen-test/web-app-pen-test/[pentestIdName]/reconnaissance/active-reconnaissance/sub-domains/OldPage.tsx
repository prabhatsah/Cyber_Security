import { Globe, Mail, Radio, Server } from "lucide-react";
import { aMassData } from "../components/ReconnaissanceDummyData";
import ASNTable from "./components/ASNTable";
import IPTable from "./components/IPTable";
import OverviewComponent from "./components/OverviewComponent";
import SubDomainsTable from "./components/SubDomainsTable";
import SubDomainsOverview from "./components/SubDomainsOverview";
import { Card, Title } from "@tremor/react";
import SubDomainsTableCommonTemplate from "./components/SubDomainsTableCommonTemplate";
import NetworksTable from "./components/NetworkTable";

interface ScanDataToBeDisplayedType {
    name: string;
    cname: string;
    ipv4: {
        address?: string;
        network?: string;
    },
    ipv6: {
        address?: string;
        network?: string;
    }
}

let subdomains: Array<string> = [], nameServers: Array<string> = [], mailServers: Array<string> = [], ipv4: Record<string, string> = {}, ipv6: Record<string, string> = {},
    cnames: Record<string, string> = {}, asnmanagedby: Record<string, string> = {}, networkasn: Record<string, string> = {}, ipMap: Record<string, string> = {};

aMassData.subdomains.forEach((entry) => {
    const fqdnMatch = entry.match(
        /^(.+?) \(FQDN\) --> (.+?) --> (.+?) \(([^)]+)\)$/
    );
    if (fqdnMatch) {
        const source = fqdnMatch[1].trim();
        const relation = fqdnMatch[2].trim();
        const target = fqdnMatch[3].trim();
        // const targetType = fqdnMatch[4].trim(); // Unused here

        switch (relation) {
            case "node":
                subdomains.push(target);
                break;
            case "ns_record":
                nameServers.push(target);
                break;
            case "mx_record":
                mailServers.push(target);
                break;
            case "a_record":
                ipv4[source] = target;
                break;
            case "aaaa_record":
                ipv6[source] = target;
                break;
            case "cname_record":
                cnames[source] = target;
                break;
            default:
                break;
        }
    }

    const asnmatch = entry.match(/^(.+?) \(ASN\) --> (.+?) --> (.+?) \(([^)]+)\)$/);
    if (asnmatch) {
        const relation = asnmatch[2];
        switch (relation) {
            case "announces":
                networkasn[asnmatch[3]] = asnmatch[1];
                break;
            case "managed_by":
                asnmanagedby[asnmatch[1]] = asnmatch[3] + " - " + asnmatch[4];
                break;
            default:
                break;
        }
    }

    const netblockMatch = entry.match(
        /^(.+?) \(([^)]+)\) --> contains --> (.+?) \(([^)]+)\)$/
    );
    if (netblockMatch) {
        const networkId = netblockMatch[1].trim();
        const ipAddress = netblockMatch[3].trim();
        ipMap[ipAddress] = networkId;
    }
});

const data: {
    mailServers: ScanDataToBeDisplayedType[],
    nameServers: ScanDataToBeDisplayedType[],
    subdomains: ScanDataToBeDisplayedType[],
} = {
    mailServers: [],
    nameServers: [],
    subdomains: []
}

mailServers.forEach((item) => {
    data.mailServers.push({
        name: item,
        cname: cnames[item] ? cnames[item] : "N/A",
        ipv4: {
            address: ipv4[item]
                ? ipv4[item]
                : cnames[item]
                    ? ipv4[cnames[item]]
                    : undefined,
            network: ipMap[ipv4[item]],
        },
        ipv6: {
            address: ipv6[item]
                ? ipv6[item]
                : cnames[item]
                    ? ipv6[cnames[item]]
                    : undefined,
            network: ipMap[ipv6[item]],
        },
    });
});

nameServers.forEach((item) => {
    data.nameServers.push({
        name: item,
        cname: cnames[item] ? cnames[item] : "N/A",
        ipv4: {
            address: ipv4[item]
                ? ipv4[item]
                : cnames[item]
                    ? ipv4[cnames[item]]
                    : undefined,
            network: ipMap[ipv4[item]],
        },
        ipv6: {
            address: ipv6[item]
                ? ipv6[item]
                : cnames[item]
                    ? ipv6[cnames[item]]
                    : undefined,
            network: ipMap[ipv6[item]],
        },
    });
});

subdomains.forEach((item) => {
    data.subdomains.push({
        name: item,
        cname: cnames[item] ? cnames[item] : "N/A",
        ipv4: {
            address: ipv4[item]
                ? ipv4[item]
                : cnames[item]
                    ? ipv4[cnames[item]]
                    : undefined,
            network: ipMap[ipv4[item]],
        },
        ipv6: {
            address: ipv6[item]
                ? ipv6[item]
                : cnames[item]
                    ? ipv6[cnames[item]]
                    : undefined,
            network: ipMap[ipv6[item]],
        },
    });
});

let networkdata: {
    networkId: string;
    asn: string;
    managedby: string;
}[] = [];
for (let key in networkasn) {
    networkdata.push({
        networkId: key,
        asn: networkasn[key],
        managedby: asnmanagedby[networkasn[key]],
    });
}


// const data = {
//     "nameServers": [
//         {
//             "name": "ns14.domaincontrol.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "173.201.74.7",
//                 "network": "173.201.64.0/20"
//             },
//             "ipv6": {
//                 "address": "2603:5:22a0::7",
//                 "network": "2603:5:22a0::/44"
//             }
//         },
//         {
//             "name": "ns13.domaincontrol.com",
//             "cname": "n/a",
//             "ipv4": {},
//             "ipv6": {}
//         }
//     ],
//     "mailServers": [
//         {
//             "name": "alt1.aspmx.l.google.com",
//             "cname": "n/a",
//             "ipv4": {},
//             "ipv6": {}
//         },
//         {
//             "name": "alt2.aspmx.l.google.com",
//             "cname": "n/a",
//             "ipv4": {},
//             "ipv6": {}
//         },
//         {
//             "name": "aspmx.l.google.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "172.253.118.26",
//                 "network": "172.253.118.0/24"
//             },
//             "ipv6": {
//                 "address": "2607:f8b0:4023:c06::1a",
//                 "network": "2607:f8b0::/32"
//             }
//         },
//         {
//             "name": "aspmx2.googlemail.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "142.250.152.27",
//                 "network": "142.250.152.0/24"
//             },
//             "ipv6": {
//                 "address": "2607:f8b0:4003:c04::1a",
//                 "network": "2607:f8b0::/32"
//             }
//         },
//         {
//             "name": "aspmx3.googlemail.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "142.250.141.27",
//                 "network": "142.250.141.0/24"
//             },
//             "ipv6": {
//                 "address": "2607:f8b0:4023:c0b::1b",
//                 "network": "2607:f8b0::/32"
//             }
//         }
//     ],
//     "subdomains": [
//         {
//             "name": "www.keross.com",
//             "cname": "keross.com",
//             "ipv4": {
//                 "address": "109.228.52.113",
//                 "network": "109.228.0.0/18"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "mail.keross.com",
//             "cname": "pop.secureserver.net",
//             "ipv4": {},
//             "ipv6": {}
//         },
//         {
//             "name": "ikoncloud.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "77.68.30.190",
//                 "network": "77.68.0.0/17"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "connect.keross.com",
//             "cname": "ikon-lab.keross.com",
//             "ipv4": {},
//             "ipv6": {}
//         },
//         {
//             "name": "ikon-lab.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "49.249.177.27",
//                 "network": "49.249.176.0/21"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikon-dev.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "49.249.177.29",
//                 "network": "49.249.176.0/21"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikonv6.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "88.208.197.209",
//                 "network": "88.208.192.0/18"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikon-vpm.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "49.249.177.30",
//                 "network": "49.249.176.0/21"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikonv2.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "109.228.22.176",
//                 "network": "109.228.0.0/18"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikoncloud-dev.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "77.68.48.96",
//                 "network": "77.68.0.0/17"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikon-uat.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "88.208.240.229",
//                 "network": "88.208.192.0/18"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "docs.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "3.33.251.168",
//                 "network": "3.33.128.0/17"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikon.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "109.228.39.109",
//                 "network": "109.228.0.0/18"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "demo.ikon.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "213.171.208.122",
//                 "network": "213.171.192.0/19"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "web2.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "38.105.215.140",
//                 "network": "38.105.215.0/24"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikoncloud-uat.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "77.68.30.54",
//                 "network": "77.68.0.0/17"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikon_uat.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "77.68.91.125",
//                 "network": "77.68.0.0/17"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikonbim_uat.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "77.68.8.109",
//                 "network": "77.68.0.0/17"
//             },
//             "ipv6": {}
//         },
//         {
//             "name": "ikonv6-uat.keross.com",
//             "cname": "n/a",
//             "ipv4": {
//                 "address": "14.98.103.205",
//                 "network": "14.98.0.0/17"
//             },
//             "ipv6": {}
//         }
//     ]
// }

// const networkdata = [
//     {
//         "networkId": "77.68.0.0/17",
//         "asn": "8560",
//         "managedby": "ONEANDONE-AS Brauerstrasse 48 - RIROrganization"
//     },
//     {
//         "networkId": "88.208.192.0/18",
//         "asn": "8560",
//         "managedby": "ONEANDONE-AS Brauerstrasse 48 - RIROrganization"
//     },
//     {
//         "networkId": "109.228.0.0/18",
//         "asn": "8560",
//         "managedby": "ONEANDONE-AS Brauerstrasse 48 - RIROrganization"
//     },
//     {
//         "networkId": "49.249.176.0/21",
//         "asn": "45820",
//         "managedby": "TTSL-MEISISP Tata Teleservices ISP AS, IN - RIROrganization"
//     },
//     {
//         "networkId": "213.171.192.0/19",
//         "asn": "8560",
//         "managedby": "ONEANDONE-AS Brauerstrasse 48 - RIROrganization"
//     },
//     {
//         "networkId": "142.250.141.0/24",
//         "asn": "15169",
//         "managedby": "AS15169 - Google LLC - RIROrganization"
//     },
//     {
//         "networkId": "15.197.128.0/17",
//         "asn": "16509",
//         "managedby": "AMAZON-02 - Amazon.com, Inc. - RIROrganization"
//     },
//     {
//         "networkId": "3.33.128.0/17",
//         "asn": "16509",
//         "managedby": "AMAZON-02 - Amazon.com, Inc. - RIROrganization"
//     },
//     {
//         "networkId": "173.201.64.0/20",
//         "asn": "44273",
//         "managedby": "GODADDY-DNS, DE - RIROrganization"
//     },
//     {
//         "networkId": "97.74.96.0/20",
//         "asn": "44273",
//         "managedby": "GODADDY-DNS, DE - RIROrganization"
//     },
//     {
//         "networkId": "2603:5:2100::/40",
//         "asn": "44273",
//         "managedby": "GODADDY-DNS, DE - RIROrganization"
//     },
//     {
//         "networkId": "14.98.0.0/17",
//         "asn": "45820",
//         "managedby": "TTSL-MEISISP Tata Teleservices ISP AS, IN - RIROrganization"
//     },
//     {
//         "networkId": "2607:f8b0::/32",
//         "asn": "15169",
//         "managedby": "AS15169 - Google LLC - RIROrganization"
//     },
//     {
//         "networkId": "172.253.118.0/24",
//         "asn": "15169",
//         "managedby": "AS15169 - Google LLC - RIROrganization"
//     },
//     {
//         "networkId": "38.105.215.0/24",
//         "asn": "174",
//         "managedby": "COGENT-174 - Cogent Communications - RIROrganization"
//     },
//     {
//         "networkId": "173.194.202.0/24",
//         "asn": "15169",
//         "managedby": "AS15169 - Google LLC - RIROrganization"
//     },
//     {
//         "networkId": "108.177.104.0/24",
//         "asn": "15169",
//         "managedby": "AS15169 - Google LLC - RIROrganization"
//     },
//     {
//         "networkId": "142.250.152.0/24",
//         "asn": "15169",
//         "managedby": "AS15169 - Google LLC - RIROrganization"
//     },
//     {
//         "networkId": "2603:5:22a0::/44",
//         "asn": "44273",
//         "managedby": "GODADDY-DNS, DE - RIROrganization"
//     },
//     {
//         "networkId": "216.69.140.0/22",
//         "asn": "398101",
//         "managedby": "AS398101 - RIROrganization"
//     }
// ];


// Extract useful data


const subDomains = aMassData.subdomains
    .filter((item) => item && item.trim() !== "") // Filter out blank items
    .map((item) => ({
        name: item.split(" --> ")[0].trim(),
        recordType: item.split(" --> ")[1].trim(),
        target: item.split(" --> ")[2].trim(),
    }));

const ipAddresses = aMassData.subdomains
    .filter((item) => item.includes("(IPAddress)"))
    .map((item) => {
        const parts = item.split(" --> ");
        return {
            ip: parts[2] ? parts[2].split(" ")[0].trim() : "", // Ensure the second part exists
            subdomain: parts[0] ? parts[0].trim() : "", // Ensure the first part exists
        };
    });

const asnInfo = aMassData.subdomains
    .filter((item) => item.includes("(ASN)"))
    .map((item) => {
        const parts = item.split(" --> ");
        return {
            asn: parts[0] ? parts[0].trim() : "", // Ensure the first part exists
            relationshipType: parts[1],
            value: parts[2],
        };
    });

const subDomainOverviewData = [
    {
        title: "Total Subdomains Discovered",
        value: subDomains.length,
        Icon: Globe
    },
    {
        title: "Mail Servers Found",
        value: mailServers.length,
        Icon: Mail
    },
    {
        title: "Name Servers Identified",
        value: nameServers.length,
        Icon: Server
    }
];

const nameServersData = [
    {
        name: "ns13.domaincontrol.com",
        cName: "N/A",
        ipV4: {
            address: "97.74.106.7",
            network: "97.74.96.0/20",
        },
        ipV6: {
            address: "2603:5:21a0::7",
            network: "2603:5:2100::/40",
        }
    },
    {
        name: "ns14.domaincontrol.com",
        cName: "N/A",
        ipV4: {
            address: "173.201.74.7",
            network: "173.201.64.0/20",
        },
        ipV6: {
            address: "2603:5:22a0::7",
            network: "2603:5:22a0::/48",
        }
    }
]

export default function ActiveReconnaissanceSubDomains() {
    return (
        <>
            {/* <OverviewComponent
                subDomains={subDomains.length}
                ipAddresses={ipAddresses.length}
                asnInfo={asnInfo.length}
            /> */}
            <div className="flex flex-col gap-3 mb-3">
                <SubDomainsOverview subDomainOverviewData={subDomainOverviewData} />
                {/* <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Sub Domains Discovered</Title>
                    <SubDomainsTable subDomains={subDomains} />
                </Card>
                <div className="flex gap-3">
                    <Card className="flex flex-col gap-3 p-4 rounded-md">
                        <Title className="font-bold text-widget-title text-widgetHeader">IP Addresses</Title>
                        <IPTable ipAddresses={ipAddresses} />
                    </Card>
                    <Card className="flex flex-col gap-3 p-4 rounded-md">
                        <Title className="font-bold text-widget-title text-widgetHeader">ASN Information</Title>
                        <ASNTable asnInfo={asnInfo} />
                    </Card>
                </div> */}
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Name Servers</Title>
                    <SubDomainsTableCommonTemplate tableData={data.nameServers} />
                </Card>
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Mail Servers</Title>
                    <SubDomainsTableCommonTemplate tableData={data.mailServers} />
                </Card>
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Subdomains</Title>
                    <SubDomainsTableCommonTemplate tableData={data.subdomains} />
                </Card>
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Networks</Title>
                    <NetworksTable networks={networkdata} />
                </Card>
            </div>
        </>
    )
}