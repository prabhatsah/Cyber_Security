"use client";

import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/Accordion";
import GlobalLoader from "@/components/GlobalLoader";
import { usePentestContext } from "../../../components/PentestContext";
import { useEffect } from "react";
import { BasicInfoWidget } from "@/components/BasicInfoWidget";
import { EthernetPort } from "lucide-react";



export default function OpenPortsMainTemplate({ pentestIdName }: { pentestIdName: string; }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const nmap: string = pentestData?.scanData.nmap ?? "";

    const parseNmapOutput = (nmapOutput: string) => {
        const lines = nmapOutput.trim().split('\n');
        const result: {
            target: string | null;
            ip: string | null;
            scanTime: string | null;
            hostStatus: string | null;
            latency: string | null;
            filteredPorts: number | null;
            openPorts: Array<{
                port: number;
                state: string;
                service: string;
                protocol: string;
                product: string;
                version: string;
            }>;
        } = {
            target: null,
            ip: null,
            scanTime: null,
            hostStatus: null,
            latency: null,
            filteredPorts: null,
            openPorts: []
        };

        for (const line of lines) {
            if (line.startsWith("Starting Nmap")) {
                const match = line.match(/Starting Nmap .* at (.+)/);
                if (match) result.scanTime = match[1].trim();
            }

            if (line.startsWith("Nmap scan report for")) {
                const match = line.match(/Nmap scan report for (.+) \(([\d.]+)\)/);
                if (match) {
                    result.target = match[1];
                    result.ip = match[2];
                }
            }

            if (line.includes("Host is up")) {
                const match = line.match(/Host is up \(([\d.s]+) latency\)/);
                result.hostStatus = "up";
                result.latency = match ? match[1] : null;
            }

            if (line.includes("filtered tcp ports")) {
                const match = line.match(/Not shown: (\d+) filtered tcp ports/);
                result.filteredPorts = match ? parseInt(match[1], 10) : null;
            }

            // const portMatch = line.match(/^(\d+)\/tcp\s+(\w+)\s+(\w+)/);
            const portMatch = line.match(/^(\d+)\/(tcp)\s+(\w+)\s+([^\s]+)(\s+.+)?/);
            if (portMatch) {
                const port = parseInt(portMatch[1], 10);
                const protocol = portMatch[2];
                const state = portMatch[3];
                const service = portMatch[4];
                const productVersionString = portMatch[5]?.trim() || "";

                let product = "N/A";
                let version = "N/A";

                if (productVersionString) {
                    const split = productVersionString.split(/\s+/, 2);
                    product = split[0] || "N/A";
                    version = split[1] ? productVersionString.slice(product.length + 1) : "N/A";
                }

                result.openPorts.push({
                    port,
                    state,
                    service,
                    protocol,
                    product,
                    version
                });

                // result.openPorts.push({
                //     port: parseInt(portMatch[1], 10),
                //     state: portMatch[2],
                //     service: portMatch[3]
                // });
            }
        }

        return result;
    }
    const parsedNmapData = parseNmapOutput(nmap);

    return (
        <>

            <div className="w-full h-full overflow-auto">
                <h2 className="font-semibold text-widgetHeader">
                    Open Ports
                </h2>
                <Accordion type="multiple" className="">
                    {parsedNmapData.openPorts.map((eachPortData, index) => {
                        const stateFormatted = eachPortData.state.charAt(0).toUpperCase() + eachPortData.state.slice(1);

                        const eachPortDataForWidget = [
                            { name: "Protocol", value: eachPortData.protocol.toUpperCase() },
                            { name: "State", value: stateFormatted },
                            { name: "Service", value: eachPortData.service.toUpperCase() },
                            { name: "Product", value: eachPortData.product },
                            { name: "Version", value: eachPortData.version },
                        ];

                        return (
                            <AccordionItem value={`port_${index}`} key={`port_${index}`} >
                                <AccordionTrigger>
                                    <span className="flex items-center gap-2 h-8">
                                        <EthernetPort className="size-4 text-blue-500" />{" "}
                                        Port {eachPortData.port}
                                    </span>
                                </AccordionTrigger>
                                <AccordionContent className="max-h-80 overflow-auto">
                                    <BasicInfoWidget items={eachPortDataForWidget} columns={5} />
                                </AccordionContent>
                            </AccordionItem>
                        )
                    })}
                </Accordion>
            </div>
        </>
    )
}