import GlobalLoader from "@/components/GlobalLoader";
import { usePentestContext } from "../../../components/PentestContext";
import { useEffect } from "react";
import OverviewTopWidget from "./components/OverviewTopWidget";
import { Card, Title } from "@tremor/react";
import { BasicInfoWidget } from "@/components/BasicInfoWidget";
import TopFiveCriticalDataWidget from "./components/TopFiveCriticalDataWidget";
import { aMassData, portsData, technologiesData } from "../components/ReconnaissanceDummyData";
import { Cpu, EthernetPort, Network } from "lucide-react";
import { BasicInfoWidgetData } from "./page";

export default function OverviewMainTemplate({ pentestIdName }: { pentestIdName: string; }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const nmap: Array<string> = pentestData.scanData && pentestData.scanData.amass ? [...pentestData.scanData.amass] : [];
    const whatweb: Array<string> = pentestData.scanData && pentestData.scanData.amass ? [...pentestData.scanData.amass] : [];
    const amass: Array<string> = pentestData.scanData && pentestData.scanData.amass ? [...pentestData.scanData.amass] : [];

    let subdomains: Array<string> = [];
    amass.forEach((entry) => {
        const fqdnMatch = entry.match(
            /^(.+?) \(FQDN\) --> (.+?) --> (.+?) \(([^)]+)\)$/
        );
        if (fqdnMatch) {
            const source = fqdnMatch[1].trim();
            const relation = fqdnMatch[2].trim();
            const target = fqdnMatch[3].trim();
            // const targetType = fqdnMatch[4].trim(); // Unused here

            if (relation === "node") subdomains.push(target);
        }
    });


    const whatWebData = technologiesData[technologiesData.length - 1];

    const basicInfoWidgetData: BasicInfoWidgetData[] = [
        {
            name: "URL/Domain",
            value: whatWebData.url,
        },
        {
            name: "Title",
            value: whatWebData.title,
        },
        {
            name: "IP Address",
            value: whatWebData.ip,
        },
        {
            name: "Status",
            value: whatWebData.status,
        },
        {
            name: "Country",
            value: whatWebData.country,
        }
    ];

    const subDomains = aMassData.subdomains
        .filter((item) => item && item.trim() !== "")
        .map((item) => item.split(" --> ")[2].split(" ")[0].trim());

    const overviewTopWidgetData = [
        {
            title: "Sub Domains Discovered",
            value: subDomains.length,
            Icon: Network
        },
        {
            title: "Open Ports Discovered",
            value: portsData.ports.length,
            Icon: EthernetPort
        },
        {
            title: "Technologies Identified",
            value: whatWebData.summary.length,
            Icon: Cpu
        }
    ];

    const ports = portsData.ports.map(eachPorts => eachPorts.port);
    const technologies = whatWebData.summary.split(", ");

    return (
        <>
            <div className="flex flex-col gap-3">
                <OverviewTopWidget overviewTopWidgetData={overviewTopWidgetData} />
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Basic Information</Title>
                    <BasicInfoWidget items={basicInfoWidgetData} columns={3} useDefault={false} />
                </Card>
                <TopFiveCriticalDataWidget subDomains={subDomains} ports={ports} technologies={technologies} />
            </div>
        </>
    )
}