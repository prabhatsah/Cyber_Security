"use client";

import { redirect, useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { usePentestContext } from "../../../components/PentestContext";
import GlobalLoader from "@/components/GlobalLoader";
import NoSavedPentestTemplate from "../../../components/NoSavedPentestTemplate";
import { Button } from "@/components/Button";
import { ScanLine } from "lucide-react";
import NoScanConfiguredTemplate from "../../../components/NoScanConfiguredTemplate";
import { initiateAmassScan } from "./apis/amass/initiateAmassScan";
import { checkAmassStatus } from "./apis/amass/checkAmassStatus";
import { amassScanning } from "./apis/amass/amassScanning";
import NoReconnaissanceDataTemplate from "./NoReconnaissanceDataTemplate";

export default function ActiveReconnaissancePageContent({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestName] = pentestIdName.split("_");
    const { pentestData, loading, error, setPentestId } = usePentestContext();
    // const [initiating, setInitiating] = useState(false);
    // const [initError, setInitError] = useState<string | null>(null);
    // const [jobId, setJobId] = useState<string | null>(null);
    // const [jobStatus, setJobStatus] = useState<string | null>(null);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const webApp: string = pentestData.basicDetails.webApp;
    const pentestSubPartData: any = pentestData.reconnaissance === null ? null : { ...pentestData.reconnaissance };

    // useEffect(() => {
    //     if (pentestSubPartData) {
    //         redirect(`/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/overview`);
    //     }
    // }, [pentestSubPartData, pentestIdName]);

    // useEffect(() => {
    //     if (!jobId) return;

    //     const interval = setInterval(async () => {
    //         try {
    //             const status = await checkAmassStatus(jobId);
    //             console.log("Scan status:", status);
    //             setJobStatus(status.status);

    //             if (status.status === "done" || status.status === "error") {
    //                 clearInterval(interval);
    //             }
    //         } catch (err) {
    //             console.error("Polling error:", err);
    //         }
    //     }, 10000); // 10s

    //     return () => clearInterval(interval);
    // }, [jobId]);

    // const handleInitiate = async () => {
    //     setInitiating(true);
    //     setInitError(null);
    //     setJobStatus(null);

    //     try {
    //         const result = await initiateAmassScan(webApp);
    //         console.log("Scan started:", result);
    //         setJobId(result.jobId);
    //     } catch (err: any) {
    //         setInitError(err.message);
    //     } finally {
    //         setInitiating(false);
    //     }
    // };

    return (
        <>
            {pentestSubPartData && (pentestSubPartData != null || pentestSubPartData != undefined) ?
                redirect(`/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/overview`) :
                <NoReconnaissanceDataTemplate webApp={webApp} pentestId={pentestId} />
            }

            {/* {pentestSubPartData && (pentestSubPartData != null || pentestSubPartData != undefined) ?
                redirect(`/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/overview`) :
                <div className="flex flex-col gap-4">
                    <div className="flex items-center justify-end">
                        {initiating ? (
                            <Button isLoading>Initiating</Button>
                        ) : (
                            <Button onClick={handleInitiate} variant="primary" className="flex items-center gap-2">
                                <ScanLine className="h-5 w-5" />
                                Initiate Active Reconnaissance
                            </Button>
                        )}
                    </div>
                    <NoScanConfiguredTemplate headerText="Active Reconnaissance Not Configured Yet" descriptionText="Initiate Active Reconnaissance and View the Scan Results" />
                </div>
            } */}

            {/* <div className="flex flex-col gap-4">
                <div className="flex items-center justify-end">
                    {isScanning ? (
                        <Button isLoading>Initiating</Button>
                    ) : (
                        <Button onClick={initiateScan} variant="primary" className="flex items-center gap-2">
                            <ScanLine className="h-5 w-5" />
                            Initiate Active Reconnaissance
                        </Button>
                    )}
                </div>
                {scanStatus && <p className="text-sm text-gray-500">Scan Status: {scanStatus}</p>}
                <NoScanConfiguredTemplate
                    headerText="Active Reconnaissance Not Configured Yet"
                    descriptionText="Initiate Active Reconnaissance and View the Scan Results"
                />
            </div> */}
        </>
    );
}