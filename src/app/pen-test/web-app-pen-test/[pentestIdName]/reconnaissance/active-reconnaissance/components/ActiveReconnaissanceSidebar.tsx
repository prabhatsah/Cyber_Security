'use client';

import React, { useEffect, useState } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import { Cpu, CornerLeftUp as EthernetPort, LayoutDashboard, Network, Loader2 } from 'lucide-react';
import GlobalLoader from '@/components/GlobalLoader';

export default function ActiveReconnaissanceTabs({ pentestIdName }: { pentestIdName: string }) {
  const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
  const router = useRouter();
  const pathname = usePathname();
  const [loadingTab, setLoadingTab] = useState<string | null>(null);

  const tabData = [
    {
      tabName: 'Overview',
      href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/overview`,
      Icon: LayoutDashboard,
    },
    {
      tabName: 'Sub Domains',
      href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/sub-domains`,
      Icon: Network,
    },
    {
      tabName: 'Open Ports',
      href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/open-ports`,
      Icon: EthernetPort,
    },
    {
      tabName: 'Technologies',
      href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/technologies-detected`,
      Icon: Cpu,
    },
  ];

  // Redirect to Overview tab if none is selected
  useEffect(() => {
    const activePath = tabData.some(tab =>
      pathname.includes(tab.tabName.toLowerCase().replace(/\s+/g, '-'))
    );
    if (!activePath && typeof pentestId === 'string') {
      router.push(tabData[0].href);
    }
  }, [pentestId]);

  // Reset loading when route changes
  useEffect(() => {
    setLoadingTab(null);
  }, [pathname]);

  const handleTabClick = (href: string, tabName: string) => {
    if (pathname === href) return;

    setLoadingTab(tabName);
    router.push(href);
  };

  return (
    <div className="border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
      <nav className="flex space-x-8 px-6" aria-label="Tabs">
        {tabData.map((eachTab) => {
          const isActive = pathname.includes(eachTab.tabName.toLowerCase().replace(/\s+/g, '-'));
          const isLoading = loadingTab === eachTab.tabName;

          return (
            <button
              key={eachTab.tabName}
              onClick={() => handleTabClick(eachTab.href, eachTab.tabName)}
              disabled={isLoading}
              className={`
                group inline-flex items-center border-b-2 py-4 px-1 text-sm font-medium transition-all duration-200 ease-in-out
                ${isActive
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                }
                ${isLoading ? 'pointer-events-none opacity-50' : ''}
              `}
            >
              <div className="flex items-center gap-x-2">
                {isLoading ? (
                  <Loader2 className="size-4 animate-spin" />
                ) : (
                  <eachTab.Icon
                    className={`
                      size-4 transition-colors duration-200
                      ${isActive
                        ? 'text-blue-500 dark:text-blue-400'
                        : 'text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300'
                      }
                    `}
                    aria-hidden="true"
                  />
                )}
                <span className="whitespace-nowrap">{eachTab.tabName}</span>
              </div>
            </button>
          );
        })}
      </nav>
    </div>
  );
}