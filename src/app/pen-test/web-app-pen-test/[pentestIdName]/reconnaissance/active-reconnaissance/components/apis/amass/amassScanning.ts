import { useState } from "react";
import { initiateAmassScan } from "./initiateAmassScan";
import { checkAmassStatus } from "./checkAmassStatus";
import { fetchAmassResult } from "./fetchAmassResult";
import { updatePentestData } from "@/app/pen-test/components/apis/configurePentestDataHandler";

export const amassScanning = (
  webApp: string,
  onComplete: (scanData: any) => void
) => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanStatus, setScanStatus] = useState("");

  const resetScan = () => {
    onComplete(null);
  };

  const initiateScan = async () => {
    resetScan();
    setIsScanning(true);
    try {
      const result = await initiateAmassScan(webApp);

      console.log("Job Id", result.jobId);
      if (result.jobId) {
        pollScanProgress(result.jobId);
      } else {
        console.error("Failed to Start Amass Scan.");
        setIsScanning(false);
      }
    } catch (err) {
      console.error("Error starting scan:", err);
      setIsScanning(false);
    }
  };

  const pollScanProgress = async (amassScanId: string) => {
    const poll = async () => {
      try {
        const amassScanStatus = await checkAmassStatus(amassScanId);

        setScanStatus(amassScanStatus.status);
        console.log("Scan Status: ", amassScanStatus);
        if (amassScanStatus.status == "done") {
          await fetchScanResult(amassScanId);
        } else {
          setTimeout(poll, 2000);
        }
      } catch (err) {
        console.error("Error polling spider progress:", err);
      }
    };

    await poll();
  };

  const fetchScanResult = async (amassScanId: string) => {
    try {
      const result = await fetchAmassResult(amassScanId);

      console.log("Result: ", result);
      onComplete(result.results);
      setIsScanning(false);
    } catch (err) {
      console.error("Error starting scan:", err);
      setIsScanning(false);
    }
  };

  return { initiateScan, isScanning, scanStatus };
};
