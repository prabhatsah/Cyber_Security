"use client";

import { useEffect, useState } from "react";
import { usePentestContext } from "../../../components/PentestContext";
import GlobalLoader from "@/components/GlobalLoader";
import ActiveReconnaissanceSidebar from "./ActiveReconnaissanceSidebar";
import { activeReconScanning } from "./apis/amass/active-recon-scanning";
import { Button } from "@/components/Button";
import { ScanLine } from "lucide-react";
import socket from "@/utils/web-socket";
import { useScanNotification } from "@/contexts/ScanNotificationContext";

export default function ActiveReconnaissanceLayout({ pentestIdName, children }: { pentestIdName: string; children: React.ReactNode; }) {
    const [pentestId, pentestName] = pentestIdName.split("_");
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    const webApp = pentestData && pentestData.basicDetails ? pentestData.basicDetails.target : "";
    const { setScanNotificationData } = useScanNotification();
    const { initiateScan, isScanning } = activeReconScanning(webApp, pentestId);
    const [shouldConnectSocket, setShouldConnectSocket] = useState(false);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    // useEffect(() => {
    //     if (!shouldConnectSocket) return;

    //     socket.connect();

    //     const handleScanComplete = (data: any) => {
    //         console.log('Scan completed:', data);
    //     };

    //     socket.on('scan_complete', handleScanComplete);

    //     return () => {
    //         socket.off('scan_complete', handleScanComplete);
    //         socket.disconnect();
    //     };
    // }, [shouldConnectSocket]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    // console.log("Nmap Data: ", pentestData.scanData.nmap);
    // console.log("Whatweb Data: ", pentestData.scanData.whatweb);

    async function handleInitiateActiveRecon() {
        const scanResult = await initiateScan();
        setScanNotificationData((prevScanNotificationData) => {
            if (scanResult) return [...prevScanNotificationData, ...scanResult];

            return [...prevScanNotificationData];
        });
        setShouldConnectSocket(true);
    }

    return (
        <>
            {pentestData && (pentestData.scanData.nmap || pentestData.scanData.whatweb || pentestData.scanData.amass) ?
                (<div className="flex flex-col gap-4 h-full w-full mt-2">
                    <div className="flex items-center justify-end">
                        {isScanning ? (
                            <Button isLoading>Initiating</Button>
                        ) : (
                            <Button onClick={handleInitiateActiveRecon} variant="primary" className="flex items-center gap-2">
                                <ScanLine className="h-5 w-5" />
                                Refresh Active Reconnaissance
                            </Button>
                        )}
                    </div>

                    <div className="flex-1 flex gap-4 w-full overflow-auto">
                        <div className="w-56 border-r border-gray-200 dark:border-gray-800">
                            <ActiveReconnaissanceSidebar pentestIdName={pentestIdName} />
                        </div>
                        <div className="flex-1 h-full overflow-auto">{children}</div>
                    </div>
                </div>) :
                <div className="flex gap-4 h-full w-full mt-2">
                    <div className="flex-1 h-full overflow-auto">{children}</div>
                </div>
            }



            {/* {pentestData && (pentestData.scanData.nmap || pentestData.scanData.whatweb || pentestData.scanData.amass) ?
                <div className="w-56 border-r border-gray-200 dark:border-gray-800">
                    <ActiveReconnaissanceSidebar pentestIdName={pentestIdName} />
                </div> : ""
            } */}
        </>
    )
}