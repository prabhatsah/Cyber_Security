import GlobalLoader from "@/components/GlobalLoader";
import { usePathname } from "next/navigation";
import { useState, useEffect } from "react";
import { usePentestContext } from "../../components/PentestContext";
import React from "react";
import { RotateCcw, ScanLine } from "lucide-react";
import { useScanNotification } from "@/contexts/ScanNotificationContext";
import { activeReconScanning } from "./apis/active-recon-scanning";
import { Button } from "@/components/Button";
import { passiveReconScanning } from "./apis/passive-recon-scanning";
import { secureGaurdService } from "@/utils/secureGaurdService";

export default function ReconnaissanceBtnCommon({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestName] = pentestIdName.split("_");
    const pathname = usePathname();
    const { pentestData, loading, error, setPentestId } = usePentestContext();
    const [redirecting, setRedirecting] = useState(false);
    const [isAdminOrExpert, setIsAdminOrExpert] = useState(false)

    const webApp = pentestData && pentestData.basicDetails ? pentestData.basicDetails.target : "";
    const { setScanNotificationData } = useScanNotification();
    const { initiateActiveScan, isActiveScanning } = activeReconScanning(webApp, pentestId);
    const { initiatePassiveScan, isPassiveScanning } = passiveReconScanning(webApp, pentestId);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    useEffect(() => {
        secureGaurdService.userDetails.getUserRolesForthisSoftware()
            .then((res: any[]) => {
                if (res?.length > 0) {
                    console.log(res[0].ROLE_NAME, (res[0].ROLE_NAME).includes('Admin'))
                    if ((res[0].ROLE_NAME).includes('Admin')) {
                        setIsAdminOrExpert(true);
                        console.log(isAdminOrExpert)
                    }
                }
                console.log(isAdminOrExpert)
            })
            .catch(err => console.error(err));
    }, []);


    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData || redirecting) return <GlobalLoader />;

    async function handleInitiateRecon(reconType: string) {
        let scanResult = reconType === 'active' ? await initiateActiveScan() : await initiatePassiveScan();
        setScanNotificationData((prevScanNotificationData) => {
            if (scanResult) return [...prevScanNotificationData, ...scanResult];

            return [...prevScanNotificationData];
        });
    }

    const btnDetails = {
        name: "Initiate Active Reconnaissance",
        icon: ScanLine,
        reconType: 'active',
    };

    if (pathname.includes('active-reconnaissance') && (pentestData?.scanData.nmap || pentestData?.scanData.whatweb || pentestData?.scanData.amass)) {
        btnDetails.name = "Refresh";
        btnDetails.icon = RotateCcw;
        btnDetails.reconType = 'active';
    }

    if (pathname.includes('passive-reconnaissance') && pentestData?.scanData.theHarvester) {
        btnDetails.name = "Refresh";
        btnDetails.icon = RotateCcw;
        btnDetails.reconType = 'passive';
    } else if (pathname.includes('passive-reconnaissance') && !pentestData?.scanData.theHarvester) {
        btnDetails.name = "Initiate Passive Reconnaissance";
        btnDetails.icon = ScanLine;
        btnDetails.reconType = 'passive';
    }

    return (
        <>
            {isAdminOrExpert && (
                isActiveScanning || isPassiveScanning ? (
                    <Button isLoading>Initiating</Button>
                ) : (
                    <Button
                        onClick={() => handleInitiateRecon(btnDetails.reconType)}
                        variant="primary"
                        className="flex items-center gap-2"
                    >
                        <btnDetails.icon className="h-5 w-5" />
                        {btnDetails.name}
                    </Button>
                )
            )}
        </>
    )
}