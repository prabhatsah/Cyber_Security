"use client";

import { Badge, Card, Divider } from '@tremor/react';
import { RiBuildingFill, RiMapPin2Fill, RiUserFill, RiTimeLine, RiAlarmWarningFill } from '@remixicon/react';
import React, { useEffect } from 'react';
import { format } from 'date-fns';
import { BasicDetails } from '../../components/type';
import { usePentestContext } from '../components/PentestContext';
import GlobalLoader from '@/components/GlobalLoader';

const getPriorityColor = (priority: string) => {
    switch (priority.toLowerCase()) {
        case 'high':
            return 'red';
        case 'medium':
            return 'orange';
        case 'low':
            return 'green';
        default:
            return 'gray';
    }
};

const getSecurityLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
        case 'high':
            return 'green';
        case 'medium':
            return 'yellow';
        case 'low':
            return 'red';
        default:
            return 'gray';
    }
};

export default function BasicDetailsWidget({ pentestIdName }: { pentestIdName: string; }) {
    const [pentestId, pentestName] = pentestIdName.split("_");
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const pentestSubPartData: BasicDetails = { ...pentestData.basicDetails };

    function isBasicDetails(data: any): data is BasicDetails {
        const basicDetailsKeys = [
            "pentestId",
            "target",
            "pentestName",
            "pentestDescription",
            "scope",
            "testingType",
            "startDate",
            "endDate",
            "timeZone",
            "priorityLevel",
            "securityLevel",
            "createdOn",
            "createdBy"
        ];

        if (data === null) return false;

        let flag = true;
        basicDetailsKeys.forEach(eachKey => {
            if (!(eachKey in data)) {
                flag = false;
            }
        });

        return data && typeof data === 'object' && flag;
    }

    if (pentestSubPartData === null && !isBasicDetails(pentestSubPartData)) {
        return <div>Error...</div>;
    }

    return (
        <div className="flex flex-col gap-4">
            <div className="flex gap-4">
                {/* Test Details Card */}
                <Card className="p-6 rounded-md">
                    <h3 className="mb-4 text-lg font-medium text-gray-800 dark:text-gray-200">
                        Test Details
                    </h3>
                    <div className="space-y-4">
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Web App Name
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                {pentestSubPartData.target}
                            </p>
                        </div>
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Testing Type
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                {pentestSubPartData.testingType}
                            </p>
                        </div>
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Scope
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                {pentestSubPartData.scope}
                            </p>
                        </div>
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Priority Level
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                <Badge color={getPriorityColor(pentestSubPartData.priorityLevel)} size="lg">
                                    {pentestSubPartData.priorityLevel}
                                </Badge>
                            </p>
                        </div>
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Security Level
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                <Badge color={getSecurityLevelColor(pentestSubPartData.securityLevel ?? "Low")} size="lg">
                                    {pentestSubPartData.securityLevel}
                                </Badge>
                            </p>
                        </div>
                    </div>
                </Card>

                {/* Timeline Card */}
                <Card className="p-6 rounded-md">
                    <h3 className="mb-4 text-lg font-medium text-gray-800 dark:text-gray-200">
                        Timeline
                    </h3>
                    <div className="space-y-4">
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Start Date
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                {format(new Date(pentestSubPartData.startDate), "dd-MMM-yyyy HH:mm")}
                            </p>
                        </div>
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                End Date
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                {format(new Date(pentestSubPartData.endDate), "dd-MMM-yyyy HH:mm")}
                            </p>
                        </div>
                        <div>
                            <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                                Time Zone
                            </label>
                            <p className="mt-1 text-gray-800 dark:text-gray-200">
                                {pentestSubPartData.timeZone}
                            </p>
                        </div>
                    </div>
                </Card>
            </div>

            {/* Objectives Card */}
            <Card className="p-6 rounded-md">
                <h3 className="mb-4 text-lg font-medium text-gray-800 dark:text-gray-200">
                    Objectives
                </h3>
                <p className="text-gray-600 dark:text-gray-400">
                    {/* Conduct a comprehensive security assessment of the web application to
                    identify vulnerabilities, assess risks, and provide recommendations
                    for remediation. The assessment will focus on: */}
                    {pentestSubPartData.pentestDescription}
                </p>
                {/* <ul className="mt-4 list-inside list-disc space-y-2 text-gray-600 dark:text-gray-400">
                    <li>Authentication and authorization mechanisms</li>
                    <li>Input validation and data sanitization</li>
                    <li>Session management</li>
                    <li>API security</li>
                    <li>Infrastructure security</li>
                </ul> */}
            </Card>
        </div>
    );
}
