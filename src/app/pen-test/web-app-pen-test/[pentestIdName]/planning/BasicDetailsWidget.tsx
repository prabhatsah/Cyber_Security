"use client";
import React, { useState, useEffect } from 'react';
import {
    Calendar,
    Clock,
    Target,
    Shield,
    AlertTriangle,
    Globe,
    CheckCircle2,
    Flag,
    FileText,
    Play,
    Pause,
    Calendar as CalendarIcon,
    Timer,
    MapPin
} from 'lucide-react';

// Mock data for demonstration
const mockPentestData = {
    basicDetails: {
        target: "https://example-app.company.com",
        testingType: "Web Application Security Assessment",
        scope: "Full application including API endpoints, authentication systems, and data handling processes",
        priorityLevel: "High",
        securityLevel: "Medium",
        startDate: "2024-01-15T09:00:00Z",
        endDate: "2024-01-19T17:00:00Z",
        timeZone: "UTC-8 (PST)",
        pentestDescription: "Comprehensive security assessment focusing on OWASP Top 10 vulnerabilities, business logic flaws, and data exposure risks. This assessment will include both automated scanning and manual testing methodologies to identify potential security weaknesses in the application infrastructure."
    }
};

const getPriorityConfig = (priority: string) => {
    switch (priority?.toLowerCase()) {
        case 'high':
            return {
                color: 'bg-red-500',
                textColor: 'text-red-700',
                bgColor: 'bg-red-50 border-red-200',
                icon: <AlertTriangle className="w-3 h-3" />,
                pulse: 'animate-pulse'
            };
        case 'medium':
            return {
                color: 'bg-amber-500',
                textColor: 'text-amber-700',
                bgColor: 'bg-amber-50 border-amber-200',
                icon: <Flag className="w-3 h-3" />,
                pulse: ''
            };
        case 'low':
            return {
                color: 'bg-green-500',
                textColor: 'text-green-700',
                bgColor: 'bg-green-50 border-green-200',
                icon: <CheckCircle2 className="w-3 h-3" />,
                pulse: ''
            };
        default:
            return {
                color: 'bg-gray-500',
                textColor: 'text-gray-700',
                bgColor: 'bg-gray-50 border-gray-200',
                icon: <Flag className="w-3 h-3" />,
                pulse: ''
            };
    }
};

const getSecurityConfig = (level: string) => {
    switch (level?.toLowerCase()) {
        case 'high':
            return { color: 'bg-emerald-500', textColor: 'text-emerald-700', bgColor: 'bg-emerald-50 border-emerald-200' };
        case 'medium':
            return { color: 'bg-yellow-500', textColor: 'text-yellow-700', bgColor: 'bg-yellow-50 border-yellow-200' };
        case 'low':
            return { color: 'bg-red-500', textColor: 'text-red-700', bgColor: 'bg-red-50 border-red-200' };
        default:
            return { color: 'bg-gray-500', textColor: 'text-gray-700', bgColor: 'bg-gray-50 border-gray-200' };
    }
};

const StatusPill = ({ config, value, className = "" }: { config: any, value: string, className?: string }) => (
    <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-full border text-xs font-medium ${config.bgColor} ${config.textColor} ${className}`}>
        <div className={`w-1.5 h-1.5 rounded-full ${config.color} ${config.pulse}`} />
        {config.icon}
        <span>{value}</span>
    </div>
);

const InfoCard = ({ icon, title, value, subtitle, className = "" }: {
    icon: React.ReactNode,
    title: string,
    value: string | React.ReactNode,
    subtitle?: string,
    className?: string
}) => (
    <div className={` rounded-lg p-3 border  transition-colors ${className}`}>
        <div className="flex items-center gap-2 mb-1">
            <div className="">{icon}</div>
            <span className="text-xs font-medium  uppercase tracking-wide">{title}</span>
        </div>
        <div className="text-sm font-semibold t">{value}</div>
        {subtitle && <div className="text-xs  mt-1">{subtitle}</div>}
    </div>
);

function App() {
    const [currentTime, setCurrentTime] = useState(new Date());
    const pentestData = mockPentestData;

    useEffect(() => {
        const timer = setInterval(() => setCurrentTime(new Date()), 1000);
        return () => clearInterval(timer);
    }, []);

    if (!pentestData) return <div className="p-8 text-center ">No data available</div>;

    const data = pentestData.basicDetails;
    const priorityConfig = getPriorityConfig(data.priorityLevel);
    const securityConfig = getSecurityConfig(data.securityLevel);

    const startDate = new Date(data.startDate);
    const endDate = new Date(data.endDate);
    const duration = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
    const isActive = currentTime >= startDate && currentTime <= endDate;
    const progress = isActive ? ((currentTime.getTime() - startDate.getTime()) / (endDate.getTime() - startDate.getTime())) * 100 : 0;

    return (
        <div className=" p-4">
            <div className=" mx-auto">
                {/* Header */}
                <div className="mb-6">
                    <div className="flex items-center justify-between mb-2">
                        <div>
                            <h1 className="text-2xl font-bold 0">Test Configuration</h1>
                            <p className="text-sm ">Comprehensive security assessment details and timeline</p>
                        </div>
                        {/* <div className="flex items-center gap-2">
                            <div className={`p-1 rounded-full ${isActive ? 'bg-green-100' : 'bg-gray-100'}`}>
                                {isActive ? <Play className="w-4 h-4 text-green-600" /> : <Pause className="w-4 h-4 " />}
                            </div>
                            
                        </div> */}
                    </div>

                    {/* Progress Bar */}
                    {isActive && (
                        <div className="mb-4">
                            <div className="flex justify-between text-xs  mb-1">
                                <span>Progress</span>
                                <span>{Math.round(progress)}%</span>
                            </div>
                            <div className="w-full  rounded-full h-1">
                                <div
                                    className="bg-blue-500 h-1 rounded-full transition-all duration-300"
                                    style={{ width: `${progress}%` }}
                                />
                            </div>
                        </div>
                    )}
                </div>

                {/* Main Content Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-6">
                    {/* Target & Scope */}
                    <div className="lg:col-span-2  rounded-xl p-4 border ">
                        <div className="flex items-center gap-2 mb-3">
                            <Target className="w-4 h-4 text-blue-600" />
                            <h3 className="font-semibold ">Target Information</h3>
                        </div>

                        <div className="space-y-3">
                            <div className="flex items-center gap-2  rounded-lg">
                                <Globe className="w-4 h-4 " />
                                <div className="flex-1">
                                    <div className="text-sm font-medium text-blue-500">{data.target}</div>
                                    <div className="text-xs ">Primary Target</div>
                                </div>
                            </div>

                            <div>
                                <div className="text-xs font-medium  mb-1">Assessment Scope</div>
                                <p className="text-sm  leading-relaxed">{data.scope}</p>
                            </div>
                        </div>
                    </div>

                    {/* Quick Stats */}
                    <div className="lg:col-span-2 grid grid-cols-2 gap-3">
                        <InfoCard
                            icon={<AlertTriangle className="w-4 h-4" />}
                            title="Priority"
                            value={<StatusPill config={priorityConfig} value={data.priorityLevel} />}
                        />

                        <InfoCard
                            icon={<Shield className="w-4 h-4" />}
                            title="Security Level"
                            value={<StatusPill config={securityConfig} value={data.securityLevel} />}
                        />

                        <InfoCard
                            icon={<Timer className="w-4 h-4" />}
                            title="Duration"
                            value={`${duration} days`}
                            subtitle={data.testingType}
                        />

                        <InfoCard
                            icon={<MapPin className="w-4 h-4" />}
                            title="Timezone"
                            value={data.timeZone}
                            subtitle={currentTime.toLocaleTimeString()}
                        />
                    </div>
                </div>

                {/* Timeline */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <div className=" rounded-xl p-4 border ">
                        <div className="flex items-center gap-2 mb-3">
                            <CalendarIcon className="w-4 h-4 text-green-600" />
                            <h3 className="font-semibold ">Start Date</h3>
                        </div>
                        <div className="text-lg font-bold ">
                            {startDate.toLocaleDateString('en-US', {
                                weekday: 'short',
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric'
                            })}
                        </div>
                        <div className="text-sm text-gray-500">
                            {startDate.toLocaleTimeString('en-US', {
                                hour: '2-digit',
                                minute: '2-digit'
                            })}
                        </div>
                    </div>

                    <div className=" rounded-xl p-4 border ">
                        <div className="flex items-center gap-2 mb-3">
                            <CalendarIcon className="w-4 h-4 text-red-600" />
                            <h3 className="font-semibold ">End Date</h3>
                        </div>
                        <div className="text-lg font-bold ">
                            {endDate.toLocaleDateString('en-US', {
                                weekday: 'short',
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric'
                            })}
                        </div>
                        <div className="text-sm ">
                            {endDate.toLocaleTimeString('en-US', {
                                hour: '2-digit',
                                minute: '2-digit'
                            })}
                        </div>
                    </div>
                </div>

                {/* Objectives */}
                <div className=" rounded-xl p-4 border ">
                    <div className="flex items-center gap-2 mb-3">
                        <FileText className="w-4 h-4 text-purple-600" />
                        <h3 className="font-semibold ">Test Objectives</h3>
                    </div>
                    <p className="text-sm  leading-relaxed">
                        {data.pentestDescription}
                    </p>
                </div>
            </div>
        </div>
    );
}

export default App;