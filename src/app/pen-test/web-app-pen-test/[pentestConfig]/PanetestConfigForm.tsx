import { Input } from "@/components/Input";
import {
    RiCheckboxCircleLine,
    RiCloseLine,
    RiCodeBoxLine,
    RiErrorWarningLine,
} from "@remixicon/react";

import { useState } from "react";
import { Button } from "@/components/Button";
import { format } from "date-fns";
import { TrivyConfiguration } from "@/app/configuration/components/type";
import { updateDataObject } from "@/utils/api";
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService";
import { IpInput } from "@/components/IpInput";
import { SiTrivy } from "react-icons/si";
import { Dialog, DialogPanel, Select, SelectItem, Textarea } from "@tremor/react";
import { Building2, Clock } from "lucide-react";


export default function PenTestConfigFormModal({
    pentestConfigUrl,
    isFormModalOpen,
    onClose,
    savedDataToBePopulated,
}: {
    pentestConfigUrl: string;
    isFormModalOpen: boolean;
    onClose: () => void;
    savedDataToBePopulated?: TrivyConfiguration;
}) {
    const containerNameArray = pentestConfigUrl.split("-");
    let containerName = "";
    containerNameArray.forEach((eachPart) => {
        containerName +=
            eachPart.substring(0, 1).toUpperCase() +
            eachPart.substring(1, eachPart.length) +
            " ";
    });
    containerName.trim();

    // const { setConfigurationData } = useConfiguration();




    const handleInputChange = (
        e:
            | React.ChangeEvent<HTMLInputElement>
            | React.ChangeEvent<HTMLSelectElement>
    ) => {
        const { name, value } = e.target;

        setErrors({});

        setFormData((prev) => ({ ...prev, [name]: value }));
    };
    const [isOpen, setIsOpen] = useState(true);
    const timeZones = [
        '(UTC+00:00) London',
        '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi',
        '(UTC-05:00) Eastern Time (US & Canada)',
        '(UTC-08:00) Pacific Time (US & Canada)',
    ];
    interface FormData {
        webAppName: string;
        pentestName: string;
        pentestDescription: string;
        scope: 'Internal' | 'External' | 'Both';
        testingType: 'Black Box' | 'White Box' | 'Gray Box';
        startDate: string;
        endDate: string;
        timeZone: string;
        priorityLevel: 'Low' | 'Medium' | 'High';
        securityLevel: 'Low' | 'Medium' | 'High';
    }

    const [formData, setFormData] = useState<FormData>({
        webAppName: '',
        pentestName: '',
        pentestDescription: '',
        scope: 'Internal',
        testingType: 'Black Box',
        startDate: '',
        endDate: '',
        timeZone: '',
        priorityLevel: 'Low',
        securityLevel: 'Low',
    });
    return (
        <>
            <Dialog open={isOpen} onClose={() => setIsOpen(false)} static={true}>
                <DialogPanel className="overflow-visible rounded-md p-0 sm:max-w-5xl">
                    <div className="border-b border-tremor-border px-6 py-4 dark:border-dark-tremor-border">
                        <div className="flex items-center gap-3">
                            <Building2 className="h-6 w-6 text-blue-600" />
                            <h3 className="font-medium text-widget-title">Configure PenTest</h3>
                        </div>
                    </div>

                    <div className="max-h-[80vh] overflow-y-auto p-6">
                        {/* Main Form */}
                        <div className="space-y-6">
                            {/* Basic Information */}
                            <div className="space-y-4">
                                <h2 className="text-lg font-medium text-widgetHeader">Basic Information</h2>
                                <div className="space-y-4">
                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader">Web App Name *</label>
                                        <Input
                                            type="text"
                                            className=""
                                            value={formData.webAppName}

                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader">PenTest Name *</label>
                                        <Input
                                            type="text"
                                            className=""
                                            value={formData.pentestName}

                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader">PenTest Description</label>
                                        <Textarea
                                            rows={3}
                                            className="w-full"
                                            value={formData.pentestDescription}

                                        />
                                    </div>
                                </div>
                            </div>

                            {/* Test Parameters */}
                            <div className="space-y-4">
                                <h2 className="text-lg font-medium text-widget-mainHeader">Test Parameters</h2>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader mb-2">Scope *</label>
                                        <div className="flex flex-col space-y-2">
                                            {['Internal', 'External', 'Both'].map((option) => (
                                                <label key={option} className="flex items-center space-x-2">
                                                    <input
                                                        type="radio"
                                                        value={option}
                                                        name="scope"
                                                        checked={formData.scope === option}

                                                        className="form-radio h-4 w-4 text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700">{option}</span>
                                                </label>
                                            ))}
                                        </div>
                                    </div>

                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader mb-2">Type of Testing *</label>
                                        <div className="flex flex-col space-y-2">
                                            {['Black Box', 'White Box', 'Gray Box'].map((option) => (
                                                <label key={option} className="flex items-center space-x-2">
                                                    <input
                                                        type="radio"
                                                        value={option}
                                                        name="testingType"
                                                        checked={formData.testingType === option}

                                                        className="form-radio h-4 w-4 text-blue-600"
                                                    />
                                                    <span className="text-sm text-gray-700">{option}</span>
                                                </label>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Timeline */}
                            <div className="space-y-4">
                                <div className="flex items-center gap-2">
                                    <Clock className="h-5 w-5 text-gray-400" />
                                    <h2 className="text-lg font-medium text-widget-mainHeader">Timeline</h2>
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader">Start Date *</label>
                                        <Input
                                            type="datetime-local"
                                            className="text-widget-mainDesc"
                                            value={formData.startDate}

                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-widget-mainHeader">End Date *</label>
                                        <Input
                                            type="datetime-local"
                                            className="text-widget-mainDesc"
                                            value={formData.endDate}

                                        />
                                    </div>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-widget-mainHeader">Time Zone *</label>
                                    <Select
                                        value={formData.timeZone}

                                    >
                                        {timeZones.map((zone) => (
                                            <SelectItem key={zone} value={zone}>
                                                {zone}
                                            </SelectItem>
                                        ))}
                                    </Select>
                                </div>
                            </div>

                            {/* Levels */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label className="block text-sm font-medium text-widget-mainHeader">Priority Level *</label>
                                    <Select
                                        value={formData.priorityLevel}

                                    >
                                        <SelectItem value="Low">Low</SelectItem>
                                        <SelectItem value="Medium">Medium</SelectItem>
                                        <SelectItem value="High">High</SelectItem>
                                    </Select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-widget-mainHeader">Security Level</label>
                                    <Select
                                        value={formData.securityLevel}

                                    >
                                        <SelectItem value="Low">Low</SelectItem>
                                        <SelectItem value="Medium">Medium</SelectItem>
                                        <SelectItem value="High">High</SelectItem>
                                    </Select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="border-b border-tremor-border px-6 py-4 dark:border-dark-tremor-border">
                        <div className="flex justify-end gap-3">
                            <Button className="" variant="secondary" onClick={onClose}>
                                Cancel
                            </Button>
                            <Button className="" variant="primary">
                                Save Configuration
                            </Button>
                        </div>
                    </div>
                </DialogPanel>
            </Dialog>
        </>
    );
}
