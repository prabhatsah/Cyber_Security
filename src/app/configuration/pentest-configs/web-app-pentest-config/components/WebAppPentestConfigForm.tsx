"use client"

import type React from "react"

import { ChangeEvent, useMemo, useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/Input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { TooltipProvider } from "@/components/ui/tooltip"
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService"
import { BasicDetails } from "@/app/pen-test/web-app-pen-test/components/type"
import { getFormattedTimeZones } from "./FetchAllFormattedTimeZones"
import { format } from "date-fns"
import { addPentestEntry } from "@/app/pen-test/components/apis/configurePentestDataHandler"
import { Dialog, DialogPanel, Select, SelectItem, Textarea } from "@tremor/react"
import { X } from "lucide-react"

interface WebAppPentestConfigFormProps {
    isFormModalOpen: boolean;
    onClose: () => void;
    savedDataToBePopulated?: BasicDetails
}

interface ErrorState {
    [key: string]: string;
}

export function WebAppPentestConfigForm({ isFormModalOpen, onClose, savedDataToBePopulated }: WebAppPentestConfigFormProps) {
    const timeZones: string[] = useMemo(() => getFormattedTimeZones(), []);

    // Error states and other feedback
    const [errors, setErrors] = useState<ErrorState>({});

    // Standard input handler
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLTextAreaElement> | any
    ) => {
        const { name, value } = e.target;
        setErrors({});
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const [formData, setFormData] = useState({
        target: savedDataToBePopulated?.target ?? '',
        clientName: savedDataToBePopulated?.clientName ?? '',
        pentestName: savedDataToBePopulated?.pentestName ?? '',
        pentestDescription: savedDataToBePopulated?.pentestDescription ?? '',
        scope: savedDataToBePopulated?.scope ?? '',
        testingType: savedDataToBePopulated?.testingType ?? '',
        startDate: savedDataToBePopulated?.startDate ?? '',
        endDate: savedDataToBePopulated?.endDate ?? '',
        timeZone: savedDataToBePopulated?.timeZone ?? '',
        priorityLevel: savedDataToBePopulated?.priorityLevel ?? '',
        securityLevel: savedDataToBePopulated?.securityLevel ?? '',
    });


    // Validate form
    const validateForm = (): boolean => {
        const newErrors: ErrorState = {};

        if (formData.clientName.trim().length < 3) {
            newErrors.clientName =
                "Client Name must be at least 3 characters long. Please provide a valid Client Name";
        }

        if (!formData.target.trim()) {
            newErrors.target = "Web Application must be specified!";
        } else if (!formData.target.startsWith("http://") && !formData.target.startsWith("https://")) {
            newErrors.target = "Web Application must start with http:// or https://";
        } else {
            try {
                new URL(formData.target);
            } catch (e) {
                newErrors.target = "Web Application must be a valid URL.";
            }
        }

        if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Penetration Test Name must be at least 3 characters long. Please provide a valid Penetration Test Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }

        if (!formData.scope) {
            newErrors.scope = "Please select a Scope!";
        }

        if (!formData.testingType.trim()) {
            newErrors.testingType = "Please select Testing Type!";
        }

        if (!formData.startDate.trim()) {
            newErrors.startDate = "Start Date must be specified. Please provide a Start Date!";
        }

        if (!formData.endDate.trim()) {
            newErrors.endDate = "End Date must be specified. Please provide a End Date!";
        }

        if (!formData.timeZone) {
            newErrors.timeZone = "Time Zone must be specified. Please provide a Time Zone!";
        }

        if (!formData.priorityLevel) {
            newErrors.priorityLevel = "Priority Level must be specified. Please provide a Priority Level!";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleFormSave = async function (event: React.FormEvent) {
        event.preventDefault();

        if (!validateForm()) return;

        const loggedInUserDetails = await getLoggedInUserProfile();
        const createdBy = {
            userId: loggedInUserDetails.USER_ID,
            userName: loggedInUserDetails.USER_NAME,
        }

        const pentestId = crypto.randomUUID();
        const basicDetails: BasicDetails = {
            pentestId: pentestId,
            target: formData.target,
            pentestName: formData.pentestName,
            clientName: formData.clientName,
            pentestDescription: formData.pentestDescription,
            scope: formData.scope,
            testingType: formData.testingType,
            startDate: formData.startDate,
            endDate: formData.endDate,
            timeZone: formData.timeZone,
            priorityLevel: formData.priorityLevel,
            progress: 10,
            securityLevel: formData.securityLevel,
            createdOn: format(new Date(), "yyyy-MMM-dd HH:mm:ss"),
            createdBy: createdBy,
        };

        addPentestEntry(pentestId, "web_app", basicDetails);
        handleClose();
    };

    async function handlePentestConfigUpdate(event: React.FormEvent) {
        event.preventDefault();

        if (!validateForm()) return;

        if (savedDataToBePopulated) {
            savedDataToBePopulated = {
                ...savedDataToBePopulated,
                pentestName: formData.pentestName,
                pentestDescription: formData.pentestDescription,
                priorityLevel: formData.priorityLevel,
                securityLevel: formData.securityLevel
            }
            const updatedConfigData = [
                {
                    key: "basicDetails",
                    value: savedDataToBePopulated
                },
            ];

            const tableName = "penetration_testing_history";
            const filterColumn = "pentestid";
            const filterColumnValue = savedDataToBePopulated.pentestId;
            // await updateDataObject(tableName, updatedConfigData, filterColumn, filterColumnValue);
        }
        handleClose();
    }

    const handleClose = () => {
        setFormData({
            target: '',
            pentestName: '',
            clientName: '',
            pentestDescription: '',
            scope: '',
            testingType: '',
            startDate: '',
            endDate: '',
            timeZone: '',
            priorityLevel: '',
            securityLevel: '',
        });
        setErrors({});

        onClose();
    };

    return (
        <Dialog open={isFormModalOpen} onClose={onClose} static={true}>
            <DialogPanel className="overflow-visible rounded-md p-0 sm:max-w-5xl">
                <TooltipProvider>
                    <form action="#" method="POST" onSubmit={savedDataToBePopulated ? handlePentestConfigUpdate : handleFormSave}>
                        {/* Form Header */}
                        <div className="flex justify-between items-center gap-3 py-4 px-6 border-b border-slate-200 dark:border-slate-700">
                            <h3 className="text-xl text-tremor-content-strong dark:text-dark-tremor-content-strong">
                                Configure Web Application Penetration Test
                            </h3>
                            <button type="button" onClick={() => handleClose()} aria-label="Close"
                                className="rounded-sm p-2 text-tremor-content-subtle hover:bg-tremor-background-subtle hover:text-tremor-content
                            dark:text-dark-tremor-content-subtle hover:dark:bg-dark-tremor-background-subtle hover:dark:text-tremor-content">
                                <X className="size-5 shrink-0" aria-hidden={true} />
                            </button>
                        </div>

                        {/* Form Main Section */}
                        <div className="max-h-[80vh] overflow-y-auto py-4 px-6 space-y-8">
                            {/* Section 1: Project Information */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Project Information</h3>

                                <div className="space-y-2">
                                    <Label htmlFor="clientName" className="text-sm font-medium text-widget-mainHeader">
                                        Client Name <span className="text-red-500">*</span>
                                    </Label>

                                    <div className="space-y-2">
                                        <Input
                                            id="clientName"
                                            name="clientName"
                                            value={formData.clientName}
                                            disabled={savedDataToBePopulated ? true : false}
                                            className={
                                                errors.clientName
                                                    ? "w-full border border-red-500 rounded-md"
                                                    : "w-full"
                                            }
                                            onChange={handleInputChange}
                                            placeholder="e.g., Carta Worldwide"
                                        />

                                        {errors.clientName ? (
                                            <p className="text-xs text-red-500">
                                                {errors.clientName}
                                            </p>
                                        ) : undefined}
                                    </div>
                                </div>

                                <div className="flex gap-4">
                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="target" className="text-sm font-medium text-widget-mainHeader">
                                            Target URL <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="target"
                                                name="target"
                                                value={formData.target}
                                                disabled={savedDataToBePopulated ? true : false}
                                                className={
                                                    errors.target
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., https://www.example.com"
                                            />

                                            {errors.target ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.target}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="pentestName" className="text-sm font-medium text-widget-mainHeader">
                                            Configuration Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="pentestName"
                                                name="pentestName"
                                                value={formData.pentestName}
                                                className={
                                                    errors.pentestName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Canadian Internal Web Application Pentest - Q3 2025"
                                            />

                                            {errors.pentestName ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.pentestName}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>
                                </div>

                                <div className="flex-1 space-y-2">
                                    <Label htmlFor="pentestDescription" className="text-sm font-medium text-widget-mainHeader">
                                        Description <span className="text-red-500">*</span>
                                    </Label>

                                    <div className="space-y-2">
                                        <Textarea
                                            rows={3}
                                            id="pentestDescription"
                                            name="pentestDescription"
                                            value={formData.pentestDescription}
                                            className={
                                                errors.pentestDescription
                                                    ? "w-full ring-1 ring-red-500 rounded-md"
                                                    : "w-full"
                                            }
                                            onChange={handleInputChange}
                                            placeholder="Enter Penetration Test Description"
                                        />

                                        {errors.pentestDescription ? (
                                            <p className="text-xs text-red-500">
                                                {errors.pentestDescription}
                                            </p>
                                        ) : undefined}
                                    </div>
                                </div>
                            </div>

                            {/* Section 2: Test Parameters */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Test Parameters</h3>

                                <div className="flex gap-6">
                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Scope <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <RadioGroup className="flex flex-wrap justify-between" value={formData.scope}
                                                onValueChange={(value) => {
                                                    setErrors((prev) => ({ ...prev, scope: "" })); // clear scope error
                                                    setFormData((prev) => ({ ...prev, scope: value }));
                                                }}
                                            >
                                                <div className="flex items-center space-x-2">
                                                    <RadioGroupItem value="Internal" id="internal" className="border-slate-600"
                                                        disabled={savedDataToBePopulated ? true : false} />
                                                    <Label htmlFor="internal" className="text-slate-300">
                                                        Internal
                                                    </Label>
                                                </div>
                                                <div className="flex items-center space-x-2">
                                                    <RadioGroupItem value="External" id="external" className="border-slate-600"
                                                        disabled={savedDataToBePopulated ? true : false} />
                                                    <Label htmlFor="external" className="text-slate-300">
                                                        External
                                                    </Label>
                                                </div>
                                                <div className="flex items-center space-x-2">
                                                    <RadioGroupItem value="Both" id="both" className="border-slate-600"
                                                        disabled={savedDataToBePopulated ? true : false} />
                                                    <Label htmlFor="both" className="text-slate-300">
                                                        Both
                                                    </Label>
                                                </div>
                                            </RadioGroup>


                                            {errors.scope ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.scope}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Type of Testing <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <RadioGroup className="flex flex-wrap justify-between" value={formData.testingType}
                                                onValueChange={(value) => {
                                                    setErrors((prev) => ({ ...prev, testingType: "" })); // clear scope error
                                                    setFormData((prev) => ({ ...prev, testingType: value }));
                                                }}
                                            >
                                                <div className="flex items-center space-x-2">
                                                    <RadioGroupItem value="White Box" id="white-box" className="border-slate-600"
                                                        disabled={savedDataToBePopulated ? true : false} />
                                                    <Label htmlFor="white-box" className="text-slate-300">
                                                        White Box
                                                    </Label>
                                                </div>
                                                <div className="flex items-center space-x-2">
                                                    <RadioGroupItem value="Black Box" id="black-box" className="border-slate-600"
                                                        disabled={savedDataToBePopulated ? true : false} />
                                                    <Label htmlFor="black-box" className="text-slate-300">
                                                        Black Box
                                                    </Label>
                                                </div>
                                                <div className="flex items-center space-x-2">
                                                    <RadioGroupItem value="Grey Box" id="grey-box" className="border-slate-600"
                                                        disabled={savedDataToBePopulated ? true : false} />
                                                    <Label htmlFor="grey-box" className="text-slate-300">
                                                        Grey Box
                                                    </Label>
                                                </div>
                                            </RadioGroup>


                                            {errors.testingType ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.scope}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Section 3: Timeline */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Timeline</h3>

                                <div className="flex gap-4">
                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="startDate" className="text-sm font-medium text-widget-mainHeader">
                                            Start Date <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="startDate"
                                                name="startDate"
                                                type="datetime-local"
                                                value={formData.startDate}
                                                disabled={savedDataToBePopulated ? true : false}
                                                className={
                                                    errors.startDate
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                            />

                                            {errors.startDate ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.startDate}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="endDate" className="text-sm font-medium text-widget-mainHeader">
                                            End Date <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="endDate"
                                                name="endDate"
                                                type="datetime-local"
                                                value={formData.endDate}
                                                disabled={savedDataToBePopulated ? true : false}
                                                className={
                                                    errors.endDate
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                            />

                                            {errors.endDate ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.endDate}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>
                                </div>

                                <div className="flex-1 space-y-2">
                                    <Label htmlFor="timeZone" className="text-sm font-medium text-widget-mainHeader">
                                        Time Zone <span className="text-red-500">*</span>
                                    </Label>

                                    <div className="space-y-2">
                                        <Select
                                            id="timeZone"
                                            name="timeZone"
                                            value={formData.timeZone}
                                            disabled={savedDataToBePopulated ? true : false}
                                            className={
                                                errors.timeZone
                                                    ? "w-full border border-red-500"
                                                    : "w-full"
                                            }
                                            onValueChange={(val) => {
                                                setFormData((prev) => ({ ...prev, timeZone: val }))
                                            }}
                                        >
                                            {timeZones.map((eachTimeZone) => (
                                                <SelectItem key={eachTimeZone} value={eachTimeZone}>
                                                    {eachTimeZone}
                                                </SelectItem>
                                            ))}
                                        </Select>

                                        {errors.timeZone ? (
                                            <p className="text-xs text-red-500">
                                                {errors.timeZone}
                                            </p>
                                        ) : undefined}
                                    </div>
                                </div>
                            </div>

                            {/* Section 4: Levels */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Levels</h3>

                                <div className="flex gap-4">
                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="priorityLevel" className="text-sm font-medium text-widget-mainHeader">
                                            Priority Level <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Select
                                                id="priorityLevel"
                                                name="priorityLevel"
                                                value={formData.priorityLevel}
                                                className={
                                                    errors.priorityLevel
                                                        ? "w-full border border-red-500"
                                                        : "w-full"
                                                }
                                                onValueChange={(val) => {
                                                    setFormData((prev) => ({ ...prev, priorityLevel: val }))
                                                }}
                                            >
                                                <SelectItem value="Low">Low</SelectItem>
                                                <SelectItem value="Medium">Medium</SelectItem>
                                                <SelectItem value="High">High</SelectItem>
                                            </Select>

                                            {errors.priorityLevel ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.priorityLevel}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">Security Level (Optional)</Label>

                                        <div className="space-y-2">
                                            <Select
                                                id="securityLevel"
                                                name="securityLevel"
                                                value={formData.securityLevel}
                                                className={
                                                    errors.securityLevel
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onValueChange={(val) => {
                                                    setFormData((prev) => ({ ...prev, securityLevel: val }))
                                                }}
                                            >
                                                <SelectItem value="Low">Low</SelectItem>
                                                <SelectItem value="Medium">Medium</SelectItem>
                                                <SelectItem value="High">High</SelectItem>
                                            </Select>

                                            {errors.securityLevel ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.securityLevel}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Form Actions */}
                        <div className="flex justify-end gap-3 py-4 px-8 border-t border-slate-200 dark:border-slate-700">
                            <Button type="button" variant="outline" onClick={onClose} className="border-slate-600 text-slate-300 hover:text-white bg-transparent">
                                Cancel
                            </Button>
                            <Button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white">
                                Save Configuration
                            </Button>
                        </div>
                    </form>
                </TooltipProvider >
            </DialogPanel>
        </Dialog>
    )
}
