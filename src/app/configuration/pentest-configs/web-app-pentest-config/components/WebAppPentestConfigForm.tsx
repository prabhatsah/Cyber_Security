"use client"

import type React from "react"

import { ChangeEvent, useMemo, useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Trash2, Info } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService"
import { BasicDetails } from "@/app/pen-test/web-app-pen-test/components/type"
import { getFormattedTimeZones } from "./FetchAllFormattedTimeZones"
import { format } from "date-fns"
import { addPentestEntry } from "@/app/pen-test/components/apis/configurePentestDataHandler"
import { Textarea } from "@tremor/react"

interface WebAppPentestConfigFormProps {
    onSave: (config: {
        clientName: string
        configName: string
        scopeType: string
        aggressiveness: string
    }) => void
    onCancel: () => void
}

interface ErrorState {
    [key: string]: string;
}

export function WebAppPentestConfigForm({ onSave, onCancel }: WebAppPentestConfigFormProps) {
    const timeZones: string[] = useMemo(() => getFormattedTimeZones(), []);

    // Error states and other feedback
    const [errors, setErrors] = useState<ErrorState>({});

    // Standard input handler
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLTextAreaElement>
    ) => {
        const { name, value } = e.target;
        setErrors({});
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const [formData, setFormData] = useState({
        target: '',
        clientName: '',
        pentestName: '',
        pentestDescription: '',
        scope: '',
        testingType: '',
        startDate: '',
        endDate: '',
        timeZone: '',
        priorityLevel: '',
        securityLevel: '',
    });


    // Validate form
    const validateForm = (): boolean => {
        const newErrors: ErrorState = {};

        if (!formData.target.trim()) {
            newErrors.target = "Web Application must be specified!";
        } else if (!formData.target.startsWith("http://") && !formData.target.startsWith("https://")) {
            newErrors.target = "Web Application must start with http:// or https://";
        } else {
            try {
                new URL(formData.target);
            } catch (e) {
                newErrors.target = "Web Application must be a valid URL.";
            }
        }

        if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Penetration Test Name must be at least 3 characters long. Please provide a valid Penetration Test Name";
        }

        if (formData.clientName.trim().length < 3) {
            newErrors.clientName =
                "Client Name must be at least 3 characters long. Please provide a valid Client Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }

        if (!formData.scope) {
            newErrors.scope = "Please select a Scope!";
        }

        if (!formData.testingType.trim()) {
            newErrors.testingType = "Please select Testing Type!";
        }

        if (!formData.startDate.trim()) {
            newErrors.startDate = "Start Date must be specified. Please provide a Start Date!";
        }

        if (!formData.endDate.trim()) {
            newErrors.endDate = "End Date must be specified. Please provide a End Date!";
        }

        if (!formData.timeZone) {
            newErrors.timeZone = "Time Zone must be specified. Please provide a Time Zone!";
        }

        if (!formData.priorityLevel) {
            newErrors.priorityLevel = "Priority Level must be specified. Please provide a Priority Level!";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    async function handleFormSave(event: React.FormEvent) {
        event.preventDefault();

        if (!validateForm()) return;

        const loggedInUserDetails = await getLoggedInUserProfile();
        const createdBy = {
            userId: loggedInUserDetails.USER_ID,
            userName: loggedInUserDetails.USER_NAME,
        }

        const pentestId = crypto.randomUUID();
        const basicDetails: BasicDetails = {
            pentestId: pentestId,
            target: formData.target,
            pentestName: formData.pentestName,
            pentestDescription: formData.pentestDescription,
            scope: formData.scope,
            testingType: formData.testingType,
            startDate: formData.startDate,
            endDate: formData.endDate,
            timeZone: formData.timeZone,
            priorityLevel: formData.priorityLevel,
            progress: 10,
            securityLevel: formData.securityLevel,
            createdOn: format(new Date(), "yyyy-MMM-dd HH:mm:ss"),
            createdBy: createdBy,
        };

        addPentestEntry(pentestId, "web_app", basicDetails);
        handleClose();
    };

    const handleClose = () => {
        setFormData({
            target: '',
            pentestName: '',
            clientName: '',
            pentestDescription: '',
            scope: '',
            testingType: '',
            startDate: '',
            endDate: '',
            timeZone: '',
            priorityLevel: '',
            securityLevel: '',
        });
        setErrors({});

        // onClose();
        onCancel();
    };

    return (
        <TooltipProvider>
            <form onSubmit={handleFormSave}>
                <div className="max-h-[80vh] overflow-y-auto py-4 px-6 space-y-8">
                    {/* Section 1: Project Information */}
                    <div className="space-y-4">
                        <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">Project Information</h3>

                        <div className="space-y-2">
                            <Label htmlFor="clientName" className="text-sm font-medium text-widget-mainHeader">
                                Client Name <span className="text-red-500">*</span>
                            </Label>

                            <div className="space-y-2">
                                <Input
                                    id="clientName"
                                    name="clientName"
                                    value={formData.clientName}
                                    className={
                                        errors.clientName
                                            ? "w-full border border-red-500 rounded-md"
                                            : "w-full"
                                    }
                                    onChange={handleInputChange}
                                    placeholder="e.g., Carta Worldwide"
                                />

                                {errors.clientName ? (
                                    <p className="text-xs text-red-500">
                                        {errors.clientName}
                                    </p>
                                ) : undefined}
                            </div>
                        </div>

                        <div className="flex gap-4">
                            <div className="flex-1 space-y-2">
                                <Label htmlFor="target" className="text-sm font-medium text-widget-mainHeader">
                                    Target URL <span className="text-red-500">*</span>
                                </Label>

                                <div className="space-y-2">
                                    <Input
                                        id="target"
                                        name="target"
                                        value={formData.target}
                                        className={
                                            errors.target
                                                ? "w-full border border-red-500 rounded-md"
                                                : "w-full"
                                        }
                                        onChange={handleInputChange}
                                        placeholder="e.g., https://www.example.com"
                                    />

                                    {errors.target ? (
                                        <p className="text-xs text-red-500">
                                            {errors.target}
                                        </p>
                                    ) : undefined}
                                </div>
                            </div>

                            <div className="flex-1 space-y-2">
                                <Label htmlFor="pentestName" className="text-sm font-medium text-widget-mainHeader">
                                    Configuration Name <span className="text-red-500">*</span>
                                </Label>

                                <div className="space-y-2">
                                    <Input
                                        id="pentestName"
                                        name="pentestName"
                                        value={formData.pentestName}
                                        className={
                                            errors.pentestName
                                                ? "w-full border border-red-500 rounded-md"
                                                : "w-full"
                                        }
                                        onChange={handleInputChange}
                                        placeholder="e.g., Canadian Internal Web Application Pentest - Q3 2025"
                                    />

                                    {errors.pentestName ? (
                                        <p className="text-xs text-red-500">
                                            {errors.pentestName}
                                        </p>
                                    ) : undefined}
                                </div>
                            </div>
                        </div>

                        <div className="flex-1 space-y-2">
                            <Label htmlFor="pentestDescription" className="text-sm font-medium text-widget-mainHeader">
                                Description <span className="text-red-500">*</span>
                            </Label>

                            <div className="space-y-2">
                                <Textarea
                                    rows={3}
                                    id="pentestDescription"
                                    name="pentestDescription"
                                    value={formData.pentestDescription}
                                    className={
                                        errors.pentestDescription
                                            ? "w-full ring-1 ring-red-500 rounded-md"
                                            : "w-full"
                                    }
                                    onChange={handleInputChange}
                                    placeholder="Enter Penetration Test Description"
                                />

                                {errors.pentestDescription ? (
                                    <p className="text-xs text-red-500">
                                        {errors.pentestDescription}
                                    </p>
                                ) : undefined}
                            </div>
                        </div>

                        {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <Label htmlFor="clientName" className="text-slate-300">
                                    Client Name <span className="text-red-400">*</span>
                                </Label>
                                <Input
                                    id="clientName"
                                    placeholder="e.g., Carta Worldwide"
                                    value={formData.clientName}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, clientName: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                    required
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="configName" className="text-slate-300">
                                    Pentest Configuration Name <span className="text-red-400">*</span>
                                </Label>
                                <Input
                                    id="configName"
                                    placeholder="e.g., Canadian Internal Network Pentest - Q3 2025"
                                    value={formData.pentestName}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, configName: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                    required
                                />
                            </div>
                        </div> */}
                    </div>

                    {/* Section 2: Target Scope */}
                    {/* <div className="space-y-4">
                        <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">Target Scope</h3>

                        <div className="space-y-4">
                            <Label className="text-slate-300">Scope Selection</Label>
                            <RadioGroup className="flex flex-wrap justify-between" value={formData.scopeType} onValueChange={handleScopeTypeChange}>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="array-ips" id="array-ips" className="border-slate-600" />
                                    <Label htmlFor="array-ips" className="text-slate-300">
                                        Array of IPs
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="ip-range" id="ip-range" className="border-slate-600" />
                                    <Label htmlFor="ip-range" className="text-slate-300">
                                        IP Range
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="cidr" id="cidr" className="border-slate-600" />
                                    <Label htmlFor="cidr" className="text-slate-300">
                                        CIDR Network Range
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="hostname" id="hostname" className="border-slate-600" />
                                    <Label htmlFor="hostname" className="text-slate-300">
                                        Host Name
                                    </Label>
                                </div>
                            </RadioGroup> */}

                    {/* Dynamic input based on scope type */}
                    {/* {formData.scopeType === "array-ips" && (
                                <div className="space-y-2">
                                    <Label className="text-slate-300">IP Addresses</Label>
                                    {formData.ipAddresses.map((ip, index) => (
                                        <div key={index} className="flex gap-2">
                                            <Input
                                                placeholder="192.168.1.1"
                                                value={ip}
                                                onChange={(e) => handleIpChange(index, e.target.value)}
                                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                            />
                                            {formData.ipAddresses.length > 1 && (
                                                <Button
                                                    type="button"
                                                    variant="outline"
                                                    size="icon"
                                                    onClick={() => removeIpField(index)}
                                                    className="border-slate-600 text-slate-400 hover:text-white"
                                                >
                                                    <Trash2 className="w-4 h-4" />
                                                </Button>
                                            )}
                                        </div>
                                    ))}
                                    <Button
                                        type="button"
                                        variant="outline"
                                        onClick={addIpField}
                                        className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                                    >
                                        <Plus className="w-4 h-4 mr-2" />
                                        Add IP
                                    </Button>
                                </div>
                            )}

                            {formData.scopeType === "ip-range" && (
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div className="space-y-2">
                                        <Label className="text-slate-300">Start IP</Label>
                                        <Input
                                            placeholder="192.168.1.1"
                                            value={formData.startIp}
                                            onChange={(e) => handleStartIpChange(e.target.value)}
                                            className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                        />
                                    </div>
                                    <div className="space-y-2">
                                        <Label className="text-slate-300">End IP</Label>
                                        <Input
                                            placeholder="192.168.1.254"
                                            value={formData.endIp}
                                            onChange={(e) => setFormData((prev) => ({ ...prev, endIp: e.target.value }))}
                                            className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                        />
                                    </div>
                                </div>
                            )}

                            {formData.scopeType === "cidr" && (
                                <div className="space-y-2">
                                    <Label className="text-slate-300">CIDR Network Range</Label>
                                    <Input
                                        placeholder="192.168.1.0/24"
                                        value={formData.cidrRange}
                                        onChange={(e) => setFormData((prev) => ({ ...prev, cidrRange: e.target.value }))}
                                        className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                    />
                                </div>
                            )}

                            {formData.scopeType === "hostname" && (
                                <div className="space-y-2">
                                    <Label className="text-slate-300">Host Name</Label>
                                    <Input
                                        placeholder="example.com"
                                        value={formData.hostName}
                                        onChange={(e) => setFormData((prev) => ({ ...prev, hostName: e.target.value }))}
                                        className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                    />
                                </div>
                            )} 
                        </div>
                    </div>*/}

                    {/* Section 3: Rules of Engagement & Scan Configuration */}
                    {/* <div className="space-y-4">
                        <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">
                            Rules of Engagement & Scan Configuration
                        </h3>

                        <div className="space-y-4">
                            <div className="space-y-2">
                                <div className="flex items-center gap-2">
                                    <Label className="text-slate-300">Test Aggressiveness</Label>
                                    <Tooltip>
                                        <TooltipTrigger>
                                            <Info className="w-4 h-4 text-slate-400" />
                                        </TooltipTrigger>
                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                            <p>
                                                Controls scan intensity. 'Aggressive' is more likely to be detected by firewalls or security
                                                teams.
                                            </p>
                                        </TooltipContent>
                                    </Tooltip>
                                </div>
                                <Select
                                    value={formData.aggressiveness}
                                    onValueChange={(value) => setFormData((prev) => ({ ...prev, aggressiveness: value }))}
                                >
                                    <SelectTrigger className="bg-slate-800 border-slate-600 text-white">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent className="bg-slate-800 border-slate-600">
                                        <SelectItem value="stealthy">Stealthy</SelectItem>
                                        <SelectItem value="normal">Normal (Recommended)</SelectItem>
                                        <SelectItem value="aggressive">Aggressive</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-3">
                                <Label className="text-slate-300">Allowed Actions</Label>
                                <div className="space-y-2">
                                    <div className="flex items-center space-x-2">
                                        <Checkbox
                                            id="exploitation"
                                            checked={formData.allowedActions.exploitation}
                                            onCheckedChange={(checked) =>
                                                setFormData((prev) => ({
                                                    ...prev,
                                                    allowedActions: { ...prev.allowedActions, exploitation: checked as boolean },
                                                }))
                                            }
                                            className="border-slate-600"
                                        />
                                        <Label htmlFor="exploitation" className="text-slate-300">
                                            Perform exploitation attempts
                                        </Label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <Checkbox
                                            id="passwordAttacks"
                                            checked={formData.allowedActions.passwordAttacks}
                                            onCheckedChange={(checked) =>
                                                setFormData((prev) => ({
                                                    ...prev,
                                                    allowedActions: { ...prev.allowedActions, passwordAttacks: checked as boolean },
                                                }))
                                            }
                                            className="border-slate-600"
                                        />
                                        <Label htmlFor="passwordAttacks" className="text-slate-300">
                                            Conduct password attacks
                                        </Label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <Checkbox
                                            id="hashDumping"
                                            checked={formData.allowedActions.hashDumping}
                                            onCheckedChange={(checked) =>
                                                setFormData((prev) => ({
                                                    ...prev,
                                                    allowedActions: { ...prev.allowedActions, hashDumping: checked as boolean },
                                                }))
                                            }
                                            className="border-slate-600"
                                        />
                                        <Label htmlFor="hashDumping" className="text-slate-300">
                                            Allow password/hash dumping
                                        </Label>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                        <Checkbox
                                            id="dosChecks"
                                            checked={formData.allowedActions.dosChecks}
                                            onCheckedChange={(checked) =>
                                                setFormData((prev) => ({
                                                    ...prev,
                                                    allowedActions: { ...prev.allowedActions, dosChecks: checked as boolean },
                                                }))
                                            }
                                            className="border-slate-600"
                                        />
                                        <Label htmlFor="dosChecks" className="text-slate-300 flex items-center gap-2">
                                            Perform Denial-of-Service (DoS) checks
                                            <Tooltip>
                                                <TooltipTrigger>
                                                    <Info className="w-4 h-4 text-red-400" />
                                                </TooltipTrigger>
                                                <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                    <p className="text-red-300">Warning: High Risk</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </Label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> */}

                    {/* Section 4: Agent Network Configuration */}
                    {/* <div className="space-y-4">
                        <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">
                            Agent Network Configuration
                        </h3>
                        <div className="flex items-center gap-2 mb-2">
                            <Tooltip>
                                <TooltipTrigger>
                                    <Info className="w-4 h-4 text-slate-400" />
                                </TooltipTrigger>
                                <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                    <p>Enter the IP settings of the machine running the pentest tool for report context.</p>
                                </TooltipContent>
                            </Tooltip>
                            <span className="text-sm text-slate-400">Network configuration for the testing agent</span>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="space-y-2">
                                <Label className="text-slate-300">Agent IP Address</Label>
                                <Input
                                    placeholder="192.168.1.100"
                                    value={formData.agentIp}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, agentIp: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                />
                            </div>
                            <div className="space-y-2">
                                <Label className="text-slate-300">Subnet Mask</Label>
                                <Input
                                    placeholder="255.255.255.0"
                                    value={formData.subnetMask}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, subnetMask: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                />
                            </div>
                            <div className="space-y-2">
                                <Label className="text-slate-300">Default Gateway</Label>
                                <Input
                                    placeholder="192.168.1.1"
                                    value={formData.defaultGateway}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, defaultGateway: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                />
                            </div>
                        </div>
                    </div> */}

                    {/* Form Actions */}
                    <div className="flex justify-end gap-3 pt-6 border-t border-slate-700">
                        <Button
                            type="button"
                            variant="outline"
                            onClick={onCancel}
                            className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                        >
                            Cancel
                        </Button>
                        <Button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white">
                            Save Configuration
                        </Button>
                    </div>
                </div>
            </form>
        </TooltipProvider >
    )
}
