import { RenderAppBreadcrumb } from "@/components/app-breadcrumb";
import { getCurrentUserId } from "@/ikon/utils/actions/auth";
import { getCurrentSoftwareId } from "@/ikon/utils/actions/software";
import { getUserDashboardPlatformUtilData } from "@/ikon/utils/actions/users";
import { getMyInstancesV2 } from "@/ikon/utils/api/processRuntimeService";
import { NetworkPentestFullInstanceData } from "@/app/NetworkPentestType";
import { createUserMap } from "@/app/utils/UserDetailsUtils";
import AddNetworkPentestBtnWithFormModal from "./components/AddNetworkPentestBtnWithFormModal";
import EachNetworkPentestWidget from "./components/EachNetworkPentestWidget";
import DataNotAvailableTemplate from "@/components/DataNotAvailableTemplate";

export const fetchPresentUserConfigDetails = async () => {
    const presentUserId = await getCurrentUserId();
    const softwareId = await getCurrentSoftwareId();
    const pentestAdminGroupDetails = await getUserDashboardPlatformUtilData({ softwareId, isGroupNameWiseUserDetailsMap: true, groupNames: ["Pentest Admin"] });
    const pentestAdminUsers = Object.keys(pentestAdminGroupDetails["Pentest Admin"].users);

    console.log("Pentest Admin Users: ", pentestAdminUsers);

    const configInstances = await getMyInstancesV2<NetworkPentestFullInstanceData>({
        processName: "Network Pentest",
        predefinedFilters: { taskName: "Pentest Details View" },
        processVariableFilters: pentestAdminUsers.includes(presentUserId) ? null : { created_by_id: presentUserId },
        projections: ["Data"],
    });

    let configDataArray: NetworkPentestFullInstanceData[] = [];
    if (configInstances.length) {
        configDataArray = configInstances.map(eachInstance => eachInstance.data);
    }

    return configDataArray;
}

export default async function NetworkPentestConfig() {
    const presentUserConfigDetails: NetworkPentestFullInstanceData[] = await fetchPresentUserConfigDetails();
    console.log("Fetched Config Details: ", presentUserConfigDetails);

    const userIdNameMap: { value: string; label: string }[] = await createUserMap();

    return (
        <>
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 0,
                    title: "Configuration",
                }}
            />
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 1,
                    title: "PenTest Configuration",
                    href: "/configuration/pentest-configs",
                }}
            />
            <RenderAppBreadcrumb
                breadcrumb={{
                    level: 2,
                    title: "Network PenTest Configuration",
                    href: "/configuration/pentest-configs/network-pentest-config",
                }}
            />

            {/* <div className="flex-1">
                <NetworkPentestConfigModule />
            </div> */}

            <div className="flex-1 space-y-6">
                <div className="flex justify-between items-center">
                    <div>
                        <h2 className="text-xl font-semibold text-blue-400 mb-1">
                            Network Pentest Configurations
                            <span className="ml-2 text-sm bg-blue-600 text-white px-2 py-1 rounded-full">{presentUserConfigDetails.length}</span>
                        </h2>
                    </div>

                    <AddNetworkPentestBtnWithFormModal />
                </div>

                {!presentUserConfigDetails.length ?
                    <DataNotAvailableTemplate headerText="No Saved Network Pentest Configs" descriptionText="Configure your network penetration tests and start scanning" /> :
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {presentUserConfigDetails.map((config) => (
                            <EachNetworkPentestWidget key={config.pentest_id} pentestBasicDetails={config} userIdNameMap={userIdNameMap} />
                        ))}
                    </div>}
            </div>
        </>
    )
}