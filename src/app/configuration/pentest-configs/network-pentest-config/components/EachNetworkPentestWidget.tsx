"use client";

import { NetworkPentestFullInstanceData } from "@/app/NetworkPentestType"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Edit, MoreHorizontal, Trash2 } from "lucide-react"
import { useState } from "react"
import { deleteConfigWithKey } from "@/utils/api"
import { NetworkPentestConfigForm } from "./NetworkPentestConfigForm"
import { format } from "date-fns";
import { useDialog } from "@/components/alert-dialog/dialog-context";
import { deleteProcessInstance, getMyInstancesV2 } from "@/ikon/utils/api/processRuntimeService";
import { toast } from "@/lib/toast";
import GlobalLoader from "@/components/GlobalLoader";

export default function EachNetworkPentestWidget({ pentestBasicDetails, userIdNameMap }: {
    pentestBasicDetails: NetworkPentestFullInstanceData;
    userIdNameMap: { value: string; label: string }[];
}) {
    const { openDialog } = useDialog();
    const [isEditFormOpen, setEditFormOpen] = useState(false);
    const [loading, setLoading] = useState(false);

    const toggleFormModal = function () {
        setEditFormOpen((prev) => !prev);
    };

    const handleConfirmDelete = async (pentest_id: string) => {
        setLoading(true);

        const fileSystemConfigInstance = await getMyInstancesV2<NetworkPentestFullInstanceData>({
            processName: "Network Pentest",
            predefinedFilters: { taskName: "Pentest Details View" },
            processVariableFilters: { pentest_id: pentest_id },
            projections: ["Data.pentest_name, Data.pentest_id"]
        });

        try {
            await deleteProcessInstance({ processInstanceId: fileSystemConfigInstance[0].processInstanceId });

            toast.push("Network Pentest Configuration Deleted Successfully", "success");
            setLoading(false);
        } catch (error) {
            console.error("Failed to update date:", error);
            toast.push("Error in deleting Network Pentest Configuration", "error");
            setLoading(false);
        }
    }

    const handleDeleteConfig = async function (pentest_id: string) {
        openDialog({
            title: "Confirm Delete",
            description: "This will delete this Network Pentest Configuration permanently!",
            confirmText: "Delete",
            cancelText: "Cancel",
            onCancel: () => console.log("Delete cancelled"),
            onConfirm: () => handleConfirmDelete(pentest_id),
            confirmVariant: "red"
        });

    };

    const checkTitleStr = (title: string) => {
        return title.length > 45 ? title.substring(0, 45) + "..." : title;
    }

    if (loading) return <GlobalLoader />;

    return (
        <>
            <Card key={pentestBasicDetails.pentest_id} className="bg-slate-800 border-slate-700 hover:bg-slate-750 transition-colors">
                <CardHeader className="p-0 px-6 py-3">
                    <div className="flex justify-between items-start">
                        <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                                <div
                                    className="text-blue-800 dark:text-blue-500 bg-blue-100 dark:bg-blue-500/20 flex h-12 w-12 shrink-0 items-center justify-center rounded-full text-tremor-default font-medium"
                                    aria-hidden={true}
                                >
                                    {pentestBasicDetails.pentest_name
                                        .split(" ")
                                        .map((word) => word[0])
                                        .join("")
                                        .slice(0, 2)}
                                </div>
                                <CardTitle title={pentestBasicDetails.pentest_name} className="text-white text-base">
                                    {checkTitleStr(pentestBasicDetails.pentest_name)}
                                </CardTitle>
                            </div>
                        </div>
                        <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm" className="text-slate-400 hover:text-white">
                                    <MoreHorizontal className="w-4 h-4" />
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="bg-slate-800 border-slate-700">
                                <DropdownMenuItem onClick={toggleFormModal} title="Edit Configuration"
                                    className="text-slate-300 hover:text-white hover:bg-slate-700">
                                    <Edit className="w-4 h-4 mr-2" />
                                    Edit
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => handleDeleteConfig(pentestBasicDetails.pentest_id)} className="text-red-400 hover:text-red-300
                                hover:bg-slate-700">
                                    <Trash2 className="w-4 h-4 mr-2" />
                                    Delete
                                </DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenu>
                    </div>
                </CardHeader>
                <CardContent className="space-y-3">
                    <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                            <p className="text-slate-400">Client Name</p>
                            <p className="text-white font-medium">{pentestBasicDetails.client_name}</p>
                        </div>
                        <div>
                            <p className="text-slate-400">Scope Type</p>
                            <p className="text-white font-medium">{pentestBasicDetails.scope_type}</p>
                        </div>
                    </div>

                    <div className="flex justify-between items-center text-sm">
                        <div>
                            <p className="text-slate-400 mb-1">Aggressiveness</p>
                            <span
                                className={`inline-flex px-2 py-1 rounded-full text-xs font-medium ${pentestBasicDetails.aggressiveness === "Stealthy"
                                    ? "bg-green-900 text-green-300"
                                    : pentestBasicDetails.aggressiveness === "Normal"
                                        ? "bg-blue-900 text-blue-300"
                                        : "bg-red-900 text-red-300"
                                    }`}
                            >
                                {pentestBasicDetails.aggressiveness}
                            </span>
                        </div>
                    </div>

                    <div className="pt-2 border-t border-slate-700">
                        <div className="grid grid-cols-2 gap-4 text-xs text-slate-400">
                            <div>
                                <p>Created By</p>
                                <p className="text-white">
                                    {userIdNameMap.find((user) => user.value === pentestBasicDetails.created_by_id)?.label || "N/A"}
                                </p>
                            </div>
                            <div>
                                <p>Created On</p>
                                <p className="text-white">{format(pentestBasicDetails.created_on, "dd-MMM-yyyy hh:mm:ss")}</p>
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>


            <NetworkPentestConfigForm
                isFormModalOpen={isEditFormOpen}
                onClose={toggleFormModal}
                savedDataToBePopulated={pentestBasicDetails}
            />
        </>
    )
}