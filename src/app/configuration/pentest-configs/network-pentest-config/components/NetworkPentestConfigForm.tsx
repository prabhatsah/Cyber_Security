"use client"

import type React from "react"

import { ChangeEvent, useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/Input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import { Plus, Trash2, Info, X } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Dialog, DialogPanel, Select, SelectItem, Textarea } from "@tremor/react"
import IpInput from "@/components/IpInput"
import CidrInput from "@/components/CidrInput"
import { NetworkDetails } from "@/app/pen-test/network-pen-test/components/type"

interface NetworkPentestConfigFormProps {
    isFormModalOpen: boolean;
    onClose: () => void;
    savedDataToBePopulated?: NetworkDetails
}

interface ErrorState {
    [key: string]: string | Array<string>;
}

export function NetworkPentestConfigForm({ isFormModalOpen, onClose, savedDataToBePopulated }: NetworkPentestConfigFormProps) {
    const [formData, setFormData] = useState({
        clientName: savedDataToBePopulated?.clientName ?? "",
        pentestName: savedDataToBePopulated?.pentestName ?? "",
        pentestDescription: savedDataToBePopulated?.pentestDescription ?? "",
        scopeType: savedDataToBePopulated?.scopeType ?? "Array of IPs",
        aggressiveness: savedDataToBePopulated?.aggressiveness ?? "",
        ipAddresses: savedDataToBePopulated ? [...savedDataToBePopulated.ipAddresses] : [""],
        startIp: savedDataToBePopulated?.startIp ?? "",
        endIp: savedDataToBePopulated?.endIp ?? "",
        cidrRange: savedDataToBePopulated?.cidrRange ?? "",
        hostName: savedDataToBePopulated?.hostName ?? "",
        allowedActions: savedDataToBePopulated ? [...savedDataToBePopulated.allowedActions] : [""],
        agentIp: savedDataToBePopulated?.agentIp ?? "",
        subnetMask: savedDataToBePopulated?.subnetMask ?? "",
        defaultGateway: savedDataToBePopulated?.defaultGateway ?? "",
    });
    const [errors, setErrors] = useState<ErrorState>({});
    const [startIpDisabledState, setStartIpDisabledState] = useState<boolean[]>([false, false, false, false]);
    const [endIpDisabledState, setEndIpDisabledState] = useState<boolean[]>([false, false, false, false]);

    // Validate form
    const validateForm = (): boolean => {
        const newErrors: ErrorState = {};

        const checkIpValidOrNot = (ip: string): boolean => {
            return ip.split(".").every(eachPart => eachPart !== "");
        };


        if (!formData.clientName) {
            newErrors.clientName = "Client Name cannot be blank. Please provide a valid Client Name";
        }
        else if (formData.clientName.trim().length < 3) {
            newErrors.clientName =
                "Client Name must be at least 3 characters long. Please provide a valid Client Name";
        }

        if (!formData.pentestName) {
            newErrors.pentestName = "Configuration Name cannot be blank. Please provide a valid Configuration Name";
        }
        else if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Configuration Name must be at least 3 characters long. Please provide a valid Configuration Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }
        else if (formData.pentestDescription.trim().length < 3) {
            newErrors.pentestDescription =
                "Description must be at least 3 characters long. Please provide a valid Description";
        }

        if (!formData.scopeType.trim()) {
            newErrors.scopeType = "Please select a Scope!";
        }

        if (formData.scopeType === "Array of IPs") {
            newErrors.ipAddresses = [];

            formData.ipAddresses.forEach((eachIp, eachIpIndex) => {
                if (!eachIp || eachIp === "...") {
                    const startErrorMsg = formData.ipAddresses.length === 1 ? "At least 1 IP Address must be provided. Please provide a valid IP Address" :
                        "IP Address cannot be blank. Please provide a valid IP Address or delete this field";
                    (newErrors.ipAddresses as string[])[eachIpIndex] = startErrorMsg;
                }

                if (!checkIpValidOrNot(eachIp) && !newErrors.ipAddresses[eachIpIndex]) {
                    (newErrors.ipAddresses as string[])[eachIpIndex] = `Please provide a valid IP Address 
                         ${formData.ipAddresses.length !== 1 ? "or delete this field" : ""}`;
                }
            });

            newErrors.ipAddresses.length === 0 ? delete newErrors.ipAddresses : undefined;
        }


        if (formData.scopeType === "IP Range" && !formData.startIp.trim()) {
            newErrors.startIp = "Lower limit of the IP range cannot be blank. Please provide a valid IP Address";
        } else if (formData.scopeType === "IP Range" && formData.startIp.trim()) {
            if (!checkIpValidOrNot(formData.startIp) && !newErrors.startIp) {
                newErrors.startIp = "Please provide a valid IP Address";
            }
        }

        if (formData.scopeType === "IP Range" && !formData.endIp.trim()) {
            newErrors.endIp = "Upper limit of the IP range cannot be blank. Please provide a valid IP Address";
        } else if (formData.scopeType === "IP Range" && formData.endIp.trim()) {
            if (!checkIpValidOrNot(formData.endIp) && !newErrors.endIp) {
                newErrors.endIp = "Please provide a valid IP Address";
            }
        }

        const isIpRangeMismatch = formData.startIp.split(".").every((part, partIndex) => parseInt(part) <= parseInt(formData.endIp.split(".")[partIndex]));
        if (!isIpRangeMismatch) {
            newErrors.startIp = "Please provide a valid IP Range";
            newErrors.endIp = "Please provide a valid IP Range";
        }

        if (formData.scopeType === "CIDR Network Range" && !formData.cidrRange.trim()) {
            newErrors.cidrRange = "CIDR range cannot be blank. Please provide a valid CIDR range";
        } else if (formData.scopeType === "CIDR Network Range" && formData.cidrRange.trim() && (!checkIpValidOrNot(formData.cidrRange) || !formData.cidrRange.split("/")[1])) {
            newErrors.cidrRange = "Please provide a valid CIDR range";
        }

        if (formData.scopeType === "Host Name" && !formData.hostName.trim()) {
            newErrors.hostName = "Host Name cannot be blank. Please provide a valid Host Name";
        } else if (formData.scopeType === "Host Name" && !formData.hostName.startsWith("http://") && !formData.hostName.startsWith("https://")) {
            newErrors.hostName = "Host Name must start with 'http://' or 'https://'. Please provide a valid Host Name";
        } else if (formData.scopeType === "Host Name") {
            try {
                new URL(formData.hostName);
            } catch (e) {
                newErrors.hostName = "Please provide a valid Host Name.";
            }
        }

        if (!formData.aggressiveness.trim()) {
            newErrors.aggressiveness = "Please select Test Aggressiveness";
        }

        // if (formData.allowedActions.length === 0 || (!formData.allowedActions[0])) {
        //     newErrors.allowedActions = "Please select one or more actions to be performed"
        // }

        if (!formData.agentIp.trim()) {
            newErrors.agentIp = "Agent IP cannot be blank. Please provide a valid Agent IP!";
        } else if (!checkIpValidOrNot(formData.agentIp)) {
            newErrors.agentIp = "Please provide a valid Agent IP!";
        }

        if (!formData.subnetMask.trim()) {
            newErrors.subnetMask = "Subnet Mask cannot be blank. Please provide a valid Subnet Mask!";
        } else if (!checkIpValidOrNot(formData.subnetMask)) {
            newErrors.subnetMask = "Please provide a valid Subnet Mask!";
        }

        if (!formData.defaultGateway) {
            newErrors.defaultGateway = "Default Gateway must be specified. Please provide a valid Default Gateway!";
        } else if (!checkIpValidOrNot(formData.defaultGateway)) {
            newErrors.defaultGateway = "Please provide a valid Default Gateway!";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const addIpField = () => {
        setFormData((prev) => ({ ...prev, ipAddresses: [...prev.ipAddresses, ""] }))
    }

    const removeIpField = (index: number) => {
        const newIps = formData.ipAddresses.filter((_, i) => i !== index)
        setFormData((prev) => ({ ...prev, ipAddresses: newIps }))
    }

    // Standard input handler
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLTextAreaElement> | any
    ) => {
        const { name, value } = e.target;
        setErrors({});
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleIpInputChange = (inputName: string, ip: string, inputIndex: number | undefined) => {
        setErrors({});
        const fieldName = inputName.split("-")[0];

        if (fieldName === "ipAddresses" && typeof inputIndex === "number") {
            const newIps = [...formData.ipAddresses];
            newIps[inputIndex] = ip;
            setFormData((prev) => ({ ...prev, [fieldName]: newIps }));
        } else {
            setFormData((prev) => ({ ...prev, [fieldName]: ip }));
        }
    };

    const handleAllowedActionChange = (isChecked: boolean, actionName: string) => {
        let prevAllowedActions = [...formData.allowedActions];
        prevAllowedActions = prevAllowedActions.filter(eachAction => eachAction !== "");

        if (!isChecked && prevAllowedActions.includes(actionName)) {
            prevAllowedActions = prevAllowedActions.filter(eachAction => eachAction !== actionName);
        }
        else if (isChecked && !prevAllowedActions.includes(actionName)) {
            prevAllowedActions.push(actionName);
        }

        setFormData((prev) => ({ ...prev, allowedActions: prevAllowedActions }));
    }

    const handleIpRangeChange = (inputName: string, value: string,) => {
        const fieldName = inputName.split("-")[0];

        if (fieldName === "startIp") {
            const startIpArray = value.split(".");

            let newEndIp = "";
            if (!formData.endIp) {
                newEndIp = startIpArray[0] + "." + startIpArray[1] + "..";
            } else {
                const endIpArray = formData.endIp.split(".");
                endIpArray[0] = startIpArray[0];
                endIpArray[1] = startIpArray[1];
                newEndIp = endIpArray.join(".");
            }

            setFormData((prev) => ({ ...prev, startIp: value, endIp: newEndIp }));
            const endIpDisabledStateTemp = [false, false, false, false];
            endIpDisabledStateTemp[0] = startIpArray[0] ? true : false;
            endIpDisabledStateTemp[1] = startIpArray[1] ? true : false;
            setEndIpDisabledState(endIpDisabledStateTemp);
        }
        else if (fieldName === "endIp") {
            const endIpArray = value.split(".");

            let newStartIp = "";
            if (!formData.endIp) {
                newStartIp = endIpArray[0] + "." + endIpArray[1] + "..";
            } else {
                const startIpArray = formData.startIp.split(".");
                startIpArray[0] = endIpArray[0];
                startIpArray[1] = endIpArray[1];
                newStartIp = startIpArray.join(".");
            }

            setFormData((prev) => ({ ...prev, startIp: newStartIp, endIp: value }));
            const startIpDisabledStateTemp = [false, false, false, false];
            startIpDisabledStateTemp[0] = endIpArray[0] ? true : false;
            startIpDisabledStateTemp[1] = endIpArray[1] ? true : false;
            setStartIpDisabledState(startIpDisabledStateTemp);
        }
    }

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        validateForm();

        console.log("Network Pentest Data to be saved: ", formData);
    }

    const handleClose = () => {
        // if (!savedDataToBePopulated) {
        //     setFormData({
        //         clientName: "",
        //         pentestName: "",
        //         pentestDescription: "",
        //         scopeType: "Array of IPs",
        //         aggressiveness: "",
        //         ipAddresses: [""],
        //         startIp: "",
        //         endIp: "",
        //         cidrRange: "",
        //         hostName: "",
        //         allowedActions: [""],
        //         agentIp: "",
        //         subnetMask: "",
        //         defaultGateway: "",
        //     });
        // }
        setFormData({
            clientName: savedDataToBePopulated?.clientName ?? "",
            pentestName: savedDataToBePopulated?.pentestName ?? "",
            pentestDescription: savedDataToBePopulated?.pentestDescription ?? "",
            scopeType: savedDataToBePopulated?.scopeType ?? "Array of IPs",
            aggressiveness: savedDataToBePopulated?.aggressiveness ?? "",
            ipAddresses: savedDataToBePopulated ? [...savedDataToBePopulated.ipAddresses] : [""],
            startIp: savedDataToBePopulated?.startIp ?? "",
            endIp: savedDataToBePopulated?.endIp ?? "",
            cidrRange: savedDataToBePopulated?.cidrRange ?? "",
            hostName: savedDataToBePopulated?.hostName ?? "",
            allowedActions: savedDataToBePopulated ? [...savedDataToBePopulated.allowedActions] : [""],
            agentIp: savedDataToBePopulated?.agentIp ?? "",
            subnetMask: savedDataToBePopulated?.subnetMask ?? "",
            defaultGateway: savedDataToBePopulated?.defaultGateway ?? "",
        });
        setErrors({});

        onClose();
    };

    return (
        <Dialog open={isFormModalOpen} onClose={onClose} static={true}>
            <DialogPanel className="overflow-visible rounded-md p-0 sm:max-w-5xl">
                <TooltipProvider>
                    <form action="#" method="POST" onSubmit={handleSubmit}>
                        {/* Form Header */}
                        <div className="flex justify-between items-center gap-3 py-4 px-6 border-b border-slate-200 dark:border-slate-700">
                            <h3 className="text-xl text-tremor-content-strong dark:text-dark-tremor-content-strong">
                                Configure Network Penetration Test
                            </h3>
                            <button type="button" aria-label="Close" onClick={() => handleClose()}
                                className="rounded-sm p-2 text-tremor-content-subtle hover:bg-tremor-background-subtle hover:text-tremor-content
                            dark:text-dark-tremor-content-subtle hover:dark:bg-dark-tremor-background-subtle hover:dark:text-tremor-content">
                                <X className="size-5 shrink-0" aria-hidden={true} />
                            </button>
                        </div>

                        <div className="max-h-[80vh] overflow-y-auto py-4 px-6 space-y-8">
                            {/* Section 1: Project Information */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Project Information</h3>

                                <div className="flex gap-4">
                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="clientName" className="text-sm font-medium text-widget-mainHeader">
                                            Client Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="clientName"
                                                name="clientName"
                                                value={formData.clientName}
                                                disabled={savedDataToBePopulated ? true : false}
                                                className={
                                                    errors.clientName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Carta Worldwide"
                                            />

                                            {errors.clientName && (
                                                <p className="text-xs text-red-500">
                                                    {errors.clientName}
                                                </p>
                                            )}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="pentestName" className="text-sm font-medium text-widget-mainHeader">
                                            Configuration Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="pentestName"
                                                name="pentestName"
                                                value={formData.pentestName}
                                                className={
                                                    errors.pentestName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Canadian Internal Web Application Pentest - Q3 2025"
                                            />

                                            {errors.pentestName && (
                                                <p className="text-xs text-red-500">
                                                    {errors.pentestName}
                                                </p>
                                            )}
                                        </div>
                                    </div>
                                </div>


                                <div className="flex-1 space-y-2">
                                    <Label htmlFor="pentestDescription" className="text-sm font-medium text-widget-mainHeader">
                                        Description <span className="text-red-500">*</span>
                                    </Label>

                                    <div className="space-y-2">
                                        <Textarea
                                            rows={3}
                                            id="pentestDescription"
                                            name="pentestDescription"
                                            value={formData.pentestDescription}
                                            className={
                                                errors.pentestDescription
                                                    ? "w-full ring-1 ring-red-500 rounded-md"
                                                    : "w-full"
                                            }
                                            onChange={handleInputChange}
                                            placeholder="Enter Penetration Test Description"
                                        />

                                        {errors.pentestDescription && (
                                            <p className="text-xs text-red-500">
                                                {errors.pentestDescription}
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </div>

                            {/* Section 2: Target Scope */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Target Scope</h3>

                                <div className="space-y-4">
                                    <Label className="text-sm font-medium text-widget-mainHeader">
                                        Scope Selection <span className="text-red-500">*</span>
                                    </Label>

                                    <RadioGroup className="flex flex-wrap justify-between" value={formData.scopeType}
                                        onValueChange={(value) => {
                                            setErrors((prev) => ({ ...prev, scopeType: "" }));
                                            setFormData((prev) => ({ ...prev, scopeType: value }));
                                        }}
                                    >
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="Array of IPs" id="array-ips"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="array-ips" className="text-slate-300">
                                                Array of IPs
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="IP Range" id="ip-range"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="ip-range" className="text-slate-300">
                                                IP Range
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="CIDR Network Range" id="cidr"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="cidr" className="text-slate-300">
                                                CIDR Network Range
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="Host Name" id="hostname"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="hostname" className="text-slate-300">
                                                Host Name
                                            </Label>
                                        </div>
                                    </RadioGroup>

                                    {errors.scopeType && (
                                        <p className="text-xs text-red-500">
                                            {errors.scopeType}
                                        </p>
                                    )}
                                </div>


                                <div className="space-y-2">
                                    {/* Dynamic input based on scope type */}
                                    {formData.scopeType === "Array of IPs" && (
                                        <div className="space-y-2">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                IP Addresses <span className="text-red-500">*</span>
                                            </Label>
                                            {formData.ipAddresses.map((ip, index) => (
                                                <div key={`ip-address-${index}`} className="flex flex-col gap-1">
                                                    <div key={index} className="flex gap-2">
                                                        <IpInput
                                                            name="ipAddresses"
                                                            id="ipAddresses"
                                                            className="w-80"
                                                            error={!!errors.ipAddresses && !!errors.ipAddresses[index]}
                                                            value={ip}
                                                            inputIndex={index}
                                                            onChangeFunction={handleIpInputChange}
                                                            disabled={savedDataToBePopulated ? true : false}
                                                        />

                                                        {(!savedDataToBePopulated && formData.ipAddresses.length > 1) && (
                                                            <Button
                                                                type="button"
                                                                variant="outline"
                                                                size="icon"
                                                                onClick={() => removeIpField(index)}
                                                                className="border-slate-600 text-slate-400 hover:text-white"
                                                            >
                                                                <Trash2 className="w-4 h-4" />
                                                            </Button>
                                                        )}
                                                    </div>


                                                    {errors.ipAddresses && errors.ipAddresses[index] && (
                                                        <p className="text-xs text-red-500">
                                                            {errors.ipAddresses[index]}
                                                        </p>
                                                    )}
                                                </div>
                                            ))}
                                            <Button
                                                type="button"
                                                variant="outline"
                                                onClick={addIpField}
                                                className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                                            >
                                                <Plus className="w-4 h-4" />
                                                Add IP
                                            </Button>
                                        </div>
                                    )}

                                    {formData.scopeType === "IP Range" && (
                                        <div className="flex gap-11">
                                            <div className="flex-1 space-y-2">
                                                <Label className="text-sm font-medium text-widget-mainHeader">
                                                    Start IP <span className="text-red-500">*</span>
                                                </Label>
                                                <IpInput
                                                    name="startIp"
                                                    id="startIp"
                                                    error={!!errors.startIp}
                                                    value={formData.startIp}
                                                    onChangeFunction={handleIpRangeChange}
                                                    disabledSegments={savedDataToBePopulated ? [true, true, true, true] : startIpDisabledState}
                                                />

                                                {errors.startIp && (
                                                    <p className="text-xs text-red-500">
                                                        {errors.startIp}
                                                    </p>
                                                )}
                                            </div>
                                            <div className="flex-1 space-y-2">
                                                <Label className="text-sm font-medium text-widget-mainHeader">
                                                    End IP <span className="text-red-500">*</span>
                                                </Label>
                                                <IpInput
                                                    name="endIp"
                                                    id="endIp"
                                                    error={!!errors.endIp}
                                                    value={formData.endIp}
                                                    onChangeFunction={handleIpRangeChange}
                                                    disabledSegments={savedDataToBePopulated ? [true, true, true, true] : endIpDisabledState}
                                                />

                                                {errors.endIp && (
                                                    <p className="text-xs text-red-500">
                                                        {errors.endIp}
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                    )}

                                    {formData.scopeType === "CIDR Network Range" && (
                                        <div className="space-y-2 w-96">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                CIDR Network Range <span className="text-red-500">*</span>
                                            </Label>
                                            <CidrInput
                                                name="cidrRange"
                                                id="cidrRange"
                                                error={!!errors.cidrRange}
                                                value={formData.cidrRange}
                                                onChangeFunction={handleIpInputChange}
                                                disabled={savedDataToBePopulated ? true : false}
                                            />

                                            {errors.cidrRange && (
                                                <p className="text-xs text-red-500">
                                                    {errors.cidrRange}
                                                </p>
                                            )}
                                        </div>
                                    )}

                                    {formData.scopeType === "Host Name" && (
                                        <div className="space-y-2">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                Host Name <span className="text-red-500">*</span>
                                            </Label>
                                            <Input
                                                id="hostName"
                                                name="hostName"
                                                value={formData.hostName}
                                                className={
                                                    errors.hostName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="example.com"
                                                disabled={savedDataToBePopulated ? true : false}
                                            />

                                            {errors.hostName && (
                                                <p className="text-xs text-red-500">
                                                    {errors.hostName}
                                                </p>
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Section 3: Rules of Engagement & Scan Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">
                                    Rules of Engagement & Scan Configuration
                                </h3>

                                <div className="space-y-4">
                                    <div className="space-y-2">
                                        <div className="flex items-center gap-2">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                Test Aggressiveness <span className="text-red-500">*</span>
                                            </Label>
                                            <Tooltip>
                                                <TooltipTrigger>
                                                    <Info className="w-4 h-4 text-slate-400" />
                                                </TooltipTrigger>
                                                <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                    <p>
                                                        Controls scan intensity. 'Aggressive' is more likely to be detected by firewalls or security
                                                        teams.
                                                    </p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </div>
                                        <Select
                                            id="priorityLevel"
                                            name="priorityLevel"
                                            value={formData.aggressiveness}
                                            className={
                                                errors.aggressiveness
                                                    ? "w-full border border-red-500"
                                                    : "w-full"
                                            }
                                            onValueChange={(val) => {
                                                setFormData((prev) => ({ ...prev, aggressiveness: val }))
                                            }}
                                            disabled={savedDataToBePopulated ? true : false}
                                        >
                                            <SelectItem value="Stealthy">Stealthy</SelectItem>
                                            <SelectItem value="Normal">Normal (Recommended)</SelectItem>
                                            <SelectItem value="Aggressive">Aggressive</SelectItem>
                                        </Select>


                                        {errors.aggressiveness && (
                                            <p className="text-xs text-red-500">
                                                {errors.aggressiveness}
                                            </p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">Allowed Actions</Label>
                                        <div className="space-y-2">
                                            {/* <div className="flex items-center gap-6"> */}
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="exploitation"
                                                    checked={formData.allowedActions.includes("exploitation")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "exploitation")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="exploitation" className="text-sm font-medium text-widget-mainHeader">
                                                    Perform exploitation attempts
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="passwordAttacks"
                                                    checked={formData.allowedActions.includes("passwordAttacks")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "passwordAttacks")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="passwordAttacks" className="text-sm font-medium text-widget-mainHeader">
                                                    Conduct password attacks
                                                </Label>
                                            </div>
                                            {/* </div> */}

                                            {/* <div className="flex justify-between items-center gap-6"> */}
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="hashDumping"
                                                    checked={formData.allowedActions.includes("hashDumping")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "hashDumping")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="hashDumping" className="text-sm font-medium text-widget-mainHeader">
                                                    Allow password/hash dumping
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="dosChecks"
                                                    checked={formData.allowedActions.includes("dosChecks")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "dosChecks")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="dosChecks" className="text-sm font-medium text-widget-mainHeader flex items-center gap-2">
                                                    Perform Denial-of-Service (DoS) checks
                                                    <Tooltip>
                                                        <TooltipTrigger>
                                                            <Info className="w-4 h-4 text-red-400" />
                                                        </TooltipTrigger>
                                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                            <p className="text-red-300">Warning: High Risk</p>
                                                        </TooltipContent>
                                                    </Tooltip>
                                                </Label>
                                            </div>
                                            {/* </div> */}
                                        </div>


                                        {errors.allowedActions && (
                                            <p className="text-xs text-red-500">
                                                {errors.allowedActions}
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </div>

                            {/* Section 4: Agent Network Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">
                                    Agent Network Configuration
                                </h3>
                                <div className="flex items-center gap-2 mb-2">
                                    <Tooltip>
                                        <TooltipTrigger>
                                            <Info className="w-4 h-4 text-slate-400" />
                                        </TooltipTrigger>
                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                            <p>Enter the IP settings of the machine running the pentest tool for report context.</p>
                                        </TooltipContent>
                                    </Tooltip>
                                    <span className="text-sm text-slate-400">Network configuration for the testing agent</span>
                                </div>

                                <div className="flex gap-11">
                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Agent IP Address <span className="text-red-500">*</span>
                                        </Label>
                                        <IpInput
                                            name="agentIp"
                                            id="agentIp"
                                            error={!!errors.agentIp}
                                            value={formData.agentIp}
                                            onChangeFunction={handleIpInputChange}
                                            disabled={savedDataToBePopulated ? true : false}
                                        />

                                        {errors.agentIp && (
                                            <p className="text-xs text-red-500">
                                                {errors.agentIp}
                                            </p>
                                        )}
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Subnet Mask <span className="text-red-500">*</span>
                                        </Label>
                                        <IpInput
                                            name="subnetMask"
                                            id="subnetMask"
                                            error={!!errors.subnetMask}
                                            value={formData.subnetMask}
                                            onChangeFunction={handleIpInputChange}
                                            disabled={savedDataToBePopulated ? true : false}
                                        />

                                        {errors.subnetMask && (
                                            <p className="text-xs text-red-500">
                                                {errors.subnetMask}
                                            </p>
                                        )}
                                    </div>
                                </div>

                                <div className="space-y-2 w-1/2">
                                    <Label className="text-sm font-medium text-widget-mainHeader">
                                        Default Gateway <span className="text-red-500">*</span>
                                    </Label>
                                    <IpInput
                                        name="defaultGateway"
                                        id="defaultGateway"
                                        error={!!errors.defaultGateway}
                                        value={formData.defaultGateway}
                                        onChangeFunction={handleIpInputChange}
                                        disabled={savedDataToBePopulated ? true : false}
                                    />

                                    {errors.defaultGateway && (
                                        <p className="text-xs text-red-500">
                                            {errors.defaultGateway}
                                        </p>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Form Actions */}
                        <div className="flex justify-end gap-3 py-4 px-8 border-t border-slate-200 dark:border-slate-700">
                            <Button type="button" variant="outline" onClick={onClose} className="border-slate-600 text-slate-300 hover:text-white bg-transparent">
                                Cancel
                            </Button>
                            <Button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white">
                                Save Configuration
                            </Button>
                        </div>
                    </form>
                </TooltipProvider>
            </DialogPanel>
        </Dialog >
    )
}
