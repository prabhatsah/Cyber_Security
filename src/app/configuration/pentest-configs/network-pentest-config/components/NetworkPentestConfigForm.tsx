"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Trash2, Info } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface NetworkPentestConfigFormProps {
    onSave: (config: {
        clientName: string
        configName: string
        scopeType: string
        aggressiveness: string
    }) => void
    onCancel: () => void
}

export function NetworkPentestConfigForm({ onSave, onCancel }: NetworkPentestConfigFormProps) {
    const [formData, setFormData] = useState({
        clientName: "",
        configName: "",
        scopeType: "array-ips",
        aggressiveness: "normal",
        ipAddresses: [""],
        startIp: "",
        endIp: "",
        cidrRange: "",
        hostName: "",
        allowedActions: {
            exploitation: false,
            passwordAttacks: false,
            hashDumping: false,
            dosChecks: false,
        },
        agentIp: "",
        subnetMask: "",
        defaultGateway: "",
    })

    const handleScopeTypeChange = (value: string) => {
        setFormData((prev) => ({ ...prev, scopeType: value }))
    }

    const handleIpChange = (index: number, value: string) => {
        const newIps = [...formData.ipAddresses]
        newIps[index] = value
        setFormData((prev) => ({ ...prev, ipAddresses: newIps }))
    }

    const addIpField = () => {
        setFormData((prev) => ({ ...prev, ipAddresses: [...prev.ipAddresses, ""] }))
    }

    const removeIpField = (index: number) => {
        const newIps = formData.ipAddresses.filter((_, i) => i !== index)
        setFormData((prev) => ({ ...prev, ipAddresses: newIps }))
    }

    const handleStartIpChange = (value: string) => {
        setFormData((prev) => ({ ...prev, startIp: value }))
        // Auto-fill first two octets of end IP
        const octets = value.split(".")
        if (octets.length >= 2) {
            const endIpPrefix = `${octets[0]}.${octets[1]}.`
            const currentEndIp = formData.endIp
            const endIpOctets = currentEndIp.split(".")
            if (endIpOctets.length >= 2) {
                setFormData((prev) => ({
                    ...prev,
                    endIp: `${endIpPrefix}${endIpOctets[2] || ""}.${endIpOctets[3] || ""}`,
                }))
            }
        }
    }

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()
        onSave({
            clientName: formData.clientName,
            configName: formData.configName,
            scopeType:
                formData.scopeType === "array-ips"
                    ? "Array of IPs"
                    : formData.scopeType === "ip-range"
                        ? "IP Range"
                        : formData.scopeType === "cidr"
                            ? "CIDR Network Range"
                            : "Host Name",
            aggressiveness:
                formData.aggressiveness === "stealthy"
                    ? "Stealthy"
                    : formData.aggressiveness === "normal"
                        ? "Normal"
                        : "Aggressive",
        })
    }

    return (
        <TooltipProvider>
            <form onSubmit={handleSubmit} className="space-y-8">
                {/* Section 1: Project Information */}
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">Project Information</h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <Label htmlFor="clientName" className="text-slate-300">
                                Client Name <span className="text-red-400">*</span>
                            </Label>
                            <Input
                                id="clientName"
                                placeholder="e.g., Carta Worldwide"
                                value={formData.clientName}
                                onChange={(e) => setFormData((prev) => ({ ...prev, clientName: e.target.value }))}
                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                required
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="configName" className="text-slate-300">
                                Pentest Configuration Name <span className="text-red-400">*</span>
                            </Label>
                            <Input
                                id="configName"
                                placeholder="e.g., Canadian Internal Network Pentest - Q3 2025"
                                value={formData.configName}
                                onChange={(e) => setFormData((prev) => ({ ...prev, configName: e.target.value }))}
                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                required
                            />
                        </div>
                    </div>
                </div>

                {/* Section 2: Target Scope */}
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">Target Scope</h3>

                    <div className="space-y-4">
                        <Label className="text-slate-300">Scope Selection</Label>
                        <RadioGroup className="flex flex-wrap justify-between" value={formData.scopeType} onValueChange={handleScopeTypeChange}>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="array-ips" id="array-ips" className="border-slate-600" />
                                <Label htmlFor="array-ips" className="text-slate-300">
                                    Array of IPs
                                </Label>
                            </div>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="ip-range" id="ip-range" className="border-slate-600" />
                                <Label htmlFor="ip-range" className="text-slate-300">
                                    IP Range
                                </Label>
                            </div>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="cidr" id="cidr" className="border-slate-600" />
                                <Label htmlFor="cidr" className="text-slate-300">
                                    CIDR Network Range
                                </Label>
                            </div>
                            <div className="flex items-center space-x-2">
                                <RadioGroupItem value="hostname" id="hostname" className="border-slate-600" />
                                <Label htmlFor="hostname" className="text-slate-300">
                                    Host Name
                                </Label>
                            </div>
                        </RadioGroup>

                        {/* Dynamic input based on scope type */}
                        {formData.scopeType === "array-ips" && (
                            <div className="space-y-2">
                                <Label className="text-slate-300">IP Addresses</Label>
                                {formData.ipAddresses.map((ip, index) => (
                                    <div key={index} className="flex gap-2">
                                        <Input
                                            placeholder="192.168.1.1"
                                            value={ip}
                                            onChange={(e) => handleIpChange(index, e.target.value)}
                                            className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                        />
                                        {formData.ipAddresses.length > 1 && (
                                            <Button
                                                type="button"
                                                variant="outline"
                                                size="icon"
                                                onClick={() => removeIpField(index)}
                                                className="border-slate-600 text-slate-400 hover:text-white"
                                            >
                                                <Trash2 className="w-4 h-4" />
                                            </Button>
                                        )}
                                    </div>
                                ))}
                                <Button
                                    type="button"
                                    variant="outline"
                                    onClick={addIpField}
                                    className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                                >
                                    <Plus className="w-4 h-4 mr-2" />
                                    Add IP
                                </Button>
                            </div>
                        )}

                        {formData.scopeType === "ip-range" && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="space-y-2">
                                    <Label className="text-slate-300">Start IP</Label>
                                    <Input
                                        placeholder="192.168.1.1"
                                        value={formData.startIp}
                                        onChange={(e) => handleStartIpChange(e.target.value)}
                                        className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                    />
                                </div>
                                <div className="space-y-2">
                                    <Label className="text-slate-300">End IP</Label>
                                    <Input
                                        placeholder="192.168.1.254"
                                        value={formData.endIp}
                                        onChange={(e) => setFormData((prev) => ({ ...prev, endIp: e.target.value }))}
                                        className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                    />
                                </div>
                            </div>
                        )}

                        {formData.scopeType === "cidr" && (
                            <div className="space-y-2">
                                <Label className="text-slate-300">CIDR Network Range</Label>
                                <Input
                                    placeholder="192.168.1.0/24"
                                    value={formData.cidrRange}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, cidrRange: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                />
                            </div>
                        )}

                        {formData.scopeType === "hostname" && (
                            <div className="space-y-2">
                                <Label className="text-slate-300">Host Name</Label>
                                <Input
                                    placeholder="example.com"
                                    value={formData.hostName}
                                    onChange={(e) => setFormData((prev) => ({ ...prev, hostName: e.target.value }))}
                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                />
                            </div>
                        )}
                    </div>
                </div>

                {/* Section 3: Rules of Engagement & Scan Configuration */}
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">
                        Rules of Engagement & Scan Configuration
                    </h3>

                    <div className="space-y-4">
                        <div className="space-y-2">
                            <div className="flex items-center gap-2">
                                <Label className="text-slate-300">Test Aggressiveness</Label>
                                <Tooltip>
                                    <TooltipTrigger>
                                        <Info className="w-4 h-4 text-slate-400" />
                                    </TooltipTrigger>
                                    <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                        <p>
                                            Controls scan intensity. 'Aggressive' is more likely to be detected by firewalls or security
                                            teams.
                                        </p>
                                    </TooltipContent>
                                </Tooltip>
                            </div>
                            <Select
                                value={formData.aggressiveness}
                                onValueChange={(value) => setFormData((prev) => ({ ...prev, aggressiveness: value }))}
                            >
                                <SelectTrigger className="bg-slate-800 border-slate-600 text-white">
                                    <SelectValue />
                                </SelectTrigger>
                                <SelectContent className="bg-slate-800 border-slate-600">
                                    <SelectItem value="stealthy">Stealthy</SelectItem>
                                    <SelectItem value="normal">Normal (Recommended)</SelectItem>
                                    <SelectItem value="aggressive">Aggressive</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>

                        <div className="space-y-3">
                            <Label className="text-slate-300">Allowed Actions</Label>
                            <div className="space-y-2">
                                <div className="flex items-center space-x-2">
                                    <Checkbox
                                        id="exploitation"
                                        checked={formData.allowedActions.exploitation}
                                        onCheckedChange={(checked) =>
                                            setFormData((prev) => ({
                                                ...prev,
                                                allowedActions: { ...prev.allowedActions, exploitation: checked as boolean },
                                            }))
                                        }
                                        className="border-slate-600"
                                    />
                                    <Label htmlFor="exploitation" className="text-slate-300">
                                        Perform exploitation attempts
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <Checkbox
                                        id="passwordAttacks"
                                        checked={formData.allowedActions.passwordAttacks}
                                        onCheckedChange={(checked) =>
                                            setFormData((prev) => ({
                                                ...prev,
                                                allowedActions: { ...prev.allowedActions, passwordAttacks: checked as boolean },
                                            }))
                                        }
                                        className="border-slate-600"
                                    />
                                    <Label htmlFor="passwordAttacks" className="text-slate-300">
                                        Conduct password attacks
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <Checkbox
                                        id="hashDumping"
                                        checked={formData.allowedActions.hashDumping}
                                        onCheckedChange={(checked) =>
                                            setFormData((prev) => ({
                                                ...prev,
                                                allowedActions: { ...prev.allowedActions, hashDumping: checked as boolean },
                                            }))
                                        }
                                        className="border-slate-600"
                                    />
                                    <Label htmlFor="hashDumping" className="text-slate-300">
                                        Allow password/hash dumping
                                    </Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <Checkbox
                                        id="dosChecks"
                                        checked={formData.allowedActions.dosChecks}
                                        onCheckedChange={(checked) =>
                                            setFormData((prev) => ({
                                                ...prev,
                                                allowedActions: { ...prev.allowedActions, dosChecks: checked as boolean },
                                            }))
                                        }
                                        className="border-slate-600"
                                    />
                                    <Label htmlFor="dosChecks" className="text-slate-300 flex items-center gap-2">
                                        Perform Denial-of-Service (DoS) checks
                                        <Tooltip>
                                            <TooltipTrigger>
                                                <Info className="w-4 h-4 text-red-400" />
                                            </TooltipTrigger>
                                            <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                <p className="text-red-300">Warning: High Risk</p>
                                            </TooltipContent>
                                        </Tooltip>
                                    </Label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Section 4: Agent Network Configuration */}
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">
                        Agent Network Configuration
                    </h3>
                    <div className="flex items-center gap-2 mb-2">
                        <Tooltip>
                            <TooltipTrigger>
                                <Info className="w-4 h-4 text-slate-400" />
                            </TooltipTrigger>
                            <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                <p>Enter the IP settings of the machine running the pentest tool for report context.</p>
                            </TooltipContent>
                        </Tooltip>
                        <span className="text-sm text-slate-400">Network configuration for the testing agent</span>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="space-y-2">
                            <Label className="text-slate-300">Agent IP Address</Label>
                            <Input
                                placeholder="192.168.1.100"
                                value={formData.agentIp}
                                onChange={(e) => setFormData((prev) => ({ ...prev, agentIp: e.target.value }))}
                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                            />
                        </div>
                        <div className="space-y-2">
                            <Label className="text-slate-300">Subnet Mask</Label>
                            <Input
                                placeholder="255.255.255.0"
                                value={formData.subnetMask}
                                onChange={(e) => setFormData((prev) => ({ ...prev, subnetMask: e.target.value }))}
                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                            />
                        </div>
                        <div className="space-y-2">
                            <Label className="text-slate-300">Default Gateway</Label>
                            <Input
                                placeholder="192.168.1.1"
                                value={formData.defaultGateway}
                                onChange={(e) => setFormData((prev) => ({ ...prev, defaultGateway: e.target.value }))}
                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                            />
                        </div>
                    </div>
                </div>

                {/* Form Actions */}
                <div className="flex justify-end gap-3 pt-6 border-t border-slate-700">
                    <Button
                        type="button"
                        variant="outline"
                        onClick={onCancel}
                        className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                    >
                        Cancel
                    </Button>
                    <Button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white">
                        Save Configuration
                    </Button>
                </div>
            </form>
        </TooltipProvider>
    )
}
