"use client"

import type React from "react"

import { ChangeEvent, useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/Input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import { Plus, Trash2, Info, X } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Dialog, DialogPanel, Select, SelectItem, Textarea } from "@tremor/react"
import IpInput from "@/components/IpInput"
import CidrInput from "@/components/CidrInput"
import { NetworkPentestFullInstanceData } from "@/app/NetworkPentestType"
import { fetchAllProbes } from "@/app/utils/FetchAllProbes"
import { getMyInstancesV2, invokeAction, mapProcessName, startProcessV2 } from "@/ikon/utils/api/processRuntimeService"
import { ProbeDetails } from "@/app/globalType"
import { toast } from "@/lib/toast"
import { getAccountTree } from "@/ikon/utils/api/accountService"
import ModalLoader from "@/components/ModalLoader"
import { getLoggedInUserProfile } from "@/ikon/utils/api/loginService"
import { useDialog } from "@/components/alert-dialog/dialog-context"
import GlobalLoader from "@/components/GlobalLoader"

interface NetworkPentestConfigFormProps {
    isFormModalOpen: boolean;
    onClose: () => void;
    savedDataToBePopulated?: NetworkPentestFullInstanceData
}

interface ErrorState {
    [key: string]: string | Array<string>;
}

export function NetworkPentestConfigForm({ isFormModalOpen, onClose, savedDataToBePopulated }: NetworkPentestConfigFormProps) {
    const { openDialog } = useDialog();
    const [allProbesArray, setAllProbesArray] = useState<ProbeDetails[]>([]);
    const [formData, setFormData] = useState({
        clientName: savedDataToBePopulated?.client_name ?? "",
        pentestName: savedDataToBePopulated?.pentest_name ?? "",
        pentestDescription: savedDataToBePopulated?.pentest_description ?? "",
        scopeType: savedDataToBePopulated?.scope_type ?? "Array of IPs",
        aggressiveness: savedDataToBePopulated?.aggressiveness ?? "",
        ipAddresses: savedDataToBePopulated ? [...savedDataToBePopulated.ip_addresses] : [""],
        startIp: savedDataToBePopulated?.start_ip ?? "",
        endIp: savedDataToBePopulated?.end_ip ?? "",
        cidrRange: savedDataToBePopulated?.cidr_range ?? "",
        hostName: savedDataToBePopulated?.hostname ?? "",
        allowedActions: savedDataToBePopulated ? [...savedDataToBePopulated.allowed_actions] : [""],
        probeId: savedDataToBePopulated?.probe_id ?? "",
        probeMachineHostname: savedDataToBePopulated?.probe_machine_hostname ?? "",
        probeMachineIp: savedDataToBePopulated?.probe_machine_ip_address ?? "",
        probeMachineOs: savedDataToBePopulated?.probe_machine_os ?? "",
        agentIp: savedDataToBePopulated?.agent_ip ?? "",
        subnetMask: savedDataToBePopulated?.subnet_mask ?? "",
        defaultGateway: savedDataToBePopulated?.default_gateway ?? "",
    });
    const [errors, setErrors] = useState<ErrorState>({});
    const [startIpDisabledState, setStartIpDisabledState] = useState<boolean[]>([false, false, false, false]);
    const [endIpDisabledState, setEndIpDisabledState] = useState<boolean[]>([false, false, false, false]);
    const [fetchingSystemInfo, setFetchingSystemInfo] = useState(false);
    const [configId, setConfigId] = useState<string>("");
    const [sysInfo, setSysInfo] = useState<any>(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const loadProbes = async () => {
            const configInstances = await getMyInstancesV2<NetworkPentestFullInstanceData>({
                processName: "Network Pentest",
                predefinedFilters: { taskName: "Pentest Details View" },
                projections: ["Data.probe_id"],
            });

            let previouslyUsedProbeIdArray: string[] = [];
            if (configInstances.length) {
                previouslyUsedProbeIdArray = configInstances.map(eachInstance => eachInstance.data.probe_id);
            }

            let probes = await fetchAllProbes();
            probes = probes.filter(eachProbe => !previouslyUsedProbeIdArray.includes(eachProbe.PROBE_ID) || (savedDataToBePopulated?.probe_id === eachProbe.PROBE_ID));
            // console.log("All Filtered Probes: ", probes);
            setAllProbesArray(probes);
            const id = await getConfigId();
            console.log(id)
            setConfigId(id);
        };

        loadProbes();
    }, [isFormModalOpen]);

    // useEffect(() => {
    //     const fetchConfigId = async () => {
    //         console.log("entered here")
    //         const id = await getConfigId();
    //         console.log("here is the id:", id)
    //         setConfigId(id);
    //     };
    //     fetchConfigId();
    // }, []);

    useEffect(() => {
        if (sysInfo) {
            setFormData(prev => ({
                ...prev,
                probeMachineIp: sysInfo.ip_address || prev.probeMachineIp,
                probeMachineHostname: sysInfo.host_name || prev.probeMachineHostname,
                probeMachineOs: sysInfo.os_name || prev.probeMachineOs,
            }));
        }
    }, [sysInfo]);

    const getConfigId = async () => {
        const today = new Date();
        const accountName = (await getAccountTree()).ACCOUNT_NAME;
        const configIdPrefix = accountName.substring(0, 3).toUpperCase() + "-NETP-" + today.getFullYear().toString().slice(-2) +
            String(today.getMonth() + 1).padStart(2, "0") + String(today.getDate()).padStart(2, "0");

        console.log(configIdPrefix)

        const configDataWithTodayPrefix = await getMyInstancesV2<NetworkPentestFullInstanceData>({
            processName: "Network Pentest",
            predefinedFilters: { taskName: "Pentest Details View" },
            //mongoWhereClause: `this.Data.config_id.includes("${configIdPrefix}")`
        });
        console.log("here--->")
        console.log(configIdPrefix + String(configDataWithTodayPrefix.length + 1).padStart(3, "0"));
        return configIdPrefix + String(configDataWithTodayPrefix.length + 1).padStart(3, "0");
    }


    const validateForm = (): boolean => {
        const newErrors: ErrorState = {};

        const checkIpValidOrNot = (ip: string): boolean => {
            return ip.split(".").every(eachPart => eachPart !== "");
        };


        if (!formData.clientName) {
            newErrors.clientName = "Client Name cannot be blank. Please provide a valid Client Name";
        }
        else if (formData.clientName.trim().length < 3) {
            newErrors.clientName =
                "Client Name must be at least 3 characters long. Please provide a valid Client Name";
        }

        if (!formData.pentestName) {
            newErrors.pentestName = "Configuration Name cannot be blank. Please provide a valid Configuration Name";
        }
        else if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Configuration Name must be at least 3 characters long. Please provide a valid Configuration Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }
        else if (formData.pentestDescription.trim().length < 3) {
            newErrors.pentestDescription =
                "Description must be at least 3 characters long. Please provide a valid Description";
        }

        if (!formData.scopeType.trim()) {
            newErrors.scopeType = "Please select a Scope!";
        }

        if (formData.scopeType === "Array of IPs") {
            newErrors.ipAddresses = [];

            formData.ipAddresses.forEach((eachIp, eachIpIndex) => {
                if (!eachIp || eachIp === "...") {
                    const startErrorMsg = formData.ipAddresses.length === 1 ? "At least 1 IP Address must be provided. Please provide a valid IP Address" :
                        "IP Address cannot be blank. Please provide a valid IP Address or delete this field";
                    (newErrors.ipAddresses as string[])[eachIpIndex] = startErrorMsg;
                }

                if (!checkIpValidOrNot(eachIp) && !newErrors.ipAddresses[eachIpIndex]) {
                    (newErrors.ipAddresses as string[])[eachIpIndex] = `Please provide a valid IP Address 
                         ${formData.ipAddresses.length !== 1 ? "or delete this field" : ""}`;
                }
            });

            newErrors.ipAddresses.length === 0 ? delete newErrors.ipAddresses : undefined;
        }


        if (formData.scopeType === "IP Range" && !formData.startIp.trim()) {
            newErrors.startIp = "Lower limit of the IP range cannot be blank. Please provide a valid IP Address";
        } else if (formData.scopeType === "IP Range" && formData.startIp.trim()) {
            if (!checkIpValidOrNot(formData.startIp) && !newErrors.startIp) {
                newErrors.startIp = "Please provide a valid IP Address";
            }
        }

        if (formData.scopeType === "IP Range" && !formData.endIp.trim()) {
            newErrors.endIp = "Upper limit of the IP range cannot be blank. Please provide a valid IP Address";
        } else if (formData.scopeType === "IP Range" && formData.endIp.trim()) {
            if (!checkIpValidOrNot(formData.endIp) && !newErrors.endIp) {
                newErrors.endIp = "Please provide a valid IP Address";
            }
        }

        const isIpRangeMismatch = formData.startIp.split(".").every((part, partIndex) => parseInt(part) <= parseInt(formData.endIp.split(".")[partIndex]));
        if (formData.scopeType === "IP Range" && !isIpRangeMismatch) {
            newErrors.startIp = "Please provide a valid IP Range";
            newErrors.endIp = "Please provide a valid IP Range";
        }

        if (formData.scopeType === "CIDR Network Range" && !formData.cidrRange.trim()) {
            newErrors.cidrRange = "CIDR range cannot be blank. Please provide a valid CIDR range";
        } else if (formData.scopeType === "CIDR Network Range" && formData.cidrRange.trim() && (!checkIpValidOrNot(formData.cidrRange) || !formData.cidrRange.split("/")[1])) {
            newErrors.cidrRange = "Please provide a valid CIDR range";
        }

        if (formData.scopeType === "Host Name" && !formData.hostName.trim()) {
            newErrors.hostName = "Host Name cannot be blank. Please provide a valid Host Name";
        } else if (formData.scopeType === "Host Name" && !formData.hostName.startsWith("http://") && !formData.hostName.startsWith("https://")) {
            newErrors.hostName = "Host Name must start with 'http://' or 'https://'. Please provide a valid Host Name";
        } else if (formData.scopeType === "Host Name") {
            try {
                new URL(formData.hostName);
            } catch (e) {
                newErrors.hostName = "Please provide a valid Host Name.";
            }
        }

        if (!formData.aggressiveness.trim()) {
            newErrors.aggressiveness = "Please select Test Aggressiveness";
        }

        // if (formData.allowedActions.length === 0 || (!formData.allowedActions[0])) {
        //     newErrors.allowedActions = "Please select one or more actions to be performed"
        // }

        if (!formData.probeId.trim()) {
            newErrors.probe_id = "Please select a Probe!";
        }

        if (!formData.probeMachineOs.trim()) {
            newErrors.probe_machine_os = "Please mention the OS of the Probe Machine!";
        }

        if (!formData.probeMachineIp.trim()) {
            newErrors.probe_machine_ip = "IP Address cannot be blank. Please provide a valid IP Address";
        } else {
            if (!checkIpValidOrNot(formData.probeMachineIp) && !newErrors.probe_machine_ip) {
                newErrors.probe_machine_ip = "Please provide a valid IP Address";
            }
        }

        if (!formData.probeMachineHostname.trim()) {
            newErrors.probe_machine_hostname = "Host Name cannot be blank. Please provide a valid Host Name";
        } else if (formData.probeMachineHostname.trim().length < 3) {
            newErrors.probe_machine_hostname = "Host Name must be at least 3 characters long. Please provide a valid Host Name";
        }

        if (!formData.agentIp.trim()) {
            newErrors.agentIp = "Agent IP cannot be blank. Please provide a valid Agent IP!";
        } else if (!checkIpValidOrNot(formData.agentIp)) {
            newErrors.agentIp = "Please provide a valid Agent IP!";
        }

        if (!formData.subnetMask.trim()) {
            newErrors.subnetMask = "Subnet Mask cannot be blank. Please provide a valid Subnet Mask!";
        } else if (!checkIpValidOrNot(formData.subnetMask)) {
            newErrors.subnetMask = "Please provide a valid Subnet Mask!";
        }

        if (!formData.defaultGateway) {
            newErrors.defaultGateway = "Default Gateway must be specified. Please provide a valid Default Gateway!";
        } else if (!checkIpValidOrNot(formData.defaultGateway)) {
            newErrors.defaultGateway = "Please provide a valid Default Gateway!";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const validateUpdateForm = (): boolean => {
        const newErrors: ErrorState = {};
        if (!formData.pentestName) {
            newErrors.pentestName = "Configuration Name cannot be blank. Please provide a valid Configuration Name";
        }
        else if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Configuration Name must be at least 3 characters long. Please provide a valid Configuration Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }
        else if (formData.pentestDescription.trim().length < 3) {
            newErrors.pentestDescription =
                "Description must be at least 3 characters long. Please provide a valid Description";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }

    const addIpField = () => {
        setFormData((prev) => ({ ...prev, ipAddresses: [...prev.ipAddresses, ""] }))
    }

    const removeIpField = (index: number) => {
        const newIps = formData.ipAddresses.filter((_, i) => i !== index)
        setFormData((prev) => ({ ...prev, ipAddresses: newIps }))
    }

    // Standard input handler
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLTextAreaElement> | any
    ) => {
        const { name, value } = e.target;
        setErrors({});
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleIpInputChange = (inputName: string, ip: string, inputIndex: number | undefined) => {
        setErrors({});
        const fieldName = inputName.split("-")[0];

        if (fieldName === "ipAddresses" && typeof inputIndex === "number") {
            const newIps = [...formData.ipAddresses];
            newIps[inputIndex] = ip;
            setFormData((prev) => ({ ...prev, [fieldName]: newIps }));
        } else {
            setFormData((prev) => ({ ...prev, [fieldName]: ip }));
        }
    };

    const handleAllowedActionChange = (isChecked: boolean, actionName: string) => {
        let prevAllowedActions = [...formData.allowedActions];
        prevAllowedActions = prevAllowedActions.filter(eachAction => eachAction !== "");

        if (!isChecked && prevAllowedActions.includes(actionName)) {
            prevAllowedActions = prevAllowedActions.filter(eachAction => eachAction !== actionName);
        }
        else if (isChecked && !prevAllowedActions.includes(actionName)) {
            prevAllowedActions.push(actionName);
        }

        setFormData((prev) => ({ ...prev, allowedActions: prevAllowedActions }));
    }

    const handleIpRangeChange = (inputName: string, value: string,) => {
        const fieldName = inputName.split("-")[0];

        if (fieldName === "startIp") {
            const startIpArray = value.split(".");

            let newEndIp = "";
            if (!formData.endIp) {
                newEndIp = startIpArray[0] + "." + startIpArray[1] + "..";
            } else {
                const endIpArray = formData.endIp.split(".");
                endIpArray[0] = startIpArray[0];
                endIpArray[1] = startIpArray[1];
                newEndIp = endIpArray.join(".");
            }

            setFormData((prev) => ({ ...prev, startIp: value, endIp: newEndIp }));
            const endIpDisabledStateTemp = [false, false, false, false];
            endIpDisabledStateTemp[0] = startIpArray[0] ? true : false;
            endIpDisabledStateTemp[1] = startIpArray[1] ? true : false;
            setEndIpDisabledState(endIpDisabledStateTemp);
        }
        else if (fieldName === "endIp") {
            const endIpArray = value.split(".");

            let newStartIp = "";
            if (!formData.endIp) {
                newStartIp = endIpArray[0] + "." + endIpArray[1] + "..";
            } else {
                const startIpArray = formData.startIp.split(".");
                startIpArray[0] = endIpArray[0];
                startIpArray[1] = endIpArray[1];
                newStartIp = startIpArray.join(".");
            }

            setFormData((prev) => ({ ...prev, startIp: newStartIp, endIp: value }));
            const startIpDisabledStateTemp = [false, false, false, false];
            startIpDisabledStateTemp[0] = endIpArray[0] ? true : false;
            startIpDisabledStateTemp[1] = endIpArray[1] ? true : false;
            setStartIpDisabledState(startIpDisabledStateTemp);
        }
    }

    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
        setLoading(true);
        const today = new Date();

        if (!validateForm()) {
            setLoading(false);
            return;
        }

        const userDetails = await getLoggedInUserProfile();

        const dataToBeInvoked: NetworkPentestFullInstanceData = {
            pentest_id: configId,
            pentest_name: formData.pentestName,
            client_name: formData.clientName,
            pentest_description: formData.pentestDescription,
            aggressiveness: formData.aggressiveness,
            progress: 10,
            scope_type: formData.scopeType,
            ip_addresses: formData.scopeType === "Array of IPs" ? [...formData.ipAddresses] : [],
            start_ip: formData.startIp,
            end_ip: formData.endIp,
            cidr_range: formData.cidrRange,
            hostname: formData.hostName,
            allowed_actions: !formData.allowedActions[0] ? [] : [...formData.allowedActions],
            agent_ip: formData.agentIp,
            subnet_mask: formData.defaultGateway,
            default_gateway: formData.defaultGateway,
            probe_id: formData.probeId,
            probe_name: allProbesArray.find(eachProbe => eachProbe.PROBE_ID === formData.probeId)?.PROBE_NAME ?? "N/A",
            probe_machine_hostname: formData.probeMachineHostname,
            probe_machine_ip_address: formData.probeMachineIp,
            probe_machine_os: formData.probeMachineOs,
            created_by_id: userDetails.USER_ID,
            created_by_login: userDetails.USER_LOGIN,
            created_on: today.toISOString()
        }

        try {
            const processId = await mapProcessName({
                processName: "Network Pentest"
            });
            await startProcessV2({
                processId: processId,
                data: dataToBeInvoked,
                processIdentifierFields: "pentest_id,created_by_id,created_by_login,probe_id"
            });

            handleClose();
            toast.push("Network Pentest Configuration Created Successfully", "success");
            setLoading(false);
        } catch (error) {
            console.error("Failed to start the process:", error);
            toast.push("Error in creating Network Pentest Configuration", "error");
            setLoading(false);
        }
    }

    const handleConfigUpdate = async (event: React.FormEvent) => {
        event.preventDefault();
        setLoading(true);

        if (!validateUpdateForm()) {
            setLoading(false);
            return;
        }

        const pentestConfigInstance = await getMyInstancesV2<NetworkPentestFullInstanceData>({
            processName: "Network Pentest",
            predefinedFilters: { taskName: "Basic Details" },
            processVariableFilters: { pentest_id: savedDataToBePopulated?.pentest_id },
            projections: ["Data.pentest_name", "Data.pentest_description"]
        });

        if (!pentestConfigInstance.length) {
            openDialog({
                title: "Config Update Failed",
                description: "This configuration cannot be updated as network pentest has already been initiated for this configuration!",
                confirmText: "Ok",
                confirmVariant: "blue"
            });
            return;
        }

        const invokableTaskId = pentestConfigInstance[0].taskId;
        const dataToBeUpdated = pentestConfigInstance[0].data;
        dataToBeUpdated.pentest_name = formData.pentestName;
        dataToBeUpdated.pentest_description = formData.pentestDescription;

        try {
            await invokeAction({
                taskId: invokableTaskId,
                transitionName: "Update Basic Details",
                data: dataToBeUpdated,
                processInstanceIdentifierField: "pentest_id,created_by_id,created_by_login,probe_id"
            });

            handleClose();
            toast.push("Network Pentest Configuration Updated Successfully", "success");
            setLoading(false);
        } catch (error) {
            console.error("Failed to update date:", error);
            toast.push("Error in updating Network Pentest Configuration", "error");
            setLoading(false);
        }
    }

    const handleClose = () => {
        setFormData({
            clientName: savedDataToBePopulated?.client_name ?? "",
            pentestName: savedDataToBePopulated?.pentest_name ?? "",
            pentestDescription: savedDataToBePopulated?.pentest_description ?? "",
            scopeType: savedDataToBePopulated?.scope_type ?? "Array of IPs",
            aggressiveness: savedDataToBePopulated?.aggressiveness ?? "",
            ipAddresses: savedDataToBePopulated ? [...savedDataToBePopulated.ip_addresses] : [""],
            startIp: savedDataToBePopulated?.start_ip ?? "",
            endIp: savedDataToBePopulated?.end_ip ?? "",
            cidrRange: savedDataToBePopulated?.cidr_range ?? "",
            hostName: savedDataToBePopulated?.hostname ?? "",
            allowedActions: savedDataToBePopulated ? [...savedDataToBePopulated.allowed_actions] : [""],
            probeId: savedDataToBePopulated?.probe_id ?? "",
            probeMachineHostname: savedDataToBePopulated?.probe_machine_hostname ?? "",
            probeMachineIp: savedDataToBePopulated?.probe_machine_ip_address ?? "",
            probeMachineOs: savedDataToBePopulated?.probe_machine_os ?? "",
            agentIp: savedDataToBePopulated?.agent_ip ?? "",
            subnetMask: savedDataToBePopulated?.subnet_mask ?? "",
            defaultGateway: savedDataToBePopulated?.default_gateway ?? "",
        });
        setErrors({});

        onClose();
    };

    const fetchSysInfo = async () => {
        if (!formData.probeId) {
            toast.push("Please select a probe first", "error");
            return;
        }
        setFetchingSystemInfo(true);

        let configData: any = await getMyInstancesV2({ processName: "Fetch ip os and hostname", processVariableFilters: { config_id: configId }, projections: ["Data"] });
        console.log("configData inside fetch", configData);

        if (configData && configData.sysInfo) {
            let taskId = configData[0].taskId;
            delete configData.sysInfo
            console.log("after deletion", configData)
            invokeAction({ taskId: taskId, transitionName: "fetch again", data: configData, processInstanceIdentifierField: "config_data" })
        }
        else {
            let processId = await mapProcessName({ processName: "Fetch ip os and hostname" });
            startProcessV2({ processId: processId, data: { config_id: configId, probe_id: formData.probeId }, processIdentifierFields: "config_id" });
        }
        while (true) {
            let configDataAgain: any = await getMyInstancesV2({ processName: "Fetch ip os and hostname", processVariableFilters: { config_id: configId }, projections: ["Data"] });
            console.log("configDataAgain", configDataAgain);
            if (configDataAgain && configDataAgain[0].data.sysInfo) {
                setSysInfo(configDataAgain[0].data.sysInfo);
                setFetchingSystemInfo(false);
                break;
            }

        }
    };


    if (!allProbesArray.length || loading) {
        return <GlobalLoader />
    }

    return (
        <Dialog open={isFormModalOpen} onClose={() => { }} static={true}>
            <DialogPanel className="overflow-visible rounded-md p-0 sm:max-w-5xl">
                <TooltipProvider>
                    <form action="#" method="POST" onSubmit={handleSubmit}>
                        {/* Form Header */}
                        <div className="flex justify-between items-center gap-3 py-4 px-6 border-b border-slate-200 dark:border-slate-700">
                            <h3 className="text-xl text-tremor-content-strong dark:text-dark-tremor-content-strong">
                                Configure Network Penetration Test
                            </h3>
                            <button type="button" aria-label="Close" onClick={() => handleClose()}
                                className="rounded-sm p-2 text-tremor-content-subtle hover:bg-tremor-background-subtle hover:text-tremor-content
                            dark:text-dark-tremor-content-subtle hover:dark:bg-dark-tremor-background-subtle hover:dark:text-tremor-content">
                                <X className="size-5 shrink-0" aria-hidden={true} />
                            </button>
                        </div>

                        <div className="max-h-[80vh] overflow-y-auto py-4 px-6 space-y-8">
                            {/* Section 1: Project Information */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Project Information</h3>

                                <div className="flex gap-4">
                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="clientName" className="text-sm font-medium text-widget-mainHeader">
                                            Client Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="clientName"
                                                name="clientName"
                                                value={formData.clientName}
                                                disabled={savedDataToBePopulated ? true : false}
                                                className={
                                                    errors.clientName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Carta Worldwide"
                                            />

                                            {errors.clientName && (
                                                <p className="text-xs text-red-500">
                                                    {errors.clientName}
                                                </p>
                                            )}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="pentestName" className="text-sm font-medium text-widget-mainHeader">
                                            Configuration Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="pentestName"
                                                name="pentestName"
                                                value={formData.pentestName}
                                                className={
                                                    errors.pentestName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Canadian Internal Web Application Pentest - Q3 2025"
                                            />

                                            {errors.pentestName && (
                                                <p className="text-xs text-red-500">
                                                    {errors.pentestName}
                                                </p>
                                            )}
                                        </div>
                                    </div>
                                </div>


                                <div className="flex-1 space-y-2">
                                    <Label htmlFor="pentestDescription" className="text-sm font-medium text-widget-mainHeader">
                                        Description <span className="text-red-500">*</span>
                                    </Label>

                                    <div className="space-y-2">
                                        <Textarea
                                            rows={3}
                                            id="pentestDescription"
                                            name="pentestDescription"
                                            value={formData.pentestDescription}
                                            className={
                                                errors.pentestDescription
                                                    ? "w-full ring-1 ring-red-500 rounded-md"
                                                    : "w-full"
                                            }
                                            onChange={handleInputChange}
                                            placeholder="Enter Penetration Test Description"
                                        />

                                        {errors.pentestDescription && (
                                            <p className="text-xs text-red-500">
                                                {errors.pentestDescription}
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </div>

                            {/* Section 2: Target Scope */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Target Scope</h3>

                                <div className="space-y-4">
                                    <Label className="text-sm font-medium text-widget-mainHeader">
                                        Scope Selection <span className="text-red-500">*</span>
                                    </Label>

                                    <RadioGroup className="flex flex-wrap justify-between" value={formData.scopeType}
                                        onValueChange={(value) => {
                                            setErrors((prev) => ({ ...prev, scopeType: "" }));
                                            setFormData((prev) => ({ ...prev, scopeType: value }));
                                        }}
                                    >
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="Array of IPs" id="array-ips"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="array-ips" className="text-slate-300">
                                                Array of IPs
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="IP Range" id="ip-range"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="ip-range" className="text-slate-300">
                                                IP Range
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="CIDR Network Range" id="cidr"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="cidr" className="text-slate-300">
                                                CIDR Network Range
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="Host Name" id="hostname"
                                                className={
                                                    errors.scopeType
                                                        ? "border-red-500"
                                                        : "border-slate-600"
                                                }
                                                disabled={savedDataToBePopulated ? true : false}
                                            />
                                            <Label htmlFor="hostname" className="text-slate-300">
                                                Host Name
                                            </Label>
                                        </div>
                                    </RadioGroup>

                                    {errors.scopeType && (
                                        <p className="text-xs text-red-500">
                                            {errors.scopeType}
                                        </p>
                                    )}
                                </div>


                                <div className="space-y-2">
                                    {/* Dynamic input based on scope type */}
                                    {formData.scopeType === "Array of IPs" && (
                                        <div className="space-y-2">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                IP Addresses <span className="text-red-500">*</span>
                                            </Label>
                                            {formData.ipAddresses.map((ip, index) => (
                                                <div key={`ip-address-${index}`} className="flex flex-col gap-1">
                                                    <div key={index} className="flex gap-2">
                                                        <IpInput
                                                            name="ipAddresses"
                                                            id="ipAddresses"
                                                            className="w-80"
                                                            error={!!errors.ipAddresses && !!errors.ipAddresses[index]}
                                                            value={ip}
                                                            inputIndex={index}
                                                            onChangeFunction={handleIpInputChange}
                                                            disabled={savedDataToBePopulated ? true : false}
                                                        />

                                                        {(!savedDataToBePopulated && formData.ipAddresses.length > 1) && (
                                                            <Button
                                                                type="button"
                                                                variant="outline"
                                                                size="icon"
                                                                onClick={() => removeIpField(index)}
                                                                className="border-slate-600 text-slate-400 hover:text-white"
                                                            >
                                                                <Trash2 className="w-4 h-4" />
                                                            </Button>
                                                        )}
                                                    </div>


                                                    {errors.ipAddresses && errors.ipAddresses[index] && (
                                                        <p className="text-xs text-red-500">
                                                            {errors.ipAddresses[index]}
                                                        </p>
                                                    )}
                                                </div>
                                            ))}
                                            <Button
                                                type="button"
                                                variant="outline"
                                                onClick={addIpField}
                                                className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                                            >
                                                <Plus className="w-4 h-4" />
                                                Add IP
                                            </Button>
                                        </div>
                                    )}

                                    {formData.scopeType === "IP Range" && (
                                        <div className="flex gap-11">
                                            <div className="flex-1 space-y-2">
                                                <Label className="text-sm font-medium text-widget-mainHeader">
                                                    Start IP <span className="text-red-500">*</span>
                                                </Label>
                                                <IpInput
                                                    name="startIp"
                                                    id="startIp"
                                                    error={!!errors.startIp}
                                                    value={formData.startIp}
                                                    onChangeFunction={handleIpRangeChange}
                                                    disabledSegments={savedDataToBePopulated ? [true, true, true, true] : startIpDisabledState}
                                                />

                                                {errors.startIp && (
                                                    <p className="text-xs text-red-500">
                                                        {errors.startIp}
                                                    </p>
                                                )}
                                            </div>
                                            <div className="flex-1 space-y-2">
                                                <Label className="text-sm font-medium text-widget-mainHeader">
                                                    End IP <span className="text-red-500">*</span>
                                                </Label>
                                                <IpInput
                                                    name="endIp"
                                                    id="endIp"
                                                    error={!!errors.endIp}
                                                    value={formData.endIp}
                                                    onChangeFunction={handleIpRangeChange}
                                                    disabledSegments={savedDataToBePopulated ? [true, true, true, true] : endIpDisabledState}
                                                />

                                                {errors.endIp && (
                                                    <p className="text-xs text-red-500">
                                                        {errors.endIp}
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                    )}

                                    {formData.scopeType === "CIDR Network Range" && (
                                        <div className="space-y-2 w-96">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                CIDR Network Range <span className="text-red-500">*</span>
                                            </Label>
                                            <CidrInput
                                                name="cidrRange"
                                                id="cidrRange"
                                                error={!!errors.cidrRange}
                                                value={formData.cidrRange}
                                                onChangeFunction={handleIpInputChange}
                                                disabled={savedDataToBePopulated ? true : false}
                                            />

                                            {errors.cidrRange && (
                                                <p className="text-xs text-red-500">
                                                    {errors.cidrRange}
                                                </p>
                                            )}
                                        </div>
                                    )}

                                    {formData.scopeType === "Host Name" && (
                                        <div className="space-y-2">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                Host Name <span className="text-red-500">*</span>
                                            </Label>
                                            <Input
                                                id="hostName"
                                                name="hostName"
                                                value={formData.hostName}
                                                className={
                                                    errors.hostName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="example.com"
                                                disabled={savedDataToBePopulated ? true : false}
                                            />

                                            {errors.hostName && (
                                                <p className="text-xs text-red-500">
                                                    {errors.hostName}
                                                </p>
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Section 3: Rules of Engagement & Scan Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">
                                    Rules of Engagement & Scan Configuration
                                </h3>

                                <div className="space-y-4">
                                    <div className="space-y-2">
                                        <div className="flex items-center gap-2">
                                            <Label className="text-sm font-medium text-widget-mainHeader">
                                                Test Aggressiveness <span className="text-red-500">*</span>
                                            </Label>
                                            <Tooltip>
                                                <TooltipTrigger>
                                                    <Info className="w-4 h-4 text-slate-400" />
                                                </TooltipTrigger>
                                                <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                    <p>
                                                        Controls scan intensity. 'Aggressive' is more likely to be detected by firewalls or security
                                                        teams.
                                                    </p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </div>
                                        <Select
                                            id="priorityLevel"
                                            name="priorityLevel"
                                            value={formData.aggressiveness}
                                            className={
                                                errors.aggressiveness
                                                    ? "w-full border border-red-500"
                                                    : "w-full"
                                            }
                                            onValueChange={(val) => {
                                                setFormData((prev) => ({ ...prev, aggressiveness: val }))
                                            }}
                                            disabled={savedDataToBePopulated ? true : false}
                                        >
                                            <SelectItem value="Stealthy">Stealthy</SelectItem>
                                            <SelectItem value="Normal">Normal (Recommended)</SelectItem>
                                            <SelectItem value="Aggressive">Aggressive</SelectItem>
                                        </Select>


                                        {errors.aggressiveness && (
                                            <p className="text-xs text-red-500">
                                                {errors.aggressiveness}
                                            </p>
                                        )}
                                    </div>

                                    <div className="space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">Allowed Actions</Label>
                                        <div className="space-y-2">
                                            {/* <div className="flex items-center gap-6"> */}
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="exploitation"
                                                    checked={formData.allowedActions.includes("exploitation")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "exploitation")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="exploitation" className="text-sm font-medium text-widget-mainHeader">
                                                    Perform exploitation attempts
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="passwordAttacks"
                                                    checked={formData.allowedActions.includes("passwordAttacks")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "passwordAttacks")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="passwordAttacks" className="text-sm font-medium text-widget-mainHeader">
                                                    Conduct password attacks
                                                </Label>
                                            </div>
                                            {/* </div> */}

                                            {/* <div className="flex justify-between items-center gap-6"> */}
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="hashDumping"
                                                    checked={formData.allowedActions.includes("hashDumping")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "hashDumping")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="hashDumping" className="text-sm font-medium text-widget-mainHeader">
                                                    Allow password/hash dumping
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="dosChecks"
                                                    checked={formData.allowedActions.includes("dosChecks")}
                                                    onCheckedChange={(checked) => handleAllowedActionChange(checked as boolean, "dosChecks")}
                                                    className={
                                                        errors.allowedActions
                                                            ? "border-red-500"
                                                            : "border-slate-600"
                                                    }
                                                    disabled={savedDataToBePopulated ? true : false}
                                                />
                                                <Label htmlFor="dosChecks" className="text-sm font-medium text-widget-mainHeader flex items-center gap-2">
                                                    Perform Denial-of-Service (DoS) checks
                                                    <Tooltip>
                                                        <TooltipTrigger>
                                                            <Info className="w-4 h-4 text-red-400" />
                                                        </TooltipTrigger>
                                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                            <p className="text-red-300">Warning: High Risk</p>
                                                        </TooltipContent>
                                                    </Tooltip>
                                                </Label>
                                            </div>
                                            {/* </div> */}
                                        </div>


                                        {errors.allowedActions && (
                                            <p className="text-xs text-red-500">
                                                {errors.allowedActions}
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </div>

                            {/* Section 4: Probe Machine Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">
                                    Probe Machine Configuration
                                </h3>
                                <div className="flex items-center gap-2 mb-2">
                                    <Tooltip>
                                        <TooltipTrigger>
                                            <Info className="w-4 h-4 text-slate-400" />
                                        </TooltipTrigger>
                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                            <p>Select the Probe Machine that you will be using to perform the Network Pentent.</p>
                                        </TooltipContent>
                                    </Tooltip>
                                    <span className="text-sm text-slate-400">Machine Configuration for the Probe Setup</span>
                                </div>

                                <div className="flex-1 space-y-2">
                                    <Label className="text-sm font-medium text-widget-mainHeader">
                                        Probe <span className="text-red-500">*</span>
                                    </Label>


                                    <div className="flex items-center gap-3">
                                        <Select
                                            id="probe_id"
                                            name="probe_id"
                                            value={formData.probeId}
                                            disabled={savedDataToBePopulated ? true : false}
                                            className={
                                                errors.probe_id
                                                    ? "w-full border border-red-500 rounded-md"
                                                    : "w-full"
                                            }
                                            onValueChange={(val) => {
                                                setFormData((prev) => ({ ...prev, probeId: val }))
                                            }}
                                        >
                                            {allProbesArray.map((eachProbeDetails) => (
                                                <SelectItem key={eachProbeDetails.PROBE_ID} value={eachProbeDetails.PROBE_ID}>
                                                    {eachProbeDetails.PROBE_NAME}
                                                </SelectItem>
                                            ))}
                                        </Select>

                                        <Button
                                            type="button"
                                            variant="outline"
                                            onClick={fetchSysInfo}
                                            disabled={fetchingSystemInfo || !formData.probeId || savedDataToBePopulated != undefined}
                                            className={`border-slate-600 text-slate-300 hover:text-white bg-transparent 
                                            ${(fetchingSystemInfo || !formData.probeId || savedDataToBePopulated != undefined) ? "cursor-not-allowed" : "cursor-pointer"}`}
                                        >
                                            {fetchingSystemInfo ? "Fetching..." : "Fetch System Info"}
                                        </Button>
                                    </div>

                                    {errors.probe_id ? (
                                        <p className="text-xs text-red-500">
                                            {errors.probe_id}
                                        </p>
                                    ) : undefined}
                                </div>

                                {fetchingSystemInfo ? (<ModalLoader />) :
                                    <div>
                                        <div className="flex gap-4">
                                            <div className="flex-1 space-y-2">
                                                <Label htmlFor="probeMachineIp" className="text-sm font-medium text-widget-mainHeader">
                                                    IP Address <span className="text-red-500">*</span>
                                                </Label>

                                                <IpInput
                                                    name="probeMachineIp"
                                                    id="probeMachineIp"
                                                    error={!!errors.probe_machine_ip}
                                                    value={formData.probeMachineIp}
                                                    onChangeFunction={handleIpInputChange}
                                                    disabled={true}
                                                />

                                                {errors.probe_machine_ip && (
                                                    <p className="text-xs text-red-500">
                                                        {errors.probe_machine_ip}
                                                    </p>
                                                )}
                                            </div>

                                            <div className="flex-1 space-y-2">
                                                <Label htmlFor="probeMachineHostname" className="text-sm font-medium text-widget-mainHeader">
                                                    Host Name <span className="text-red-500">*</span>
                                                </Label>

                                                <Input
                                                    id="probeMachineHostname"
                                                    name="probeMachineHostname"
                                                    value={formData.probeMachineHostname}
                                                    disabled={true}
                                                    className={
                                                        errors.probe_machine_hostname
                                                            ? "w-full border border-red-500 rounded-md"
                                                            : "w-full"
                                                    }
                                                    onChange={handleInputChange}
                                                    placeholder="e.g., KERLPTP-10"
                                                />

                                                {errors.probe_machine_hostname && (
                                                    <p className="text-xs text-red-500">
                                                        {errors.probe_machine_hostname}
                                                    </p>
                                                )}
                                            </div>

                                            <div className="flex-1 space-y-2">
                                                <Label htmlFor="probeMachineOs" className="text-sm font-medium text-widget-mainHeader">
                                                    Operating System <span className="text-red-500">*</span>
                                                </Label>

                                                <div className="space-y-2">
                                                    <Input
                                                        id="probeMachineOs"
                                                        name="probeMachineOs"
                                                        value={formData.probeMachineOs}
                                                        disabled={true}
                                                        className={
                                                            errors.probe_machine_os
                                                                ? "w-full border border-red-500 rounded-md"
                                                                : "w-full"
                                                        }
                                                        onChange={handleInputChange}
                                                        placeholder="e.g., Windows"
                                                    />

                                                    {errors.probe_machine_os ? (
                                                        <p className="text-xs text-red-500">
                                                            {errors.probe_machine_os}
                                                        </p>
                                                    ) : undefined}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                {/* <div className="flex gap-11">
                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Default Gateway <span className="text-red-500">*</span>
                                        </Label>
                                        <IpInput
                                            name="defaultGateway"
                                            id="defaultGateway"
                                            error={!!errors.defaultGateway}
                                            value={formData.defaultGateway}
                                            onChangeFunction={handleIpInputChange}
                                            disabled={savedDataToBePopulated ? true : false}
                                        />

                                        {errors.defaultGateway && (
                                            <p className="text-xs text-red-500">
                                                {errors.defaultGateway}
                                            </p>
                                        )}
                                    </div>

                                    <div className="flex-1 space-y-2"></div>
                                </div> */}
                            </div>

                            {/* Section 5: Agent Network Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">
                                    Agent Network Configuration
                                </h3>
                                <div className="flex items-center gap-2 mb-2">
                                    <Tooltip>
                                        <TooltipTrigger>
                                            <Info className="w-4 h-4 text-slate-400" />
                                        </TooltipTrigger>
                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                            <p>Enter the IP settings of the machine running the pentest tool for report context.</p>
                                        </TooltipContent>
                                    </Tooltip>
                                    <span className="text-sm text-slate-400">Network Configuration for the Testing Agent</span>
                                </div>

                                <div className="flex gap-11">
                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Agent IP Address <span className="text-red-500">*</span>
                                        </Label>
                                        <IpInput
                                            name="agentIp"
                                            id="agentIp"
                                            error={!!errors.agentIp}
                                            value={formData.agentIp}
                                            onChangeFunction={handleIpInputChange}
                                            disabled={savedDataToBePopulated ? true : false}
                                        />

                                        {errors.agentIp && (
                                            <p className="text-xs text-red-500">
                                                {errors.agentIp}
                                            </p>
                                        )}
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Subnet Mask <span className="text-red-500">*</span>
                                        </Label>
                                        <IpInput
                                            name="subnetMask"
                                            id="subnetMask"
                                            error={!!errors.subnetMask}
                                            value={formData.subnetMask}
                                            onChangeFunction={handleIpInputChange}
                                            disabled={savedDataToBePopulated ? true : false}
                                        />

                                        {errors.subnetMask && (
                                            <p className="text-xs text-red-500">
                                                {errors.subnetMask}
                                            </p>
                                        )}
                                    </div>
                                </div>

                                <div className="flex gap-11">
                                    <div className="flex-1 space-y-2">
                                        <Label className="text-sm font-medium text-widget-mainHeader">
                                            Default Gateway <span className="text-red-500">*</span>
                                        </Label>
                                        <IpInput
                                            name="defaultGateway"
                                            id="defaultGateway"
                                            error={!!errors.defaultGateway}
                                            value={formData.defaultGateway}
                                            onChangeFunction={handleIpInputChange}
                                            disabled={savedDataToBePopulated ? true : false}
                                        />

                                        {errors.defaultGateway && (
                                            <p className="text-xs text-red-500">
                                                {errors.defaultGateway}
                                            </p>
                                        )}
                                    </div>

                                    {/* For Alignment Purpose, a blank div has been used */}
                                    <div className="flex-1 space-y-2"></div>
                                </div>
                            </div>
                        </div>

                        {/* Form Actions */}
                        <div className="flex justify-end gap-3 py-4 px-8 border-t border-slate-200 dark:border-slate-700">
                            <Button type="button" variant="outline" onClick={onClose} className="border-slate-600 text-slate-300 hover:text-white bg-transparent">
                                Cancel
                            </Button>
                            <Button
                                type="button"
                                className="bg-blue-600 hover:bg-blue-700 text-white"
                                disabled={loading}
                                onClick={savedDataToBePopulated ? handleConfigUpdate : handleSubmit}
                            >
                                {loading ? "Saving..." : `${savedDataToBePopulated ? "Update" : "Save"} Configuration`}
                            </Button>
                        </div>
                    </form>
                </TooltipProvider>
            </DialogPanel>
        </Dialog >
    )
}
