"use client"

import type React from "react"

import { ChangeEvent, useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/Input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import { Plus, Trash2, Info, X } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Dialog, DialogPanel, Select, SelectItem, Textarea } from "@tremor/react"

interface NetworkPentestConfigFormProps {
    isFormModalOpen: boolean;
    onClose: () => void;
    savedDataToBePopulated?: any
}

interface ErrorState {
    [key: string]: string;
}

export function NetworkPentestConfigForm({ isFormModalOpen, onClose, savedDataToBePopulated }: NetworkPentestConfigFormProps) {
    const [errors, setErrors] = useState<ErrorState>({});
    const [formData, setFormData] = useState({
        clientName: "",
        pentestName: "",
        pentestDescription: "",
        scopeType: "array-ips",
        aggressiveness: "",
        ipAddresses: [""],
        startIp: "",
        endIp: "",
        cidrRange: "",
        hostName: "",
        // allowedActions: {
        //     exploitation: false,
        //     passwordAttacks: false,
        //     hashDumping: false,
        //     dosChecks: false,
        // },
        allowedActions: [""],
        agentIp: "",
        subnetMask: "",
        defaultGateway: "",
    });

    // Validate form
    const validateForm = (): boolean => {
        const newErrors: ErrorState = {};

        if (formData.clientName.trim().length < 3) {
            newErrors.clientName =
                "Client Name must be at least 3 characters long. Please provide a valid Client Name";
        }

        if (formData.pentestName.trim().length < 3) {
            newErrors.pentestName =
                "Penetration Test Name must be at least 3 characters long. Please provide a valid Penetration Test Name";
        }

        if (!formData.pentestDescription.trim()) {
            newErrors.pentestDescription =
                "Penetration Test must be described. Please describe your Penetration Test!";
        }

        if (!formData.scopeType) {
            newErrors.scopeType = "Please select a Scope!";
        }

        if (!formData.aggressiveness.trim()) {
            newErrors.aggressiveness = "Please select Test Aggressiveness!";
        }

        if (!formData.agentIp.trim()) {
            newErrors.agentIp = "Agent IP must be specified. Please provide a Agent IP!";
        }

        if (!formData.subnetMask.trim()) {
            newErrors.subnetMask = "Subnet Mask must be specified. Please provide a Subnet Mask!";
        }

        if (!formData.defaultGateway) {
            newErrors.defaultGateway = "Default Gateway must be specified. Please provide a Default Gateway!";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Standard input handler
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLTextAreaElement> | any
    ) => {
        const { name, value } = e.target;
        setErrors({});
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleScopeTypeChange = (value: string) => {
        setFormData((prev) => ({ ...prev, scopeType: value }))
    }

    const handleIpChange = (index: number, value: string) => {
        const newIps = [...formData.ipAddresses]
        newIps[index] = value
        setFormData((prev) => ({ ...prev, ipAddresses: newIps }))
    }

    const addIpField = () => {
        setFormData((prev) => ({ ...prev, ipAddresses: [...prev.ipAddresses, ""] }))
    }

    const removeIpField = (index: number) => {
        const newIps = formData.ipAddresses.filter((_, i) => i !== index)
        setFormData((prev) => ({ ...prev, ipAddresses: newIps }))
    }

    const handleStartIpChange = (value: string) => {
        setFormData((prev) => ({ ...prev, startIp: value }))
        // Auto-fill first two octets of end IP
        const octets = value.split(".")
        if (octets.length >= 2) {
            const endIpPrefix = `${octets[0]}.${octets[1]}.`
            const currentEndIp = formData.endIp
            const endIpOctets = currentEndIp.split(".")
            if (endIpOctets.length >= 2) {
                setFormData((prev) => ({
                    ...prev,
                    endIp: `${endIpPrefix}${endIpOctets[2] || ""}.${endIpOctets[3] || ""}`,
                }))
            }
        }
    }

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()
        // onSave({
        //     clientName: formData.clientName,
        //     pentestName: formData.pentestName,
        //     scopeType:
        //         formData.scopeType === "array-ips"
        //             ? "Array of IPs"
        //             : formData.scopeType === "ip-range"
        //                 ? "IP Range"
        //                 : formData.scopeType === "cidr"
        //                     ? "CIDR Network Range"
        //                     : "Host Name",
        //     aggressiveness:
        //         formData.aggressiveness === "stealthy"
        //             ? "Stealthy"
        //             : formData.aggressiveness === "normal"
        //                 ? "Normal"
        //                 : "Aggressive",
        // })
    }

    const handleClose = () => {
        // setFormData({
        //     target: '',
        //     pentestName: '',
        //     clientName: '',
        //     pentestDescription: '',
        //     scope: '',
        //     testingType: '',
        //     startDate: '',
        //     endDate: '',
        //     timeZone: '',
        //     priorityLevel: '',
        //     securityLevel: '',
        // });
        // setErrors({});

        onClose();
    };

    return (
        <Dialog open={isFormModalOpen} onClose={onClose} static={true}>
            <DialogPanel className="overflow-visible rounded-md p-0 sm:max-w-5xl">
                <TooltipProvider>
                    <form action="#" method="POST" onSubmit={handleSubmit}>
                        {/* Form Header */}
                        <div className="flex justify-between items-center gap-3 py-4 px-6 border-b border-slate-200 dark:border-slate-700">
                            <h3 className="text-xl text-tremor-content-strong dark:text-dark-tremor-content-strong">
                                Configure Web Application Penetration Test
                            </h3>
                            <button type="button" aria-label="Close"
                                className="rounded-sm p-2 text-tremor-content-subtle hover:bg-tremor-background-subtle hover:text-tremor-content
                            dark:text-dark-tremor-content-subtle hover:dark:bg-dark-tremor-background-subtle hover:dark:text-tremor-content">
                                <X className="size-5 shrink-0" onClick={() => handleClose()} aria-hidden={true} />
                            </button>
                        </div>

                        <div className="max-h-[80vh] overflow-y-auto py-4 px-6 space-y-8">
                            {/* Section 1: Project Information */}
                            <div className="space-y-4">
                                <h3 className="text-lg text-gray-600 dark:text-slate-300 border-b border-slate-200 dark:border-slate-700 pb-2">Project Information</h3>

                                <div className="flex gap-4">
                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="clientName" className="text-sm font-medium text-widget-mainHeader">
                                            Client Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="clientName"
                                                name="clientName"
                                                value={formData.clientName}
                                                disabled={savedDataToBePopulated ? true : false}
                                                className={
                                                    errors.clientName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Carta Worldwide"
                                            />

                                            {errors.clientName ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.clientName}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>

                                    <div className="flex-1 space-y-2">
                                        <Label htmlFor="pentestName" className="text-sm font-medium text-widget-mainHeader">
                                            Configuration Name <span className="text-red-500">*</span>
                                        </Label>

                                        <div className="space-y-2">
                                            <Input
                                                id="pentestName"
                                                name="pentestName"
                                                value={formData.pentestName}
                                                className={
                                                    errors.pentestName
                                                        ? "w-full border border-red-500 rounded-md"
                                                        : "w-full"
                                                }
                                                onChange={handleInputChange}
                                                placeholder="e.g., Canadian Internal Web Application Pentest - Q3 2025"
                                            />

                                            {errors.pentestName ? (
                                                <p className="text-xs text-red-500">
                                                    {errors.pentestName}
                                                </p>
                                            ) : undefined}
                                        </div>
                                    </div>
                                </div>


                                <div className="flex-1 space-y-2">
                                    <Label htmlFor="pentestDescription" className="text-sm font-medium text-widget-mainHeader">
                                        Description <span className="text-red-500">*</span>
                                    </Label>

                                    <div className="space-y-2">
                                        <Textarea
                                            rows={3}
                                            id="pentestDescription"
                                            name="pentestDescription"
                                            value={formData.pentestDescription}
                                            className={
                                                errors.pentestDescription
                                                    ? "w-full ring-1 ring-red-500 rounded-md"
                                                    : "w-full"
                                            }
                                            onChange={handleInputChange}
                                            placeholder="Enter Penetration Test Description"
                                        />

                                        {errors.pentestDescription ? (
                                            <p className="text-xs text-red-500">
                                                {errors.pentestDescription}
                                            </p>
                                        ) : undefined}
                                    </div>
                                </div>
                            </div>

                            {/* Section 2: Target Scope */}
                            <div className="space-y-4">
                                <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">Target Scope</h3>

                                <div className="space-y-4">
                                    <Label className="text-slate-300">Scope Selection</Label>
                                    <RadioGroup className="flex flex-wrap justify-between" value={formData.scopeType} onValueChange={handleScopeTypeChange}>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="array-ips" id="array-ips" className="border-slate-600" />
                                            <Label htmlFor="array-ips" className="text-slate-300">
                                                Array of IPs
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="ip-range" id="ip-range" className="border-slate-600" />
                                            <Label htmlFor="ip-range" className="text-slate-300">
                                                IP Range
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="cidr" id="cidr" className="border-slate-600" />
                                            <Label htmlFor="cidr" className="text-slate-300">
                                                CIDR Network Range
                                            </Label>
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <RadioGroupItem value="hostname" id="hostname" className="border-slate-600" />
                                            <Label htmlFor="hostname" className="text-slate-300">
                                                Host Name
                                            </Label>
                                        </div>
                                    </RadioGroup>

                                    {/* Dynamic input based on scope type */}
                                    {formData.scopeType === "array-ips" && (
                                        <div className="space-y-2">
                                            <Label className="text-slate-300">IP Addresses</Label>
                                            {formData.ipAddresses.map((ip, index) => (
                                                <div key={index} className="flex gap-2">
                                                    <Input
                                                        placeholder="192.168.1.1"
                                                        value={ip}
                                                        onChange={(e) => handleIpChange(index, e.target.value)}
                                                        className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                                    />
                                                    {formData.ipAddresses.length > 1 && (
                                                        <Button
                                                            type="button"
                                                            variant="outline"
                                                            size="icon"
                                                            onClick={() => removeIpField(index)}
                                                            className="border-slate-600 text-slate-400 hover:text-white"
                                                        >
                                                            <Trash2 className="w-4 h-4" />
                                                        </Button>
                                                    )}
                                                </div>
                                            ))}
                                            <Button
                                                type="button"
                                                variant="outline"
                                                onClick={addIpField}
                                                className="border-slate-600 text-slate-300 hover:text-white bg-transparent"
                                            >
                                                <Plus className="w-4 h-4 mr-2" />
                                                Add IP
                                            </Button>
                                        </div>
                                    )}

                                    {formData.scopeType === "ip-range" && (
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label className="text-slate-300">Start IP</Label>
                                                <Input
                                                    placeholder="192.168.1.1"
                                                    value={formData.startIp}
                                                    onChange={(e) => handleStartIpChange(e.target.value)}
                                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                                />
                                            </div>
                                            <div className="space-y-2">
                                                <Label className="text-slate-300">End IP</Label>
                                                <Input
                                                    placeholder="192.168.1.254"
                                                    value={formData.endIp}
                                                    onChange={(e) => setFormData((prev) => ({ ...prev, endIp: e.target.value }))}
                                                    className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                                />
                                            </div>
                                        </div>
                                    )}

                                    {formData.scopeType === "cidr" && (
                                        <div className="space-y-2">
                                            <Label className="text-slate-300">CIDR Network Range</Label>
                                            <Input
                                                placeholder="192.168.1.0/24"
                                                value={formData.cidrRange}
                                                onChange={(e) => setFormData((prev) => ({ ...prev, cidrRange: e.target.value }))}
                                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                            />
                                        </div>
                                    )}

                                    {formData.scopeType === "hostname" && (
                                        <div className="space-y-2">
                                            <Label className="text-slate-300">Host Name</Label>
                                            <Input
                                                placeholder="example.com"
                                                value={formData.hostName}
                                                onChange={(e) => setFormData((prev) => ({ ...prev, hostName: e.target.value }))}
                                                className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                            />
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Section 3: Rules of Engagement & Scan Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">
                                    Rules of Engagement & Scan Configuration
                                </h3>

                                <div className="space-y-4">
                                    <div className="space-y-2">
                                        <div className="flex items-center gap-2">
                                            <Label className="text-slate-300">Test Aggressiveness</Label>
                                            <Tooltip>
                                                <TooltipTrigger>
                                                    <Info className="w-4 h-4 text-slate-400" />
                                                </TooltipTrigger>
                                                <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                    <p>
                                                        Controls scan intensity. 'Aggressive' is more likely to be detected by firewalls or security
                                                        teams.
                                                    </p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </div>
                                        <Select
                                            id="priorityLevel"
                                            name="priorityLevel"
                                            value={formData.aggressiveness}
                                            // className={
                                            //     errors.priorityLevel
                                            //         ? "w-full border border-red-500"
                                            //         : "w-full"
                                            // }
                                            className="w-full"
                                            onValueChange={(val) => {
                                                setFormData((prev) => ({ ...prev, aggressiveness: val }))
                                            }}
                                        >
                                            <SelectItem value="Stealthy">Stealthy</SelectItem>
                                            <SelectItem value="Normal">Normal (Recommended)</SelectItem>
                                            <SelectItem value="Aggressive">Aggressive</SelectItem>
                                        </Select>
                                    </div>

                                    <div className="space-y-3">
                                        <Label className="text-slate-300">Allowed Actions</Label>
                                        <div className="space-y-2">
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="exploitation"
                                                    checked={formData.allowedActions.includes("exploitation")}
                                                    onCheckedChange={(checked) =>
                                                        setFormData((prev) => ({
                                                            ...prev,
                                                            allowedActions: { ...prev.allowedActions, exploitation: checked as boolean },
                                                        }))
                                                    }
                                                    className="border-slate-600"
                                                />
                                                <Label htmlFor="exploitation" className="text-slate-300">
                                                    Perform exploitation attempts
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="passwordAttacks"
                                                    checked={formData.allowedActions.includes("passwordAttacks")}
                                                    onCheckedChange={(checked) =>
                                                        setFormData((prev) => ({
                                                            ...prev,
                                                            allowedActions: { ...prev.allowedActions, passwordAttacks: checked as boolean },
                                                        }))
                                                    }
                                                    className="border-slate-600"
                                                />
                                                <Label htmlFor="passwordAttacks" className="text-slate-300">
                                                    Conduct password attacks
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="hashDumping"
                                                    checked={formData.allowedActions.includes("hashDumping")}
                                                    onCheckedChange={(checked) =>
                                                        setFormData((prev) => ({
                                                            ...prev,
                                                            allowedActions: { ...prev.allowedActions, hashDumping: checked as boolean },
                                                        }))
                                                    }
                                                    className="border-slate-600"
                                                />
                                                <Label htmlFor="hashDumping" className="text-slate-300">
                                                    Allow password/hash dumping
                                                </Label>
                                            </div>
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="dosChecks"
                                                    checked={formData.allowedActions.includes("dosChecks")}
                                                    onCheckedChange={(checked) =>
                                                        setFormData((prev) => ({
                                                            ...prev,
                                                            allowedActions: { ...prev.allowedActions, dosChecks: checked as boolean },
                                                        }))
                                                    }
                                                    className="border-slate-600"
                                                />
                                                <Label htmlFor="dosChecks" className="text-slate-300 flex items-center gap-2">
                                                    Perform Denial-of-Service (DoS) checks
                                                    <Tooltip>
                                                        <TooltipTrigger>
                                                            <Info className="w-4 h-4 text-red-400" />
                                                        </TooltipTrigger>
                                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                                            <p className="text-red-300">Warning: High Risk</p>
                                                        </TooltipContent>
                                                    </Tooltip>
                                                </Label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Section 4: Agent Network Configuration */}
                            <div className="space-y-4">
                                <h3 className="text-lg font-semibold text-slate-300 border-b border-slate-700 pb-2">
                                    Agent Network Configuration
                                </h3>
                                <div className="flex items-center gap-2 mb-2">
                                    <Tooltip>
                                        <TooltipTrigger>
                                            <Info className="w-4 h-4 text-slate-400" />
                                        </TooltipTrigger>
                                        <TooltipContent className="bg-slate-800 border-slate-600 text-white">
                                            <p>Enter the IP settings of the machine running the pentest tool for report context.</p>
                                        </TooltipContent>
                                    </Tooltip>
                                    <span className="text-sm text-slate-400">Network configuration for the testing agent</span>
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div className="space-y-2">
                                        <Label className="text-slate-300">Agent IP Address</Label>
                                        <Input
                                            placeholder="192.168.1.100"
                                            value={formData.agentIp}
                                            onChange={(e) => setFormData((prev) => ({ ...prev, agentIp: e.target.value }))}
                                            className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                        />
                                    </div>
                                    <div className="space-y-2">
                                        <Label className="text-slate-300">Subnet Mask</Label>
                                        <Input
                                            placeholder="255.255.255.0"
                                            value={formData.subnetMask}
                                            onChange={(e) => setFormData((prev) => ({ ...prev, subnetMask: e.target.value }))}
                                            className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                        />
                                    </div>
                                    <div className="space-y-2">
                                        <Label className="text-slate-300">Default Gateway</Label>
                                        <Input
                                            placeholder="192.168.1.1"
                                            value={formData.defaultGateway}
                                            onChange={(e) => setFormData((prev) => ({ ...prev, defaultGateway: e.target.value }))}
                                            className="bg-slate-800 border-slate-600 text-white placeholder:text-slate-400"
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Form Actions */}
                        <div className="flex justify-end gap-3 py-4 px-8 border-t border-slate-200 dark:border-slate-700">
                            <Button type="button" variant="outline" onClick={onClose} className="border-slate-600 text-slate-300 hover:text-white bg-transparent">
                                Cancel
                            </Button>
                            <Button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white">
                                Save Configuration
                            </Button>
                        </div>
                    </form>
                </TooltipProvider>
            </DialogPanel>
        </Dialog>
    )
}
