"use client";

import { Card } from '@tremor/react';
import React, { useEffect } from 'react';
import { format } from 'date-fns';
import { BasicDetails } from '../../components/type';
import { usePentestContext } from '../components/PentestContext';
import GlobalLoader from '@/components/GlobalLoader';
import {
    Calendar,
    Clock,
    Target,
    Shield,
    AlertTriangle,
    Globe,
    CheckCircle2,
    Flag,
    FileText
} from 'lucide-react';

const getPriorityConfig = (priority: string) => {
    switch (priority?.toLowerCase()) {
        case 'high':
            return {
                color: 'bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800',
                icon: <AlertTriangle className="w-4 h-4" />,
                dot: 'bg-red-500'
            };
        case 'medium':
            return {
                color: 'bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800',
                icon: <Flag className="w-4 h-4" />,
                dot: 'bg-amber-500'
            };
        case 'low':
            return {
                color: 'bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800',
                icon: <CheckCircle2 className="w-4 h-4" />,
                dot: 'bg-green-500'
            };
        default:
            return {
                color: 'bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-900/20 dark:text-gray-400 dark:border-gray-800',
                icon: <Flag className="w-4 h-4" />,
                dot: 'bg-gray-500'
            };
    }
};

const getSecurityConfig = (level: string) => {
    switch (level?.toLowerCase()) {
        case 'high':
            return {
                color: 'bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800',
                icon: <Shield className="w-4 h-4" />,
                dot: 'bg-emerald-500'
            };
        case 'medium':
            return {
                color: 'bg-yellow-50 text-yellow-700 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400 dark:border-yellow-800',
                icon: <Shield className="w-4 h-4" />,
                dot: 'bg-yellow-500'
            };
        case 'low':
            return {
                color: 'bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800',
                icon: <Shield className="w-4 h-4" />,
                dot: 'bg-red-500'
            };
        default:
            return {
                color: 'bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-900/20 dark:text-gray-400 dark:border-gray-800',
                icon: <Shield className="w-4 h-4" />,
                dot: 'bg-gray-500'
            };
    }
};

interface DetailItemProps {
    icon: React.ReactNode;
    label: string;
    value: string | React.ReactNode;
    className?: string;
}

const DetailItem: React.FC<DetailItemProps> = ({ icon, label, value, className = "" }) => (
    <div className={`group ${className}`}>
        <div className="flex items-center gap-2 mb-2">
            <div className="text-gray-400 dark:text-gray-500 group-hover:text-blue-500 transition-colors duration-200">
                {icon}
            </div>
            <label className="text-sm font-medium text-gray-600 dark:text-gray-400 group-hover:text-gray-800 dark:group-hover:text-gray-200 transition-colors duration-200">
                {label}
            </label>
        </div>
        <div className="ml-6">
            {typeof value === 'string' ? (
                <p className="text-gray-900 dark:text-gray-100 font-medium leading-relaxed">
                    {value}
                </p>
            ) : (
                value
            )}
        </div>
    </div>
);

interface StatusBadgeProps {
    config: ReturnType<typeof getPriorityConfig>;
    value: string;
}

const StatusBadge: React.FC<StatusBadgeProps> = ({ config, value }) => (
    <div className={`inline-flex items-center gap-2 px-3 py-2 rounded-lg border font-medium text-sm transition-all duration-200 hover:shadow-sm ${config.color}`}>
        <div className={`w-2 h-2 rounded-full ${config.dot}`} />
        {config.icon}
        <span>{value}</span>
    </div>
);

export default function BasicDetailsWidget({ pentestIdName }: { pentestIdName: string; }) {
    const [pentestId, pentestName] = pentestIdName.split("_");
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId, setPentestId]);

    if (error) return (
        <div className="p-6 text-center">
            <div className="text-red-600 dark:text-red-400">{error}</div>
        </div>
    );

    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const pentestSubPartData: BasicDetails = { ...pentestData.basicDetails };
    const priorityConfig = getPriorityConfig(pentestSubPartData.priorityLevel);
    const securityConfig = getSecurityConfig(pentestSubPartData.securityLevel);

    return (
        <div className="space-y-6">
            {/* Header Section */}
            <div className="border-b border-gray-200 dark:border-gray-700 pb-4">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
                    Test Configuration
                </h2>
                <p className="text-gray-600 dark:text-gray-400">
                    Comprehensive security assessment details and timeline
                </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                {/* Test Details Card */}
                <Card className="p-6 rounded-xl border-0 shadow-sm bg-white dark:bg-gray-900 hover:shadow-md transition-shadow duration-300">
                    <div className="flex items-center gap-3 mb-4">
                        <div className="p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                            <Target className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                        </div>
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                            Test Details
                        </h3>
                    </div>

                    <div className="space-y-6">
                        <DetailItem
                            icon={<Globe className="w-4 h-4" />}
                            label="Web Application"
                            value={pentestSubPartData.target}
                        />

                        <DetailItem
                            icon={<FileText className="w-4 h-4" />}
                            label="Testing Type"
                            value={pentestSubPartData.testingType}
                        />

                        <DetailItem
                            icon={<Target className="w-4 h-4" />}
                            label="Scope"
                            value={pentestSubPartData.scope}
                        />

                        <DetailItem
                            icon={<AlertTriangle className="w-4 h-4" />}
                            label="Priority Level"
                            value={
                                <StatusBadge
                                    config={priorityConfig}
                                    value={pentestSubPartData.priorityLevel}
                                />
                            }
                        />

                        <DetailItem
                            icon={<Shield className="w-4 h-4" />}
                            label="Security Level"
                            value={
                                <StatusBadge
                                    config={securityConfig}
                                    value={pentestSubPartData.securityLevel || "Not Specified"}
                                />
                            }
                        />
                    </div>
                </Card>

                {/* Timeline Card */}
                <Card className="p-6 rounded-xl border-0 shadow-sm bg-white dark:bg-gray-900 hover:shadow-md transition-shadow duration-300">
                    <div className="flex items-center gap-3 mb-6">
                        <div className="p-2 bg-green-50 dark:bg-green-900/20 rounded-lg">
                            <Calendar className="w-5 h-5 text-green-600 dark:text-green-400" />
                        </div>
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                            Timeline
                        </h3>
                    </div>

                    <div className="space-y-6">
                        <DetailItem
                            icon={<Calendar className="w-4 h-4" />}
                            label="Start Date"
                            value={
                                <div className="space-y-1">
                                    <div className="text-gray-900 dark:text-gray-100 font-medium">
                                        {format(new Date(pentestSubPartData.startDate), "EEEE, MMMM do, yyyy")}
                                    </div>
                                    <div className="text-sm text-gray-500 dark:text-gray-400">
                                        {format(new Date(pentestSubPartData.startDate), "HH:mm")}
                                    </div>
                                </div>
                            }
                        />

                        <DetailItem
                            icon={<Calendar className="w-4 h-4" />}
                            label="End Date"
                            value={
                                <div className="space-y-1">
                                    <div className="text-gray-900 dark:text-gray-100 font-medium">
                                        {format(new Date(pentestSubPartData.endDate), "EEEE, MMMM do, yyyy")}
                                    </div>
                                    <div className="text-sm text-gray-500 dark:text-gray-400">
                                        {format(new Date(pentestSubPartData.endDate), "HH:mm")}
                                    </div>
                                </div>
                            }
                        />

                        <DetailItem
                            icon={<Clock className="w-4 h-4" />}
                            label="Time Zone"
                            value={
                                <div className="inline-flex items-center gap-2 px-3 py-1 bg-gray-50 dark:bg-gray-800 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300">
                                    <Clock className="w-3 h-3" />
                                    {pentestSubPartData.timeZone}
                                </div>
                            }
                        />

                        {/* Duration Calculation */}
                        <DetailItem
                            icon={<Clock className="w-4 h-4" />}
                            label="Duration"
                            value={
                                <div className="text-gray-900 dark:text-gray-100 font-medium">
                                    {(() => {
                                        const start = new Date(pentestSubPartData.startDate);
                                        const end = new Date(pentestSubPartData.endDate);
                                        const diffTime = Math.abs(end.getTime() - start.getTime());
                                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                        return `${diffDays} ${diffDays === 1 ? 'day' : 'days'}`;
                                    })()}
                                </div>
                            }
                        />
                    </div>
                </Card>
            </div>

            {/* Objectives Card */}
            <Card className="p-6 rounded-xl border-0 shadow-sm bg-white dark:bg-gray-900 hover:shadow-md transition-shadow duration-300">
                <div className="flex items-center gap-3 mb-6">
                    <div className="p-2 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                        <FileText className="w-5 h-5 text-purple-600 dark:text-purple-400" />
                    </div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                        Test Objectives
                    </h3>
                </div>

                <div className="prose prose-gray dark:prose-invert max-w-none">
                    <p className="text-gray-700 dark:text-gray-300 leading-relaxed text-base">
                        {pentestSubPartData.pentestDescription}
                    </p>
                </div>
            </Card>
        </div>
    );
}