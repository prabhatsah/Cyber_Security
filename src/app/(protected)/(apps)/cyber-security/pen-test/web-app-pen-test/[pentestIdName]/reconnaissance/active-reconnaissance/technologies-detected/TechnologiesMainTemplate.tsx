"use client";

import GlobalLoader from "@/components/GlobalLoader";
import { usePentestContext } from "../../../components/PentestContext";
import { useEffect } from "react";
import { Card, Title } from "@tremor/react";
import { BasicInfoWidget } from "@/components/BasicInfoWidget";
import { BasicInfoWidgetData, ParsedWhatWebData } from "../components/type";
import TechnologySummaryWidgets from "./components/TechnologySummaryWidgets";


export default function TechnologiesMainTemplate({ pentestIdName }: { pentestIdName: string; }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const { pentestData, loading, error, setPentestId } = usePentestContext();

    useEffect(() => {
        if (typeof pentestId === 'string') {
            setPentestId(pentestId);
        }
    }, [pentestId]);

    if (error) return <div>{error}</div>;
    if (!pentestData && !loading) return <div></div>;
    if (loading || !pentestData) return <GlobalLoader />;

    const whatWeb: string = pentestData?.scanData.whatweb ?? "";

    const parseWhatWebOutput = (whatWebOutput: string): ParsedWhatWebData[] => {
        const sections = whatWebOutput.split(/WhatWeb report for /).filter(Boolean);
        const results: ParsedWhatWebData[] = [];

        sections.forEach(section => {
            const lines = section.split('\n');
            let result: ParsedWhatWebData = {
                country: "N/A",
                headers: [],
                ip: "N/A,",
                plugins: [],
                status: "N/A",
                summary: "N/A",
                title: "N/A",
                url: "N/A",
            };

            // URL
            result.url = lines[0].trim();

            // Key-value fields (Status, Title, IP, Country)
            lines.forEach(line => {
                if (line.startsWith('Status')) result.status = line.split(':')[1]?.trim();
                if (line.startsWith('Title')) result.title = line.split(':')[1]?.trim();
                if (line.startsWith('IP')) result.ip = line.split(':')[1]?.trim();
                if (line.startsWith('Country')) result.country = line.split(':')[1]?.trim();
                if (line.startsWith('Summary')) result.summary = line.split(':')[1]?.trim();
            });

            // Detected plugins
            const pluginSection = section.match(/Detected Plugins:\n([\s\S]*?)\nHTTP Headers:/);
            if (pluginSection) {
                const pluginsRaw = pluginSection[1];
                const pluginNames = [...pluginsRaw.matchAll(/\[ ([^\]]+) \]/g)].map(m => m[1]);
                result.plugins = pluginNames;
            }

            // HTTP headers
            const headersMatch = section.match(/HTTP Headers:\n([\s\S]*?)\nhttps?:\/\//);
            if (headersMatch) {
                const rawHeaders = headersMatch[1].trim().split('\n').map(line => line.trim());
                result.headers = rawHeaders;
            }

            results.push(result);
        });

        return results;
    }
    const whatWebOutput = whatWeb.replace(/\u001b\[[0-9;]*m/g, '');
    const parsedWhatWebData: ParsedWhatWebData[] = parseWhatWebOutput(whatWebOutput);


    const whatWebData = parsedWhatWebData[parsedWhatWebData.length - 1];

    const basicInfoWidgetData: BasicInfoWidgetData[] = [
        {
            name: "URL/Domain",
            value: whatWebData.url,
        },
        {
            name: "Title",
            value: whatWebData.title,
        },
        {
            name: "IP Address",
            value: whatWebData.ip,
        },
        {
            name: "Status",
            value: whatWebData.status,
        },
        {
            name: "Country",
            value: whatWebData.country,
        }
    ];

    const technologies = whatWebData.summary.split(", ");
    const plugins = whatWebData.plugins;
    const headers = whatWebData.headers;

    return (
        <>
            <div className="flex flex-col gap-3">
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Basic Information</Title>
                    <BasicInfoWidget items={basicInfoWidgetData} columns={3} useDefault={false} />
                </Card>
                <Card className="flex flex-col gap-3 p-4 rounded-md">
                    <Title className="font-bold text-widget-title text-widgetHeader">Summary</Title>
                    <TechnologySummaryWidgets technologies={technologies} plugins={plugins} headers={headers} />
                </Card>
            </div>
        </>
    )
}