'use client';

import React, { useEffect, useState } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import { Cpu, EthernetPort, LayoutDashboard, Network, Loader2 } from 'lucide-react';
import GlobalLoader from '@/components/GlobalLoader';

export default function ActiveReconnaissanceSidebar({ pentestIdName }: { pentestIdName: string }) {
  const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
  const router = useRouter();
  const pathname = usePathname();
  const [loadingTab, setLoadingTab] = useState<string | null>(null);

  const tabData = [
    {
      tabName: 'Overview',
      href: `/cyber-security/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/overview`,
      Icon: LayoutDashboard,
    },
    {
      tabName: 'Sub Domains',
      href: `/cyber-security/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/sub-domains`,
      Icon: Network,
    },
    {
      tabName: 'Open Ports',
      href: `/cyber-security/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/open-ports`,
      Icon: EthernetPort,
    },
    {
      tabName: 'Technologies Detected',
      href: `/cyber-security/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/technologies-detected`,
      Icon: Cpu,
    },
  ];

  // Redirect to Overview tab if none is selected
  useEffect(() => {
    const activePath = tabData.some(tab =>
      pathname.includes(tab.tabName.toLowerCase().replace(/\s+/g, '-'))
    );
    if (!activePath && typeof pentestId === 'string') {
      router.push(tabData[0].href);
    }
  }, [pentestId]);

  // Reset loading when route changes
  useEffect(() => {
    setLoadingTab(null);
  }, [pathname]);

  const handleTabClick = (href: string, tabName: string) => {
    if (pathname === href) return;

    setLoadingTab(tabName);
    router.push(href);
  };

  return (
    <nav className="flex-1 px-2">
      <div className="space-y-1">
        {tabData.map((eachTab) => {
          const isActive = pathname.includes(eachTab.tabName.toLowerCase().replace(/\s+/g, '-'));
          // const isLoading = loadingTab === eachTab.tabName;

          if (loadingTab === eachTab.tabName) {
            return <GlobalLoader key={eachTab.tabName} />
          }

          return (
            <button
              key={eachTab.tabName}
              onClick={() => handleTabClick(eachTab.href, eachTab.tabName)}
              className={`flex w-full items-center gap-x-2.5 px-3 py-2 text-sm rounded-md transition-all truncate
                ${isActive ? 'bg-primary text-white' :
                  'text-gray-700 dark:text-gray-400 hover:bg-gray-100 hover:text-gray-900 hover:dark:text-gray-50 hover:dark:bg-gray-800'}`}
            // ${isLoading ? 'pointer-events-none' : ''}`}
            >
              <eachTab.Icon className="-ml-1 size-4" aria-hidden="true" />
              {eachTab.tabName}
              {/* {isLoading && <span className='tab-loader'></span>} */}
            </button>
          );
        })}
      </div>
    </nav>
  );
}
