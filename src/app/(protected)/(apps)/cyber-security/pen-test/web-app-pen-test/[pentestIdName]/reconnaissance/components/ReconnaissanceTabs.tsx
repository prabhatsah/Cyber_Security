'use client';

import React, { useEffect, useState } from 'react';
import { Card } from '@tremor/react';
import { usePathname, useRouter } from 'next/navigation';
import { ScanSearch, TextSearch, Loader2 } from 'lucide-react';
import GlobalLoader from '@/components/GlobalLoader';
import ReconnaissanceBtnCommon from './ReconnaissanceBtnCommon';

export default function ReconnaissanceTabs({ pentestIdName }: { pentestIdName: string }) {
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const router = useRouter();
    const pathname = usePathname();
    const [loadingTab, setLoadingTab] = useState<string | null>('Active Reconnaissance');

    const tabData = [
        {
            tabName: 'Active Reconnaissance',
            href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/active-reconnaissance/`,
            Icon: ScanSearch,
        },
        {
            tabName: 'Passive Reconnaissance',
            href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance/passive-reconnaissance`,
            Icon: TextSearch,
        },
    ];

    // Redirect to Active Reconnaissance on mount
    useEffect(() => {
        if (typeof pentestId === 'string' && !pathname.includes('active-reconnaissance') && !pathname.includes('passive-reconnaissance')) {
            router.push(tabData[0].href);
        }
    }, [pentestId]);

    // Reset loading state on route change
    useEffect(() => {
        setLoadingTab(null);
    }, [pathname]);

    const handleTabClick = (href: string, tabName: string) => {
        if (pathname === href) return;

        setLoadingTab(tabName);
        router.push(href);
    };

    return (
        <Card className="bg-tremor-background-muted p-0 dark:bg-dark-tremor-background-muted">
            <div className='flex justify-between items-center gap-3'>
                <nav className="flex gap-3">
                    {tabData.map((eachTab) => {
                        const isActive = pathname.includes(eachTab.tabName.toLowerCase().replace(/\s+/g, '-'));

                        if (loadingTab === eachTab.tabName) {
                            return <GlobalLoader key={eachTab.tabName} />
                        }

                        return (
                            <button
                                key={eachTab.tabName}
                                onClick={() => handleTabClick(eachTab.href, eachTab.tabName)}
                                className={`p-2.5 font-medium flex gap-1.5 items-center ${isActive
                                    ? 'border-b-2 border-blue-500 text-blue-600'
                                    : 'hover:border-gray-300'
                                    }`}
                            >
                                <eachTab.Icon className="-ml-1 size-4" aria-hidden="true" />
                                {eachTab.tabName}
                            </button>
                        );
                    })}
                </nav>

                <ReconnaissanceBtnCommon pentestIdName={pentestIdName} />
            </div>
        </Card>
    );
}
