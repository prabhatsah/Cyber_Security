import React from 'react';
import {
    Page,
    Text,
    View,
    StyleSheet,
    Image,
} from '@react-pdf/renderer';
import WaterMarkedPage from './WaterMarkedPage';
import { VulnerabilityImage, ZapAlertInstance } from '../../../components/type';

const pocImage = '/IkonApps/assets/images/speedometer_with_legend.png';

const styles = StyleSheet.create({
    pageContent: {
        height: '100%',
        flexDirection: 'row',
        justifyContent: 'space-between',
        color: '#545355',
        width: '100%',
    },
    subheading: {
        fontSize: 14,
        fontWeight: 'light',
        color: '#343335',
        marginBottom: 10,
    },
    normalText: {
        fontSize: 10,
        marginBottom: 15,
        textAlign: 'justify',
    },
    image: {
        width: '100%',
        marginBottom: 5,
    },
    listItems: {
        fontSize: 10,
        color: '#545355',
        marginLeft: 10,
        marginBottom: 15
    },
    bulletContainer: {
        flexDirection: 'row',
        gap: 10,
    },
    bulletPoint: {
        color: '#4f46e5',
    },
    pageNumber: {
        justifySelf: 'flex-end',
        alignSelf: 'flex-end',
        fontSize: 10,
        color: '#aaa',
    },
});


interface OwaspEachVulAlertPicturePageProps {
    companyLogoSrc: string;
    alertIndex: number;
    alertInstances: ZapAlertInstance[];
    alertImgData: VulnerabilityImage[];
    imageCounterRef: React.RefObject<number>;
    pageNumber: number;
}

function hexToBase64(hex: string): string {
    const cleanHex = hex.replace(/\\x/g, ''); // remove \\x
    const bytes = new Uint8Array(cleanHex.match(/[\da-f]{2}/gi)!.map(h => parseInt(h, 16)));
    const binary = String.fromCharCode(...bytes);
    return btoa(binary);
}

const OwaspEachVulAlertPicturePage: React.FC<OwaspEachVulAlertPicturePageProps> =
    ({ companyLogoSrc, alertIndex, alertInstances, alertImgData, imageCounterRef, pageNumber }) => (
        <WaterMarkedPage companyLogoSrc={companyLogoSrc} sectionHeader='Web Application Penetration Testing'>
            <View style={styles.pageContent}>
                <View style={{ width: '100%' }}>
                    <Text style={styles.subheading}>{`${alertIndex}.5 Evidence`}</Text>
                    {alertImgData.length === 0 ? (
                        <Text style={styles.normalText}>No Proof of Concept Available</Text>
                    ) : (
                        <>
                            {alertImgData.map((eachImageData, index) => {
                                const base64Image = `data:image/jpeg;base64,${hexToBase64(eachImageData.image)}`;
                                const currentImageNumber = imageCounterRef.current++;

                                return (
                                    <React.Fragment key={`alert-img-${index}`}>
                                        <Text style={[styles.normalText, { marginBottom: 5 }]}>{eachImageData.description}</Text>
                                        <Image src={base64Image} style={styles.image} />
                                        <Text style={[styles.normalText, { fontWeight: 700, textAlign: 'center' }]}>
                                            {`Image ${currentImageNumber} - ${eachImageData.title}`}
                                        </Text>
                                    </React.Fragment>
                                );
                            })}
                        </>
                    )}


                    <Text style={styles.subheading}>{`${alertIndex}.6 Affected Systems`}</Text>
                    <View style={styles.listItems}>
                        {[...new Set(alertInstances.map((eachInstance) => eachInstance.uri))].map((eachInstanceUri, uriIndex) => (
                            <View key={`alert-${alertIndex - 1}-instanceUrl-${uriIndex}`} style={styles.bulletContainer}>
                                <Text style={styles.bulletPoint}>â€¢</Text>
                                <Text>{eachInstanceUri}</Text>
                            </View>
                        ))}
                    </View>
                </View>

                <Text style={styles.pageNumber}>{pageNumber}</Text>
            </View>
        </WaterMarkedPage>
    );

export default OwaspEachVulAlertPicturePage;
