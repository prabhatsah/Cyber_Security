'use client';

import React, { useEffect } from 'react';
import { Card } from '@tremor/react';
import { usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';

export default function PentestTabs({ pentestIdName }: { pentestIdName: string; }) {
    // const { pentestData, loading, error, setPentestId } = usePentestContext();
    const [pentestId, pentestNameInUrl] = pentestIdName.split("_");
    const pentestName = pentestNameInUrl.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    const router = useRouter();
    const pathname = usePathname();

    // useEffect(() => {
    //     if (typeof pentestId === 'string') {
    //         setPentestId(pentestId);
    //     }
    // }, [pentestId]);

    useEffect(() => {
        if (typeof pentestId === 'string') {
            router.push(tabData[0].href);
        }
    }, [pentestId]);


    // if (loading) return <div>Loading Pentest Data...</div>;
    // if (error) return <div>{error}</div>;
    // if (!pentestData) return <div>No data found.</div>;

    const tabData = [
        {
            pentestState: 'Planning',
            // componentData: pentestData.basicDetails,
            href: `/pen-test/web-app-pen-test/${pentestIdName}/planning`
        },
        {
            pentestState: 'Reconnaissance',
            // componentData: pentestData.reconnaissance,
            href: `/pen-test/web-app-pen-test/${pentestIdName}/reconnaissance`
        },
        {
            pentestState: 'Vulnerability Scanning',
            // componentData: pentestData.vulnerabilityScanning,
            href: `/pen-test/web-app-pen-test/${pentestIdName}/vulnerability-scanning`
        },
        {
            pentestState: 'Exploitation',
            // componentData: pentestData.exploitation,
            href: `/pen-test/web-app-pen-test/${pentestIdName}/exploitation`
        },
        {
            pentestState: 'Post Exploitation',
            // componentData: pentestData.postExploitation,
            href: `/pen-test/web-app-pen-test/${pentestIdName}/post-exploitation`
        },
        {
            pentestState: 'AI Analysis',
            // componentData: pentestData.aiAnalysis,
            href: `/pen-test/web-app-pen-test/${pentestIdName}/ai-analysis`
        },
    ];

    return (
        <>
            <Card className="bg-tremor-background-muted p-0 dark:bg-dark-tremor-background-muted">
                <nav className="flex px-4 gap-3">
                    {tabData.map((eachTab, index) => {
                        const isActive = pathname.includes(eachTab.pentestState.toLowerCase().replace(/\s+/g, '-'));
                        return (
                            <Link
                                key={eachTab.pentestState}
                                href={eachTab.href}
                                className={`p-2.5 font-medium flex gap-2 items-center ${isActive
                                    ? 'border-b-2 border-blue-500 text-blue-600'
                                    : 'hover:border-gray-300'
                                    }`}
                            >
                                <span>{index + 1}.</span>
                                {eachTab.pentestState}

                                {/* {eachTab.componentData !== null && (
                                    <div className='flex items-center justify-center h-5 w-5 rounded-full bg-green-500 text-white'>
                                        <RiCheckFill />
                                    </div>
                                )} */}
                            </Link>
                        )
                    })}
                </nav>
            </Card>
        </>
    );
}
