import React, { useState } from "react";
import { ChevronsRight, Mail, Server, Link, ChevronDown, ChevronUp, Info } from "lucide-react";

type SubdomainReportProps = {
    mailMXRecord: [string, string, string, string, string][],
    nsRecord: [string, string, string, string, string][],
    cNameRecord: [string, string, string, string, string][],
    mailMXRecordDescription: string,
    nsRecordDescription: string,
    cNameRecordDescription: string
};

const RecordSection = ({
    title,
    description,
    records,
    icon: Icon,
    color,
    textColor
}: {
    title: string;
    description: string;
    records: string[];
    icon: React.ElementType;
    color: string;
}) => {
    const [isOpen, setIsOpen] = useState(true);

    return (
        <div className="border-b  last:border-b-0">
            <div
                className="flex items-center justify-between p-4 cursor-pointer  transition-colors duration-200"
                onClick={() => setIsOpen(!isOpen)}
            >
                <div className="flex items-center space-x-3">
                    <div className={`p-1 rounded-lg ${color}`}>
                        <Icon size={14} className="text-white" />
                    </div>
                    <h2 className="font-semibold text-table-tableHeader">{title}</h2>
                </div>
                {isOpen ? (
                    <ChevronUp size={20} className="text-gray-500" />
                ) : (
                    <ChevronDown size={20} className="text-gray-500" />
                )}
            </div>

            {isOpen && (
                <div className="px-4 pb-4 pt-0">
                    <div className="flex items-start mb-3   rounded-lg">
                        <p className="text-sm text-table-tableDesc">{description}</p>
                    </div>

                    <div className="space-y-2 mt-3">
                        {records.length > 0 ? (
                            records.map((record, index) => (
                                <div
                                    key={index}
                                    className="p-2 rounded-lg  flex items-center space-x-2 transition-transform duration-200 hover:translate-x-1"
                                >
                                    <ChevronsRight size={18} className="text-green-500" />
                                    <p className="text-table-tableDesc">{record}</p>
                                </div>
                            ))
                        ) : (
                            <p className="text-table-tableDesc italic text-sm">No records found</p>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

export default function DNSReport({
    mailMXRecord,
    nsRecord,
    cNameRecord,
    mailMXRecordDescription,
    nsRecordDescription,
    cNameRecordDescription
}: SubdomainReportProps) {
    const mailData = mailMXRecord;
    const hostnames = mailData.map(row => `${row[0]} (Priority: ${row[1]})`);

    const nsData = nsRecord;
    const nsnames = nsData.map(row => `${row[0]} (${row[3]})`);

    const cNameData = cNameRecord;
    const cNamenames = cNameData.map(row => `${row[0]} â†’ ${row[1]}`);

    return (
        <div className="flex-1 overflow-y-auto divide-y text-white">
            <RecordSection
                title="Mail (MX) Records"
                description={mailMXRecordDescription}
                records={hostnames}
                icon={Mail}
                color="bg-blue-600"
            />

            <RecordSection
                title="Name Servers (NS) Records"
                description={nsRecordDescription}
                records={nsnames}
                icon={Server}
                color="bg-purple-600"
            />

            <RecordSection
                title="CNAME Records"
                description={cNameRecordDescription}
                records={cNamenames}
                icon={Link}
                color="bg-green-600"
            />
        </div>
    );
}